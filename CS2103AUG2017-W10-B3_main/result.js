var resultJson = [{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMPTY_ADDRESS;"},{"lineNumber":11,"author":{"gitID":"chrisboo"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMPTY_BIRTHDAY;"},{"lineNumber":12,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMPTY_EMAIL;"},{"lineNumber":13,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMPTY_PHONE;"},{"lineNumber":14,"author":{"gitID":"chrisboo"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMPTY_WEBSITE;"},{"lineNumber":15,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":16,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_BIRTHDAY_DESC;"},{"lineNumber":17,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":18,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":19,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":20,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":21,"author":{"gitID":"chrisboo"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_WEBSITE_DESC;"},{"lineNumber":22,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":23,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":24,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":25,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":26,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":27,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":28,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":29,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":30,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;"},{"lineNumber":31,"author":{"gitID":"chrisboo"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"},{"lineNumber":32,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":33,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":34,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":35,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":36,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":37,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":38,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":39,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_WEBSITE_AMY;"},{"lineNumber":40,"author":{"gitID":"chrisboo"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_WEBSITE_BOB;"},{"lineNumber":41,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.WEBSITE_DESC_AMY;"},{"lineNumber":42,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.WEBSITE_DESC_BOB;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":44,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":45,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":46,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":47,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":48,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":49,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":50,"author":{"gitID":"chrisboo"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":51,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":53,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":56,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":57,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":58,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":59,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":60,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":62,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":63,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":64,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":65,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":66,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":68,"author":{"gitID":"chrisboo"},"content":"import seedu.address.model.person.Website;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":81,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":82,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        ReadOnlyPerson toAdd \u003d AMY;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":85,"author":{"gitID":"chilipadiboy"},"content":"            + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \""},{"lineNumber":86,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + \"   \" + WEBSITE_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":101,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":102,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // This test will fail is a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(ReadOnlyPerson)"},{"lineNumber":109,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":110,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + \" \" + WEBSITE_DESC_AMY + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":115,"author":{"gitID":"chilipadiboy"},"content":"            .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withWebsite(VALID_WEBSITE_AMY)"},{"lineNumber":116,"author":{"gitID":"chilipadiboy"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":117,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":118,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"chrisboo"},"content":"        //@@author chrisboo"},{"lineNumber":122,"author":{"gitID":"chrisboo"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":123,"author":{"gitID":"chrisboo"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":124,"author":{"gitID":"chrisboo"},"content":"            .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withWebsite(VALID_WEBSITE_AMY)"},{"lineNumber":125,"author":{"gitID":"chrisboo"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":126,"author":{"gitID":"chrisboo"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":127,"author":{"gitID":"chrisboo"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":128,"author":{"gitID":"chrisboo"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":129,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":130,"author":{"gitID":"chrisboo"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":131,"author":{"gitID":"chrisboo"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":132,"author":{"gitID":"chrisboo"},"content":"            .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withWebsite(VALID_WEBSITE_AMY)"},{"lineNumber":133,"author":{"gitID":"chrisboo"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":134,"author":{"gitID":"chrisboo"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":135,"author":{"gitID":"chrisboo"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":136,"author":{"gitID":"chrisboo"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":137,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":138,"author":{"gitID":"chrisboo"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":139,"author":{"gitID":"chrisboo"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":140,"author":{"gitID":"chrisboo"},"content":"            .withAddress(VALID_ADDRESS_BOB).withBirthday(VALID_BIRTHDAY_AMY).withWebsite(VALID_WEBSITE_AMY)"},{"lineNumber":141,"author":{"gitID":"chrisboo"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":142,"author":{"gitID":"chrisboo"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":143,"author":{"gitID":"chrisboo"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":144,"author":{"gitID":"chrisboo"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":145,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":146,"author":{"gitID":"chrisboo"},"content":"        /* Case: add a person with all fields same as another person in the address book except birthday -\u003e added */"},{"lineNumber":147,"author":{"gitID":"chrisboo"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":148,"author":{"gitID":"chrisboo"},"content":"            .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_BOB).withWebsite(VALID_WEBSITE_AMY)"},{"lineNumber":149,"author":{"gitID":"chrisboo"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":150,"author":{"gitID":"chrisboo"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":151,"author":{"gitID":"chrisboo"},"content":"            + BIRTHDAY_DESC_BOB + WEBSITE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":152,"author":{"gitID":"chrisboo"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":153,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":154,"author":{"gitID":"chrisboo"},"content":"        /* Case: add a person with all fields same as another person in the address book except website -\u003e added */"},{"lineNumber":155,"author":{"gitID":"chrisboo"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":156,"author":{"gitID":"chrisboo"},"content":"            .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withWebsite(VALID_WEBSITE_BOB)"},{"lineNumber":157,"author":{"gitID":"chrisboo"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":158,"author":{"gitID":"chrisboo"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":159,"author":{"gitID":"chrisboo"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_BOB + TAG_DESC_FRIEND;"},{"lineNumber":160,"author":{"gitID":"chrisboo"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":161,"author":{"gitID":"chrisboo"},"content":"        //@@author"},{"lineNumber":162,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":164,"author":{"gitID":"chrisboo"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assert getModel().getFilteredPersonList().size()"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            \u003c getModel().getAddressBook().getPersonList().size();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d 0;"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":177,"author":{"gitID":"chilipadiboy"},"content":"            + TAG_DESC_HUSBAND + EMAIL_DESC_BOB + BIRTHDAY_DESC_BOB + WEBSITE_DESC_BOB;"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assert getPersonListPanel().isAnyCardSelected();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":189,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":190,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY;"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"chrisboo"},"content":"        //@@author chrisboo"},{"lineNumber":194,"author":{"gitID":"chrisboo"},"content":"        /* Case: missing phone -\u003e added */"},{"lineNumber":195,"author":{"gitID":"chrisboo"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(EMPTY_PHONE).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":196,"author":{"gitID":"chrisboo"},"content":"            .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withWebsite(VALID_WEBSITE_AMY)"},{"lineNumber":197,"author":{"gitID":"chrisboo"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":198,"author":{"gitID":"chrisboo"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":199,"author":{"gitID":"chrisboo"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":200,"author":{"gitID":"chrisboo"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":201,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":202,"author":{"gitID":"chrisboo"},"content":"        /* Case: missing email -\u003e added */"},{"lineNumber":203,"author":{"gitID":"chrisboo"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(EMPTY_EMAIL)"},{"lineNumber":204,"author":{"gitID":"chrisboo"},"content":"            .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withWebsite(VALID_WEBSITE_AMY)"},{"lineNumber":205,"author":{"gitID":"chrisboo"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":206,"author":{"gitID":"chrisboo"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":207,"author":{"gitID":"chrisboo"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":208,"author":{"gitID":"chrisboo"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":209,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":210,"author":{"gitID":"chrisboo"},"content":"        /* Case: missing address -\u003e added */"},{"lineNumber":211,"author":{"gitID":"chrisboo"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":212,"author":{"gitID":"chrisboo"},"content":"            .withAddress(EMPTY_ADDRESS).withBirthday(VALID_BIRTHDAY_AMY).withWebsite(VALID_WEBSITE_AMY)"},{"lineNumber":213,"author":{"gitID":"chrisboo"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":214,"author":{"gitID":"chrisboo"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":215,"author":{"gitID":"chrisboo"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":216,"author":{"gitID":"chrisboo"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":217,"author":{"gitID":"chrisboo"},"content":"        //@@author"},{"lineNumber":218,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":219,"author":{"gitID":"Jemereny"},"content":"        /* Case: missing website -\u003e added */"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":221,"author":{"gitID":"chrisboo"},"content":"            .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withWebsite(EMPTY_WEBSITE)"},{"lineNumber":222,"author":{"gitID":"chilipadiboy"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":223,"author":{"gitID":"Jemereny"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":224,"author":{"gitID":"chilipadiboy"},"content":"            + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"chrisboo"},"content":"        //@@author chrisboo"},{"lineNumber":228,"author":{"gitID":"chrisboo"},"content":"        /* Case: missing birthday -\u003e added */"},{"lineNumber":229,"author":{"gitID":"chrisboo"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":230,"author":{"gitID":"chrisboo"},"content":"            .withAddress(VALID_ADDRESS_AMY).withBirthday(EMPTY_BIRTHDAY).withWebsite(VALID_WEBSITE_AMY)"},{"lineNumber":231,"author":{"gitID":"chrisboo"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":232,"author":{"gitID":"chrisboo"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":233,"author":{"gitID":"chrisboo"},"content":"            + ADDRESS_DESC_AMY + WEBSITE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":234,"author":{"gitID":"chrisboo"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":235,"author":{"gitID":"chrisboo"},"content":"        //@@author"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":242,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":243,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY;"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":247,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":248,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY;"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":252,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY"},{"lineNumber":253,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY;"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":257,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC"},{"lineNumber":258,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY;"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":262,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":263,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY + INVALID_TAG_DESC;"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":265,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":266,"author":{"gitID":"chilipadiboy"},"content":"        //@@author chilipadiboy"},{"lineNumber":267,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid birthday -\u003e rejected */"},{"lineNumber":268,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":269,"author":{"gitID":"chilipadiboy"},"content":"            + INVALID_BIRTHDAY_DESC + WEBSITE_DESC_AMY;"},{"lineNumber":270,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS);"},{"lineNumber":271,"author":{"gitID":"chilipadiboy"},"content":"        //@@author"},{"lineNumber":272,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":273,"author":{"gitID":"chrisboo"},"content":"        //@@author chrisboo"},{"lineNumber":274,"author":{"gitID":"chrisboo"},"content":"        /* Case: invalid website -\u003e rejected */"},{"lineNumber":275,"author":{"gitID":"chrisboo"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":276,"author":{"gitID":"chrisboo"},"content":"            + BIRTHDAY_DESC_AMY + INVALID_WEBSITE_DESC;"},{"lineNumber":277,"author":{"gitID":"chrisboo"},"content":"        assertCommandFailure(command, Website.MESSAGE_WEBSITE_CONSTRAINTS);"},{"lineNumber":278,"author":{"gitID":"chrisboo"},"content":"        //@@author"},{"lineNumber":279,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":282,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and verifies that the command box displays"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     * an empty string, the result display box displays the success message of executing {@code AddCommand} with the"},{"lineNumber":284,"author":{"gitID":"-"},"content":"     * details of {@code toAdd}, and the model related components equal to the current model added with {@code toAdd}."},{"lineNumber":285,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":286,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":287,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class, the status bar\u0027s sync status changes,"},{"lineNumber":288,"author":{"gitID":"-"},"content":"     * the browser url and selected card remains unchanged."},{"lineNumber":289,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":290,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":291,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(ReadOnlyPerson toAdd) {"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":294,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":297,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(ReadOnlyPerson)}. Executes {@code command}"},{"lineNumber":298,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":299,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":300,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(ReadOnlyPerson)"},{"lineNumber":301,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":302,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, ReadOnlyPerson toAdd) {"},{"lineNumber":303,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":304,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":305,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":306,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":307,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":309,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":312,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":315,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, ReadOnlyPerson)} except that the result"},{"lineNumber":316,"author":{"gitID":"-"},"content":"     * display box displays {@code expectedResultMessage} and the model related components equal to"},{"lineNumber":317,"author":{"gitID":"-"},"content":"     * {@code expectedModel}."},{"lineNumber":318,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":319,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, ReadOnlyPerson)"},{"lineNumber":320,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":321,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":322,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":323,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":324,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":325,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":326,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":327,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":328,"author":{"gitID":"-"},"content":""},{"lineNumber":329,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":330,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":331,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":332,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":333,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":334,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":335,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":336,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":337,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":338,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":339,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":340,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":343,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":344,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":345,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":346,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":347,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":348,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chilipadiboy":85,"Jemereny":3,"chrisboo":96,"-":164}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":41,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":42,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":43,"author":{"gitID":"-"},"content":" */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initializeStage();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":109,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d getModel().getFilteredPersonList().size();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assert getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assert getPersonListPanel().getSelectedCardIndex() \u003d\u003d index.getZeroBased();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":145,"author":{"gitID":"-"},"content":"                                                     Model expectedModel) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":168,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":179,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":187,"author":{"gitID":"chrisboo"},"content":"            expectedUrl \u003d new URL(getPersonListPanel().getHandleToSelectedCard().getWebsite());"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":198,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":209,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":216,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":223,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":233,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":244,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":248,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":251,"author":{"gitID":"-"},"content":"            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"},{"lineNumber":252,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":253,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":261,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":7,"-":258}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"chrisboo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"chrisboo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":7,"author":{"gitID":"chrisboo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"chrisboo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"chrisboo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"chrisboo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_WEBSITE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":13,"author":{"gitID":"chrisboo"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"chrisboo"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class FindCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":28,"author":{"gitID":"chrisboo"},"content":"        String command;"},{"lineNumber":29,"author":{"gitID":"chrisboo"},"content":"        Model expectedModel;"},{"lineNumber":30,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":31,"author":{"gitID":"chrisboo"},"content":"        //@@author chrisboo"},{"lineNumber":32,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":33,"author":{"gitID":"chrisboo"},"content":"        /* Test: find with one attribute */"},{"lineNumber":34,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":35,"author":{"gitID":"chrisboo"},"content":"        /* Case: find a person not in address book"},{"lineNumber":36,"author":{"gitID":"chrisboo"},"content":"         * -\u003e 0 persons found"},{"lineNumber":37,"author":{"gitID":"chrisboo"},"content":"         */"},{"lineNumber":38,"author":{"gitID":"chrisboo"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/Mark\";"},{"lineNumber":39,"author":{"gitID":"chrisboo"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":40,"author":{"gitID":"chrisboo"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":41,"author":{"gitID":"chrisboo"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":42,"author":{"gitID":"chrisboo"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":43,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":44,"author":{"gitID":"chrisboo"},"content":"        /*"},{"lineNumber":45,"author":{"gitID":"chrisboo"},"content":"         * Case: find a person in address book by exact full name"},{"lineNumber":46,"author":{"gitID":"chrisboo"},"content":"         * -\u003e 1 person found"},{"lineNumber":47,"author":{"gitID":"chrisboo"},"content":"         */"},{"lineNumber":48,"author":{"gitID":"chrisboo"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + CARL.getName();"},{"lineNumber":49,"author":{"gitID":"chrisboo"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":50,"author":{"gitID":"chrisboo"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":51,"author":{"gitID":"chrisboo"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":52,"author":{"gitID":"chrisboo"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":53,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":54,"author":{"gitID":"chrisboo"},"content":"        /*"},{"lineNumber":55,"author":{"gitID":"chrisboo"},"content":"         * Case: find a person in address book by exact phone number"},{"lineNumber":56,"author":{"gitID":"chrisboo"},"content":"         * -\u003e 1 person found"},{"lineNumber":57,"author":{"gitID":"chrisboo"},"content":"         */"},{"lineNumber":58,"author":{"gitID":"chrisboo"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_PHONE + CARL.getPhone();"},{"lineNumber":59,"author":{"gitID":"chrisboo"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":60,"author":{"gitID":"chrisboo"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":61,"author":{"gitID":"chrisboo"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":62,"author":{"gitID":"chrisboo"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":63,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":64,"author":{"gitID":"chrisboo"},"content":"        /*"},{"lineNumber":65,"author":{"gitID":"chrisboo"},"content":"         * Case: find a person in address book by exact email"},{"lineNumber":66,"author":{"gitID":"chrisboo"},"content":"         * -\u003e 1 person found"},{"lineNumber":67,"author":{"gitID":"chrisboo"},"content":"         */"},{"lineNumber":68,"author":{"gitID":"chrisboo"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_EMAIL + CARL.getEmail();"},{"lineNumber":69,"author":{"gitID":"chrisboo"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":70,"author":{"gitID":"chrisboo"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":71,"author":{"gitID":"chrisboo"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":72,"author":{"gitID":"chrisboo"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":73,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":74,"author":{"gitID":"chrisboo"},"content":"        /*"},{"lineNumber":75,"author":{"gitID":"chrisboo"},"content":"         * Case: find a person in address book by exact address"},{"lineNumber":76,"author":{"gitID":"chrisboo"},"content":"         * -\u003e 1 person found"},{"lineNumber":77,"author":{"gitID":"chrisboo"},"content":"         */"},{"lineNumber":78,"author":{"gitID":"chrisboo"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_ADDRESS + CARL.getAddress();"},{"lineNumber":79,"author":{"gitID":"chrisboo"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":80,"author":{"gitID":"chrisboo"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":81,"author":{"gitID":"chrisboo"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":82,"author":{"gitID":"chrisboo"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":83,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":84,"author":{"gitID":"chrisboo"},"content":"        /*"},{"lineNumber":85,"author":{"gitID":"chrisboo"},"content":"         * Case: find a person in address book by exact website"},{"lineNumber":86,"author":{"gitID":"chrisboo"},"content":"         * -\u003e 1 person found"},{"lineNumber":87,"author":{"gitID":"chrisboo"},"content":"         */"},{"lineNumber":88,"author":{"gitID":"chrisboo"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_WEBSITE + CARL.getWebsite();"},{"lineNumber":89,"author":{"gitID":"chrisboo"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":90,"author":{"gitID":"chrisboo"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":91,"author":{"gitID":"chrisboo"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":92,"author":{"gitID":"chrisboo"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":93,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":94,"author":{"gitID":"chrisboo"},"content":"        /*"},{"lineNumber":95,"author":{"gitID":"chrisboo"},"content":"         * Case: find a person in address book by exact birthday"},{"lineNumber":96,"author":{"gitID":"chrisboo"},"content":"         * -\u003e 1 person found"},{"lineNumber":97,"author":{"gitID":"chrisboo"},"content":"         */"},{"lineNumber":98,"author":{"gitID":"chrisboo"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_BIRTHDAY + CARL.getBirthday();"},{"lineNumber":99,"author":{"gitID":"chrisboo"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":100,"author":{"gitID":"chrisboo"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":101,"author":{"gitID":"chrisboo"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":102,"author":{"gitID":"chrisboo"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":103,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":104,"author":{"gitID":"chrisboo"},"content":"        /* Test: find with one attribute with extra constraints */"},{"lineNumber":105,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":106,"author":{"gitID":"chrisboo"},"content":"        /*"},{"lineNumber":107,"author":{"gitID":"chrisboo"},"content":"         * Case: find a person in address book by name (non case-sensitive)"},{"lineNumber":108,"author":{"gitID":"chrisboo"},"content":"         * -\u003e 1 person found"},{"lineNumber":109,"author":{"gitID":"chrisboo"},"content":"         */"},{"lineNumber":110,"author":{"gitID":"chrisboo"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \"cARL kUrz\";"},{"lineNumber":111,"author":{"gitID":"chrisboo"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":112,"author":{"gitID":"chrisboo"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":113,"author":{"gitID":"chrisboo"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":114,"author":{"gitID":"chrisboo"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":115,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":116,"author":{"gitID":"chrisboo"},"content":"        /*"},{"lineNumber":117,"author":{"gitID":"chrisboo"},"content":"         * Case: find a person in address book by incomplete name but complete keyword"},{"lineNumber":118,"author":{"gitID":"chrisboo"},"content":"         * -\u003e 1 person found"},{"lineNumber":119,"author":{"gitID":"chrisboo"},"content":"         */"},{"lineNumber":120,"author":{"gitID":"chrisboo"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \"cArL\";"},{"lineNumber":121,"author":{"gitID":"chrisboo"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":122,"author":{"gitID":"chrisboo"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":123,"author":{"gitID":"chrisboo"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":124,"author":{"gitID":"chrisboo"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":125,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":126,"author":{"gitID":"chrisboo"},"content":"        /*"},{"lineNumber":127,"author":{"gitID":"chrisboo"},"content":"         * Case: find a person in address book by incomplete name but complete keyword"},{"lineNumber":128,"author":{"gitID":"chrisboo"},"content":"         * -\u003e 1 person found"},{"lineNumber":129,"author":{"gitID":"chrisboo"},"content":"         */"},{"lineNumber":130,"author":{"gitID":"chrisboo"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \"kUrZ\";"},{"lineNumber":131,"author":{"gitID":"chrisboo"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":132,"author":{"gitID":"chrisboo"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":133,"author":{"gitID":"chrisboo"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":134,"author":{"gitID":"chrisboo"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":135,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":136,"author":{"gitID":"chrisboo"},"content":"        /*"},{"lineNumber":137,"author":{"gitID":"chrisboo"},"content":"         * Case: find a person in address book by incomplete name but substring keyword"},{"lineNumber":138,"author":{"gitID":"chrisboo"},"content":"         * -\u003e 1 person found"},{"lineNumber":139,"author":{"gitID":"chrisboo"},"content":"         */"},{"lineNumber":140,"author":{"gitID":"chrisboo"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \"KUr\";"},{"lineNumber":141,"author":{"gitID":"chrisboo"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":142,"author":{"gitID":"chrisboo"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":143,"author":{"gitID":"chrisboo"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":144,"author":{"gitID":"chrisboo"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":145,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":146,"author":{"gitID":"chrisboo"},"content":"        /*"},{"lineNumber":147,"author":{"gitID":"chrisboo"},"content":"         * Case: find a person in address book by incomplete name and incorrect keyword"},{"lineNumber":148,"author":{"gitID":"chrisboo"},"content":"         * -\u003e 1 person found"},{"lineNumber":149,"author":{"gitID":"chrisboo"},"content":"         */"},{"lineNumber":150,"author":{"gitID":"chrisboo"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \"Krz\";"},{"lineNumber":151,"author":{"gitID":"chrisboo"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":152,"author":{"gitID":"chrisboo"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":153,"author":{"gitID":"chrisboo"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":154,"author":{"gitID":"chrisboo"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":155,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":156,"author":{"gitID":"chrisboo"},"content":"        /*"},{"lineNumber":157,"author":{"gitID":"chrisboo"},"content":"         * Case: find a person in address book by incomplete phone number (a substring)"},{"lineNumber":158,"author":{"gitID":"chrisboo"},"content":"         * -\u003e 1 person found"},{"lineNumber":159,"author":{"gitID":"chrisboo"},"content":"         */"},{"lineNumber":160,"author":{"gitID":"chrisboo"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_PHONE + \"35256\";"},{"lineNumber":161,"author":{"gitID":"chrisboo"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":162,"author":{"gitID":"chrisboo"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":163,"author":{"gitID":"chrisboo"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":164,"author":{"gitID":"chrisboo"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":165,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":166,"author":{"gitID":"chrisboo"},"content":"        /*"},{"lineNumber":167,"author":{"gitID":"chrisboo"},"content":"         * Case: find a person in address book by incomplete phone number (a permutation)"},{"lineNumber":168,"author":{"gitID":"chrisboo"},"content":"         * -\u003e 0 person found"},{"lineNumber":169,"author":{"gitID":"chrisboo"},"content":"         */"},{"lineNumber":170,"author":{"gitID":"chrisboo"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_PHONE + \"25639535\";"},{"lineNumber":171,"author":{"gitID":"chrisboo"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":172,"author":{"gitID":"chrisboo"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":173,"author":{"gitID":"chrisboo"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":174,"author":{"gitID":"chrisboo"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":175,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":176,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":177,"author":{"gitID":"chrisboo"},"content":"        /* Test: find with multiple attributes */"},{"lineNumber":178,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":179,"author":{"gitID":"chrisboo"},"content":"        /*"},{"lineNumber":180,"author":{"gitID":"chrisboo"},"content":"         * Case: find a person in address book by exact name and exact phone number"},{"lineNumber":181,"author":{"gitID":"chrisboo"},"content":"         * -\u003e 1 person found"},{"lineNumber":182,"author":{"gitID":"chrisboo"},"content":"         */"},{"lineNumber":183,"author":{"gitID":"chrisboo"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + BENSON.getName() + \" \""},{"lineNumber":184,"author":{"gitID":"chrisboo"},"content":"                                                 + PREFIX_PHONE + BENSON.getPhone();"},{"lineNumber":185,"author":{"gitID":"chrisboo"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":186,"author":{"gitID":"chrisboo"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON);"},{"lineNumber":187,"author":{"gitID":"chrisboo"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":188,"author":{"gitID":"chrisboo"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":189,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":190,"author":{"gitID":"chrisboo"},"content":"        /*"},{"lineNumber":191,"author":{"gitID":"chrisboo"},"content":"         * Case: find a person in address book by incomplete name but exact phone number"},{"lineNumber":192,"author":{"gitID":"chrisboo"},"content":"         * -\u003e 1 person found"},{"lineNumber":193,"author":{"gitID":"chrisboo"},"content":"         */"},{"lineNumber":194,"author":{"gitID":"chrisboo"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \"Meier\" + \" \" + PREFIX_PHONE + BENSON.getPhone();"},{"lineNumber":195,"author":{"gitID":"chrisboo"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":196,"author":{"gitID":"chrisboo"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON);"},{"lineNumber":197,"author":{"gitID":"chrisboo"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":198,"author":{"gitID":"chrisboo"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":199,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":200,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":201,"author":{"gitID":"chrisboo"},"content":"        /* Test: find multiple persons */"},{"lineNumber":202,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":203,"author":{"gitID":"chrisboo"},"content":"        /* Case: find multiple persons in address book by name"},{"lineNumber":204,"author":{"gitID":"chrisboo"},"content":"         * -\u003e 2 persons found"},{"lineNumber":205,"author":{"gitID":"chrisboo"},"content":"         */"},{"lineNumber":206,"author":{"gitID":"chrisboo"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \"Meier\";"},{"lineNumber":207,"author":{"gitID":"chrisboo"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":208,"author":{"gitID":"chrisboo"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":209,"author":{"gitID":"chrisboo"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":210,"author":{"gitID":"chrisboo"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":211,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":212,"author":{"gitID":"chrisboo"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":213,"author":{"gitID":"chrisboo"},"content":"         * -\u003e 2 persons found"},{"lineNumber":214,"author":{"gitID":"chrisboo"},"content":"         */"},{"lineNumber":215,"author":{"gitID":"chrisboo"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \"Meier\";"},{"lineNumber":216,"author":{"gitID":"chrisboo"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":217,"author":{"gitID":"chrisboo"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":218,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":219,"author":{"gitID":"chrisboo"},"content":"        /* Case: find multiple persons in address book, non case-sensitive"},{"lineNumber":220,"author":{"gitID":"chrisboo"},"content":"         * -\u003e 2 person found"},{"lineNumber":221,"author":{"gitID":"chrisboo"},"content":"         */"},{"lineNumber":222,"author":{"gitID":"chrisboo"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \"MeIeR\";"},{"lineNumber":223,"author":{"gitID":"chrisboo"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":224,"author":{"gitID":"chrisboo"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":225,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":226,"author":{"gitID":"chrisboo"},"content":"        /* Case: find person in address book, keyword is substring of name -\u003e 2 persons found */"},{"lineNumber":227,"author":{"gitID":"chrisboo"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \"Mei\";"},{"lineNumber":228,"author":{"gitID":"chrisboo"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL, BENSON);"},{"lineNumber":229,"author":{"gitID":"chrisboo"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":230,"author":{"gitID":"chrisboo"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":231,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":232,"author":{"gitID":"chrisboo"},"content":"        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":233,"author":{"gitID":"chrisboo"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \"Meiers\";"},{"lineNumber":234,"author":{"gitID":"chrisboo"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":235,"author":{"gitID":"chrisboo"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":236,"author":{"gitID":"chrisboo"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":237,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":238,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":239,"author":{"gitID":"chrisboo"},"content":"        /* Test: display screen */"},{"lineNumber":240,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":241,"author":{"gitID":"chrisboo"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":242,"author":{"gitID":"chrisboo"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + CARL.getName();"},{"lineNumber":243,"author":{"gitID":"chrisboo"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":244,"author":{"gitID":"chrisboo"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":245,"author":{"gitID":"chrisboo"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":246,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":247,"author":{"gitID":"chrisboo"},"content":"        //@@author"},{"lineNumber":248,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":249,"author":{"gitID":"chrisboo"},"content":"        /* Test: interaction with other commands */"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"chrisboo"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":262,"author":{"gitID":"chrisboo"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \"Meier\";"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        assert !getModel().getAddressBook().getPersonList().contains(BENSON);"},{"lineNumber":267,"author":{"gitID":"chrisboo"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \"Meier\";"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"chrisboo"},"content":"        /* Case: find while a person is selected -\u003e selected card deselected */"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        assert !getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName);"},{"lineNumber":277,"author":{"gitID":"chrisboo"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/Daniel\";"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"chrisboo"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":284,"author":{"gitID":"chrisboo"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":288,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":289,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":290,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":291,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":292,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":293,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":294,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":295,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":296,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":297,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":298,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":299,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":300,"author":{"gitID":"-"},"content":"            MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":303,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":305,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":306,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":307,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":310,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":311,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":312,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":313,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":314,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":315,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":316,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":317,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":318,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":319,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":320,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":323,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":324,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":325,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":326,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":327,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":328,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":240,"-":88}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Jemereny"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":10,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":11,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":12,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":13,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":14,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":15,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":16,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_WEBSITE_DESC;"},{"lineNumber":17,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":20,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":21,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":22,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":23,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":24,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":25,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":26,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":27,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":28,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":29,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_WEBSITE_BOB;"},{"lineNumber":30,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.WEBSITE_DESC_AMY;"},{"lineNumber":31,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.WEBSITE_DESC_BOB;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":35,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":36,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":37,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":38,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":40,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":47,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":48,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":49,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":50,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":51,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":52,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":53,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Website;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":58,"author":{"gitID":"Jemereny"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":61,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":62,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":63,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":73,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":74,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":75,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":78,"author":{"gitID":"Jemereny"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \""},{"lineNumber":79,"author":{"gitID":"Jemereny"},"content":"                + WEBSITE_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":81,"author":{"gitID":"Jemereny"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":82,"author":{"gitID":"Jemereny"},"content":"                .withWebsite(VALID_WEBSITE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":94,"author":{"gitID":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":99,"author":{"gitID":"chilipadiboy"},"content":"                + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + WEBSITE_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":100,"author":{"gitID":"Jemereny"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        ReadOnlyPerson personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":118,"author":{"gitID":"Jemereny"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":127,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":128,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":129,"author":{"gitID":"Jemereny"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":137,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":138,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        selectPerson(index);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":143,"author":{"gitID":"chilipadiboy"},"content":"                + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":146,"author":{"gitID":"Jemereny"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":152,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":156,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":161,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":165,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":169,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"},{"lineNumber":177,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"},{"lineNumber":181,"author":{"gitID":"-"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"},{"lineNumber":185,"author":{"gitID":"-"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"Jemereny"},"content":"        /* Case: invalid website -\u003e rejected */"},{"lineNumber":188,"author":{"gitID":"Jemereny"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_WEBSITE_DESC,"},{"lineNumber":189,"author":{"gitID":"chrisboo"},"content":"                Website.MESSAGE_WEBSITE_CONSTRAINTS);"},{"lineNumber":190,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"},{"lineNumber":193,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":196,"author":{"gitID":"Jemereny"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":197,"author":{"gitID":"Jemereny"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":199,"author":{"gitID":"Jemereny"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":201,"author":{"gitID":"chilipadiboy"},"content":"                + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + WEBSITE_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":206,"author":{"gitID":"chilipadiboy"},"content":"                + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + WEBSITE_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, ReadOnlyPerson, Index)} except that"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":213,"author":{"gitID":"chilipadiboy"},"content":"     *"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, ReadOnlyPerson, Index)"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, ReadOnlyPerson editedPerson) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":226,"author":{"gitID":"chilipadiboy"},"content":"     *"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, ReadOnlyPerson editedPerson,"},{"lineNumber":231,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":235,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":236,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":238,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":239,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":243,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":249,"author":{"gitID":"chilipadiboy"},"content":"     *"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":267,"author":{"gitID":"chilipadiboy"},"content":"     *"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":272,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":278,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":280,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":286,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":287,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":288,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":289,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":290,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":291,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":292,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":293,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":294,"author":{"gitID":"chilipadiboy"},"content":"     *"},{"lineNumber":295,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":296,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":297,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":301,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":303,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":304,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":305,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":306,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chilipadiboy":52,"Jemereny":17,"chrisboo":1,"-":236}},{"path":"src/test/java/systemtests/ClearCommandAliasSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chilipadiboy"},"content":"//@@author chilipadiboy"},{"lineNumber":2,"author":{"gitID":"chilipadiboy"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":4,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":6,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":7,"author":{"gitID":"chilipadiboy"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":9,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":12,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":13,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":16,"author":{"gitID":"chilipadiboy"},"content":"public class ClearCommandAliasSystemTest extends AddressBookSystemTest {"},{"lineNumber":17,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":18,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"chilipadiboy"},"content":"     * Tests add alias \"c\""},{"lineNumber":20,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"chilipadiboy"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"chilipadiboy"},"content":"    public void clearAlias1() {"},{"lineNumber":23,"author":{"gitID":"chilipadiboy"},"content":"        final Model defaultModel \u003d getModel();"},{"lineNumber":24,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":25,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"},{"lineNumber":26,"author":{"gitID":"chilipadiboy"},"content":"         * spaces -\u003e cleared"},{"lineNumber":27,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":28,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_SHORT + \" ab12   \");"},{"lineNumber":29,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":30,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":31,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: undo clearing address book -\u003e original address book restored */"},{"lineNumber":32,"author":{"gitID":"chilipadiboy"},"content":"        String command \u003d UndoCommand.COMMAND_SHORT;"},{"lineNumber":33,"author":{"gitID":"chilipadiboy"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":34,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"},{"lineNumber":35,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":36,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":37,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: redo clearing address book -\u003e cleared */"},{"lineNumber":38,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d RedoCommand.COMMAND_SHORT;"},{"lineNumber":39,"author":{"gitID":"chilipadiboy"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":40,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"},{"lineNumber":41,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":42,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":43,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"},{"lineNumber":44,"author":{"gitID":"chilipadiboy"},"content":"        executeCommand(UndoCommand.COMMAND_SHORT); // restores the original address book"},{"lineNumber":45,"author":{"gitID":"chilipadiboy"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":46,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_SHORT);"},{"lineNumber":47,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":48,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":49,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: filters the person list before clearing -\u003e entire address book cleared */"},{"lineNumber":50,"author":{"gitID":"chilipadiboy"},"content":"        executeCommand(UndoCommand.COMMAND_SHORT); // restores the original address book"},{"lineNumber":51,"author":{"gitID":"chilipadiboy"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":52,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_SHORT);"},{"lineNumber":53,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":54,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":55,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: clear empty address book -\u003e cleared */"},{"lineNumber":56,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_SHORT);"},{"lineNumber":57,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":58,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":59,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":60,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":61,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":63,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"chilipadiboy"},"content":"     * Tests add alias \"purge\""},{"lineNumber":65,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"chilipadiboy"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"chilipadiboy"},"content":"    public void clearAlias2() {"},{"lineNumber":68,"author":{"gitID":"chilipadiboy"},"content":"        final Model defaultModel \u003d getModel();"},{"lineNumber":69,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":70,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"},{"lineNumber":71,"author":{"gitID":"chilipadiboy"},"content":"         * spaces -\u003e cleared"},{"lineNumber":72,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":73,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_ALIAS + \" ab12   \");"},{"lineNumber":74,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":75,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":76,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: undo clearing address book -\u003e original address book restored */"},{"lineNumber":77,"author":{"gitID":"chilipadiboy"},"content":"        String command \u003d UndoCommand.COMMAND_SHORT;"},{"lineNumber":78,"author":{"gitID":"chilipadiboy"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":79,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"},{"lineNumber":80,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":81,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":82,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: redo clearing address book -\u003e cleared */"},{"lineNumber":83,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d RedoCommand.COMMAND_SHORT;"},{"lineNumber":84,"author":{"gitID":"chilipadiboy"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":85,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"},{"lineNumber":86,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":87,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":88,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"},{"lineNumber":89,"author":{"gitID":"chilipadiboy"},"content":"        executeCommand(UndoCommand.COMMAND_SHORT); // restores the original address book"},{"lineNumber":90,"author":{"gitID":"chilipadiboy"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":91,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_ALIAS);"},{"lineNumber":92,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":93,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":94,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: filters the person list before clearing -\u003e entire address book cleared */"},{"lineNumber":95,"author":{"gitID":"chilipadiboy"},"content":"        executeCommand(UndoCommand.COMMAND_SHORT); // restores the original address book"},{"lineNumber":96,"author":{"gitID":"chilipadiboy"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":97,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_ALIAS);"},{"lineNumber":98,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":99,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":100,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: clear empty address book -\u003e cleared */"},{"lineNumber":101,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_ALIAS);"},{"lineNumber":102,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":103,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":104,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":105,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":106,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":108,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"chilipadiboy"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":110,"author":{"gitID":"chilipadiboy"},"content":"     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."},{"lineNumber":111,"author":{"gitID":"chilipadiboy"},"content":"     * These verifications are done by"},{"lineNumber":112,"author":{"gitID":"chilipadiboy"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":113,"author":{"gitID":"chilipadiboy"},"content":"     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."},{"lineNumber":114,"author":{"gitID":"chilipadiboy"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":115,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"chilipadiboy"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":117,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"},{"lineNumber":118,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":120,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"chilipadiboy"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"},{"lineNumber":122,"author":{"gitID":"chilipadiboy"},"content":"     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."},{"lineNumber":123,"author":{"gitID":"chilipadiboy"},"content":"     * @see ClearCommandSystemTest#assertCommandSuccess(String)"},{"lineNumber":124,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"chilipadiboy"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"},{"lineNumber":126,"author":{"gitID":"chilipadiboy"},"content":"        executeCommand(command);"},{"lineNumber":127,"author":{"gitID":"chilipadiboy"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":128,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":129,"author":{"gitID":"chilipadiboy"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":130,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":132,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"chilipadiboy"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":134,"author":{"gitID":"chilipadiboy"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":135,"author":{"gitID":"chilipadiboy"},"content":"     * These verifications are done by"},{"lineNumber":136,"author":{"gitID":"chilipadiboy"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"chilipadiboy"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":138,"author":{"gitID":"chilipadiboy"},"content":"     * error style."},{"lineNumber":139,"author":{"gitID":"chilipadiboy"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":140,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"chilipadiboy"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":142,"author":{"gitID":"chilipadiboy"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":143,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":144,"author":{"gitID":"chilipadiboy"},"content":"        executeCommand(command);"},{"lineNumber":145,"author":{"gitID":"chilipadiboy"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":146,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":147,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":148,"author":{"gitID":"chilipadiboy"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":149,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"chilipadiboy"},"content":"}"}],"authorContributionMap":{"chilipadiboy":150}},{"path":"src/test/java/seedu/address/ui/ResultDisplayTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class ResultDisplayTest extends GuiUnitTest {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"Jemereny"},"content":"    private static final NewResultAvailableEvent NEW_RESULT_EVENT_STUB \u003d new NewResultAvailableEvent(\"Stub\", false);"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private ResultDisplayHandle resultDisplayHandle;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(resultDisplay);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"},{"lineNumber":24,"author":{"gitID":"-"},"content":"                ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // default result text"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertEquals(\"\", resultDisplayHandle.getText());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // new result received"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        postNow(NEW_RESULT_EVENT_STUB);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(NEW_RESULT_EVENT_STUB.message, resultDisplayHandle.getText());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Jemereny":1,"-":37}},{"path":"src/test/java/systemtests/DeleteCommandAliasSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chilipadiboy"},"content":"//@@author chilipadiboy"},{"lineNumber":2,"author":{"gitID":"chilipadiboy"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":4,"author":{"gitID":"chilipadiboy"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":9,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.testutil.TestUtil.getMidIndex;"},{"lineNumber":10,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.testutil.TestUtil.getPerson;"},{"lineNumber":11,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":13,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":14,"author":{"gitID":"chilipadiboy"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":16,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":17,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":20,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":21,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":23,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":24,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":25,"author":{"gitID":"chilipadiboy"},"content":"public class DeleteCommandAliasSystemTest extends AddressBookSystemTest {"},{"lineNumber":26,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":27,"author":{"gitID":"chilipadiboy"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":28,"author":{"gitID":"chilipadiboy"},"content":"        String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":29,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":30,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"chilipadiboy"},"content":"     * Tests delete alias \"d\""},{"lineNumber":32,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"chilipadiboy"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"chilipadiboy"},"content":"    public void deletealias1() {"},{"lineNumber":35,"author":{"gitID":"chilipadiboy"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":36,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":37,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":38,"author":{"gitID":"chilipadiboy"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":39,"author":{"gitID":"chilipadiboy"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_SHORT + \"      \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":40,"author":{"gitID":"chilipadiboy"},"content":"            + \"       \";"},{"lineNumber":41,"author":{"gitID":"chilipadiboy"},"content":"        ReadOnlyPerson deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"},{"lineNumber":42,"author":{"gitID":"chilipadiboy"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":43,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":44,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":45,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: delete the last person in the list -\u003e deleted */"},{"lineNumber":46,"author":{"gitID":"chilipadiboy"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":47,"author":{"gitID":"chilipadiboy"},"content":"        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":48,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(lastPersonIndex);"},{"lineNumber":49,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":50,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: undo deleting the last person in the list -\u003e last person restored */"},{"lineNumber":51,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d UndoCommand.COMMAND_SHORT;"},{"lineNumber":52,"author":{"gitID":"chilipadiboy"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":53,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":54,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":55,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"},{"lineNumber":56,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d RedoCommand.COMMAND_SHORT;"},{"lineNumber":57,"author":{"gitID":"chilipadiboy"},"content":"        removePerson(modelBeforeDeletingLast, lastPersonIndex);"},{"lineNumber":58,"author":{"gitID":"chilipadiboy"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":59,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":60,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":61,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: delete the middle person in the list -\u003e deleted */"},{"lineNumber":62,"author":{"gitID":"chilipadiboy"},"content":"        Index middlePersonIndex \u003d getMidIndex(getModel());"},{"lineNumber":63,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":64,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":65,"author":{"gitID":"chilipadiboy"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":66,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":67,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"},{"lineNumber":68,"author":{"gitID":"chilipadiboy"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":69,"author":{"gitID":"chilipadiboy"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":70,"author":{"gitID":"chilipadiboy"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":71,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(index);"},{"lineNumber":72,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":73,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"},{"lineNumber":74,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e rejected"},{"lineNumber":75,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":76,"author":{"gitID":"chilipadiboy"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":77,"author":{"gitID":"chilipadiboy"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":78,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d DeleteCommand.COMMAND_SHORT + \" \" + invalidIndex;"},{"lineNumber":79,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":80,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":81,"author":{"gitID":"chilipadiboy"},"content":"        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"},{"lineNumber":82,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":83,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"},{"lineNumber":84,"author":{"gitID":"chilipadiboy"},"content":"        showAllPersons();"},{"lineNumber":85,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":86,"author":{"gitID":"chilipadiboy"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":87,"author":{"gitID":"chilipadiboy"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":88,"author":{"gitID":"chilipadiboy"},"content":"        selectPerson(selectedIndex);"},{"lineNumber":89,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d DeleteCommand.COMMAND_SHORT + \" \" + selectedIndex.getOneBased();"},{"lineNumber":90,"author":{"gitID":"chilipadiboy"},"content":"        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"},{"lineNumber":91,"author":{"gitID":"chilipadiboy"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":92,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":93,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":94,"author":{"gitID":"chilipadiboy"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":95,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":96,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":97,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d DeleteCommand.COMMAND_SHORT + \" 0\";"},{"lineNumber":98,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":99,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":100,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":101,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d DeleteCommand.COMMAND_SHORT + \" -1\";"},{"lineNumber":102,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":103,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":104,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":105,"author":{"gitID":"chilipadiboy"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":106,"author":{"gitID":"chilipadiboy"},"content":"            getModel().getAddressBook().getPersonList().size() + 1);"},{"lineNumber":107,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d DeleteCommand.COMMAND_SHORT + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":108,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":109,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":110,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":111,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_SHORT + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":112,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":113,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":114,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_SHORT + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":115,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":116,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":117,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":118,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":120,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"chilipadiboy"},"content":"     * Tests delete alias \"purge\""},{"lineNumber":122,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"chilipadiboy"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"chilipadiboy"},"content":"    public void deletealias2() {"},{"lineNumber":125,"author":{"gitID":"chilipadiboy"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":126,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":127,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":128,"author":{"gitID":"chilipadiboy"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":129,"author":{"gitID":"chilipadiboy"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_ALIAS + \"      \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":130,"author":{"gitID":"chilipadiboy"},"content":"            + \"       \";"},{"lineNumber":131,"author":{"gitID":"chilipadiboy"},"content":"        ReadOnlyPerson deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"},{"lineNumber":132,"author":{"gitID":"chilipadiboy"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":133,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":134,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":135,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: delete the last person in the list -\u003e deleted */"},{"lineNumber":136,"author":{"gitID":"chilipadiboy"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":137,"author":{"gitID":"chilipadiboy"},"content":"        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":138,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(lastPersonIndex);"},{"lineNumber":139,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":140,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: undo deleting the last person in the list -\u003e last person restored */"},{"lineNumber":141,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d UndoCommand.COMMAND_SHORT;"},{"lineNumber":142,"author":{"gitID":"chilipadiboy"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":143,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":144,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":145,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"},{"lineNumber":146,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d RedoCommand.COMMAND_SHORT;"},{"lineNumber":147,"author":{"gitID":"chilipadiboy"},"content":"        removePerson(modelBeforeDeletingLast, lastPersonIndex);"},{"lineNumber":148,"author":{"gitID":"chilipadiboy"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":149,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":150,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":151,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: delete the middle person in the list -\u003e deleted */"},{"lineNumber":152,"author":{"gitID":"chilipadiboy"},"content":"        Index middlePersonIndex \u003d getMidIndex(getModel());"},{"lineNumber":153,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":154,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":155,"author":{"gitID":"chilipadiboy"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":156,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":157,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"},{"lineNumber":158,"author":{"gitID":"chilipadiboy"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":159,"author":{"gitID":"chilipadiboy"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":160,"author":{"gitID":"chilipadiboy"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":161,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(index);"},{"lineNumber":162,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":163,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"},{"lineNumber":164,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e rejected"},{"lineNumber":165,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":166,"author":{"gitID":"chilipadiboy"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":167,"author":{"gitID":"chilipadiboy"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":168,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d DeleteCommand.COMMAND_ALIAS + \" \" + invalidIndex;"},{"lineNumber":169,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":170,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":171,"author":{"gitID":"chilipadiboy"},"content":"        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"},{"lineNumber":172,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":173,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"},{"lineNumber":174,"author":{"gitID":"chilipadiboy"},"content":"        showAllPersons();"},{"lineNumber":175,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":176,"author":{"gitID":"chilipadiboy"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":177,"author":{"gitID":"chilipadiboy"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":178,"author":{"gitID":"chilipadiboy"},"content":"        selectPerson(selectedIndex);"},{"lineNumber":179,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d DeleteCommand.COMMAND_ALIAS + \" \" + selectedIndex.getOneBased();"},{"lineNumber":180,"author":{"gitID":"chilipadiboy"},"content":"        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"},{"lineNumber":181,"author":{"gitID":"chilipadiboy"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":182,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":183,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":184,"author":{"gitID":"chilipadiboy"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":185,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":186,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":187,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d DeleteCommand.COMMAND_ALIAS + \" 0\";"},{"lineNumber":188,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":189,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":190,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":191,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d DeleteCommand.COMMAND_ALIAS + \" -1\";"},{"lineNumber":192,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":193,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":194,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":195,"author":{"gitID":"chilipadiboy"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":196,"author":{"gitID":"chilipadiboy"},"content":"            getModel().getAddressBook().getPersonList().size() + 1);"},{"lineNumber":197,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d DeleteCommand.COMMAND_ALIAS + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":198,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":199,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":200,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":201,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_ALIAS + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":202,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":203,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":204,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_ALIAS + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":205,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":206,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":207,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":208,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":210,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":211,"author":{"gitID":"chilipadiboy"},"content":"     * Removes the {@code ReadOnlyPerson} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":212,"author":{"gitID":"chilipadiboy"},"content":"     * @return the removed person"},{"lineNumber":213,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"chilipadiboy"},"content":"    private ReadOnlyPerson removePerson(Model model, Index index) {"},{"lineNumber":215,"author":{"gitID":"chilipadiboy"},"content":"        ReadOnlyPerson targetPerson \u003d getPerson(model, index);"},{"lineNumber":216,"author":{"gitID":"chilipadiboy"},"content":"        try {"},{"lineNumber":217,"author":{"gitID":"chilipadiboy"},"content":"            model.deletePerson(targetPerson);"},{"lineNumber":218,"author":{"gitID":"chilipadiboy"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":219,"author":{"gitID":"chilipadiboy"},"content":"            throw new AssertionError(\"targetPerson is retrieved from model.\");"},{"lineNumber":220,"author":{"gitID":"chilipadiboy"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"chilipadiboy"},"content":"        return targetPerson;"},{"lineNumber":222,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":224,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":225,"author":{"gitID":"chilipadiboy"},"content":"     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":226,"author":{"gitID":"chilipadiboy"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":227,"author":{"gitID":"chilipadiboy"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":228,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":229,"author":{"gitID":"chilipadiboy"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":230,"author":{"gitID":"chilipadiboy"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":231,"author":{"gitID":"chilipadiboy"},"content":"        ReadOnlyPerson deletedPerson \u003d removePerson(expectedModel, toDelete);"},{"lineNumber":232,"author":{"gitID":"chilipadiboy"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":233,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":234,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess("},{"lineNumber":235,"author":{"gitID":"chilipadiboy"},"content":"            DeleteCommand.COMMAND_SHORT + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"},{"lineNumber":236,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":238,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":239,"author":{"gitID":"chilipadiboy"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":240,"author":{"gitID":"chilipadiboy"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":241,"author":{"gitID":"chilipadiboy"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":242,"author":{"gitID":"chilipadiboy"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":243,"author":{"gitID":"chilipadiboy"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":244,"author":{"gitID":"chilipadiboy"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":245,"author":{"gitID":"chilipadiboy"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":246,"author":{"gitID":"chilipadiboy"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":247,"author":{"gitID":"chilipadiboy"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":248,"author":{"gitID":"chilipadiboy"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":249,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":250,"author":{"gitID":"chilipadiboy"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":251,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":252,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":254,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":255,"author":{"gitID":"chilipadiboy"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":256,"author":{"gitID":"chilipadiboy"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":257,"author":{"gitID":"chilipadiboy"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":258,"author":{"gitID":"chilipadiboy"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":259,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":260,"author":{"gitID":"chilipadiboy"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":261,"author":{"gitID":"chilipadiboy"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":262,"author":{"gitID":"chilipadiboy"},"content":"        executeCommand(command);"},{"lineNumber":263,"author":{"gitID":"chilipadiboy"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":264,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":265,"author":{"gitID":"chilipadiboy"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":266,"author":{"gitID":"chilipadiboy"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":267,"author":{"gitID":"chilipadiboy"},"content":"        } else {"},{"lineNumber":268,"author":{"gitID":"chilipadiboy"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":269,"author":{"gitID":"chilipadiboy"},"content":"        }"},{"lineNumber":270,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":271,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":272,"author":{"gitID":"chilipadiboy"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":273,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":275,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":276,"author":{"gitID":"chilipadiboy"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":277,"author":{"gitID":"chilipadiboy"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":278,"author":{"gitID":"chilipadiboy"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":279,"author":{"gitID":"chilipadiboy"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":280,"author":{"gitID":"chilipadiboy"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":281,"author":{"gitID":"chilipadiboy"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":282,"author":{"gitID":"chilipadiboy"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":283,"author":{"gitID":"chilipadiboy"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":284,"author":{"gitID":"chilipadiboy"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":285,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":286,"author":{"gitID":"chilipadiboy"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":287,"author":{"gitID":"chilipadiboy"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":288,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":289,"author":{"gitID":"chilipadiboy"},"content":"        executeCommand(command);"},{"lineNumber":290,"author":{"gitID":"chilipadiboy"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":291,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":292,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":293,"author":{"gitID":"chilipadiboy"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":294,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":295,"author":{"gitID":"chilipadiboy"},"content":"}"}],"authorContributionMap":{"chilipadiboy":295}},{"path":"src/test/java/seedu/address/ui/PersonCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class PersonCardTest extends GuiUnitTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        // no tags"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        Person personWithNoTags \u003d new PersonBuilder().withTags(new String[0]).build();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        PersonCard personCard \u003d new PersonCard(personWithNoTags, 1);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithNoTags, 1);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // with tags"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        Person personWithTags \u003d new PersonBuilder().build();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        personCard \u003d new PersonCard(personWithTags, 2);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithTags, 2);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // changes made to Person reflects on card"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            personWithTags.setName(ALICE.getName());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            personWithTags.setAddress(ALICE.getAddress());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            personWithTags.setEmail(ALICE.getEmail());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            personWithTags.setPhone(ALICE.getPhone());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            personWithTags.setTags(ALICE.getTags());"},{"lineNumber":39,"author":{"gitID":"chilipadiboy"},"content":"            personWithTags.setRemark(ALICE.getRemark());"},{"lineNumber":40,"author":{"gitID":"Jemereny"},"content":"            personWithTags.setWebsite(ALICE.getWebsite());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithTags, 2);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        PersonCard personCard \u003d new PersonCard(person, 0);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // same person, same index -\u003e returns true"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        PersonCard copy \u003d new PersonCard(person, 0);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(copy));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(personCard));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(null));"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(0));"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // different person, same index -\u003e returns false"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Person differentPerson \u003d new PersonBuilder().withName(\"differentName\").build();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(new PersonCard(differentPerson, 0)));"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // same person, different index -\u003e returns false"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(new PersonCard(person, 1)));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * {@code expectedId}."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    private void assertCardDisplay(PersonCard personCard, ReadOnlyPerson expectedPerson, int expectedId) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // verify id is displayed correctly"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // verify person details are displayed correctly"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCardDisplaysPerson(expectedPerson, personCardHandle);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chilipadiboy":1,"Jemereny":1,"-":84}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(ReadOnlyPerson expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"},{"lineNumber":37,"author":{"gitID":"Jemereny"},"content":"        assertEquals(expectedPerson.getWebsite().value, actualCard.getWebsite());"},{"lineNumber":38,"author":{"gitID":"chilipadiboy"},"content":"        assertEquals(expectedPerson.getRemark().value, actualCard.getRemark());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                actualCard.getTags());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, ReadOnlyPerson... persons) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cReadOnlyPerson\u003e persons) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new ReadOnlyPerson[0]));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chilipadiboy":1,"Jemereny":1,"-":73}},{"path":"src/test/java/seedu/address/ui/testutil/UiPartRule.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.concurrent.TimeoutException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.Parent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiPart;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Provides an isolated stage to test an individual {@code UiPart}."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class UiPartRule extends StageRule {"},{"lineNumber":15,"author":{"gitID":"Jemereny"},"content":"    private static final String[] CSS_FILES \u003d {\"view/DarkTheme.css\", \"view/LightTheme.css\", \"view/Extensions.css\"};"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void setUiPart(final UiPart\u003c? extends Parent\u003e uiPart) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            FxToolkit.setupScene(() -\u003e {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"                Scene scene \u003d new Scene(uiPart.getRoot());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"                scene.getStylesheets().setAll(CSS_FILES);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"                return scene;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            });"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            FxToolkit.showStage();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Timeout should not happen.\", te);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Jemereny":1,"-":28}},{"path":"src/test/java/seedu/address/ui/BrowserPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(new PersonCard(ALICE, 0));"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"chrisboo"},"content":"    //    @Test"},{"lineNumber":27,"author":{"gitID":"chrisboo"},"content":"    //    public void display() throws Exception {"},{"lineNumber":28,"author":{"gitID":"chrisboo"},"content":"    //        // default web page"},{"lineNumber":29,"author":{"gitID":"chrisboo"},"content":"    //        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":30,"author":{"gitID":"chrisboo"},"content":"    //        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":31,"author":{"gitID":"chrisboo"},"content":"    //"},{"lineNumber":32,"author":{"gitID":"chrisboo"},"content":"    //        // associated web page of a person"},{"lineNumber":33,"author":{"gitID":"chrisboo"},"content":"    //        postNow(selectionChangedEventStub);"},{"lineNumber":34,"author":{"gitID":"chrisboo"},"content":"    //        URL expectedPersonUrl \u003d new URL(Website.WEBSITE_EXAMPLE);"},{"lineNumber":35,"author":{"gitID":"chrisboo"},"content":"    //"},{"lineNumber":36,"author":{"gitID":"chrisboo"},"content":"    //        waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":37,"author":{"gitID":"chrisboo"},"content":"    //        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":38,"author":{"gitID":"chrisboo"},"content":"    //    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":13,"-":26}},{"path":"src/test/java/systemtests/AddCommandAliasSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chilipadiboy"},"content":"//@@author chilipadiboy"},{"lineNumber":2,"author":{"gitID":"chilipadiboy"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":4,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":10,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":11,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMPTY_ADDRESS;"},{"lineNumber":12,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMPTY_BIRTHDAY;"},{"lineNumber":13,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMPTY_EMAIL;"},{"lineNumber":14,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMPTY_PHONE;"},{"lineNumber":15,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMPTY_WEBSITE;"},{"lineNumber":16,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":17,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_BIRTHDAY_DESC;"},{"lineNumber":18,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":19,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":20,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":21,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":22,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_WEBSITE_DESC;"},{"lineNumber":23,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":24,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":25,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":26,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":27,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":28,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":29,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":30,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":31,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;"},{"lineNumber":32,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"},{"lineNumber":33,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":34,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":35,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":36,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":37,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":38,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":39,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":40,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_WEBSITE_AMY;"},{"lineNumber":41,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_WEBSITE_BOB;"},{"lineNumber":42,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.WEBSITE_DESC_AMY;"},{"lineNumber":43,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.WEBSITE_DESC_BOB;"},{"lineNumber":44,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":45,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":46,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":47,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":48,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":49,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":50,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":51,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":52,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":53,"author":{"gitID":"chilipadiboy"},"content":"import org.junit.Test;"},{"lineNumber":54,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":55,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":56,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":57,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":58,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":59,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":60,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":61,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":62,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.Model;"},{"lineNumber":63,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":64,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":65,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":66,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":67,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":68,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":69,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Website;"},{"lineNumber":70,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":71,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":72,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":73,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":74,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":75,"author":{"gitID":"chilipadiboy"},"content":"/**"},{"lineNumber":76,"author":{"gitID":"chilipadiboy"},"content":" * Tests add alias \"a\""},{"lineNumber":77,"author":{"gitID":"chilipadiboy"},"content":" */"},{"lineNumber":78,"author":{"gitID":"chilipadiboy"},"content":"public class AddCommandAliasSystemTest extends AddressBookSystemTest {"},{"lineNumber":79,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":80,"author":{"gitID":"chilipadiboy"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"chilipadiboy"},"content":"    public void addAlias1() throws Exception {"},{"lineNumber":82,"author":{"gitID":"chilipadiboy"},"content":"        Model model \u003d getModel();"},{"lineNumber":83,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":84,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e added"},{"lineNumber":85,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":86,"author":{"gitID":"chilipadiboy"},"content":"        ReadOnlyPerson toAdd \u003d AMY;"},{"lineNumber":87,"author":{"gitID":"chilipadiboy"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_SHORT + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":88,"author":{"gitID":"chilipadiboy"},"content":"            + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \""},{"lineNumber":89,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + \"   \" + WEBSITE_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":90,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":91,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":92,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":93,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d UndoCommand.COMMAND_SHORT;"},{"lineNumber":94,"author":{"gitID":"chilipadiboy"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":95,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":96,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":97,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":98,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d RedoCommand.COMMAND_SHORT;"},{"lineNumber":99,"author":{"gitID":"chilipadiboy"},"content":"        model.addPerson(toAdd);"},{"lineNumber":100,"author":{"gitID":"chilipadiboy"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":101,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":102,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":103,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":104,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_SHORT + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":105,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":106,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":107,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":108,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":109,"author":{"gitID":"chilipadiboy"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":110,"author":{"gitID":"chilipadiboy"},"content":"        // This test will fail is a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":111,"author":{"gitID":"chilipadiboy"},"content":"        // AddressBook#addPerson(ReadOnlyPerson)"},{"lineNumber":112,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_SHORT + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":113,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + \" \" + WEBSITE_DESC_AMY + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":114,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":115,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":116,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":117,"author":{"gitID":"chilipadiboy"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":118,"author":{"gitID":"chilipadiboy"},"content":"            .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withWebsite(VALID_WEBSITE_AMY)"},{"lineNumber":119,"author":{"gitID":"chilipadiboy"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":120,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_SHORT + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":121,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":122,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":123,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":124,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":125,"author":{"gitID":"chilipadiboy"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":126,"author":{"gitID":"chilipadiboy"},"content":"            .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withWebsite(VALID_WEBSITE_AMY)"},{"lineNumber":127,"author":{"gitID":"chilipadiboy"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":128,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_SHORT + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":129,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":130,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":131,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":132,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":133,"author":{"gitID":"chilipadiboy"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":134,"author":{"gitID":"chilipadiboy"},"content":"            .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withWebsite(VALID_WEBSITE_AMY)"},{"lineNumber":135,"author":{"gitID":"chilipadiboy"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":136,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_SHORT + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":137,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":138,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":139,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":140,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":141,"author":{"gitID":"chilipadiboy"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":142,"author":{"gitID":"chilipadiboy"},"content":"            .withAddress(VALID_ADDRESS_BOB).withBirthday(VALID_BIRTHDAY_AMY).withWebsite(VALID_WEBSITE_AMY)"},{"lineNumber":143,"author":{"gitID":"chilipadiboy"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":144,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_SHORT + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":145,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":146,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":147,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":148,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: add a person with all fields same as another person in the address book except birthday -\u003e added */"},{"lineNumber":149,"author":{"gitID":"chilipadiboy"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":150,"author":{"gitID":"chilipadiboy"},"content":"            .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_BOB).withWebsite(VALID_WEBSITE_AMY)"},{"lineNumber":151,"author":{"gitID":"chilipadiboy"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":152,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_SHORT + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":153,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_BOB + WEBSITE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":154,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":155,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":156,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: add a person with all fields same as another person in the address book except website -\u003e added */"},{"lineNumber":157,"author":{"gitID":"chilipadiboy"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":158,"author":{"gitID":"chilipadiboy"},"content":"            .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withWebsite(VALID_WEBSITE_BOB)"},{"lineNumber":159,"author":{"gitID":"chilipadiboy"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":160,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_SHORT + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":161,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_BOB + TAG_DESC_FRIEND;"},{"lineNumber":162,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":163,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":164,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":165,"author":{"gitID":"chilipadiboy"},"content":"        executeCommand(FindCommand.COMMAND_SHORT + \" \" + KEYWORD_MATCHING_MEIER);"},{"lineNumber":166,"author":{"gitID":"chilipadiboy"},"content":"        assert getModel().getFilteredPersonList().size()"},{"lineNumber":167,"author":{"gitID":"chilipadiboy"},"content":"            \u003c getModel().getAddressBook().getPersonList().size();"},{"lineNumber":168,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":169,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":170,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":171,"author":{"gitID":"chilipadiboy"},"content":"        executeCommand(ClearCommand.COMMAND_SHORT);"},{"lineNumber":172,"author":{"gitID":"chilipadiboy"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d 0;"},{"lineNumber":173,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":174,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":175,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":176,"author":{"gitID":"chilipadiboy"},"content":"        toAdd \u003d BOB;"},{"lineNumber":177,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_SHORT + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":178,"author":{"gitID":"chilipadiboy"},"content":"            + TAG_DESC_HUSBAND + EMAIL_DESC_BOB + BIRTHDAY_DESC_BOB + WEBSITE_DESC_BOB;"},{"lineNumber":179,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":180,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":181,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":182,"author":{"gitID":"chilipadiboy"},"content":"        executeCommand(SelectCommand.COMMAND_SHORT + \" 1\");"},{"lineNumber":183,"author":{"gitID":"chilipadiboy"},"content":"        assert getPersonListPanel().isAnyCardSelected();"},{"lineNumber":184,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":185,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":186,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":187,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":188,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":189,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":190,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_SHORT + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":191,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY;"},{"lineNumber":192,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":193,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":194,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: missing phone -\u003e added */"},{"lineNumber":195,"author":{"gitID":"chilipadiboy"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(EMPTY_PHONE).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":196,"author":{"gitID":"chilipadiboy"},"content":"            .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withWebsite(VALID_WEBSITE_AMY)"},{"lineNumber":197,"author":{"gitID":"chilipadiboy"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":198,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_SHORT + NAME_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":199,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":200,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":201,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":202,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: missing email -\u003e added */"},{"lineNumber":203,"author":{"gitID":"chilipadiboy"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(EMPTY_EMAIL)"},{"lineNumber":204,"author":{"gitID":"chilipadiboy"},"content":"            .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withWebsite(VALID_WEBSITE_AMY)"},{"lineNumber":205,"author":{"gitID":"chilipadiboy"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":206,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_SHORT + NAME_DESC_BOB + PHONE_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":207,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":208,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":209,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":210,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: missing address -\u003e added */"},{"lineNumber":211,"author":{"gitID":"chilipadiboy"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":212,"author":{"gitID":"chilipadiboy"},"content":"            .withAddress(EMPTY_ADDRESS).withBirthday(VALID_BIRTHDAY_AMY).withWebsite(VALID_WEBSITE_AMY)"},{"lineNumber":213,"author":{"gitID":"chilipadiboy"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":214,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_SHORT + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":215,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":216,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":217,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":218,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: missing website -\u003e added */"},{"lineNumber":219,"author":{"gitID":"chilipadiboy"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":220,"author":{"gitID":"chilipadiboy"},"content":"            .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withWebsite(EMPTY_WEBSITE)"},{"lineNumber":221,"author":{"gitID":"chilipadiboy"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":222,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_SHORT + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":223,"author":{"gitID":"chilipadiboy"},"content":"            + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":224,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":225,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":226,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: missing birthday -\u003e added */"},{"lineNumber":227,"author":{"gitID":"chilipadiboy"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":228,"author":{"gitID":"chilipadiboy"},"content":"            .withAddress(VALID_ADDRESS_AMY).withBirthday(EMPTY_BIRTHDAY).withWebsite(VALID_WEBSITE_AMY)"},{"lineNumber":229,"author":{"gitID":"chilipadiboy"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":230,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_SHORT + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":231,"author":{"gitID":"chilipadiboy"},"content":"            + ADDRESS_DESC_AMY + WEBSITE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":232,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":233,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":234,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":235,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":236,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":237,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":238,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":239,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_SHORT + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":240,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY;"},{"lineNumber":241,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":242,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":243,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":244,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_SHORT + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":245,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY;"},{"lineNumber":246,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":247,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":248,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":249,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_SHORT + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY"},{"lineNumber":250,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY;"},{"lineNumber":251,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":252,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":253,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":254,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_SHORT + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC"},{"lineNumber":255,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY;"},{"lineNumber":256,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":257,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":258,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":259,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_SHORT + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":260,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY + INVALID_TAG_DESC;"},{"lineNumber":261,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":262,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":263,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid birthday -\u003e rejected */"},{"lineNumber":264,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_SHORT + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":265,"author":{"gitID":"chilipadiboy"},"content":"            + INVALID_BIRTHDAY_DESC + WEBSITE_DESC_AMY;"},{"lineNumber":266,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS);"},{"lineNumber":267,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":268,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid website -\u003e rejected */"},{"lineNumber":269,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_SHORT + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":270,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + INVALID_WEBSITE_DESC;"},{"lineNumber":271,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, Website.MESSAGE_WEBSITE_CONSTRAINTS);"},{"lineNumber":272,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":274,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":275,"author":{"gitID":"chilipadiboy"},"content":"     * Tests add alias \"curse\""},{"lineNumber":276,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":277,"author":{"gitID":"chilipadiboy"},"content":"    @Test"},{"lineNumber":278,"author":{"gitID":"chilipadiboy"},"content":"    public void addAlias2() throws Exception {"},{"lineNumber":279,"author":{"gitID":"chilipadiboy"},"content":"        Model model \u003d getModel();"},{"lineNumber":280,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":281,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e added"},{"lineNumber":282,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":283,"author":{"gitID":"chilipadiboy"},"content":"        ReadOnlyPerson toAdd \u003d AMY;"},{"lineNumber":284,"author":{"gitID":"chilipadiboy"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_ALIAS + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":285,"author":{"gitID":"chilipadiboy"},"content":"            + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \""},{"lineNumber":286,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + \"   \" + WEBSITE_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":287,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":288,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":289,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":290,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d UndoCommand.COMMAND_SHORT;"},{"lineNumber":291,"author":{"gitID":"chilipadiboy"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":292,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":293,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":294,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":295,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d RedoCommand.COMMAND_SHORT;"},{"lineNumber":296,"author":{"gitID":"chilipadiboy"},"content":"        model.addPerson(toAdd);"},{"lineNumber":297,"author":{"gitID":"chilipadiboy"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":298,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":299,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":300,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":301,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":302,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":303,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":304,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":305,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":306,"author":{"gitID":"chilipadiboy"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":307,"author":{"gitID":"chilipadiboy"},"content":"        // This test will fail is a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":308,"author":{"gitID":"chilipadiboy"},"content":"        // AddressBook#addPerson(ReadOnlyPerson)"},{"lineNumber":309,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":310,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + \" \" + WEBSITE_DESC_AMY + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":311,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":312,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":313,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":314,"author":{"gitID":"chilipadiboy"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":315,"author":{"gitID":"chilipadiboy"},"content":"            .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withWebsite(VALID_WEBSITE_AMY)"},{"lineNumber":316,"author":{"gitID":"chilipadiboy"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":317,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":318,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":319,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":320,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":321,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":322,"author":{"gitID":"chilipadiboy"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":323,"author":{"gitID":"chilipadiboy"},"content":"            .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withWebsite(VALID_WEBSITE_AMY)"},{"lineNumber":324,"author":{"gitID":"chilipadiboy"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":325,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":326,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":327,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":328,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":329,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":330,"author":{"gitID":"chilipadiboy"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":331,"author":{"gitID":"chilipadiboy"},"content":"            .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withWebsite(VALID_WEBSITE_AMY)"},{"lineNumber":332,"author":{"gitID":"chilipadiboy"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":333,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":334,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":335,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":336,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":337,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":338,"author":{"gitID":"chilipadiboy"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":339,"author":{"gitID":"chilipadiboy"},"content":"            .withAddress(VALID_ADDRESS_BOB).withBirthday(VALID_BIRTHDAY_AMY).withWebsite(VALID_WEBSITE_AMY)"},{"lineNumber":340,"author":{"gitID":"chilipadiboy"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":341,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":342,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":343,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":344,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":345,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: add a person with all fields same as another person in the address book except birthday -\u003e added */"},{"lineNumber":346,"author":{"gitID":"chilipadiboy"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":347,"author":{"gitID":"chilipadiboy"},"content":"            .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_BOB).withWebsite(VALID_WEBSITE_AMY)"},{"lineNumber":348,"author":{"gitID":"chilipadiboy"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":349,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":350,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_BOB + WEBSITE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":351,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":352,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":353,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: add a person with all fields same as another person in the address book except website -\u003e added */"},{"lineNumber":354,"author":{"gitID":"chilipadiboy"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":355,"author":{"gitID":"chilipadiboy"},"content":"            .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withWebsite(VALID_WEBSITE_BOB)"},{"lineNumber":356,"author":{"gitID":"chilipadiboy"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":357,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":358,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_BOB + TAG_DESC_FRIEND;"},{"lineNumber":359,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":360,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":361,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":362,"author":{"gitID":"chilipadiboy"},"content":"        executeCommand(FindCommand.COMMAND_ALIAS + \" \" + KEYWORD_MATCHING_MEIER);"},{"lineNumber":363,"author":{"gitID":"chilipadiboy"},"content":"        assert getModel().getFilteredPersonList().size()"},{"lineNumber":364,"author":{"gitID":"chilipadiboy"},"content":"            \u003c getModel().getAddressBook().getPersonList().size();"},{"lineNumber":365,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":366,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":367,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":368,"author":{"gitID":"chilipadiboy"},"content":"        executeCommand(ClearCommand.COMMAND_ALIAS);"},{"lineNumber":369,"author":{"gitID":"chilipadiboy"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d 0;"},{"lineNumber":370,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":371,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":372,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":373,"author":{"gitID":"chilipadiboy"},"content":"        toAdd \u003d BOB;"},{"lineNumber":374,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":375,"author":{"gitID":"chilipadiboy"},"content":"            + TAG_DESC_HUSBAND + EMAIL_DESC_BOB + BIRTHDAY_DESC_BOB + WEBSITE_DESC_BOB;"},{"lineNumber":376,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":377,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":378,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":379,"author":{"gitID":"chilipadiboy"},"content":"        executeCommand(SelectCommand.COMMAND_SHORT + \" 1\");"},{"lineNumber":380,"author":{"gitID":"chilipadiboy"},"content":"        assert getPersonListPanel().isAnyCardSelected();"},{"lineNumber":381,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":382,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":383,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":384,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":385,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":386,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":387,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":388,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY;"},{"lineNumber":389,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":390,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":391,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: missing phone -\u003e added */"},{"lineNumber":392,"author":{"gitID":"chilipadiboy"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(EMPTY_PHONE).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":393,"author":{"gitID":"chilipadiboy"},"content":"            .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withWebsite(VALID_WEBSITE_AMY)"},{"lineNumber":394,"author":{"gitID":"chilipadiboy"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":395,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":396,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":397,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":398,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":399,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: missing email -\u003e added */"},{"lineNumber":400,"author":{"gitID":"chilipadiboy"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(EMPTY_EMAIL)"},{"lineNumber":401,"author":{"gitID":"chilipadiboy"},"content":"            .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withWebsite(VALID_WEBSITE_AMY)"},{"lineNumber":402,"author":{"gitID":"chilipadiboy"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":403,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_BOB + PHONE_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":404,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":405,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":406,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":407,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: missing address -\u003e added */"},{"lineNumber":408,"author":{"gitID":"chilipadiboy"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":409,"author":{"gitID":"chilipadiboy"},"content":"            .withAddress(EMPTY_ADDRESS).withBirthday(VALID_BIRTHDAY_AMY).withWebsite(VALID_WEBSITE_AMY)"},{"lineNumber":410,"author":{"gitID":"chilipadiboy"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":411,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":412,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":413,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":414,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":415,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: missing website -\u003e added */"},{"lineNumber":416,"author":{"gitID":"chilipadiboy"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":417,"author":{"gitID":"chilipadiboy"},"content":"            .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withWebsite(EMPTY_WEBSITE)"},{"lineNumber":418,"author":{"gitID":"chilipadiboy"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":419,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":420,"author":{"gitID":"chilipadiboy"},"content":"            + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":421,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":422,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":423,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: missing birthday -\u003e added */"},{"lineNumber":424,"author":{"gitID":"chilipadiboy"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":425,"author":{"gitID":"chilipadiboy"},"content":"            .withAddress(VALID_ADDRESS_AMY).withBirthday(EMPTY_BIRTHDAY).withWebsite(VALID_WEBSITE_AMY)"},{"lineNumber":426,"author":{"gitID":"chilipadiboy"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":427,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":428,"author":{"gitID":"chilipadiboy"},"content":"            + ADDRESS_DESC_AMY + WEBSITE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":429,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":430,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":431,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":432,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":433,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":434,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":435,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":436,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":437,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY;"},{"lineNumber":438,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":439,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":440,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":441,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":442,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY;"},{"lineNumber":443,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":444,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":445,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":446,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY"},{"lineNumber":447,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY;"},{"lineNumber":448,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":449,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":450,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":451,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC"},{"lineNumber":452,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY;"},{"lineNumber":453,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":454,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":455,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":456,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":457,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY + INVALID_TAG_DESC;"},{"lineNumber":458,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":459,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":460,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid birthday -\u003e rejected */"},{"lineNumber":461,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":462,"author":{"gitID":"chilipadiboy"},"content":"            + INVALID_BIRTHDAY_DESC + WEBSITE_DESC_AMY;"},{"lineNumber":463,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS);"},{"lineNumber":464,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":465,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid website -\u003e rejected */"},{"lineNumber":466,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":467,"author":{"gitID":"chilipadiboy"},"content":"            + BIRTHDAY_DESC_AMY + INVALID_WEBSITE_DESC;"},{"lineNumber":468,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, Website.MESSAGE_WEBSITE_CONSTRAINTS);"},{"lineNumber":469,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":470,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":471,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":472,"author":{"gitID":"chilipadiboy"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and verifies that the command box displays"},{"lineNumber":473,"author":{"gitID":"chilipadiboy"},"content":"     * an empty string, the result display box displays the success message of executing {@code AddCommand} with the"},{"lineNumber":474,"author":{"gitID":"chilipadiboy"},"content":"     * details of {@code toAdd}, and the model related components equal to the current model added with {@code toAdd}."},{"lineNumber":475,"author":{"gitID":"chilipadiboy"},"content":"     * These verifications are done by"},{"lineNumber":476,"author":{"gitID":"chilipadiboy"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":477,"author":{"gitID":"chilipadiboy"},"content":"     * Also verifies that the command box has the default style class, the status bar\u0027s sync status changes,"},{"lineNumber":478,"author":{"gitID":"chilipadiboy"},"content":"     * the browser url and selected card remains unchanged."},{"lineNumber":479,"author":{"gitID":"chilipadiboy"},"content":"     *"},{"lineNumber":480,"author":{"gitID":"chilipadiboy"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":481,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":482,"author":{"gitID":"chilipadiboy"},"content":"    private void assertCommandSuccess(ReadOnlyPerson toAdd) {"},{"lineNumber":483,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":484,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":485,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":486,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":487,"author":{"gitID":"chilipadiboy"},"content":"     * Performs the same verification as {@code assertCommandSuccess(ReadOnlyPerson)}. Executes {@code command}"},{"lineNumber":488,"author":{"gitID":"chilipadiboy"},"content":"     * instead."},{"lineNumber":489,"author":{"gitID":"chilipadiboy"},"content":"     *"},{"lineNumber":490,"author":{"gitID":"chilipadiboy"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(ReadOnlyPerson)"},{"lineNumber":491,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":492,"author":{"gitID":"chilipadiboy"},"content":"    private void assertCommandSuccess(String command, ReadOnlyPerson toAdd) {"},{"lineNumber":493,"author":{"gitID":"chilipadiboy"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":494,"author":{"gitID":"chilipadiboy"},"content":"        try {"},{"lineNumber":495,"author":{"gitID":"chilipadiboy"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":496,"author":{"gitID":"chilipadiboy"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":497,"author":{"gitID":"chilipadiboy"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":498,"author":{"gitID":"chilipadiboy"},"content":"        }"},{"lineNumber":499,"author":{"gitID":"chilipadiboy"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":500,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":501,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":502,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":503,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":504,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":505,"author":{"gitID":"chilipadiboy"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, ReadOnlyPerson)} except that the result"},{"lineNumber":506,"author":{"gitID":"chilipadiboy"},"content":"     * display box displays {@code expectedResultMessage} and the model related components equal to"},{"lineNumber":507,"author":{"gitID":"chilipadiboy"},"content":"     * {@code expectedModel}."},{"lineNumber":508,"author":{"gitID":"chilipadiboy"},"content":"     *"},{"lineNumber":509,"author":{"gitID":"chilipadiboy"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, ReadOnlyPerson)"},{"lineNumber":510,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":511,"author":{"gitID":"chilipadiboy"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":512,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":513,"author":{"gitID":"chilipadiboy"},"content":"        executeCommand(command);"},{"lineNumber":514,"author":{"gitID":"chilipadiboy"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":515,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":516,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":517,"author":{"gitID":"chilipadiboy"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":518,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":519,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":520,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":521,"author":{"gitID":"chilipadiboy"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":522,"author":{"gitID":"chilipadiboy"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":523,"author":{"gitID":"chilipadiboy"},"content":"     * These verifications are done by"},{"lineNumber":524,"author":{"gitID":"chilipadiboy"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":525,"author":{"gitID":"chilipadiboy"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":526,"author":{"gitID":"chilipadiboy"},"content":"     * error style."},{"lineNumber":527,"author":{"gitID":"chilipadiboy"},"content":"     *"},{"lineNumber":528,"author":{"gitID":"chilipadiboy"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":529,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":530,"author":{"gitID":"chilipadiboy"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":531,"author":{"gitID":"chilipadiboy"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":532,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":533,"author":{"gitID":"chilipadiboy"},"content":"        executeCommand(command);"},{"lineNumber":534,"author":{"gitID":"chilipadiboy"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":535,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":536,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":537,"author":{"gitID":"chilipadiboy"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":538,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":539,"author":{"gitID":"chilipadiboy"},"content":"}"}],"authorContributionMap":{"chilipadiboy":539}},{"path":"src/test/java/seedu/address/commons/core/ConfigTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ConfigTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":17,"author":{"gitID":"Jemereny"},"content":"        String defaultConfigAsString \u003d \"App title : Death Note\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"                + \"Current log level : INFO\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"                + \"Preference file Location : preferences.json\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Jemereny":1,"-":31}},{"path":"src/test/java/systemtests/FindCommandAliasSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chilipadiboy"},"content":"//@@author chilipadiboy"},{"lineNumber":2,"author":{"gitID":"chilipadiboy"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":4,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":8,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":9,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_WEBSITE;"},{"lineNumber":12,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":13,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":14,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":15,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":16,"author":{"gitID":"chilipadiboy"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":18,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":20,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":21,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":22,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":23,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":25,"author":{"gitID":"chilipadiboy"},"content":"public class FindCommandAliasSystemTest extends AddressBookSystemTest {"},{"lineNumber":26,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":27,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"chilipadiboy"},"content":"     * Test find alias \"f\""},{"lineNumber":29,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"chilipadiboy"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"chilipadiboy"},"content":"    public void findalias1() {"},{"lineNumber":32,"author":{"gitID":"chilipadiboy"},"content":"        String command;"},{"lineNumber":33,"author":{"gitID":"chilipadiboy"},"content":"        Model expectedModel;"},{"lineNumber":34,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":35,"author":{"gitID":"chilipadiboy"},"content":"        /* Test: find with one attribute */"},{"lineNumber":36,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":37,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: find a person not in address book"},{"lineNumber":38,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 0 persons found"},{"lineNumber":39,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":40,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_SHORT + \" n/Mark\";"},{"lineNumber":41,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":42,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":43,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":44,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":45,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":46,"author":{"gitID":"chilipadiboy"},"content":"        /*"},{"lineNumber":47,"author":{"gitID":"chilipadiboy"},"content":"         * Case: find a person in address book by exact full name"},{"lineNumber":48,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 1 person found"},{"lineNumber":49,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":50,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_SHORT + \" \" + PREFIX_NAME + CARL.getName();"},{"lineNumber":51,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":52,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":53,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":54,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":55,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":56,"author":{"gitID":"chilipadiboy"},"content":"        /*"},{"lineNumber":57,"author":{"gitID":"chilipadiboy"},"content":"         * Case: find a person in address book by exact phone number"},{"lineNumber":58,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 1 person found"},{"lineNumber":59,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":60,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_SHORT + \" \" + PREFIX_PHONE + CARL.getPhone();"},{"lineNumber":61,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":62,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":63,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":64,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":65,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":66,"author":{"gitID":"chilipadiboy"},"content":"        /*"},{"lineNumber":67,"author":{"gitID":"chilipadiboy"},"content":"         * Case: find a person in address book by exact email"},{"lineNumber":68,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 1 person found"},{"lineNumber":69,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":70,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_SHORT + \" \" + PREFIX_EMAIL + CARL.getEmail();"},{"lineNumber":71,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":72,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":73,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":74,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":75,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":76,"author":{"gitID":"chilipadiboy"},"content":"        /*"},{"lineNumber":77,"author":{"gitID":"chilipadiboy"},"content":"         * Case: find a person in address book by exact address"},{"lineNumber":78,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 1 person found"},{"lineNumber":79,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":80,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_SHORT + \" \" + PREFIX_ADDRESS + CARL.getAddress();"},{"lineNumber":81,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":82,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":83,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":84,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":85,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":86,"author":{"gitID":"chilipadiboy"},"content":"        /*"},{"lineNumber":87,"author":{"gitID":"chilipadiboy"},"content":"         * Case: find a person in address book by exact website"},{"lineNumber":88,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 1 person found"},{"lineNumber":89,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":90,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_SHORT + \" \" + PREFIX_WEBSITE + CARL.getWebsite();"},{"lineNumber":91,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":92,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":93,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":94,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":95,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":96,"author":{"gitID":"chilipadiboy"},"content":"        /*"},{"lineNumber":97,"author":{"gitID":"chilipadiboy"},"content":"         * Case: find a person in address book by exact birthday"},{"lineNumber":98,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 1 person found"},{"lineNumber":99,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":100,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_SHORT + \" \" + PREFIX_BIRTHDAY + CARL.getBirthday();"},{"lineNumber":101,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":102,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":103,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":104,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":105,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":106,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":107,"author":{"gitID":"chilipadiboy"},"content":"        /* Test: find with one attribute with extra constraints */"},{"lineNumber":108,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":109,"author":{"gitID":"chilipadiboy"},"content":"        /*"},{"lineNumber":110,"author":{"gitID":"chilipadiboy"},"content":"         * Case: find a person in address book by name (non case-sensitive)"},{"lineNumber":111,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 1 person found"},{"lineNumber":112,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":113,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_SHORT + \" \" + PREFIX_NAME + \"cARL kUrz\";"},{"lineNumber":114,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":115,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":116,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":117,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":118,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":119,"author":{"gitID":"chilipadiboy"},"content":"        /*"},{"lineNumber":120,"author":{"gitID":"chilipadiboy"},"content":"         * Case: find a person in address book by incomplete name but complete keyword"},{"lineNumber":121,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 1 person found"},{"lineNumber":122,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":123,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_SHORT + \" \" + PREFIX_NAME + \"cArL\";"},{"lineNumber":124,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":125,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":126,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":127,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":128,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":129,"author":{"gitID":"chilipadiboy"},"content":"        /*"},{"lineNumber":130,"author":{"gitID":"chilipadiboy"},"content":"         * Case: find a person in address book by incomplete name but complete keyword"},{"lineNumber":131,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 1 person found"},{"lineNumber":132,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":133,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_SHORT + \" \" + PREFIX_NAME + \"kUrZ\";"},{"lineNumber":134,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":135,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":136,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":137,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":138,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":139,"author":{"gitID":"chilipadiboy"},"content":"        /*"},{"lineNumber":140,"author":{"gitID":"chilipadiboy"},"content":"         * Case: find a person in address book by incomplete name but substring keyword"},{"lineNumber":141,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 1 person found"},{"lineNumber":142,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":143,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_SHORT + \" \" + PREFIX_NAME + \"KUr\";"},{"lineNumber":144,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":145,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":146,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":147,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":148,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":149,"author":{"gitID":"chilipadiboy"},"content":"        /*"},{"lineNumber":150,"author":{"gitID":"chilipadiboy"},"content":"         * Case: find a person in address book by incomplete name and incorrect keyword"},{"lineNumber":151,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 1 person found"},{"lineNumber":152,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":153,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_SHORT + \" \" + PREFIX_NAME + \"Krz\";"},{"lineNumber":154,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":155,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":156,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":157,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":158,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":159,"author":{"gitID":"chilipadiboy"},"content":"        /*"},{"lineNumber":160,"author":{"gitID":"chilipadiboy"},"content":"         * Case: find a person in address book by incomplete phone number (a substring)"},{"lineNumber":161,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 1 person found"},{"lineNumber":162,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":163,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_SHORT + \" \" + PREFIX_PHONE + \"35256\";"},{"lineNumber":164,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":165,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":166,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":167,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":168,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":169,"author":{"gitID":"chilipadiboy"},"content":"        /* Test: find with multiple attributes */"},{"lineNumber":170,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":171,"author":{"gitID":"chilipadiboy"},"content":"        /*"},{"lineNumber":172,"author":{"gitID":"chilipadiboy"},"content":"         * Case: find a person in address book by exact name and exact phone number"},{"lineNumber":173,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 1 person found"},{"lineNumber":174,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":175,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_SHORT + \" \" + PREFIX_NAME + BENSON.getName() + \" \""},{"lineNumber":176,"author":{"gitID":"chilipadiboy"},"content":"            + PREFIX_PHONE + BENSON.getPhone();"},{"lineNumber":177,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":178,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON);"},{"lineNumber":179,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":180,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":181,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":182,"author":{"gitID":"chilipadiboy"},"content":"        /*"},{"lineNumber":183,"author":{"gitID":"chilipadiboy"},"content":"         * Case: find a person in address book by incomplete name but exact phone number"},{"lineNumber":184,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 1 person found"},{"lineNumber":185,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":186,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_SHORT + \" \" + PREFIX_NAME + \"Meier\" + \" \" + PREFIX_PHONE + BENSON.getPhone();"},{"lineNumber":187,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":188,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON);"},{"lineNumber":189,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":190,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":191,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":192,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":193,"author":{"gitID":"chilipadiboy"},"content":"        /* Test: find multiple persons */"},{"lineNumber":194,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":195,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: find multiple persons in address book by name"},{"lineNumber":196,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 2 persons found"},{"lineNumber":197,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":198,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_SHORT + \" \" + PREFIX_NAME + \"Meier\";"},{"lineNumber":199,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":200,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":201,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":202,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":203,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":204,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":205,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 2 persons found"},{"lineNumber":206,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":207,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_SHORT + \" \" + PREFIX_NAME + \"Meier\";"},{"lineNumber":208,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":209,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":210,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":211,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: find multiple persons in address book, non case-sensitive"},{"lineNumber":212,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 2 person found"},{"lineNumber":213,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":214,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_SHORT + \" \" + PREFIX_NAME + \"MeIeR\";"},{"lineNumber":215,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":216,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":217,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":218,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: find person in address book, keyword is substring of name -\u003e 2 persons found */"},{"lineNumber":219,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_SHORT + \" \" + PREFIX_NAME + \"Mei\";"},{"lineNumber":220,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL, BENSON);"},{"lineNumber":221,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":222,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":223,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":224,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":225,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_SHORT + \" \" + PREFIX_NAME + \"Meiers\";"},{"lineNumber":226,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":227,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":228,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":229,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":230,"author":{"gitID":"chilipadiboy"},"content":"        /* Test: display screen */"},{"lineNumber":231,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":232,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":233,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_SHORT + \" \" + PREFIX_NAME + CARL.getName();"},{"lineNumber":234,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":235,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":236,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":237,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":238,"author":{"gitID":"chilipadiboy"},"content":"        /* Test: interaction with other commands */"},{"lineNumber":239,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":240,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":241,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d UndoCommand.COMMAND_SHORT;"},{"lineNumber":242,"author":{"gitID":"chilipadiboy"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":243,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":244,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":245,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":246,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d RedoCommand.COMMAND_SHORT;"},{"lineNumber":247,"author":{"gitID":"chilipadiboy"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":248,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":249,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":250,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":251,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_SHORT + \" \" + PREFIX_NAME + \"Meier\";"},{"lineNumber":252,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":253,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":254,"author":{"gitID":"chilipadiboy"},"content":"        executeCommand(DeleteCommand.COMMAND_SHORT + \" 1\");"},{"lineNumber":255,"author":{"gitID":"chilipadiboy"},"content":"        assert !getModel().getAddressBook().getPersonList().contains(BENSON);"},{"lineNumber":256,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_SHORT + \" \" + PREFIX_NAME + \"Meier\";"},{"lineNumber":257,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":258,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":259,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":260,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":261,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":262,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: find while a person is selected -\u003e selected card deselected */"},{"lineNumber":263,"author":{"gitID":"chilipadiboy"},"content":"        showAllPersons();"},{"lineNumber":264,"author":{"gitID":"chilipadiboy"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":265,"author":{"gitID":"chilipadiboy"},"content":"        assert !getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName);"},{"lineNumber":266,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_SHORT + \" n/Daniel\";"},{"lineNumber":267,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":268,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":269,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":270,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":271,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":272,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":273,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":274,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":276,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":277,"author":{"gitID":"chilipadiboy"},"content":"     * Test find alias \"summon\""},{"lineNumber":278,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":279,"author":{"gitID":"chilipadiboy"},"content":"    @Test"},{"lineNumber":280,"author":{"gitID":"chilipadiboy"},"content":"    public void findalias2() {"},{"lineNumber":281,"author":{"gitID":"chilipadiboy"},"content":"        String command;"},{"lineNumber":282,"author":{"gitID":"chilipadiboy"},"content":"        Model expectedModel;"},{"lineNumber":283,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":284,"author":{"gitID":"chilipadiboy"},"content":"        /* Test: find with one attribute */"},{"lineNumber":285,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":286,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: find a person not in address book"},{"lineNumber":287,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 0 persons found"},{"lineNumber":288,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":289,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" n/Mark\";"},{"lineNumber":290,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":291,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":292,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":293,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":294,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":295,"author":{"gitID":"chilipadiboy"},"content":"        /*"},{"lineNumber":296,"author":{"gitID":"chilipadiboy"},"content":"         * Case: find a person in address book by exact full name"},{"lineNumber":297,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 1 person found"},{"lineNumber":298,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":299,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + PREFIX_NAME + CARL.getName();"},{"lineNumber":300,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":301,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":302,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":303,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":304,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":305,"author":{"gitID":"chilipadiboy"},"content":"        /*"},{"lineNumber":306,"author":{"gitID":"chilipadiboy"},"content":"         * Case: find a person in address book by exact phone number"},{"lineNumber":307,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 1 person found"},{"lineNumber":308,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":309,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + PREFIX_PHONE + CARL.getPhone();"},{"lineNumber":310,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":311,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":312,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":313,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":314,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":315,"author":{"gitID":"chilipadiboy"},"content":"        /*"},{"lineNumber":316,"author":{"gitID":"chilipadiboy"},"content":"         * Case: find a person in address book by exact email"},{"lineNumber":317,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 1 person found"},{"lineNumber":318,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":319,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + PREFIX_EMAIL + CARL.getEmail();"},{"lineNumber":320,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":321,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":322,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":323,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":324,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":325,"author":{"gitID":"chilipadiboy"},"content":"        /*"},{"lineNumber":326,"author":{"gitID":"chilipadiboy"},"content":"         * Case: find a person in address book by exact address"},{"lineNumber":327,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 1 person found"},{"lineNumber":328,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":329,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + PREFIX_ADDRESS + CARL.getAddress();"},{"lineNumber":330,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":331,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":332,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":333,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":334,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":335,"author":{"gitID":"chilipadiboy"},"content":"        /*"},{"lineNumber":336,"author":{"gitID":"chilipadiboy"},"content":"         * Case: find a person in address book by exact website"},{"lineNumber":337,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 1 person found"},{"lineNumber":338,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":339,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + PREFIX_WEBSITE + CARL.getWebsite();"},{"lineNumber":340,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":341,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":342,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":343,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":344,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":345,"author":{"gitID":"chilipadiboy"},"content":"        /*"},{"lineNumber":346,"author":{"gitID":"chilipadiboy"},"content":"         * Case: find a person in address book by exact birthday"},{"lineNumber":347,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 1 person found"},{"lineNumber":348,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":349,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + PREFIX_BIRTHDAY + CARL.getBirthday();"},{"lineNumber":350,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":351,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":352,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":353,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":354,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":355,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":356,"author":{"gitID":"chilipadiboy"},"content":"        /* Test: find with one attribute with extra constraints */"},{"lineNumber":357,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":358,"author":{"gitID":"chilipadiboy"},"content":"        /*"},{"lineNumber":359,"author":{"gitID":"chilipadiboy"},"content":"         * Case: find a person in address book by name (non case-sensitive)"},{"lineNumber":360,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 1 person found"},{"lineNumber":361,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":362,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + PREFIX_NAME + \"cARL kUrz\";"},{"lineNumber":363,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":364,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":365,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":366,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":367,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":368,"author":{"gitID":"chilipadiboy"},"content":"        /*"},{"lineNumber":369,"author":{"gitID":"chilipadiboy"},"content":"         * Case: find a person in address book by incomplete name but complete keyword"},{"lineNumber":370,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 1 person found"},{"lineNumber":371,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":372,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + PREFIX_NAME + \"cArL\";"},{"lineNumber":373,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":374,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":375,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":376,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":377,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":378,"author":{"gitID":"chilipadiboy"},"content":"        /*"},{"lineNumber":379,"author":{"gitID":"chilipadiboy"},"content":"         * Case: find a person in address book by incomplete name but complete keyword"},{"lineNumber":380,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 1 person found"},{"lineNumber":381,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":382,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + PREFIX_NAME + \"kUrZ\";"},{"lineNumber":383,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":384,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":385,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":386,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":387,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":388,"author":{"gitID":"chilipadiboy"},"content":"        /*"},{"lineNumber":389,"author":{"gitID":"chilipadiboy"},"content":"         * Case: find a person in address book by incomplete name but substring keyword"},{"lineNumber":390,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 1 person found"},{"lineNumber":391,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":392,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + PREFIX_NAME + \"KUr\";"},{"lineNumber":393,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":394,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":395,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":396,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":397,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":398,"author":{"gitID":"chilipadiboy"},"content":"        /*"},{"lineNumber":399,"author":{"gitID":"chilipadiboy"},"content":"         * Case: find a person in address book by incomplete name and incorrect keyword"},{"lineNumber":400,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 1 person found"},{"lineNumber":401,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":402,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + PREFIX_NAME + \"Krz\";"},{"lineNumber":403,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":404,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":405,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":406,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":407,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":408,"author":{"gitID":"chilipadiboy"},"content":"        /*"},{"lineNumber":409,"author":{"gitID":"chilipadiboy"},"content":"         * Case: find a person in address book by incomplete phone number (a substring)"},{"lineNumber":410,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 1 person found"},{"lineNumber":411,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":412,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + PREFIX_PHONE + \"35256\";"},{"lineNumber":413,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":414,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":415,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":416,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":417,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":418,"author":{"gitID":"chilipadiboy"},"content":"        /*"},{"lineNumber":419,"author":{"gitID":"chilipadiboy"},"content":"         * Case: find a person in address book by incomplete phone number (a permutation)"},{"lineNumber":420,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 0 person found"},{"lineNumber":421,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":422,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + PREFIX_PHONE + \"25639535\";"},{"lineNumber":423,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":424,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":425,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":426,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":427,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":428,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":429,"author":{"gitID":"chilipadiboy"},"content":"        /* Test: find with multiple attributes */"},{"lineNumber":430,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":431,"author":{"gitID":"chilipadiboy"},"content":"        /*"},{"lineNumber":432,"author":{"gitID":"chilipadiboy"},"content":"         * Case: find a person in address book by exact name and exact phone number"},{"lineNumber":433,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 1 person found"},{"lineNumber":434,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":435,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + PREFIX_NAME + BENSON.getName() + \" \""},{"lineNumber":436,"author":{"gitID":"chilipadiboy"},"content":"            + PREFIX_PHONE + BENSON.getPhone();"},{"lineNumber":437,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":438,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON);"},{"lineNumber":439,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":440,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":441,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":442,"author":{"gitID":"chilipadiboy"},"content":"        /*"},{"lineNumber":443,"author":{"gitID":"chilipadiboy"},"content":"         * Case: find a person in address book by incomplete name but exact phone number"},{"lineNumber":444,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 1 person found"},{"lineNumber":445,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":446,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + PREFIX_NAME + \"Meier\" + \" \" + PREFIX_PHONE + BENSON.getPhone();"},{"lineNumber":447,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":448,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON);"},{"lineNumber":449,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":450,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":451,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":452,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":453,"author":{"gitID":"chilipadiboy"},"content":"        /* Test: find multiple persons */"},{"lineNumber":454,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":455,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: find multiple persons in address book by name"},{"lineNumber":456,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 2 persons found"},{"lineNumber":457,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":458,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + PREFIX_NAME + \"Meier\";"},{"lineNumber":459,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":460,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":461,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":462,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":463,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":464,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":465,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 2 persons found"},{"lineNumber":466,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":467,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + PREFIX_NAME + \"Meier\";"},{"lineNumber":468,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":469,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":470,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":471,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: find multiple persons in address book, non case-sensitive"},{"lineNumber":472,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e 2 person found"},{"lineNumber":473,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":474,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + PREFIX_NAME + \"MeIeR\";"},{"lineNumber":475,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":476,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":477,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":478,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: find person in address book, keyword is substring of name -\u003e 2 persons found */"},{"lineNumber":479,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + PREFIX_NAME + \"Mei\";"},{"lineNumber":480,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL, BENSON);"},{"lineNumber":481,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":482,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":483,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":484,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":485,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + PREFIX_NAME + \"Meiers\";"},{"lineNumber":486,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":487,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":488,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":489,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":490,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":491,"author":{"gitID":"chilipadiboy"},"content":"        /* Test: display screen */"},{"lineNumber":492,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":493,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":494,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + PREFIX_NAME + CARL.getName();"},{"lineNumber":495,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":496,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":497,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":498,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":499,"author":{"gitID":"chilipadiboy"},"content":"        /* Test: interaction with other commands */"},{"lineNumber":500,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":501,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":502,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d UndoCommand.COMMAND_SHORT;"},{"lineNumber":503,"author":{"gitID":"chilipadiboy"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":504,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":505,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":506,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":507,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d RedoCommand.COMMAND_SHORT;"},{"lineNumber":508,"author":{"gitID":"chilipadiboy"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":509,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":510,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":511,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":512,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + PREFIX_NAME + \"Meier\";"},{"lineNumber":513,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":514,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":515,"author":{"gitID":"chilipadiboy"},"content":"        executeCommand(DeleteCommand.COMMAND_ALIAS + \" 1\");"},{"lineNumber":516,"author":{"gitID":"chilipadiboy"},"content":"        assert !getModel().getAddressBook().getPersonList().contains(BENSON);"},{"lineNumber":517,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + PREFIX_NAME + \"Meier\";"},{"lineNumber":518,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":519,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":520,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":521,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":522,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":523,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: find while a person is selected -\u003e selected card deselected */"},{"lineNumber":524,"author":{"gitID":"chilipadiboy"},"content":"        showAllPersons();"},{"lineNumber":525,"author":{"gitID":"chilipadiboy"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":526,"author":{"gitID":"chilipadiboy"},"content":"        assert !getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName);"},{"lineNumber":527,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" n/Daniel\";"},{"lineNumber":528,"author":{"gitID":"chilipadiboy"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":529,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":530,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":531,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":532,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":533,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":534,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":535,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":536,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":537,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":538,"author":{"gitID":"chilipadiboy"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":539,"author":{"gitID":"chilipadiboy"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":540,"author":{"gitID":"chilipadiboy"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":541,"author":{"gitID":"chilipadiboy"},"content":"     * These verifications are done by"},{"lineNumber":542,"author":{"gitID":"chilipadiboy"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":543,"author":{"gitID":"chilipadiboy"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":544,"author":{"gitID":"chilipadiboy"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":545,"author":{"gitID":"chilipadiboy"},"content":"     *"},{"lineNumber":546,"author":{"gitID":"chilipadiboy"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":547,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":548,"author":{"gitID":"chilipadiboy"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":549,"author":{"gitID":"chilipadiboy"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":550,"author":{"gitID":"chilipadiboy"},"content":"            MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":551,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":552,"author":{"gitID":"chilipadiboy"},"content":"        executeCommand(command);"},{"lineNumber":553,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":554,"author":{"gitID":"chilipadiboy"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":555,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":556,"author":{"gitID":"chilipadiboy"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":557,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":558,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":559,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":560,"author":{"gitID":"chilipadiboy"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":561,"author":{"gitID":"chilipadiboy"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":562,"author":{"gitID":"chilipadiboy"},"content":"     * These verifications are done by"},{"lineNumber":563,"author":{"gitID":"chilipadiboy"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":564,"author":{"gitID":"chilipadiboy"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":565,"author":{"gitID":"chilipadiboy"},"content":"     * error style."},{"lineNumber":566,"author":{"gitID":"chilipadiboy"},"content":"     *"},{"lineNumber":567,"author":{"gitID":"chilipadiboy"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":568,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":569,"author":{"gitID":"chilipadiboy"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":570,"author":{"gitID":"chilipadiboy"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":571,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":572,"author":{"gitID":"chilipadiboy"},"content":"        executeCommand(command);"},{"lineNumber":573,"author":{"gitID":"chilipadiboy"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":574,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":575,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":576,"author":{"gitID":"chilipadiboy"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":577,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":578,"author":{"gitID":"chilipadiboy"},"content":"}"}],"authorContributionMap":{"chilipadiboy":578}},{"path":"src/test/java/seedu/address/ui/StatusBarFooterTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.time.Instant;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.AfterClass;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StatusBarFooterTest extends GuiUnitTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String STUB_SAVE_LOCATION \u003d \"Stub\";"},{"lineNumber":25,"author":{"gitID":"Jemereny"},"content":"    private static final int STUB_NUMBER_PEOPLE \u003d 0;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String RELATIVE_PATH \u003d \"./\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final AddressBookChangedEvent EVENT_STUB \u003d new AddressBookChangedEvent(new AddressBook());"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final Clock originalClock \u003d StatusBarFooter.getClock();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private StatusBarFooterHandle statusBarFooterHandle;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static void setUpBeforeClass() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // inject fixed clock"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(injectedClock);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @AfterClass"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static void tearDownAfterClass() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // restore original clock"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(originalClock);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":49,"author":{"gitID":"Jemereny"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, STUB_NUMBER_PEOPLE);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(statusBarFooter);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // initial state"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION, SYNC_STATUS_INITIAL);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // after address book is updated"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        postNow(EVENT_STUB);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION,"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * sync status matches that of {@code expectedSyncStatus}."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Jemereny":2,"-":74}},{"path":"src/test/java/seedu/address/commons/util/ConfigUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"chrisboo"},"content":"import static seedu.address.commons.util.ConfigUtil.updateConfig;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class ConfigUtilTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/ConfigUtilTest/\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void read_null_throwsNullPointerException() throws DataConversionException {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        read(null);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(read(\"NonExistentFile.json\").isPresent());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() throws DataConversionException {"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        read(\"NotJsonFormatConfig.json\");"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void read_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Config expected \u003d getTypicalConfig();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Config actual \u003d read(\"TypicalConfig.json\").get();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Config actual \u003d read(\"EmptyConfig.json\").get();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertEquals(new Config(), actual);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Config expected \u003d getTypicalConfig();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private Config getTypicalConfig() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Config config \u003d new Config();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        config.setAppTitle(\"Typical App Title\");"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        config.setLogLevel(Level.INFO);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        config.setUserPrefsFilePath(\"C:\\\\preferences.json\");"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return config;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        String configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return ConfigUtil.readConfig(configFilePath);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void save_nullConfig_throwsNullPointerException() throws IOException {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        save(null, \"SomeFile.json\");"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void save_nullFile_throwsNullPointerException() throws IOException {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        save(new Config(), null);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        Config original \u003d getTypicalConfig();"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        String configFilePath \u003d testFolder.getRoot() + File.separator + \"TempConfig.json\";"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        original.setAppTitle(\"Updated Title\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        original.setLogLevel(Level.FINE);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"chrisboo"},"content":"    //@@author chrisboo"},{"lineNumber":116,"author":{"gitID":"chrisboo"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"chrisboo"},"content":"    public void updateConfigTest() throws DataConversionException, IOException {"},{"lineNumber":118,"author":{"gitID":"chrisboo"},"content":"        Config original \u003d getTypicalConfig();"},{"lineNumber":119,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":120,"author":{"gitID":"chrisboo"},"content":"        String configFilePath \u003d testFolder.getRoot() + File.separator + \"TempConfig.json\";"},{"lineNumber":121,"author":{"gitID":"chrisboo"},"content":"        ConfigUtil.saveConfig(original, configFilePath);"},{"lineNumber":122,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":123,"author":{"gitID":"chrisboo"},"content":"        String updatedTitle \u003d \"Updated Title\";"},{"lineNumber":124,"author":{"gitID":"chrisboo"},"content":"        original.setAppTitle(updatedTitle);"},{"lineNumber":125,"author":{"gitID":"chrisboo"},"content":"        updateConfig(configFilePath, updatedTitle);"},{"lineNumber":126,"author":{"gitID":"chrisboo"},"content":"        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"},{"lineNumber":127,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":128,"author":{"gitID":"chrisboo"},"content":"        assertEquals(readBack, original);"},{"lineNumber":129,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"chrisboo"},"content":"    //@@author"},{"lineNumber":131,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    private void save(Config config, String configFileInTestDataFolder) throws IOException {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        String configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        ConfigUtil.saveConfig(config, configFilePath);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        return configFileInTestDataFolder !\u003d null"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                                  ? TEST_DATA_FOLDER + configFileInTestDataFolder"},{"lineNumber":140,"author":{"gitID":"-"},"content":"                                  : null;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":18,"-":126}},{"path":"src/test/java/seedu/address/logic/parser/ThemeCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Jemereny"},"content":"//@@author Jemereny"},{"lineNumber":2,"author":{"gitID":"Jemereny"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":4,"author":{"gitID":"Jemereny"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"Jemereny"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"Jemereny"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":8,"author":{"gitID":"Jemereny"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":10,"author":{"gitID":"Jemereny"},"content":"import seedu.address.logic.commands.ThemeCommand;"},{"lineNumber":11,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":12,"author":{"gitID":"Jemereny"},"content":"public class ThemeCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":14,"author":{"gitID":"Jemereny"},"content":"    public static final String INPUT_LIGHT \u003d \"light\";"},{"lineNumber":15,"author":{"gitID":"Jemereny"},"content":"    public static final String INPUT_DARK \u003d \"dark\";"},{"lineNumber":16,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":17,"author":{"gitID":"Jemereny"},"content":"    private ThemeCommandParser parser \u003d new ThemeCommandParser();"},{"lineNumber":18,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":19,"author":{"gitID":"Jemereny"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"Jemereny"},"content":"    public void execute_themeChangeSuccess() {"},{"lineNumber":21,"author":{"gitID":"Jemereny"},"content":"        // Testing for light theme"},{"lineNumber":22,"author":{"gitID":"Jemereny"},"content":"        ThemeCommand expectedCommand \u003d new ThemeCommand(ThemeCommand.LIGHT_THEME);"},{"lineNumber":23,"author":{"gitID":"Jemereny"},"content":"        assertParseSuccess(parser, INPUT_LIGHT, expectedCommand);"},{"lineNumber":24,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":25,"author":{"gitID":"Jemereny"},"content":"        // Testing for dark theme"},{"lineNumber":26,"author":{"gitID":"Jemereny"},"content":"        expectedCommand \u003d new ThemeCommand(ThemeCommand.DARK_THEME);"},{"lineNumber":27,"author":{"gitID":"Jemereny"},"content":"        assertParseSuccess(parser, INPUT_DARK, expectedCommand);"},{"lineNumber":28,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":29,"author":{"gitID":"Jemereny"},"content":"        // Message for failure"},{"lineNumber":30,"author":{"gitID":"Jemereny"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ThemeCommand.MESSAGE_USAGE);"},{"lineNumber":31,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":32,"author":{"gitID":"Jemereny"},"content":"        // Test for fail"},{"lineNumber":33,"author":{"gitID":"Jemereny"},"content":"        assertParseFailure(parser, \"pink\", expectedMessage);"},{"lineNumber":34,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":35,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Jemereny"},"content":"}"}],"authorContributionMap":{"Jemereny":36}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":22,"author":{"gitID":"chrisboo"},"content":"import seedu.address.logic.commands.FindCommand.FindPersonDescriptor;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":27,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":32,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":34,"author":{"gitID":"chrisboo"},"content":"import seedu.address.testutil.FindPersonDescriptorBuilder;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":60,"author":{"gitID":"-"},"content":"            DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":69,"author":{"gitID":"-"},"content":"            + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":71,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":73,"author":{"gitID":"chilipadiboy"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"chilipadiboy"},"content":"    public void parseCommand_remark() throws Exception {"},{"lineNumber":75,"author":{"gitID":"chilipadiboy"},"content":"        final Remark remark \u003d new Remark(\"Some remark.\");"},{"lineNumber":76,"author":{"gitID":"chilipadiboy"},"content":"        RemarkCommand command \u003d (RemarkCommand) parser.parseCommand(RemarkCommand.COMMAND_WORD + \" \""},{"lineNumber":77,"author":{"gitID":"chilipadiboy"},"content":"            + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_REMARK + \" \" + remark.value);"},{"lineNumber":78,"author":{"gitID":"chilipadiboy"},"content":"        assertEquals(new RemarkCommand(INDEX_FIRST_PERSON, remark), command);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"chrisboo"},"content":"    //@@author chrisboo"},{"lineNumber":88,"author":{"gitID":"chrisboo"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"chrisboo"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":90,"author":{"gitID":"chrisboo"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":91,"author":{"gitID":"chrisboo"},"content":"        FindPersonDescriptor descriptor \u003d new FindPersonDescriptorBuilder(person).build();"},{"lineNumber":92,"author":{"gitID":"chrisboo"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(FindCommand.COMMAND_WORD + \" \""},{"lineNumber":93,"author":{"gitID":"chrisboo"},"content":"            + PersonUtil.getPersonDetails(person));"},{"lineNumber":94,"author":{"gitID":"chrisboo"},"content":"        assertEquals(new FindCommand(descriptor), command);"},{"lineNumber":95,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"chrisboo"},"content":"    //@@author"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":126,"author":{"gitID":"-"},"content":"            SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chilipadiboy":11,"chrisboo":12,"-":132}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":10,"author":{"gitID":"chrisboo"},"content":"import seedu.address.logic.commands.FindCommand.FindPersonDescriptor;"},{"lineNumber":11,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":12,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class FindCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"chrisboo"},"content":"    //@@author chrisboo"},{"lineNumber":19,"author":{"gitID":"chrisboo"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"chrisboo"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":21,"author":{"gitID":"chrisboo"},"content":"        assertParseFailure(parser, \"     \", FindCommand.MESSAGE_NO_FIELD_PROVIDED);"},{"lineNumber":22,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":24,"author":{"gitID":"chrisboo"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"chrisboo"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":26,"author":{"gitID":"chrisboo"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":27,"author":{"gitID":"chrisboo"},"content":"        FindPersonDescriptor person \u003d new FindPersonDescriptor();"},{"lineNumber":28,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":29,"author":{"gitID":"chrisboo"},"content":"        try {"},{"lineNumber":30,"author":{"gitID":"chrisboo"},"content":"            person.setName(new Name(\"Alice\"));"},{"lineNumber":31,"author":{"gitID":"chrisboo"},"content":"            person.setPhone(new Phone(\"123456\"));"},{"lineNumber":32,"author":{"gitID":"chrisboo"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":33,"author":{"gitID":"chrisboo"},"content":"            e.printStackTrace();"},{"lineNumber":34,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":36,"author":{"gitID":"chrisboo"},"content":"        FindCommand expectedFindCommand \u003d new FindCommand(person);"},{"lineNumber":37,"author":{"gitID":"chrisboo"},"content":"        assertParseSuccess(parser, \" n/Alice p/123456\", expectedFindCommand);"},{"lineNumber":38,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"chrisboo"},"content":"    //@@author"},{"lineNumber":40,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chilipadiboy":2,"chrisboo":23,"-":15}},{"path":"src/test/java/systemtests/EditCommandAliasSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chilipadiboy"},"content":"//@@author chilipadiboy"},{"lineNumber":2,"author":{"gitID":"chilipadiboy"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":4,"author":{"gitID":"chilipadiboy"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"chilipadiboy"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":11,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":12,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":13,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":14,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":15,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":16,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":17,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_WEBSITE_DESC;"},{"lineNumber":18,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":19,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":20,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":23,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":24,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":25,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":26,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":27,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":28,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":29,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":30,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_WEBSITE_BOB;"},{"lineNumber":31,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.WEBSITE_DESC_AMY;"},{"lineNumber":32,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.WEBSITE_DESC_BOB;"},{"lineNumber":33,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":34,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":35,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":36,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":37,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":38,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":39,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":40,"author":{"gitID":"chilipadiboy"},"content":"import org.junit.Test;"},{"lineNumber":41,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":42,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":43,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":44,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":45,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":46,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":47,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.Model;"},{"lineNumber":48,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":49,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":50,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":51,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":52,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":53,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":54,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Website;"},{"lineNumber":55,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":56,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":57,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":58,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":59,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":60,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":61,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":62,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":63,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":64,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":65,"author":{"gitID":"chilipadiboy"},"content":"public class EditCommandAliasSystemTest extends AddressBookSystemTest {"},{"lineNumber":66,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":67,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"chilipadiboy"},"content":"     * Tests edit alias \"e\""},{"lineNumber":69,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"chilipadiboy"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"chilipadiboy"},"content":"    public void editalias1() throws Exception {"},{"lineNumber":72,"author":{"gitID":"chilipadiboy"},"content":"        Model model \u003d getModel();"},{"lineNumber":73,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":74,"author":{"gitID":"chilipadiboy"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":75,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":76,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":77,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e edited"},{"lineNumber":78,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":79,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":80,"author":{"gitID":"chilipadiboy"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":81,"author":{"gitID":"chilipadiboy"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_SHORT + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":82,"author":{"gitID":"chilipadiboy"},"content":"            + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \""},{"lineNumber":83,"author":{"gitID":"chilipadiboy"},"content":"            + WEBSITE_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":84,"author":{"gitID":"chilipadiboy"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":85,"author":{"gitID":"chilipadiboy"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":86,"author":{"gitID":"chilipadiboy"},"content":"            .withWebsite(VALID_WEBSITE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":87,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":88,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":89,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":90,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d UndoCommand.COMMAND_SHORT;"},{"lineNumber":91,"author":{"gitID":"chilipadiboy"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":92,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":93,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":94,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":95,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d RedoCommand.COMMAND_SHORT;"},{"lineNumber":96,"author":{"gitID":"chilipadiboy"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":97,"author":{"gitID":"chilipadiboy"},"content":"        model.updatePerson("},{"lineNumber":98,"author":{"gitID":"chilipadiboy"},"content":"            getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":99,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":100,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":101,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":102,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d EditCommand.COMMAND_SHORT + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":103,"author":{"gitID":"chilipadiboy"},"content":"            + EMAIL_DESC_BOB"},{"lineNumber":104,"author":{"gitID":"chilipadiboy"},"content":"            + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + WEBSITE_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":105,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":106,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":107,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":108,"author":{"gitID":"chilipadiboy"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":109,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d EditCommand.COMMAND_SHORT + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":110,"author":{"gitID":"chilipadiboy"},"content":"        ReadOnlyPerson personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":111,"author":{"gitID":"chilipadiboy"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":112,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":113,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":114,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":115,"author":{"gitID":"chilipadiboy"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":116,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d EditCommand.COMMAND_SHORT + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":117,"author":{"gitID":"chilipadiboy"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"},{"lineNumber":118,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":119,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":120,"author":{"gitID":"chilipadiboy"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":121,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":122,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":123,"author":{"gitID":"chilipadiboy"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":124,"author":{"gitID":"chilipadiboy"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":125,"author":{"gitID":"chilipadiboy"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":126,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d EditCommand.COMMAND_SHORT + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":127,"author":{"gitID":"chilipadiboy"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":128,"author":{"gitID":"chilipadiboy"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":129,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":130,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":131,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":132,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e rejected"},{"lineNumber":133,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":134,"author":{"gitID":"chilipadiboy"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":135,"author":{"gitID":"chilipadiboy"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":136,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(EditCommand.COMMAND_SHORT + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":137,"author":{"gitID":"chilipadiboy"},"content":"            Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":138,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":139,"author":{"gitID":"chilipadiboy"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":140,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":141,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":142,"author":{"gitID":"chilipadiboy"},"content":"         * browser url changes"},{"lineNumber":143,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":144,"author":{"gitID":"chilipadiboy"},"content":"        showAllPersons();"},{"lineNumber":145,"author":{"gitID":"chilipadiboy"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":146,"author":{"gitID":"chilipadiboy"},"content":"        selectPerson(index);"},{"lineNumber":147,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d EditCommand.COMMAND_SHORT + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":148,"author":{"gitID":"chilipadiboy"},"content":"            + EMAIL_DESC_AMY"},{"lineNumber":149,"author":{"gitID":"chilipadiboy"},"content":"            + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":150,"author":{"gitID":"chilipadiboy"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":151,"author":{"gitID":"chilipadiboy"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":152,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":153,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":154,"author":{"gitID":"chilipadiboy"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":155,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":156,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":157,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(EditCommand.COMMAND_SHORT + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":158,"author":{"gitID":"chilipadiboy"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":159,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":160,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":161,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(EditCommand.COMMAND_SHORT + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":162,"author":{"gitID":"chilipadiboy"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":163,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":164,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":165,"author":{"gitID":"chilipadiboy"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":166,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(EditCommand.COMMAND_SHORT + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":167,"author":{"gitID":"chilipadiboy"},"content":"            Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":168,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":169,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":170,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(EditCommand.COMMAND_SHORT + NAME_DESC_BOB,"},{"lineNumber":171,"author":{"gitID":"chilipadiboy"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":172,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":173,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":174,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(EditCommand.COMMAND_SHORT + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":175,"author":{"gitID":"chilipadiboy"},"content":"            EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":176,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":177,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":178,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(EditCommand.COMMAND_SHORT + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"},{"lineNumber":179,"author":{"gitID":"chilipadiboy"},"content":"            Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":180,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":181,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":182,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(EditCommand.COMMAND_SHORT + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"},{"lineNumber":183,"author":{"gitID":"chilipadiboy"},"content":"            Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":184,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":185,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":186,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(EditCommand.COMMAND_SHORT + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"},{"lineNumber":187,"author":{"gitID":"chilipadiboy"},"content":"            Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":188,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":189,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":190,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(EditCommand.COMMAND_SHORT + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"},{"lineNumber":191,"author":{"gitID":"chilipadiboy"},"content":"            Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":192,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":193,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid website -\u003e rejected */"},{"lineNumber":194,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(EditCommand.COMMAND_SHORT + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_WEBSITE_DESC,"},{"lineNumber":195,"author":{"gitID":"chilipadiboy"},"content":"            Website.MESSAGE_WEBSITE_CONSTRAINTS);"},{"lineNumber":196,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":197,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":198,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(EditCommand.COMMAND_SHORT + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":199,"author":{"gitID":"chilipadiboy"},"content":"                + INVALID_TAG_DESC,"},{"lineNumber":200,"author":{"gitID":"chilipadiboy"},"content":"            Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":201,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":202,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":203,"author":{"gitID":"chilipadiboy"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":204,"author":{"gitID":"chilipadiboy"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"},{"lineNumber":205,"author":{"gitID":"chilipadiboy"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":206,"author":{"gitID":"chilipadiboy"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":207,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d EditCommand.COMMAND_SHORT + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":208,"author":{"gitID":"chilipadiboy"},"content":"            + EMAIL_DESC_BOB"},{"lineNumber":209,"author":{"gitID":"chilipadiboy"},"content":"            + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + WEBSITE_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":210,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":211,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":212,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":213,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d EditCommand.COMMAND_SHORT + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":214,"author":{"gitID":"chilipadiboy"},"content":"            + EMAIL_DESC_BOB"},{"lineNumber":215,"author":{"gitID":"chilipadiboy"},"content":"            + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + WEBSITE_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":216,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":217,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":219,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"chilipadiboy"},"content":"     * Tests edit alias \"mutate\""},{"lineNumber":221,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":222,"author":{"gitID":"chilipadiboy"},"content":"    @Test"},{"lineNumber":223,"author":{"gitID":"chilipadiboy"},"content":"    public void editalias2() throws Exception {"},{"lineNumber":224,"author":{"gitID":"chilipadiboy"},"content":"        Model model \u003d getModel();"},{"lineNumber":225,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":226,"author":{"gitID":"chilipadiboy"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":227,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":228,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":229,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e edited"},{"lineNumber":230,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":231,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":232,"author":{"gitID":"chilipadiboy"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":233,"author":{"gitID":"chilipadiboy"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_ALIAS + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":234,"author":{"gitID":"chilipadiboy"},"content":"            + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \""},{"lineNumber":235,"author":{"gitID":"chilipadiboy"},"content":"            + WEBSITE_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":236,"author":{"gitID":"chilipadiboy"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":237,"author":{"gitID":"chilipadiboy"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":238,"author":{"gitID":"chilipadiboy"},"content":"            .withWebsite(VALID_WEBSITE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":239,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":240,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":241,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":242,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d UndoCommand.COMMAND_SHORT;"},{"lineNumber":243,"author":{"gitID":"chilipadiboy"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":244,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":245,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":246,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":247,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d RedoCommand.COMMAND_SHORT;"},{"lineNumber":248,"author":{"gitID":"chilipadiboy"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":249,"author":{"gitID":"chilipadiboy"},"content":"        model.updatePerson("},{"lineNumber":250,"author":{"gitID":"chilipadiboy"},"content":"            getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":251,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":252,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":253,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":254,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d EditCommand.COMMAND_ALIAS + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":255,"author":{"gitID":"chilipadiboy"},"content":"            + EMAIL_DESC_BOB"},{"lineNumber":256,"author":{"gitID":"chilipadiboy"},"content":"            + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + WEBSITE_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":257,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":258,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":259,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":260,"author":{"gitID":"chilipadiboy"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":261,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d EditCommand.COMMAND_ALIAS + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":262,"author":{"gitID":"chilipadiboy"},"content":"        ReadOnlyPerson personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":263,"author":{"gitID":"chilipadiboy"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":264,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":265,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":266,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":267,"author":{"gitID":"chilipadiboy"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":268,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d EditCommand.COMMAND_ALIAS + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":269,"author":{"gitID":"chilipadiboy"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"},{"lineNumber":270,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":271,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":272,"author":{"gitID":"chilipadiboy"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":273,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":274,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":275,"author":{"gitID":"chilipadiboy"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":276,"author":{"gitID":"chilipadiboy"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":277,"author":{"gitID":"chilipadiboy"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":278,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d EditCommand.COMMAND_ALIAS + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":279,"author":{"gitID":"chilipadiboy"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":280,"author":{"gitID":"chilipadiboy"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":281,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":282,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":283,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":284,"author":{"gitID":"chilipadiboy"},"content":"         * -\u003e rejected"},{"lineNumber":285,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":286,"author":{"gitID":"chilipadiboy"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":287,"author":{"gitID":"chilipadiboy"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":288,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(EditCommand.COMMAND_ALIAS + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":289,"author":{"gitID":"chilipadiboy"},"content":"            Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":290,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":291,"author":{"gitID":"chilipadiboy"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":292,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":293,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":294,"author":{"gitID":"chilipadiboy"},"content":"         * browser url changes"},{"lineNumber":295,"author":{"gitID":"chilipadiboy"},"content":"         */"},{"lineNumber":296,"author":{"gitID":"chilipadiboy"},"content":"        showAllPersons();"},{"lineNumber":297,"author":{"gitID":"chilipadiboy"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":298,"author":{"gitID":"chilipadiboy"},"content":"        selectPerson(index);"},{"lineNumber":299,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d EditCommand.COMMAND_ALIAS + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":300,"author":{"gitID":"chilipadiboy"},"content":"            + EMAIL_DESC_AMY"},{"lineNumber":301,"author":{"gitID":"chilipadiboy"},"content":"            + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":302,"author":{"gitID":"chilipadiboy"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":303,"author":{"gitID":"chilipadiboy"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":304,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":305,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":306,"author":{"gitID":"chilipadiboy"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":307,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":308,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":309,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(EditCommand.COMMAND_ALIAS + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":310,"author":{"gitID":"chilipadiboy"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":311,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":312,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":313,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(EditCommand.COMMAND_ALIAS + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":314,"author":{"gitID":"chilipadiboy"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":315,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":316,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":317,"author":{"gitID":"chilipadiboy"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":318,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(EditCommand.COMMAND_ALIAS + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":319,"author":{"gitID":"chilipadiboy"},"content":"            Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":320,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":321,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":322,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(EditCommand.COMMAND_ALIAS + NAME_DESC_BOB,"},{"lineNumber":323,"author":{"gitID":"chilipadiboy"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":324,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":325,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":326,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(EditCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":327,"author":{"gitID":"chilipadiboy"},"content":"            EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":328,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":329,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":330,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(EditCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"},{"lineNumber":331,"author":{"gitID":"chilipadiboy"},"content":"            Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":332,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":333,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":334,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(EditCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"},{"lineNumber":335,"author":{"gitID":"chilipadiboy"},"content":"            Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":336,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":337,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":338,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(EditCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"},{"lineNumber":339,"author":{"gitID":"chilipadiboy"},"content":"            Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":340,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":341,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":342,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(EditCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"},{"lineNumber":343,"author":{"gitID":"chilipadiboy"},"content":"            Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":344,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":345,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid website -\u003e rejected */"},{"lineNumber":346,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(EditCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_WEBSITE_DESC,"},{"lineNumber":347,"author":{"gitID":"chilipadiboy"},"content":"            Website.MESSAGE_WEBSITE_CONSTRAINTS);"},{"lineNumber":348,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":349,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":350,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(EditCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":351,"author":{"gitID":"chilipadiboy"},"content":"                + INVALID_TAG_DESC,"},{"lineNumber":352,"author":{"gitID":"chilipadiboy"},"content":"            Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":353,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":354,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":355,"author":{"gitID":"chilipadiboy"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":356,"author":{"gitID":"chilipadiboy"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"},{"lineNumber":357,"author":{"gitID":"chilipadiboy"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":358,"author":{"gitID":"chilipadiboy"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":359,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d EditCommand.COMMAND_ALIAS + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":360,"author":{"gitID":"chilipadiboy"},"content":"            + EMAIL_DESC_BOB"},{"lineNumber":361,"author":{"gitID":"chilipadiboy"},"content":"            + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + WEBSITE_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":362,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":363,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":364,"author":{"gitID":"chilipadiboy"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":365,"author":{"gitID":"chilipadiboy"},"content":"        command \u003d EditCommand.COMMAND_ALIAS + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":366,"author":{"gitID":"chilipadiboy"},"content":"            + EMAIL_DESC_BOB"},{"lineNumber":367,"author":{"gitID":"chilipadiboy"},"content":"            + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + WEBSITE_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":368,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":369,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":370,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":371,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":372,"author":{"gitID":"chilipadiboy"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, ReadOnlyPerson, Index)} except that"},{"lineNumber":373,"author":{"gitID":"chilipadiboy"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":374,"author":{"gitID":"chilipadiboy"},"content":"     *"},{"lineNumber":375,"author":{"gitID":"chilipadiboy"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":376,"author":{"gitID":"chilipadiboy"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, ReadOnlyPerson, Index)"},{"lineNumber":377,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":378,"author":{"gitID":"chilipadiboy"},"content":"    private void assertCommandSuccess(String command, Index toEdit, ReadOnlyPerson editedPerson) {"},{"lineNumber":379,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":380,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":381,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":382,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":383,"author":{"gitID":"chilipadiboy"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":384,"author":{"gitID":"chilipadiboy"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":385,"author":{"gitID":"chilipadiboy"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":386,"author":{"gitID":"chilipadiboy"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":387,"author":{"gitID":"chilipadiboy"},"content":"     *"},{"lineNumber":388,"author":{"gitID":"chilipadiboy"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":389,"author":{"gitID":"chilipadiboy"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":390,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":391,"author":{"gitID":"chilipadiboy"},"content":"    private void assertCommandSuccess(String command, Index toEdit, ReadOnlyPerson editedPerson,"},{"lineNumber":392,"author":{"gitID":"chilipadiboy"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":393,"author":{"gitID":"chilipadiboy"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":394,"author":{"gitID":"chilipadiboy"},"content":"        try {"},{"lineNumber":395,"author":{"gitID":"chilipadiboy"},"content":"            expectedModel.updatePerson("},{"lineNumber":396,"author":{"gitID":"chilipadiboy"},"content":"                expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":397,"author":{"gitID":"chilipadiboy"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":398,"author":{"gitID":"chilipadiboy"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":399,"author":{"gitID":"chilipadiboy"},"content":"            throw new IllegalArgumentException("},{"lineNumber":400,"author":{"gitID":"chilipadiboy"},"content":"                \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":401,"author":{"gitID":"chilipadiboy"},"content":"        }"},{"lineNumber":402,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":403,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":404,"author":{"gitID":"chilipadiboy"},"content":"            String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":405,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":406,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":407,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":408,"author":{"gitID":"chilipadiboy"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":409,"author":{"gitID":"chilipadiboy"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":410,"author":{"gitID":"chilipadiboy"},"content":"     *"},{"lineNumber":411,"author":{"gitID":"chilipadiboy"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":412,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":413,"author":{"gitID":"chilipadiboy"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":414,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":415,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":416,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":417,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":418,"author":{"gitID":"chilipadiboy"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":419,"author":{"gitID":"chilipadiboy"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":420,"author":{"gitID":"chilipadiboy"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":421,"author":{"gitID":"chilipadiboy"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":422,"author":{"gitID":"chilipadiboy"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":423,"author":{"gitID":"chilipadiboy"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":424,"author":{"gitID":"chilipadiboy"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":425,"author":{"gitID":"chilipadiboy"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":426,"author":{"gitID":"chilipadiboy"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":427,"author":{"gitID":"chilipadiboy"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":428,"author":{"gitID":"chilipadiboy"},"content":"     *"},{"lineNumber":429,"author":{"gitID":"chilipadiboy"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":430,"author":{"gitID":"chilipadiboy"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":431,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":432,"author":{"gitID":"chilipadiboy"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":433,"author":{"gitID":"chilipadiboy"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":434,"author":{"gitID":"chilipadiboy"},"content":"        executeCommand(command);"},{"lineNumber":435,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":436,"author":{"gitID":"chilipadiboy"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":437,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":438,"author":{"gitID":"chilipadiboy"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":439,"author":{"gitID":"chilipadiboy"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":440,"author":{"gitID":"chilipadiboy"},"content":"        } else {"},{"lineNumber":441,"author":{"gitID":"chilipadiboy"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":442,"author":{"gitID":"chilipadiboy"},"content":"        }"},{"lineNumber":443,"author":{"gitID":"chilipadiboy"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":444,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":445,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":446,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":447,"author":{"gitID":"chilipadiboy"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":448,"author":{"gitID":"chilipadiboy"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":449,"author":{"gitID":"chilipadiboy"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":450,"author":{"gitID":"chilipadiboy"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":451,"author":{"gitID":"chilipadiboy"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":452,"author":{"gitID":"chilipadiboy"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":453,"author":{"gitID":"chilipadiboy"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":454,"author":{"gitID":"chilipadiboy"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":455,"author":{"gitID":"chilipadiboy"},"content":"     *"},{"lineNumber":456,"author":{"gitID":"chilipadiboy"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":457,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":458,"author":{"gitID":"chilipadiboy"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":459,"author":{"gitID":"chilipadiboy"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":460,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":461,"author":{"gitID":"chilipadiboy"},"content":"        executeCommand(command);"},{"lineNumber":462,"author":{"gitID":"chilipadiboy"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":463,"author":{"gitID":"chilipadiboy"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":464,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":465,"author":{"gitID":"chilipadiboy"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":466,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":467,"author":{"gitID":"chilipadiboy"},"content":"}"}],"authorContributionMap":{"chilipadiboy":467}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":11,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_BIRTHDAY_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":16,"author":{"gitID":"Jemereny"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_WEBSITE_DESC;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":24,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;"},{"lineNumber":25,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":33,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_WEBSITE_AMY;"},{"lineNumber":34,"author":{"gitID":"Jemereny"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_WEBSITE_BOB;"},{"lineNumber":35,"author":{"gitID":"Jemereny"},"content":"import static seedu.address.logic.commands.CommandTestUtil.WEBSITE_DESC_AMY;"},{"lineNumber":36,"author":{"gitID":"Jemereny"},"content":"import static seedu.address.logic.commands.CommandTestUtil.WEBSITE_DESC_BOB;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":49,"author":{"gitID":"Jemereny"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":50,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":51,"author":{"gitID":"Jemereny"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":52,"author":{"gitID":"Jemereny"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":53,"author":{"gitID":"Jemereny"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":54,"author":{"gitID":"Jemereny"},"content":"import seedu.address.model.person.Website;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"},{"lineNumber":100,"author":{"gitID":"chilipadiboy"},"content":"        //@@author chilipadiboy"},{"lineNumber":101,"author":{"gitID":"chilipadiboy"},"content":"        assertParseFailure(parser, \"1\" + INVALID_BIRTHDAY_DESC,"},{"lineNumber":102,"author":{"gitID":"chilipadiboy"},"content":"            Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS); // invalid birthday"},{"lineNumber":103,"author":{"gitID":"Jemereny"},"content":"        //@@author Jemereny"},{"lineNumber":104,"author":{"gitID":"Jemereny"},"content":"        assertParseFailure(parser, \"1\" + INVALID_WEBSITE_DESC, Website.MESSAGE_WEBSITE_CONSTRAINTS); // invalid website"},{"lineNumber":105,"author":{"gitID":"Jemereny"},"content":"        //@@author"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        // phone"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        // email"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        // address"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"chilipadiboy"},"content":"        //@@author chilipadiboy"},{"lineNumber":180,"author":{"gitID":"chilipadiboy"},"content":"        //birthday"},{"lineNumber":181,"author":{"gitID":"chilipadiboy"},"content":"        userInput \u003d targetIndex.getOneBased() + BIRTHDAY_DESC_AMY;"},{"lineNumber":182,"author":{"gitID":"chilipadiboy"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withBirthday(VALID_BIRTHDAY_AMY).build();"},{"lineNumber":183,"author":{"gitID":"chilipadiboy"},"content":"        expectedCommand \u003d  new EditCommand(targetIndex, descriptor);"},{"lineNumber":184,"author":{"gitID":"chilipadiboy"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":185,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":186,"author":{"gitID":"chilipadiboy"},"content":"        //website"},{"lineNumber":187,"author":{"gitID":"chilipadiboy"},"content":"        userInput \u003d targetIndex.getOneBased() + WEBSITE_DESC_AMY;"},{"lineNumber":188,"author":{"gitID":"chilipadiboy"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withWebsite(VALID_WEBSITE_AMY).build();"},{"lineNumber":189,"author":{"gitID":"chilipadiboy"},"content":"        expectedCommand \u003d  new EditCommand(targetIndex, descriptor);"},{"lineNumber":190,"author":{"gitID":"chilipadiboy"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":191,"author":{"gitID":"chilipadiboy"},"content":"        //@@ author"},{"lineNumber":192,"author":{"gitID":"chilipadiboy"},"content":"        // tags"},{"lineNumber":193,"author":{"gitID":"chilipadiboy"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":194,"author":{"gitID":"chilipadiboy"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":195,"author":{"gitID":"chilipadiboy"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":196,"author":{"gitID":"chilipadiboy"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":197,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":199,"author":{"gitID":"chilipadiboy"},"content":"    @Test"},{"lineNumber":200,"author":{"gitID":"chilipadiboy"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":201,"author":{"gitID":"chilipadiboy"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":202,"author":{"gitID":"chilipadiboy"},"content":"        String userInput \u003d targetIndex.getOneBased()  + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":203,"author":{"gitID":"chilipadiboy"},"content":"                + WEBSITE_DESC_AMY + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":204,"author":{"gitID":"chilipadiboy"},"content":"                + WEBSITE_DESC_AMY + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":205,"author":{"gitID":"chilipadiboy"},"content":"                + WEBSITE_DESC_BOB  + BIRTHDAY_DESC_AMY + BIRTHDAY_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":206,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":207,"author":{"gitID":"chilipadiboy"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":208,"author":{"gitID":"chilipadiboy"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withBirthday(VALID_BIRTHDAY_BOB)"},{"lineNumber":209,"author":{"gitID":"chilipadiboy"},"content":"                .withWebsite(VALID_WEBSITE_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":210,"author":{"gitID":"chilipadiboy"},"content":"                .build();"},{"lineNumber":211,"author":{"gitID":"chilipadiboy"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":212,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":213,"author":{"gitID":"chilipadiboy"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":214,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":216,"author":{"gitID":"chilipadiboy"},"content":"    @Test"},{"lineNumber":217,"author":{"gitID":"chilipadiboy"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":218,"author":{"gitID":"chilipadiboy"},"content":"        // no other valid values specified"},{"lineNumber":219,"author":{"gitID":"chilipadiboy"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":220,"author":{"gitID":"chilipadiboy"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":221,"author":{"gitID":"chilipadiboy"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":222,"author":{"gitID":"chilipadiboy"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":223,"author":{"gitID":"chilipadiboy"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":224,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":225,"author":{"gitID":"chilipadiboy"},"content":"        // other valid values specified"},{"lineNumber":226,"author":{"gitID":"chilipadiboy"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":227,"author":{"gitID":"chilipadiboy"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":228,"author":{"gitID":"chilipadiboy"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":229,"author":{"gitID":"chilipadiboy"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":230,"author":{"gitID":"chilipadiboy"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":231,"author":{"gitID":"chilipadiboy"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":232,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":234,"author":{"gitID":"chilipadiboy"},"content":"    @Test"},{"lineNumber":235,"author":{"gitID":"chilipadiboy"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":236,"author":{"gitID":"chilipadiboy"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":237,"author":{"gitID":"chilipadiboy"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":238,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":239,"author":{"gitID":"chilipadiboy"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"},{"lineNumber":240,"author":{"gitID":"chilipadiboy"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":241,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":242,"author":{"gitID":"chilipadiboy"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":243,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"chilipadiboy"},"content":"}"}],"authorContributionMap":{"chilipadiboy":76,"Jemereny":12,"-":156}},{"path":"src/test/java/seedu/address/logic/parser/NewCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Jemereny"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":3,"author":{"gitID":"Jemereny"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Jemereny"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"chrisboo"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"chrisboo"},"content":"import static seedu.address.testutil.TestUtil.getFilePathInDataFolder;"},{"lineNumber":7,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":8,"author":{"gitID":"chrisboo"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":10,"author":{"gitID":"chrisboo"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":12,"author":{"gitID":"chrisboo"},"content":"import seedu.address.logic.commands.NewCommand;"},{"lineNumber":13,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":14,"author":{"gitID":"chrisboo"},"content":"//@@author chrisboo"},{"lineNumber":15,"author":{"gitID":"chrisboo"},"content":"public class NewCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":17,"author":{"gitID":"chrisboo"},"content":"    private static String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":18,"author":{"gitID":"chrisboo"},"content":"        String.format(MESSAGE_INVALID_COMMAND_FORMAT, NewCommand.MESSAGE_USAGE);"},{"lineNumber":19,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":20,"author":{"gitID":"chrisboo"},"content":"    private NewCommandParser parser \u003d new NewCommandParser();"},{"lineNumber":21,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":22,"author":{"gitID":"chrisboo"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"chrisboo"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":24,"author":{"gitID":"chrisboo"},"content":"        // no path specified"},{"lineNumber":25,"author":{"gitID":"chrisboo"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":26,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":28,"author":{"gitID":"chrisboo"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"chrisboo"},"content":"    public void parse_invalidPath_failure() {"},{"lineNumber":30,"author":{"gitID":"chrisboo"},"content":"        // path is a directory"},{"lineNumber":31,"author":{"gitID":"chrisboo"},"content":"        assertParseFailure(parser, getFilePathInDataFolder(\"\"), MESSAGE_INVALID_FORMAT);"},{"lineNumber":32,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":33,"author":{"gitID":"chrisboo"},"content":"        // path is not a DeathNote file"},{"lineNumber":34,"author":{"gitID":"chrisboo"},"content":"        assertParseFailure(parser, getFilePathInDataFolder(\"random.file\"), MESSAGE_INVALID_FORMAT);"},{"lineNumber":35,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":37,"author":{"gitID":"chrisboo"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"chrisboo"},"content":"    public void parse_validArgs_success() {"},{"lineNumber":39,"author":{"gitID":"chrisboo"},"content":"        String fileName \u003d \"sampleData.xml\";"},{"lineNumber":40,"author":{"gitID":"chrisboo"},"content":"        String filePath \u003d getFilePathInDataFolder(fileName);"},{"lineNumber":41,"author":{"gitID":"chrisboo"},"content":"        assertParseSuccess(parser, filePath, new NewCommand(new File(filePath)));"},{"lineNumber":42,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"chrisboo"},"content":"}"},{"lineNumber":44,"author":{"gitID":"chrisboo"},"content":"//@@author"}],"authorContributionMap":{"Jemereny":4,"chrisboo":40}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void parseName_null_throwsNullPointerException() throws Exception {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        ParserUtil.parseName(null);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void parseName_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        ParserUtil.parseName(Optional.of(INVALID_NAME));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void parseName_validValue_returnsName() throws Exception {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Optional\u003cName\u003e actualName \u003d ParserUtil.parseName(Optional.of(VALID_NAME));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, actualName.get());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() throws Exception {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        ParserUtil.parsePhone(null);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void parsePhone_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        ParserUtil.parsePhone(Optional.of(INVALID_PHONE));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void parsePhone_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":104,"author":{"gitID":"chrisboo"},"content":"        assertTrue(ParserUtil.parsePhone(Optional.empty()).isPresent());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void parsePhone_validValue_returnsPhone() throws Exception {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Optional\u003cPhone\u003e actualPhone \u003d ParserUtil.parsePhone(Optional.of(VALID_PHONE));"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, actualPhone.get());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() throws Exception {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        ParserUtil.parseAddress(null);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public void parseAddress_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        ParserUtil.parseAddress(Optional.of(INVALID_ADDRESS));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public void parseAddress_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":129,"author":{"gitID":"chrisboo"},"content":"        assertTrue(ParserUtil.parseAddress(Optional.empty()).isPresent());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public void parseAddress_validValue_returnsAddress() throws Exception {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Optional\u003cAddress\u003e actualAddress \u003d ParserUtil.parseAddress(Optional.of(VALID_ADDRESS));"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, actualAddress.get());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() throws Exception {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        ParserUtil.parseEmail(null);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public void parseEmail_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        ParserUtil.parseEmail(Optional.of(INVALID_EMAIL));"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public void parseEmail_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":154,"author":{"gitID":"chrisboo"},"content":"        assertTrue(ParserUtil.parseEmail(Optional.empty()).isPresent());"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public void parseEmail_validValue_returnsEmail() throws Exception {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        Optional\u003cEmail\u003e actualEmail \u003d ParserUtil.parseEmail(Optional.of(VALID_EMAIL));"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, actualEmail.get());"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public void parseTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(null);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":3,"-":186}},{"path":"src/test/java/seedu/address/logic/parser/OpenCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Jemereny"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":3,"author":{"gitID":"Jemereny"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Jemereny"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"chrisboo"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"chrisboo"},"content":"import static seedu.address.testutil.TestUtil.getFilePathInDataFolder;"},{"lineNumber":7,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":8,"author":{"gitID":"chrisboo"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":10,"author":{"gitID":"chrisboo"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":12,"author":{"gitID":"chrisboo"},"content":"import seedu.address.logic.commands.OpenCommand;"},{"lineNumber":13,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":14,"author":{"gitID":"chrisboo"},"content":"//@@author chrisboo"},{"lineNumber":15,"author":{"gitID":"chrisboo"},"content":"public class OpenCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":17,"author":{"gitID":"chrisboo"},"content":"    private static String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":18,"author":{"gitID":"chrisboo"},"content":"        String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenCommand.MESSAGE_USAGE);"},{"lineNumber":19,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":20,"author":{"gitID":"chrisboo"},"content":"    private OpenCommandParser parser \u003d new OpenCommandParser();"},{"lineNumber":21,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":22,"author":{"gitID":"chrisboo"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"chrisboo"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":24,"author":{"gitID":"chrisboo"},"content":"        // no path specified"},{"lineNumber":25,"author":{"gitID":"chrisboo"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":26,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":28,"author":{"gitID":"chrisboo"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"chrisboo"},"content":"    public void parse_invalidPath_failure() {"},{"lineNumber":30,"author":{"gitID":"chrisboo"},"content":"        // path is a directory"},{"lineNumber":31,"author":{"gitID":"chrisboo"},"content":"        assertParseFailure(parser, getFilePathInDataFolder(\"\"), MESSAGE_INVALID_FORMAT);"},{"lineNumber":32,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":33,"author":{"gitID":"chrisboo"},"content":"        // path is not a DeathNote file"},{"lineNumber":34,"author":{"gitID":"chrisboo"},"content":"        assertParseFailure(parser, getFilePathInDataFolder(\"random.file\"), MESSAGE_INVALID_FORMAT);"},{"lineNumber":35,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":37,"author":{"gitID":"chrisboo"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"chrisboo"},"content":"    public void parse_validArgs_success() {"},{"lineNumber":39,"author":{"gitID":"chrisboo"},"content":"        String fileName \u003d \"sampleData.xml\";"},{"lineNumber":40,"author":{"gitID":"chrisboo"},"content":"        String filePath \u003d getFilePathInDataFolder(fileName);"},{"lineNumber":41,"author":{"gitID":"chrisboo"},"content":"        assertParseSuccess(parser, filePath, new OpenCommand(new File(filePath)));"},{"lineNumber":42,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"chrisboo"},"content":"}"},{"lineNumber":44,"author":{"gitID":"chrisboo"},"content":"//@@author"}],"authorContributionMap":{"Jemereny":4,"chrisboo":40}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMPTY_ADDRESS;"},{"lineNumber":11,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMPTY_EMAIL;"},{"lineNumber":12,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMPTY_PHONE;"},{"lineNumber":13,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMPTY_WEBSITE;"},{"lineNumber":14,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":15,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_BIRTHDAY_DESC;"},{"lineNumber":16,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":17,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":18,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":19,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":20,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":23,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":24,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":25,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":26,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":27,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":28,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;"},{"lineNumber":29,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"},{"lineNumber":30,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":31,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":32,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":33,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":34,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":35,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":36,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":37,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":38,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_WEBSITE_AMY;"},{"lineNumber":39,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_WEBSITE_BOB;"},{"lineNumber":40,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.WEBSITE_DESC_AMY;"},{"lineNumber":41,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.WEBSITE_DESC_BOB;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":46,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":48,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":49,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":50,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":51,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":52,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":53,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":63,"author":{"gitID":"chilipadiboy"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":64,"author":{"gitID":"chilipadiboy"},"content":"                .withBirthday(VALID_BIRTHDAY_BOB).withWebsite(VALID_WEBSITE_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":68,"author":{"gitID":"chilipadiboy"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB"},{"lineNumber":69,"author":{"gitID":"Jemereny"},"content":"                + WEBSITE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"Jemereny"},"content":"        // multiple` phones - last phone accepted"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB"},{"lineNumber":73,"author":{"gitID":"chilipadiboy"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":74,"author":{"gitID":"chilipadiboy"},"content":"                + WEBSITE_DESC_BOB + BIRTHDAY_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"},{"lineNumber":78,"author":{"gitID":"chilipadiboy"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB"},{"lineNumber":79,"author":{"gitID":"Jemereny"},"content":"                + WEBSITE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":83,"author":{"gitID":"chilipadiboy"},"content":"                + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB"},{"lineNumber":84,"author":{"gitID":"Jemereny"},"content":"                + WEBSITE_DESC_BOB +  TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":85,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":86,"author":{"gitID":"chilipadiboy"},"content":"        // multiple birthdays - last birthday accepted"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":88,"author":{"gitID":"chilipadiboy"},"content":"                + ADDRESS_DESC_BOB + BIRTHDAY_DESC_AMY + BIRTHDAY_DESC_BOB"},{"lineNumber":89,"author":{"gitID":"Jemereny"},"content":"                + WEBSITE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":93,"author":{"gitID":"chilipadiboy"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":94,"author":{"gitID":"chilipadiboy"},"content":"                .withBirthday(VALID_BIRTHDAY_BOB).withWebsite(VALID_WEBSITE_BOB)"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":97,"author":{"gitID":"chilipadiboy"},"content":"                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB"},{"lineNumber":98,"author":{"gitID":"chilipadiboy"},"content":"                        + WEBSITE_DESC_BOB"},{"lineNumber":99,"author":{"gitID":"chilipadiboy"},"content":"                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":100,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":101,"author":{"gitID":"Jemereny"},"content":"        // multiple website - last website accepted"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":103,"author":{"gitID":"chilipadiboy"},"content":"                + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + WEBSITE_DESC_AMY"},{"lineNumber":104,"author":{"gitID":"Jemereny"},"content":"                + WEBSITE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":111,"author":{"gitID":"chilipadiboy"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY)"},{"lineNumber":112,"author":{"gitID":"chilipadiboy"},"content":"                .withWebsite(VALID_WEBSITE_AMY).withTags().build();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":114,"author":{"gitID":"chilipadiboy"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":115,"author":{"gitID":"chilipadiboy"},"content":"                + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY, new AddCommand(expectedPerson));"},{"lineNumber":116,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":117,"author":{"gitID":"chrisboo"},"content":"        //@@author chrisboo"},{"lineNumber":118,"author":{"gitID":"chrisboo"},"content":"        // missing phone prefix"},{"lineNumber":119,"author":{"gitID":"chrisboo"},"content":"        Person expectedPersonWithoutPhone \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(EMPTY_PHONE)"},{"lineNumber":120,"author":{"gitID":"chrisboo"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY)"},{"lineNumber":121,"author":{"gitID":"chrisboo"},"content":"                .withWebsite(VALID_WEBSITE_AMY).build();"},{"lineNumber":122,"author":{"gitID":"chrisboo"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_AMY"},{"lineNumber":123,"author":{"gitID":"chrisboo"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":124,"author":{"gitID":"chrisboo"},"content":"                + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY, new AddCommand(expectedPersonWithoutPhone));"},{"lineNumber":125,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":126,"author":{"gitID":"chrisboo"},"content":"        // missing email prefix"},{"lineNumber":127,"author":{"gitID":"chrisboo"},"content":"        Person expectedPersonWithoutEmail \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":128,"author":{"gitID":"chrisboo"},"content":"                .withEmail(EMPTY_EMAIL).withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY)"},{"lineNumber":129,"author":{"gitID":"chrisboo"},"content":"                .withWebsite(VALID_WEBSITE_AMY).build();"},{"lineNumber":130,"author":{"gitID":"chrisboo"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_AMY"},{"lineNumber":131,"author":{"gitID":"chrisboo"},"content":"                + PHONE_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":132,"author":{"gitID":"chrisboo"},"content":"                + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY, new AddCommand(expectedPersonWithoutEmail));"},{"lineNumber":133,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":134,"author":{"gitID":"chrisboo"},"content":"        // missing address prefix"},{"lineNumber":135,"author":{"gitID":"chrisboo"},"content":"        Person expectedPersonWithoutAddress \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":136,"author":{"gitID":"chrisboo"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(EMPTY_ADDRESS).withBirthday(VALID_BIRTHDAY_AMY)"},{"lineNumber":137,"author":{"gitID":"chrisboo"},"content":"                .withWebsite(VALID_WEBSITE_AMY).build();"},{"lineNumber":138,"author":{"gitID":"chrisboo"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_AMY"},{"lineNumber":139,"author":{"gitID":"chrisboo"},"content":"                + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":140,"author":{"gitID":"chrisboo"},"content":"                + BIRTHDAY_DESC_AMY + WEBSITE_DESC_AMY, new AddCommand(expectedPersonWithoutAddress));"},{"lineNumber":141,"author":{"gitID":"chrisboo"},"content":"        //@@author"},{"lineNumber":142,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":143,"author":{"gitID":"Jemereny"},"content":"        // missing website prefix"},{"lineNumber":144,"author":{"gitID":"Jemereny"},"content":"        Person expectedPersonWithoutWebsite \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":145,"author":{"gitID":"chilipadiboy"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY)"},{"lineNumber":146,"author":{"gitID":"Jemereny"},"content":"                .withWebsite(EMPTY_WEBSITE).build();"},{"lineNumber":147,"author":{"gitID":"Jemereny"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_AMY"},{"lineNumber":148,"author":{"gitID":"chilipadiboy"},"content":"                + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":149,"author":{"gitID":"chilipadiboy"},"content":"                + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY, new AddCommand(expectedPersonWithoutWebsite));"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + VALID_NAME_BOB + PHONE_DESC_BOB"},{"lineNumber":158,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB, expectedMessage);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + VALID_NAME_BOB + VALID_PHONE_BOB"},{"lineNumber":162,"author":{"gitID":"-"},"content":"                + VALID_EMAIL_BOB + VALID_ADDRESS_BOB, expectedMessage);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":169,"author":{"gitID":"chilipadiboy"},"content":"                        + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB"},{"lineNumber":170,"author":{"gitID":"chilipadiboy"},"content":"                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB"},{"lineNumber":174,"author":{"gitID":"chilipadiboy"},"content":"                + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB"},{"lineNumber":175,"author":{"gitID":"chilipadiboy"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"},{"lineNumber":179,"author":{"gitID":"chilipadiboy"},"content":"                        + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB"},{"lineNumber":180,"author":{"gitID":"chilipadiboy"},"content":"                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":184,"author":{"gitID":"chilipadiboy"},"content":"                        + INVALID_ADDRESS_DESC + BIRTHDAY_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":185,"author":{"gitID":"-"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":189,"author":{"gitID":"chilipadiboy"},"content":"                        + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB"},{"lineNumber":190,"author":{"gitID":"chilipadiboy"},"content":"                        + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":191,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":192,"author":{"gitID":"chilipadiboy"},"content":"        //invalid birthday"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":194,"author":{"gitID":"chilipadiboy"},"content":"                + ADDRESS_DESC_BOB + INVALID_BIRTHDAY_DESC"},{"lineNumber":195,"author":{"gitID":"chilipadiboy"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS);"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":198,"author":{"gitID":"chilipadiboy"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_BOB"},{"lineNumber":199,"author":{"gitID":"chilipadiboy"},"content":"                + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC + BIRTHDAY_DESC_BOB, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chilipadiboy":83,"Jemereny":14,"chrisboo":25,"-":79}},{"path":"src/test/java/seedu/address/logic/parser/RemarkCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chilipadiboy"},"content":"//@@author chilipadiboy"},{"lineNumber":2,"author":{"gitID":"chilipadiboy"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":4,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":6,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":7,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":8,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":10,"author":{"gitID":"chilipadiboy"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":12,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":14,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":15,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":16,"author":{"gitID":"chilipadiboy"},"content":"public class RemarkCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"chilipadiboy"},"content":"    private RemarkCommandParser parser \u003d new RemarkCommandParser();"},{"lineNumber":18,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":19,"author":{"gitID":"chilipadiboy"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"chilipadiboy"},"content":"    public void parse_indexSpecified_failure() throws Exception {"},{"lineNumber":21,"author":{"gitID":"chilipadiboy"},"content":"        final Remark remark \u003d new Remark(\"Some remark.\");"},{"lineNumber":22,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":23,"author":{"gitID":"chilipadiboy"},"content":"        // have remarks"},{"lineNumber":24,"author":{"gitID":"chilipadiboy"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":25,"author":{"gitID":"chilipadiboy"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_REMARK.toString() + \" \" + remark;"},{"lineNumber":26,"author":{"gitID":"chilipadiboy"},"content":"        RemarkCommand expectedCommand \u003d new RemarkCommand(INDEX_FIRST_PERSON, remark);"},{"lineNumber":27,"author":{"gitID":"chilipadiboy"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":28,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":29,"author":{"gitID":"chilipadiboy"},"content":"        // no remarks"},{"lineNumber":30,"author":{"gitID":"chilipadiboy"},"content":"        userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_REMARK.toString();"},{"lineNumber":31,"author":{"gitID":"chilipadiboy"},"content":"        expectedCommand \u003d new RemarkCommand(INDEX_FIRST_PERSON, new Remark(\"\"));"},{"lineNumber":32,"author":{"gitID":"chilipadiboy"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":33,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":35,"author":{"gitID":"chilipadiboy"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"chilipadiboy"},"content":"    public void parse_noFieldSpecified_failure() throws Exception {"},{"lineNumber":37,"author":{"gitID":"chilipadiboy"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE);"},{"lineNumber":38,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":39,"author":{"gitID":"chilipadiboy"},"content":"        // nothing at all"},{"lineNumber":40,"author":{"gitID":"chilipadiboy"},"content":"        assertParseFailure(parser, RemarkCommand.COMMAND_WORD, expectedMessage);"},{"lineNumber":41,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"chilipadiboy"},"content":"}"}],"authorContributionMap":{"chilipadiboy":42}},{"path":"src/test/java/seedu/address/logic/commands/ThemeCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chilipadiboy"},"content":"//@@author chilipadiboy"},{"lineNumber":2,"author":{"gitID":"chilipadiboy"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":4,"author":{"gitID":"chilipadiboy"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":6,"author":{"gitID":"chilipadiboy"},"content":"import org.junit.Rule;"},{"lineNumber":7,"author":{"gitID":"chilipadiboy"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":9,"author":{"gitID":"chilipadiboy"},"content":"import guitests.AddressBookGuiTest;"},{"lineNumber":10,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":11,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":12,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":13,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":14,"author":{"gitID":"chilipadiboy"},"content":"public class ThemeCommandTest extends AddressBookGuiTest {"},{"lineNumber":15,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":16,"author":{"gitID":"chilipadiboy"},"content":"    @Rule"},{"lineNumber":17,"author":{"gitID":"chilipadiboy"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":18,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":19,"author":{"gitID":"chilipadiboy"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"chilipadiboy"},"content":"    public void executethemechange() {"},{"lineNumber":21,"author":{"gitID":"chilipadiboy"},"content":"        CommandResult result \u003d new ThemeCommand(\"light\").execute();"},{"lineNumber":22,"author":{"gitID":"chilipadiboy"},"content":"        assertEquals(ThemeCommand.MESSAGE_SUCCESS, result.feedbackToUser);"},{"lineNumber":23,"author":{"gitID":"chilipadiboy"},"content":"        CommandResult result2 \u003d new ThemeCommand(\"dark\").execute();"},{"lineNumber":24,"author":{"gitID":"chilipadiboy"},"content":"        assertEquals(ThemeCommand.MESSAGE_SUCCESS, result2.feedbackToUser);"},{"lineNumber":25,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"chilipadiboy"},"content":"}"}],"authorContributionMap":{"chilipadiboy":26}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":12,"author":{"gitID":"Jemereny"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_WEBSITE_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"Jemereny"},"content":"        // different website -\u003e returns false"},{"lineNumber":56,"author":{"gitID":"Jemereny"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withWebsite(VALID_WEBSITE_BOB).build();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Jemereny":3,"-":60}},{"path":"src/test/java/seedu/address/logic/commands/BirthdayAlarmCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chilipadiboy"},"content":"//@@author chilipadiboy"},{"lineNumber":2,"author":{"gitID":"chilipadiboy"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":4,"author":{"gitID":"chilipadiboy"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"chilipadiboy"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.BirthdayAlarmCommand.SHOWING_REMINDERS_MESSAGE;"},{"lineNumber":7,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":8,"author":{"gitID":"chilipadiboy"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"chilipadiboy"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":11,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.commons.events.ui.ShowBirthdayAlarmRequestEvent;"},{"lineNumber":12,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":13,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":14,"author":{"gitID":"chilipadiboy"},"content":"public class BirthdayAlarmCommandTest {"},{"lineNumber":15,"author":{"gitID":"chilipadiboy"},"content":"    @Rule"},{"lineNumber":16,"author":{"gitID":"chilipadiboy"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":17,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":18,"author":{"gitID":"chilipadiboy"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"chilipadiboy"},"content":"    public void execute_birthdayalarm_success() {"},{"lineNumber":20,"author":{"gitID":"chilipadiboy"},"content":"        CommandResult result \u003d new BirthdayAlarmCommand().execute();"},{"lineNumber":21,"author":{"gitID":"chilipadiboy"},"content":"        assertEquals(SHOWING_REMINDERS_MESSAGE, result.feedbackToUser);"},{"lineNumber":22,"author":{"gitID":"chilipadiboy"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowBirthdayAlarmRequestEvent);"},{"lineNumber":23,"author":{"gitID":"chilipadiboy"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":24,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"chilipadiboy"},"content":"}"}],"authorContributionMap":{"chilipadiboy":25}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":7,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_WEBSITE;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":39,"author":{"gitID":"chilipadiboy"},"content":"    public static final String VALID_BIRTHDAY_AMY \u003d \"15/02/1992\";"},{"lineNumber":40,"author":{"gitID":"chilipadiboy"},"content":"    public static final String VALID_BIRTHDAY_BOB \u003d \"15/02/1993\";"},{"lineNumber":41,"author":{"gitID":"chilipadiboy"},"content":"    public static final String VALID_WEBSITE_AMY \u003d \"https://www.website.com/\";"},{"lineNumber":42,"author":{"gitID":"Jemereny"},"content":"    public static final String VALID_WEBSITE_BOB \u003d \"http://www.yahoo.com/\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":45,"author":{"gitID":"chilipadiboy"},"content":"    public static final String VALID_REMARK_AMY \u003d \"Like skiing.\";"},{"lineNumber":46,"author":{"gitID":"chilipadiboy"},"content":"    public static final String VALID_REMARK_BOB \u003d \"Favourite pastime: Food\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":56,"author":{"gitID":"chilipadiboy"},"content":"    public static final String BIRTHDAY_DESC_AMY \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_AMY;"},{"lineNumber":57,"author":{"gitID":"chilipadiboy"},"content":"    public static final String BIRTHDAY_DESC_BOB \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_BOB;"},{"lineNumber":58,"author":{"gitID":"Jemereny"},"content":"    public static final String WEBSITE_DESC_AMY \u003d \" \" + PREFIX_WEBSITE + VALID_WEBSITE_AMY;"},{"lineNumber":59,"author":{"gitID":"Jemereny"},"content":"    public static final String WEBSITE_DESC_BOB \u003d \" \" + PREFIX_WEBSITE + VALID_WEBSITE_BOB;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"chrisboo"},"content":"    public static final String EMPTY_PHONE \u003d null;"},{"lineNumber":64,"author":{"gitID":"chrisboo"},"content":"    public static final String EMPTY_EMAIL \u003d null;"},{"lineNumber":65,"author":{"gitID":"chrisboo"},"content":"    public static final String EMPTY_ADDRESS \u003d null;"},{"lineNumber":66,"author":{"gitID":"Jemereny"},"content":"    public static final String EMPTY_WEBSITE \u003d null;"},{"lineNumber":67,"author":{"gitID":"chrisboo"},"content":"    public static final String EMPTY_BIRTHDAY \u003d null;"},{"lineNumber":68,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":73,"author":{"gitID":"chilipadiboy"},"content":"    public static final String INVALID_BIRTHDAY_DESC \u003d \" \""},{"lineNumber":74,"author":{"gitID":"chilipadiboy"},"content":"                                + PREFIX_BIRTHDAY + \"265/01/19999\"; // dates should be in dd/MM/yyyy format"},{"lineNumber":75,"author":{"gitID":"Jemereny"},"content":"    public static final String INVALID_WEBSITE_DESC \u003d \" \" + PREFIX_WEBSITE + \"www.yahoo.com\";"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":83,"author":{"gitID":"chilipadiboy"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":84,"author":{"gitID":"chilipadiboy"},"content":"                .withBirthday(VALID_BIRTHDAY_AMY).withWebsite(VALID_WEBSITE_AMY)"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":87,"author":{"gitID":"chilipadiboy"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":88,"author":{"gitID":"chilipadiboy"},"content":"                .withBirthday(VALID_BIRTHDAY_BOB).withWebsite(VALID_WEBSITE_BOB)"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":117,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        List\u003cReadOnlyPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the first person in the {@code model}\u0027s address book."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public static void showFirstPersonOnly(Model model) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        ReadOnlyPerson person \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assert model.getFilteredPersonList().size() \u003d\u003d 1;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        ReadOnlyPerson firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chilipadiboy":20,"Jemereny":5,"chrisboo":5,"-":122}},{"path":"src/test/java/seedu/address/logic/commands/NewCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chrisboo"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":3,"author":{"gitID":"chrisboo"},"content":"import static junit.framework.TestCase.assertFalse;"},{"lineNumber":4,"author":{"gitID":"chrisboo"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"chrisboo"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"chrisboo"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"chrisboo"},"content":"import static seedu.address.testutil.TestUtil.getFilePathInDataFolder;"},{"lineNumber":8,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":9,"author":{"gitID":"chrisboo"},"content":"import java.io.File;"},{"lineNumber":10,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":11,"author":{"gitID":"chrisboo"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":13,"author":{"gitID":"chrisboo"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":16,"author":{"gitID":"chrisboo"},"content":"//@@author chrisboo"},{"lineNumber":17,"author":{"gitID":"chrisboo"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"chrisboo"},"content":" * Contains integration tests (interaction with the Model) for {@code NewCommand}."},{"lineNumber":19,"author":{"gitID":"chrisboo"},"content":" */"},{"lineNumber":20,"author":{"gitID":"chrisboo"},"content":"public class NewCommandTest {"},{"lineNumber":21,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":22,"author":{"gitID":"chrisboo"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"chrisboo"},"content":"    public void execute_fileNotExist_success() {"},{"lineNumber":24,"author":{"gitID":"chrisboo"},"content":"        assertExecutionSuccess(getFilePathInDataFolder(\"nonExistentFile.xml\"));"},{"lineNumber":25,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":27,"author":{"gitID":"chrisboo"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"chrisboo"},"content":"    public void execute_fileExists_failure() {"},{"lineNumber":29,"author":{"gitID":"chrisboo"},"content":"        assertExecutionFailure(getFilePathInDataFolder(\"sampleData.xml\"), Messages.MESSAGE_EXISTING_FILE);"},{"lineNumber":30,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":32,"author":{"gitID":"chrisboo"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"chrisboo"},"content":"    public void equals() {"},{"lineNumber":34,"author":{"gitID":"chrisboo"},"content":"        File firstFile \u003d new File(getFilePathInDataFolder(\"sampleData.xml\"));"},{"lineNumber":35,"author":{"gitID":"chrisboo"},"content":"        File secondFile \u003d new File(getFilePathInDataFolder(\"sampleData2.xml\"));"},{"lineNumber":36,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":37,"author":{"gitID":"chrisboo"},"content":"        NewCommand newFirstCommand \u003d new NewCommand(firstFile);"},{"lineNumber":38,"author":{"gitID":"chrisboo"},"content":"        NewCommand newSecondCommand \u003d new NewCommand(secondFile);"},{"lineNumber":39,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":40,"author":{"gitID":"chrisboo"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitID":"chrisboo"},"content":"        assertTrue(newFirstCommand.equals(newFirstCommand));"},{"lineNumber":42,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":43,"author":{"gitID":"chrisboo"},"content":"        // same values -\u003e returns true"},{"lineNumber":44,"author":{"gitID":"chrisboo"},"content":"        NewCommand newFirstCommandCopy \u003d new NewCommand(firstFile);"},{"lineNumber":45,"author":{"gitID":"chrisboo"},"content":"        assertTrue(newFirstCommand.equals(newFirstCommandCopy));"},{"lineNumber":46,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":47,"author":{"gitID":"chrisboo"},"content":"        // different types -\u003e returns false"},{"lineNumber":48,"author":{"gitID":"chrisboo"},"content":"        assertFalse(newFirstCommand.equals(1));"},{"lineNumber":49,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":50,"author":{"gitID":"chrisboo"},"content":"        // null -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"chrisboo"},"content":"        assertFalse(newFirstCommand.equals(null));"},{"lineNumber":52,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":53,"author":{"gitID":"chrisboo"},"content":"        // different person -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"chrisboo"},"content":"        assertFalse(newFirstCommand.equals(newSecondCommand));"},{"lineNumber":55,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":57,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"chrisboo"},"content":"     * Executes a {@code NewCommand} with the given {@code filePath}."},{"lineNumber":59,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"chrisboo"},"content":"    private void assertExecutionSuccess(String filePath) {"},{"lineNumber":61,"author":{"gitID":"chrisboo"},"content":"        NewCommand newCommand \u003d new NewCommand(new File(filePath));"},{"lineNumber":62,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":63,"author":{"gitID":"chrisboo"},"content":"        try {"},{"lineNumber":64,"author":{"gitID":"chrisboo"},"content":"            CommandResult commandResult \u003d newCommand.execute();"},{"lineNumber":65,"author":{"gitID":"chrisboo"},"content":"            assertEquals(String.format(NewCommand.MESSAGE_OPEN_DEATHNOTE_SUCCESS, filePath),"},{"lineNumber":66,"author":{"gitID":"chrisboo"},"content":"                commandResult.feedbackToUser);"},{"lineNumber":67,"author":{"gitID":"chrisboo"},"content":"        } catch (CommandException ce) {"},{"lineNumber":68,"author":{"gitID":"chrisboo"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":69,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":72,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":74,"author":{"gitID":"chrisboo"},"content":"     * Executes a {@code NewCommand} with the given {@code filePath}, and checks that {@code CommandException} is"},{"lineNumber":75,"author":{"gitID":"chrisboo"},"content":"     * thrown with {@code expectedMessage}."},{"lineNumber":76,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"chrisboo"},"content":"    private void assertExecutionFailure(String filePath, String expectedMessage) {"},{"lineNumber":78,"author":{"gitID":"chrisboo"},"content":"        NewCommand newCommand \u003d new NewCommand(new File(filePath));"},{"lineNumber":79,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":80,"author":{"gitID":"chrisboo"},"content":"        try {"},{"lineNumber":81,"author":{"gitID":"chrisboo"},"content":"            newCommand.execute();"},{"lineNumber":82,"author":{"gitID":"chrisboo"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":83,"author":{"gitID":"chrisboo"},"content":"        } catch (CommandException ce) {"},{"lineNumber":84,"author":{"gitID":"chrisboo"},"content":"            assertEquals(ce.getMessage(), expectedMessage);"},{"lineNumber":85,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"chrisboo"},"content":"}"},{"lineNumber":88,"author":{"gitID":"chrisboo"},"content":"//@@author"}],"authorContributionMap":{"chrisboo":87,"-":1}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":15,"author":{"gitID":"chrisboo"},"content":"import seedu.address.logic.commands.FindCommand.FindPersonDescriptor;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"chrisboo"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class FindCommandTest {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":31,"author":{"gitID":"chrisboo"},"content":"        //@@author chrisboo"},{"lineNumber":32,"author":{"gitID":"chrisboo"},"content":"        FindPersonDescriptor firstPerson \u003d new FindPersonDescriptor();"},{"lineNumber":33,"author":{"gitID":"chrisboo"},"content":"        FindPersonDescriptor secondPerson \u003d new FindPersonDescriptor();"},{"lineNumber":34,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":35,"author":{"gitID":"chrisboo"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"chrisboo"},"content":"            firstPerson.setName(new Name(\"Amy\"));"},{"lineNumber":37,"author":{"gitID":"chrisboo"},"content":"            secondPerson.setName(new Name(\"Bob\"));"},{"lineNumber":38,"author":{"gitID":"chrisboo"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":39,"author":{"gitID":"chrisboo"},"content":"            e.printStackTrace();"},{"lineNumber":40,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":42,"author":{"gitID":"chrisboo"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPerson);"},{"lineNumber":43,"author":{"gitID":"chrisboo"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPerson);"},{"lineNumber":44,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":45,"author":{"gitID":"chrisboo"},"content":"        // same object -\u003e returns true"},{"lineNumber":46,"author":{"gitID":"chrisboo"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":47,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":48,"author":{"gitID":"chrisboo"},"content":"        // same values -\u003e returns true"},{"lineNumber":49,"author":{"gitID":"chrisboo"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPerson);"},{"lineNumber":50,"author":{"gitID":"chrisboo"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":51,"author":{"gitID":"chrisboo"},"content":"        //@@author"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"chrisboo"},"content":"    private FindCommand prepareCommand(FindPersonDescriptor descriptor) {"},{"lineNumber":67,"author":{"gitID":"chrisboo"},"content":"        FindCommand command \u003d new FindCommand(descriptor);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * - the {@code FilteredList\u003cReadOnlyPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(FindCommand command, String expectedMessage, List\u003cReadOnlyPerson\u003e expectedList) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":25,"-":61}},{"path":"src/test/java/seedu/address/logic/commands/OpenCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chrisboo"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":3,"author":{"gitID":"chrisboo"},"content":"import static junit.framework.TestCase.assertFalse;"},{"lineNumber":4,"author":{"gitID":"chrisboo"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"chrisboo"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"chrisboo"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"chrisboo"},"content":"import static seedu.address.testutil.TestUtil.getFilePathInDataFolder;"},{"lineNumber":8,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":9,"author":{"gitID":"chrisboo"},"content":"import java.io.File;"},{"lineNumber":10,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":11,"author":{"gitID":"chrisboo"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":13,"author":{"gitID":"chrisboo"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":16,"author":{"gitID":"chrisboo"},"content":"//@@author chrisboo"},{"lineNumber":17,"author":{"gitID":"chrisboo"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"chrisboo"},"content":" * Contains integration tests (interaction with the Model) for {@code OpenCommand}."},{"lineNumber":19,"author":{"gitID":"chrisboo"},"content":" */"},{"lineNumber":20,"author":{"gitID":"chrisboo"},"content":"public class OpenCommandTest {"},{"lineNumber":21,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":22,"author":{"gitID":"chrisboo"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"chrisboo"},"content":"    public void execute_fileExists_success() {"},{"lineNumber":24,"author":{"gitID":"chrisboo"},"content":"        assertExecutionSuccess(getFilePathInDataFolder(\"sampleData.xml\"));"},{"lineNumber":25,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":27,"author":{"gitID":"chrisboo"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"chrisboo"},"content":"    public void execute_fileNotExist_failure() {"},{"lineNumber":29,"author":{"gitID":"chrisboo"},"content":"        assertExecutionFailure("},{"lineNumber":30,"author":{"gitID":"chrisboo"},"content":"            getFilePathInDataFolder(\"nonExistentFile.xml\"), Messages.MESSAGE_INVALID_FILE_PATH);"},{"lineNumber":31,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":33,"author":{"gitID":"chrisboo"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"chrisboo"},"content":"    public void equals() {"},{"lineNumber":35,"author":{"gitID":"chrisboo"},"content":"        File firstFile \u003d new File(getFilePathInDataFolder(\"sampleData.xml\"));"},{"lineNumber":36,"author":{"gitID":"chrisboo"},"content":"        File secondFile \u003d new File(getFilePathInDataFolder(\"sampleData2.xml\"));"},{"lineNumber":37,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":38,"author":{"gitID":"chrisboo"},"content":"        OpenCommand openFirstCommand \u003d new OpenCommand(firstFile);"},{"lineNumber":39,"author":{"gitID":"chrisboo"},"content":"        OpenCommand openSecondCommand \u003d new OpenCommand(secondFile);"},{"lineNumber":40,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":41,"author":{"gitID":"chrisboo"},"content":"        // same object -\u003e returns true"},{"lineNumber":42,"author":{"gitID":"chrisboo"},"content":"        assertTrue(openFirstCommand.equals(openFirstCommand));"},{"lineNumber":43,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":44,"author":{"gitID":"chrisboo"},"content":"        // same values -\u003e returns true"},{"lineNumber":45,"author":{"gitID":"chrisboo"},"content":"        OpenCommand openFirstCommandCopy \u003d new OpenCommand(firstFile);"},{"lineNumber":46,"author":{"gitID":"chrisboo"},"content":"        assertTrue(openFirstCommand.equals(openFirstCommandCopy));"},{"lineNumber":47,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":48,"author":{"gitID":"chrisboo"},"content":"        // different types -\u003e returns false"},{"lineNumber":49,"author":{"gitID":"chrisboo"},"content":"        assertFalse(openFirstCommand.equals(1));"},{"lineNumber":50,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":51,"author":{"gitID":"chrisboo"},"content":"        // null -\u003e returns false"},{"lineNumber":52,"author":{"gitID":"chrisboo"},"content":"        assertFalse(openFirstCommand.equals(null));"},{"lineNumber":53,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":54,"author":{"gitID":"chrisboo"},"content":"        // different person -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"chrisboo"},"content":"        assertFalse(openFirstCommand.equals(openSecondCommand));"},{"lineNumber":56,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":58,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"chrisboo"},"content":"     * Executes a {@code OpenCommand} with the given {@code filePath}."},{"lineNumber":60,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"chrisboo"},"content":"    private void assertExecutionSuccess(String filePath) {"},{"lineNumber":62,"author":{"gitID":"chrisboo"},"content":"        OpenCommand openCommand \u003d new OpenCommand(new File(filePath));"},{"lineNumber":63,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":64,"author":{"gitID":"chrisboo"},"content":"        try {"},{"lineNumber":65,"author":{"gitID":"chrisboo"},"content":"            CommandResult commandResult \u003d openCommand.execute();"},{"lineNumber":66,"author":{"gitID":"chrisboo"},"content":"            assertEquals(String.format(OpenCommand.MESSAGE_OPEN_DEATHNOTE_SUCCESS, filePath),"},{"lineNumber":67,"author":{"gitID":"chrisboo"},"content":"                commandResult.feedbackToUser);"},{"lineNumber":68,"author":{"gitID":"chrisboo"},"content":"        } catch (CommandException ce) {"},{"lineNumber":69,"author":{"gitID":"chrisboo"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":70,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":73,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"chrisboo"},"content":"     * Executes a {@code OpenCommand} with the given {@code filePath}, and checks that {@code CommandException} is"},{"lineNumber":76,"author":{"gitID":"chrisboo"},"content":"     * thrown with {@code expectedMessage}."},{"lineNumber":77,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"chrisboo"},"content":"    private void assertExecutionFailure(String filePath, String expectedMessage) {"},{"lineNumber":79,"author":{"gitID":"chrisboo"},"content":"        OpenCommand openCommand \u003d new OpenCommand(new File(filePath));"},{"lineNumber":80,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":81,"author":{"gitID":"chrisboo"},"content":"        try {"},{"lineNumber":82,"author":{"gitID":"chrisboo"},"content":"            openCommand.execute();"},{"lineNumber":83,"author":{"gitID":"chrisboo"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":84,"author":{"gitID":"chrisboo"},"content":"        } catch (CommandException ce) {"},{"lineNumber":85,"author":{"gitID":"chrisboo"},"content":"            assertEquals(ce.getMessage(), expectedMessage);"},{"lineNumber":86,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"chrisboo"},"content":"}"},{"lineNumber":89,"author":{"gitID":"chrisboo"},"content":"//@@author"}],"authorContributionMap":{"chrisboo":88,"-":1}},{"path":"src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"chrisboo"},"content":"import static seedu.address.storage.JsonUserPrefsStorage.updateUserPrefs;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class JsonUserPrefsStorageTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/JsonUserPrefsStorageTest/\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        readUserPrefs(null);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":52,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":53,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + userPrefsFileInTestDataFolder"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(new UserPrefs(), actual);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        userPrefs.setGuiSettings(1000, 500, 300, 100);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookFilePath(\"addressbook.xml\");"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookName(\"TypicalAddressBookName\");"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        saveUserPrefs(null, \"SomeFile.json\");"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        saveUserPrefs(new UserPrefs(), null);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                    .saveUserPrefs(userPrefs);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        original.setGuiSettings(1200, 200, 0, 2);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        String pefsFilePath \u003d testFolder.getRoot() + File.separator + \"TempPrefs.json\";"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        original.setGuiSettings(5, 5, 5, 5);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"chrisboo"},"content":"    //@@author chrisboo"},{"lineNumber":137,"author":{"gitID":"chrisboo"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"chrisboo"},"content":"    public void updateUserPrefsTest() throws DataConversionException, IOException {"},{"lineNumber":139,"author":{"gitID":"chrisboo"},"content":"        UserPrefs original \u003d getTypicalUserPrefs();"},{"lineNumber":140,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":141,"author":{"gitID":"chrisboo"},"content":"        String userPrefsFilePath \u003d testFolder.getRoot() + File.separator + \"TempPrefs.json\";"},{"lineNumber":142,"author":{"gitID":"chrisboo"},"content":"        JsonUserPrefsStorage.saveUserPrefs(original, userPrefsFilePath);"},{"lineNumber":143,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":144,"author":{"gitID":"chrisboo"},"content":"        String updatedAddressBookFilePath \u003d \"updatedaddressbook.xml\";"},{"lineNumber":145,"author":{"gitID":"chrisboo"},"content":"        String updatedAddressBookFileName \u003d \"updatedAddressBookName\";"},{"lineNumber":146,"author":{"gitID":"chrisboo"},"content":"        original.setAddressBookFilePath(updatedAddressBookFilePath);"},{"lineNumber":147,"author":{"gitID":"chrisboo"},"content":"        original.setAddressBookName(updatedAddressBookFileName);"},{"lineNumber":148,"author":{"gitID":"chrisboo"},"content":"        updateUserPrefs(userPrefsFilePath, updatedAddressBookFilePath, updatedAddressBookFileName);"},{"lineNumber":149,"author":{"gitID":"chrisboo"},"content":"        UserPrefs readBack \u003d JsonUserPrefsStorage.readUserPrefs(userPrefsFilePath).get();"},{"lineNumber":150,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":151,"author":{"gitID":"chrisboo"},"content":"        assertEquals(readBack, original);"},{"lineNumber":152,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"chrisboo"},"content":"    //@@author"},{"lineNumber":154,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":19,"-":135}},{"path":"src/test/java/seedu/address/model/person/NameTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class NameTest {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public void isValidName() {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":13,"author":{"gitID":"chrisboo"},"content":"        assertFalse(Name.isValidName(null));"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"        // valid name"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":1,"-":25}},{"path":"src/test/java/seedu/address/logic/commands/RemarkCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chilipadiboy"},"content":"//@@author chilipadiboy"},{"lineNumber":2,"author":{"gitID":"chilipadiboy"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":4,"author":{"gitID":"chilipadiboy"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"chilipadiboy"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_AMY;"},{"lineNumber":7,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"},{"lineNumber":8,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":9,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":10,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":11,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":13,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":15,"author":{"gitID":"chilipadiboy"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":17,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":27,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":28,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":29,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":30,"author":{"gitID":"chilipadiboy"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"chilipadiboy"},"content":" * Contains integration tests (interaction with the Model) and unit tests for RemarkCommand."},{"lineNumber":32,"author":{"gitID":"chilipadiboy"},"content":" */"},{"lineNumber":33,"author":{"gitID":"chilipadiboy"},"content":"public class RemarkCommandTest {"},{"lineNumber":34,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":35,"author":{"gitID":"chilipadiboy"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":37,"author":{"gitID":"chilipadiboy"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"chilipadiboy"},"content":"    public void execute_addRemark_success() throws Exception {"},{"lineNumber":39,"author":{"gitID":"chilipadiboy"},"content":"        Person editedPerson \u003d new PersonBuilder(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()))"},{"lineNumber":40,"author":{"gitID":"chilipadiboy"},"content":"                .withRemark(\"Some remark\").build();"},{"lineNumber":41,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":42,"author":{"gitID":"chilipadiboy"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(INDEX_FIRST_PERSON, editedPerson.getRemark().value);"},{"lineNumber":43,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":44,"author":{"gitID":"chilipadiboy"},"content":"        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, editedPerson);"},{"lineNumber":45,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":46,"author":{"gitID":"chilipadiboy"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":48,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":49,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"},{"lineNumber":50,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":52,"author":{"gitID":"chilipadiboy"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"chilipadiboy"},"content":"    public void execute_deleteRemark_success() throws Exception {"},{"lineNumber":54,"author":{"gitID":"chilipadiboy"},"content":"        Person editedPerson \u003d new Person(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"},{"lineNumber":55,"author":{"gitID":"chilipadiboy"},"content":"        editedPerson.setRemark(new Remark(\"\"));"},{"lineNumber":56,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":57,"author":{"gitID":"chilipadiboy"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(INDEX_FIRST_PERSON, editedPerson.getRemark().toString());"},{"lineNumber":58,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":59,"author":{"gitID":"chilipadiboy"},"content":"        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_DELETE_REMARK_SUCCESS, editedPerson);"},{"lineNumber":60,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":61,"author":{"gitID":"chilipadiboy"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":62,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":63,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":64,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"},{"lineNumber":65,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":67,"author":{"gitID":"chilipadiboy"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"chilipadiboy"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":69,"author":{"gitID":"chilipadiboy"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":70,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":71,"author":{"gitID":"chilipadiboy"},"content":"        ReadOnlyPerson personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":72,"author":{"gitID":"chilipadiboy"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList)"},{"lineNumber":73,"author":{"gitID":"chilipadiboy"},"content":"                .withRemark(\"Some remark\").build();"},{"lineNumber":74,"author":{"gitID":"chilipadiboy"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(INDEX_FIRST_PERSON, editedPerson.getRemark().value);"},{"lineNumber":75,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":76,"author":{"gitID":"chilipadiboy"},"content":"        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, editedPerson);"},{"lineNumber":77,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":78,"author":{"gitID":"chilipadiboy"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":79,"author":{"gitID":"chilipadiboy"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":80,"author":{"gitID":"chilipadiboy"},"content":"        showFirstPersonOnly(expectedModel);"},{"lineNumber":81,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":82,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"},{"lineNumber":83,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":85,"author":{"gitID":"chilipadiboy"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"chilipadiboy"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() throws Exception {"},{"lineNumber":87,"author":{"gitID":"chilipadiboy"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":88,"author":{"gitID":"chilipadiboy"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(outOfBoundIndex, VALID_REMARK_BOB);"},{"lineNumber":89,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":90,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":91,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":93,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"chilipadiboy"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":95,"author":{"gitID":"chilipadiboy"},"content":"     * but smaller than size of address book"},{"lineNumber":96,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"chilipadiboy"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"chilipadiboy"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() throws Exception {"},{"lineNumber":99,"author":{"gitID":"chilipadiboy"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":100,"author":{"gitID":"chilipadiboy"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":101,"author":{"gitID":"chilipadiboy"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":102,"author":{"gitID":"chilipadiboy"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":103,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":104,"author":{"gitID":"chilipadiboy"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(outOfBoundIndex, VALID_REMARK_BOB);"},{"lineNumber":105,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":106,"author":{"gitID":"chilipadiboy"},"content":"        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":107,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":109,"author":{"gitID":"chilipadiboy"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"chilipadiboy"},"content":"    public void equals() {"},{"lineNumber":111,"author":{"gitID":"chilipadiboy"},"content":"        final RemarkCommand standardCommand \u003d new RemarkCommand(INDEX_FIRST_PERSON, new Remark(VALID_REMARK_AMY));"},{"lineNumber":112,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":113,"author":{"gitID":"chilipadiboy"},"content":"        // same values -\u003e returns true"},{"lineNumber":114,"author":{"gitID":"chilipadiboy"},"content":"        RemarkCommand commandWithSameValues \u003d new RemarkCommand(INDEX_FIRST_PERSON, new Remark(VALID_REMARK_AMY));"},{"lineNumber":115,"author":{"gitID":"chilipadiboy"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":116,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":117,"author":{"gitID":"chilipadiboy"},"content":"        // same object -\u003e returns true"},{"lineNumber":118,"author":{"gitID":"chilipadiboy"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":119,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":120,"author":{"gitID":"chilipadiboy"},"content":"        // null -\u003e returns false"},{"lineNumber":121,"author":{"gitID":"chilipadiboy"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":122,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":123,"author":{"gitID":"chilipadiboy"},"content":"        // different types -\u003e returns false"},{"lineNumber":124,"author":{"gitID":"chilipadiboy"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":125,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":126,"author":{"gitID":"chilipadiboy"},"content":"        // different index -\u003e returns false"},{"lineNumber":127,"author":{"gitID":"chilipadiboy"},"content":"        assertFalse(standardCommand.equals(new RemarkCommand(INDEX_SECOND_PERSON, new Remark(VALID_REMARK_AMY))));"},{"lineNumber":128,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":129,"author":{"gitID":"chilipadiboy"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":130,"author":{"gitID":"chilipadiboy"},"content":"        assertFalse(standardCommand.equals(new RemarkCommand(INDEX_FIRST_PERSON, new Remark(VALID_REMARK_BOB))));"},{"lineNumber":131,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":133,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"chilipadiboy"},"content":"     * Returns an {@code RemarkCommand} with parameters {@code index} and {@code remark}"},{"lineNumber":135,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"chilipadiboy"},"content":"    private RemarkCommand prepareCommand(Index index, String remark) {"},{"lineNumber":137,"author":{"gitID":"chilipadiboy"},"content":"        RemarkCommand remarkCommand \u003d new RemarkCommand(index, new Remark(remark));"},{"lineNumber":138,"author":{"gitID":"chilipadiboy"},"content":"        remarkCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":139,"author":{"gitID":"chilipadiboy"},"content":"        return remarkCommand;"},{"lineNumber":140,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"chilipadiboy"},"content":"}"}],"authorContributionMap":{"chilipadiboy":141}},{"path":"src/test/java/seedu/address/model/person/PictureTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Jemereny"},"content":"//@@author Jemereny"},{"lineNumber":2,"author":{"gitID":"Jemereny"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":4,"author":{"gitID":"Jemereny"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Jemereny"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":7,"author":{"gitID":"Jemereny"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":9,"author":{"gitID":"Jemereny"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"Jemereny"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"Jemereny"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":13,"author":{"gitID":"Jemereny"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"Jemereny"},"content":"import seedu.address.testutil.PictureUtil;"},{"lineNumber":15,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":16,"author":{"gitID":"Jemereny"},"content":"public class PictureTest {"},{"lineNumber":17,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":18,"author":{"gitID":"Jemereny"},"content":"    @Rule"},{"lineNumber":19,"author":{"gitID":"Jemereny"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":20,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":21,"author":{"gitID":"Jemereny"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"Jemereny"},"content":"    public void isValidPicture() {"},{"lineNumber":23,"author":{"gitID":"Jemereny"},"content":"        // invalid pictures"},{"lineNumber":24,"author":{"gitID":"Jemereny"},"content":"        assertFalse(Picture.isValidPicture(\"default_profile\"));"},{"lineNumber":25,"author":{"gitID":"Jemereny"},"content":"        assertFalse(Picture.isValidPicture(\"\"));"},{"lineNumber":26,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":27,"author":{"gitID":"Jemereny"},"content":"        // Sample data"},{"lineNumber":28,"author":{"gitID":"Jemereny"},"content":"        assertTrue(Picture.isValidPicture(Picture.DEFAULT_ALEX));"},{"lineNumber":29,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":30,"author":{"gitID":"Jemereny"},"content":"        // valid pictures"},{"lineNumber":31,"author":{"gitID":"Jemereny"},"content":"        assertTrue(Picture.isValidPicture(null));"},{"lineNumber":32,"author":{"gitID":"Jemereny"},"content":"        assertTrue(Picture.isValidPicture(PictureUtil.getValidPictureString()));"},{"lineNumber":33,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":35,"author":{"gitID":"Jemereny"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"Jemereny"},"content":"    public void copyImageTest() throws Exception {"},{"lineNumber":37,"author":{"gitID":"Jemereny"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":38,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":39,"author":{"gitID":"Jemereny"},"content":"        // Valid src location"},{"lineNumber":40,"author":{"gitID":"Jemereny"},"content":"        File src \u003d PictureUtil.getValidFileSrc();"},{"lineNumber":41,"author":{"gitID":"Jemereny"},"content":"        File dst \u003d PictureUtil.getValidFileDstWithFilename();"},{"lineNumber":42,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":43,"author":{"gitID":"Jemereny"},"content":"        Picture.copyImage(src, dst);"},{"lineNumber":44,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":45,"author":{"gitID":"Jemereny"},"content":"        // Illegal src location"},{"lineNumber":46,"author":{"gitID":"Jemereny"},"content":"        src \u003d PictureUtil.getInvalidFileSrc();"},{"lineNumber":47,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":48,"author":{"gitID":"Jemereny"},"content":"        Picture.copyImage(src, dst);"},{"lineNumber":49,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":51,"author":{"gitID":"Jemereny"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"Jemereny"},"content":"    public void resizeAndSaveImageTest() throws Exception {"},{"lineNumber":53,"author":{"gitID":"Jemereny"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":54,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":55,"author":{"gitID":"Jemereny"},"content":"        // Valid file to read"},{"lineNumber":56,"author":{"gitID":"Jemereny"},"content":"        File file \u003d PictureUtil.getValidFileSrc();"},{"lineNumber":57,"author":{"gitID":"Jemereny"},"content":"        String newFileName \u003d PictureUtil.getValidFilename();"},{"lineNumber":58,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":59,"author":{"gitID":"Jemereny"},"content":"        Picture.resizeAndSaveImage(file, newFileName);"},{"lineNumber":60,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":61,"author":{"gitID":"Jemereny"},"content":"        // Invalid file to read"},{"lineNumber":62,"author":{"gitID":"Jemereny"},"content":"        file \u003d PictureUtil.getInvalidFileSrc();"},{"lineNumber":63,"author":{"gitID":"Jemereny"},"content":"        Picture.resizeAndSaveImage(file, newFileName);"},{"lineNumber":64,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":66,"author":{"gitID":"Jemereny"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"Jemereny"},"content":"    public void getPictureLocationTest() throws Exception {"},{"lineNumber":68,"author":{"gitID":"Jemereny"},"content":"        // Null test: return default photo"},{"lineNumber":69,"author":{"gitID":"Jemereny"},"content":"        Picture picture \u003d new Picture(null);"},{"lineNumber":70,"author":{"gitID":"Jemereny"},"content":"        assertPictureLocationTrue(Picture.DEFAULT_PICTURE_LOCATION + Picture.DEFAULT_PICTURE,"},{"lineNumber":71,"author":{"gitID":"Jemereny"},"content":"                picture.getPictureLocation());"},{"lineNumber":72,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":73,"author":{"gitID":"Jemereny"},"content":"        // Sample data test"},{"lineNumber":74,"author":{"gitID":"Jemereny"},"content":"        picture \u003d new Picture(Picture.DEFAULT_ALEX);"},{"lineNumber":75,"author":{"gitID":"Jemereny"},"content":"        assertPictureLocationTrue(Picture.DEFAULT_PICTURE_LOCATION + Picture.DEFAULT_ALEX,"},{"lineNumber":76,"author":{"gitID":"Jemereny"},"content":"                picture.getPictureLocation());"},{"lineNumber":77,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":79,"author":{"gitID":"Jemereny"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"Jemereny"},"content":"     * Asserts true if expected string is equals actual string"},{"lineNumber":81,"author":{"gitID":"Jemereny"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"Jemereny"},"content":"    public static void assertPictureLocationTrue(String expected, String actual) {"},{"lineNumber":83,"author":{"gitID":"Jemereny"},"content":"        assertTrue(expected.equals(actual));"},{"lineNumber":84,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"Jemereny"},"content":"}"}],"authorContributionMap":{"Jemereny":85}},{"path":"src/test/java/seedu/address/model/person/PhoneTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class PhoneTest {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public void isValidPhone() {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        // invalid phone numbers"},{"lineNumber":13,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"\")); // empty string"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"        // valid phone numbers"},{"lineNumber":21,"author":{"gitID":"chrisboo"},"content":"        assertTrue(Phone.isValidPhone(null));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":1,"-":25}},{"path":"src/test/java/seedu/address/model/person/BirthdayTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chilipadiboy"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":3,"author":{"gitID":"Jemereny"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":6,"author":{"gitID":"chilipadiboy"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":8,"author":{"gitID":"chilipadiboy"},"content":"public class BirthdayTest {"},{"lineNumber":9,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":10,"author":{"gitID":"chrisboo"},"content":"    //@@author chrisboo"},{"lineNumber":11,"author":{"gitID":"chrisboo"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"chrisboo"},"content":"    public void isValidBirthday() {"},{"lineNumber":13,"author":{"gitID":"chrisboo"},"content":"        // invalid Birthdays"},{"lineNumber":14,"author":{"gitID":"chrisboo"},"content":"        assertFalse(Birthday.isValidBirthday(\" \")); // spaces only"},{"lineNumber":15,"author":{"gitID":"chrisboo"},"content":"        assertFalse(Birthday.isValidBirthday(\"\"));  // blank"},{"lineNumber":16,"author":{"gitID":"chrisboo"},"content":"        assertFalse(Birthday.isValidBirthday(\"1 January 1999\")); // valid date but invalid format"},{"lineNumber":17,"author":{"gitID":"chrisboo"},"content":"        assertFalse(Birthday.isValidBirthday(\"32/01/1999\"));     // invalid date but valid format"},{"lineNumber":18,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":19,"author":{"gitID":"chrisboo"},"content":"        // valid Birthdays"},{"lineNumber":20,"author":{"gitID":"chrisboo"},"content":"        assertTrue(Birthday.isValidBirthday(null));"},{"lineNumber":21,"author":{"gitID":"chrisboo"},"content":"        assertTrue(Birthday.isValidBirthday(\"29/02/2000\")); // test leap year"},{"lineNumber":22,"author":{"gitID":"chrisboo"},"content":"        assertTrue(Birthday.isValidBirthday(\"31/12/1993\"));"},{"lineNumber":23,"author":{"gitID":"chrisboo"},"content":"        assertTrue(Birthday.isValidBirthday(\"01/01/1994\"));"},{"lineNumber":24,"author":{"gitID":"chrisboo"},"content":"        assertTrue(Birthday.isValidBirthday(\"1/1/1994\"));"},{"lineNumber":25,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"chrisboo"},"content":"    //@@author"},{"lineNumber":27,"author":{"gitID":"chilipadiboy"},"content":"}"}],"authorContributionMap":{"chilipadiboy":8,"Jemereny":1,"chrisboo":17,"-":1}},{"path":"src/test/java/seedu/address/model/person/RemarkTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"chilipadiboy"},"content":"public class RemarkTest {"},{"lineNumber":9,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":10,"author":{"gitID":"chilipadiboy"},"content":"    @Test"},{"lineNumber":11,"author":{"gitID":"chilipadiboy"},"content":"    public void equals() {"},{"lineNumber":12,"author":{"gitID":"chilipadiboy"},"content":"        Remark remark \u003d new Remark(\"Hello\");"},{"lineNumber":13,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":14,"author":{"gitID":"chilipadiboy"},"content":"        // same object -\u003e returns true"},{"lineNumber":15,"author":{"gitID":"chilipadiboy"},"content":"        assertTrue(remark.equals(remark));"},{"lineNumber":16,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":17,"author":{"gitID":"chilipadiboy"},"content":"        // same values -\u003e returns true"},{"lineNumber":18,"author":{"gitID":"chilipadiboy"},"content":"        Remark remarkCopy \u003d new Remark(remark.value);"},{"lineNumber":19,"author":{"gitID":"chilipadiboy"},"content":"        assertTrue(remark.equals(remarkCopy));"},{"lineNumber":20,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":21,"author":{"gitID":"chilipadiboy"},"content":"        // different types -\u003e returns false"},{"lineNumber":22,"author":{"gitID":"chilipadiboy"},"content":"        assertFalse(remark.equals(1));"},{"lineNumber":23,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":24,"author":{"gitID":"chilipadiboy"},"content":"        // null -\u003e returns false"},{"lineNumber":25,"author":{"gitID":"chilipadiboy"},"content":"        assertFalse(remark.equals(null));"},{"lineNumber":26,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":27,"author":{"gitID":"chilipadiboy"},"content":"        // different person -\u003e returns false"},{"lineNumber":28,"author":{"gitID":"chilipadiboy"},"content":"        Remark differentRemark \u003d new Remark(\"Bye\");"},{"lineNumber":29,"author":{"gitID":"chilipadiboy"},"content":"        assertFalse(remark.equals(differentRemark));"},{"lineNumber":30,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"chilipadiboy"},"content":"}"}],"authorContributionMap":{"chilipadiboy":24,"-":7}},{"path":"src/test/java/seedu/address/model/person/WebsiteTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Jemereny"},"content":"//@@author Jemereny"},{"lineNumber":2,"author":{"gitID":"Jemereny"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":4,"author":{"gitID":"Jemereny"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Jemereny"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":7,"author":{"gitID":"Jemereny"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"Jemereny"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"Jemereny"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":11,"author":{"gitID":"Jemereny"},"content":"public class WebsiteTest {"},{"lineNumber":12,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":13,"author":{"gitID":"Jemereny"},"content":"    @Rule"},{"lineNumber":14,"author":{"gitID":"Jemereny"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":15,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":16,"author":{"gitID":"Jemereny"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"Jemereny"},"content":"    public void isValidWebsite() {"},{"lineNumber":18,"author":{"gitID":"Jemereny"},"content":"        // invalid Websites"},{"lineNumber":19,"author":{"gitID":"Jemereny"},"content":"        assertFalse(Website.isValidWebsite(\"\")); // empty string"},{"lineNumber":20,"author":{"gitID":"Jemereny"},"content":"        assertFalse(Website.isValidWebsite(\" \")); // spaces only"},{"lineNumber":21,"author":{"gitID":"Jemereny"},"content":"        assertFalse(Website.isValidWebsite(\"www.yahoo.com\")); // no http protocol"},{"lineNumber":22,"author":{"gitID":"Jemereny"},"content":"        assertFalse(Website.isValidWebsite(\"http://YAHOO.com\")); // non-numeric"},{"lineNumber":23,"author":{"gitID":"Jemereny"},"content":"        assertFalse(Website.isValidWebsite(\"http://www.YAHOO.com\")); // lower-case"},{"lineNumber":24,"author":{"gitID":"Jemereny"},"content":"        assertFalse(Website.isValidWebsite(\"9312 1534\")); // no digits"},{"lineNumber":25,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":26,"author":{"gitID":"Jemereny"},"content":"        // valid Websites"},{"lineNumber":27,"author":{"gitID":"Jemereny"},"content":"        assertTrue(Website.isValidWebsite(null));"},{"lineNumber":28,"author":{"gitID":"Jemereny"},"content":"        assertTrue(Website.isValidWebsite(\"http://www.yahoo.com\")); // empty string"},{"lineNumber":29,"author":{"gitID":"Jemereny"},"content":"        assertTrue(Website.isValidWebsite(\"https://www.yahoo.com\")); // exactly 3 numbers"},{"lineNumber":30,"author":{"gitID":"Jemereny"},"content":"        assertTrue(Website.isValidWebsite(\"https://ivle.nus.edu.sg\")); // multiple domains"},{"lineNumber":31,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"Jemereny"},"content":"}"}],"authorContributionMap":{"Jemereny":32}},{"path":"src/test/java/seedu/address/model/person/AddressTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class AddressTest {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public void isValidAddress() {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        // invalid addresses"},{"lineNumber":13,"author":{"gitID":"-"},"content":"        assertFalse(Address.isValidAddress(\"\")); // empty string"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        assertFalse(Address.isValidAddress(\" \")); // spaces only"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"        // valid addresses"},{"lineNumber":17,"author":{"gitID":"chrisboo"},"content":"        assertTrue(Address.isValidAddress(null));"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"-\")); // one character"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":1,"-":21}},{"path":"src/test/java/seedu/address/model/person/EmailTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class EmailTest {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public void isValidEmail() {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        // blank email"},{"lineNumber":13,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"\")); // empty string"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"        // missing parts"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        // invalid parts"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"-@example.com\")); // invalid local part"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        // valid email"},{"lineNumber":31,"author":{"gitID":"chrisboo"},"content":"        assertTrue(Email.isValidEmail(null));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@b\"));  // minimal"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\"));   // alphabets only"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\"));  // numeric local part and domain name"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1@example1.com\"));  // mixture of alphanumeric and dot characters"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"_user_@_e_x_a_m_p_l_e_.com_\"));    // underscores"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very_very_very_long_example.com\"));   // long domain name"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\"));    // long local part"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":1,"-":40}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(ReadOnlyPerson person) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":35,"author":{"gitID":"chilipadiboy"},"content":"        descriptor.setBirthday(person.getBirthday());"},{"lineNumber":36,"author":{"gitID":"Jemereny"},"content":"        descriptor.setWebsite(person.getWebsite());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(Optional.of(name)).ifPresent(descriptor::setName);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"name is expected to be unique.\");"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(Optional.of(phone)).ifPresent(descriptor::setPhone);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"phone is expected to be unique.\");"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(Optional.of(email)).ifPresent(descriptor::setEmail);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"email is expected to be unique.\");"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            ParserUtil.parseAddress(Optional.of(address)).ifPresent(descriptor::setAddress);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"address is expected to be unique.\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"chilipadiboy"},"content":"     * Sets the {@code Birthday} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":90,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"chilipadiboy"},"content":"    public EditPersonDescriptorBuilder withBirthday(String birthday) {"},{"lineNumber":92,"author":{"gitID":"chilipadiboy"},"content":"        try {"},{"lineNumber":93,"author":{"gitID":"chilipadiboy"},"content":"            ParserUtil.parseBirthday(Optional.of(birthday)).ifPresent(descriptor::setBirthday);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":95,"author":{"gitID":"chilipadiboy"},"content":"            throw new IllegalArgumentException(\"Birthday should be id dd/MM/yyyy format\");"},{"lineNumber":96,"author":{"gitID":"chilipadiboy"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"chilipadiboy"},"content":"        return this;"},{"lineNumber":98,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":100,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"Jemereny"},"content":"     * Sets the {@code Website} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":102,"author":{"gitID":"Jemereny"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"Jemereny"},"content":"    public EditPersonDescriptorBuilder withWebsite(String website) {"},{"lineNumber":104,"author":{"gitID":"Jemereny"},"content":"        try {"},{"lineNumber":105,"author":{"gitID":"Jemereny"},"content":"            ParserUtil.parseWebsite(Optional.of(website)).ifPresent(descriptor::setWebsite);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":107,"author":{"gitID":"chilipadiboy"},"content":"            throw new IllegalArgumentException(\"Website is expected to be unique.\");"},{"lineNumber":108,"author":{"gitID":"Jemereny"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"Jemereny"},"content":"        return this;"},{"lineNumber":110,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            descriptor.setTags(ParserUtil.parseTags(Arrays.asList(tags)));"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tags are expected to be unique.\");"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chilipadiboy":15,"Jemereny":9,"-":104}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A utility class for test cases."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class TestUtil {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"chrisboo"},"content":"    //@@author chrisboo"},{"lineNumber":17,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"chrisboo"},"content":"     * Folder used to store data needed for testing"},{"lineNumber":19,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"chrisboo"},"content":"    private static final String DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/\");"},{"lineNumber":21,"author":{"gitID":"chrisboo"},"content":"    //@@author"},{"lineNumber":22,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String SANDBOX_FOLDER \u003d FileUtil.getPath(\"./src/test/data/sandbox/\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"chrisboo"},"content":"    //@@author chrisboo"},{"lineNumber":29,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"chrisboo"},"content":"     * Prepends {@code fileName} with file path in data folder"},{"lineNumber":31,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"chrisboo"},"content":"    public static String getFilePathInDataFolder(String fileName) {"},{"lineNumber":33,"author":{"gitID":"chrisboo"},"content":"        return new File(DATA_FOLDER + fileName).getAbsolutePath();"},{"lineNumber":34,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"chrisboo"},"content":"    //@@author"},{"lineNumber":36,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting string."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static String getFilePathInSandboxFolder(String fileName) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            FileUtil.createDirs(new File(SANDBOX_FOLDER));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return SANDBOX_FOLDER + fileName;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Returns the middle index of the person in the {@code model}\u0027s person list."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static Index getMidIndex(Model model) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(model.getAddressBook().getPersonList().size() / 2);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Returns the last index of the person in the {@code model}\u0027s person list."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static Index getLastIndex(Model model) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(model.getAddressBook().getPersonList().size());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Returns the person in the {@code model}\u0027s person list at {@code index}."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static ReadOnlyPerson getPerson(Model model, Index index) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return model.getAddressBook().getPersonList().get(index.getZeroBased());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":16,"-":54}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":5,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_WEBSITE;"},{"lineNumber":10,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":15,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":16,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A utility class for Person."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static String getAddCommand(ReadOnlyPerson person) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static String getPersonDetails(ReadOnlyPerson person) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":38,"author":{"gitID":"chilipadiboy"},"content":"        sb.append(PREFIX_BIRTHDAY + person.getBirthday().value + \" \");"},{"lineNumber":39,"author":{"gitID":"Jemereny"},"content":"        sb.append(PREFIX_WEBSITE + person.getWebsite().value + \" \");"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":41,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chilipadiboy":11,"Jemereny":1,"-":33}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;"},{"lineNumber":6,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"},{"lineNumber":7,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":8,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":10,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":11,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":12,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":13,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":14,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":15,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_WEBSITE_AMY;"},{"lineNumber":16,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_WEBSITE_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":24,"author":{"gitID":"Jemereny"},"content":"import seedu.address.model.person.Website;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"chrisboo"},"content":"    public static final ReadOnlyPerson ALICE \u003d new PersonBuilder()"},{"lineNumber":34,"author":{"gitID":"chrisboo"},"content":"            .withName(\"Alice Pauline\")"},{"lineNumber":35,"author":{"gitID":"chilipadiboy"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\")"},{"lineNumber":36,"author":{"gitID":"chilipadiboy"},"content":"            .withEmail(\"alice@example.com\")"},{"lineNumber":37,"author":{"gitID":"chilipadiboy"},"content":"            .withBirthday(\"15/02/1992\")"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":39,"author":{"gitID":"chrisboo"},"content":"            .withWebsite(\"https://twitter.com/\")"},{"lineNumber":40,"author":{"gitID":"chilipadiboy"},"content":"            .withTags(\"friends\")"},{"lineNumber":41,"author":{"gitID":"Jemereny"},"content":"            .withPicture(null)"},{"lineNumber":42,"author":{"gitID":"chilipadiboy"},"content":"            .build();"},{"lineNumber":43,"author":{"gitID":"chilipadiboy"},"content":"    public static final ReadOnlyPerson BENSON \u003d new PersonBuilder()"},{"lineNumber":44,"author":{"gitID":"chilipadiboy"},"content":"            .withName(\"Benson Meier\")"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":47,"author":{"gitID":"chilipadiboy"},"content":"            .withBirthday(\"15/02/1993\")"},{"lineNumber":48,"author":{"gitID":"chrisboo"},"content":"            .withWebsite(\"https://twitter.com/bensonwillems?lang\u003den\")"},{"lineNumber":49,"author":{"gitID":"chilipadiboy"},"content":"            .withTags(\"owesMoney\", \"friends\")"},{"lineNumber":50,"author":{"gitID":"Jemereny"},"content":"            .withPicture(null)"},{"lineNumber":51,"author":{"gitID":"chilipadiboy"},"content":"            .build();"},{"lineNumber":52,"author":{"gitID":"chilipadiboy"},"content":"    public static final ReadOnlyPerson CARL \u003d new PersonBuilder()"},{"lineNumber":53,"author":{"gitID":"chilipadiboy"},"content":"            .withName(\"Carl Kurz\")"},{"lineNumber":54,"author":{"gitID":"chilipadiboy"},"content":"            .withPhone(\"95352563\")"},{"lineNumber":55,"author":{"gitID":"chilipadiboy"},"content":"            .withEmail(\"heinz@example.com\")"},{"lineNumber":56,"author":{"gitID":"chilipadiboy"},"content":"            .withAddress(\"wall street\")"},{"lineNumber":57,"author":{"gitID":"chilipadiboy"},"content":"            .withBirthday(\"15/02/1994\")"},{"lineNumber":58,"author":{"gitID":"chrisboo"},"content":"            .withWebsite(\"https://twitter.com/sebastiankurz\")"},{"lineNumber":59,"author":{"gitID":"Jemereny"},"content":"            .withPicture(null)"},{"lineNumber":60,"author":{"gitID":"chilipadiboy"},"content":"            .build();"},{"lineNumber":61,"author":{"gitID":"chilipadiboy"},"content":"    public static final ReadOnlyPerson DANIEL \u003d new PersonBuilder()"},{"lineNumber":62,"author":{"gitID":"chilipadiboy"},"content":"            .withName(\"Daniel Meier\")"},{"lineNumber":63,"author":{"gitID":"chilipadiboy"},"content":"            .withPhone(\"87652533\")"},{"lineNumber":64,"author":{"gitID":"chilipadiboy"},"content":"            .withEmail(\"cornelia@example.com\")"},{"lineNumber":65,"author":{"gitID":"chilipadiboy"},"content":"            .withAddress(\"10th street\")"},{"lineNumber":66,"author":{"gitID":"chilipadiboy"},"content":"            .withBirthday(\"15/02/1995\")"},{"lineNumber":67,"author":{"gitID":"chrisboo"},"content":"            .withWebsite(\"https://twitter.com/\")"},{"lineNumber":68,"author":{"gitID":"Jemereny"},"content":"            .withPicture(null)"},{"lineNumber":69,"author":{"gitID":"chilipadiboy"},"content":"            .build();"},{"lineNumber":70,"author":{"gitID":"chilipadiboy"},"content":"    public static final ReadOnlyPerson ELLE \u003d new PersonBuilder()"},{"lineNumber":71,"author":{"gitID":"chilipadiboy"},"content":"            .withName(\"Elle Meyer\")"},{"lineNumber":72,"author":{"gitID":"chilipadiboy"},"content":"            .withPhone(\"9482224\")"},{"lineNumber":73,"author":{"gitID":"chilipadiboy"},"content":"            .withEmail(\"werner@example.com\")"},{"lineNumber":74,"author":{"gitID":"chilipadiboy"},"content":"            .withAddress(\"michegan ave\")"},{"lineNumber":75,"author":{"gitID":"chilipadiboy"},"content":"            .withBirthday(\"15/02/1996\")"},{"lineNumber":76,"author":{"gitID":"Jemereny"},"content":"            .withWebsite(Website.WEBSITE_EXAMPLE)"},{"lineNumber":77,"author":{"gitID":"Jemereny"},"content":"            .withPicture(null)"},{"lineNumber":78,"author":{"gitID":"chilipadiboy"},"content":"            .build();"},{"lineNumber":79,"author":{"gitID":"chilipadiboy"},"content":"    public static final ReadOnlyPerson FIONA \u003d new PersonBuilder()"},{"lineNumber":80,"author":{"gitID":"chilipadiboy"},"content":"            .withName(\"Fiona Kunz\")"},{"lineNumber":81,"author":{"gitID":"chilipadiboy"},"content":"            .withPhone(\"9482427\")"},{"lineNumber":82,"author":{"gitID":"chilipadiboy"},"content":"            .withEmail(\"lydia@example.com\")"},{"lineNumber":83,"author":{"gitID":"chilipadiboy"},"content":"            .withAddress(\"little tokyo\")"},{"lineNumber":84,"author":{"gitID":"Jemereny"},"content":"            .withWebsite(Website.WEBSITE_EXAMPLE)"},{"lineNumber":85,"author":{"gitID":"Jemereny"},"content":"            .withPicture(null)"},{"lineNumber":86,"author":{"gitID":"chilipadiboy"},"content":"            .build();"},{"lineNumber":87,"author":{"gitID":"chilipadiboy"},"content":"    public static final ReadOnlyPerson GEORGE \u003d new PersonBuilder()"},{"lineNumber":88,"author":{"gitID":"chilipadiboy"},"content":"            .withName(\"George Best\")"},{"lineNumber":89,"author":{"gitID":"chilipadiboy"},"content":"            .withPhone(\"9482442\")"},{"lineNumber":90,"author":{"gitID":"chilipadiboy"},"content":"            .withEmail(\"anna@example.com\")"},{"lineNumber":91,"author":{"gitID":"chilipadiboy"},"content":"            .withAddress(\"4th street\")"},{"lineNumber":92,"author":{"gitID":"Jemereny"},"content":"            .withWebsite(Website.WEBSITE_EXAMPLE)"},{"lineNumber":93,"author":{"gitID":"Jemereny"},"content":"            .withPicture(null)"},{"lineNumber":94,"author":{"gitID":"chilipadiboy"},"content":"            .build();"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":97,"author":{"gitID":"chilipadiboy"},"content":"    public static final ReadOnlyPerson HOON \u003d new PersonBuilder()"},{"lineNumber":98,"author":{"gitID":"chilipadiboy"},"content":"            .withName(\"Hoon Meier\")"},{"lineNumber":99,"author":{"gitID":"chilipadiboy"},"content":"            .withPhone(\"8482424\")"},{"lineNumber":100,"author":{"gitID":"chilipadiboy"},"content":"            .withEmail(\"stefan@example.com\")"},{"lineNumber":101,"author":{"gitID":"chilipadiboy"},"content":"            .withAddress(\"little india\")"},{"lineNumber":102,"author":{"gitID":"Jemereny"},"content":"            .withWebsite(Website.WEBSITE_EXAMPLE)"},{"lineNumber":103,"author":{"gitID":"chilipadiboy"},"content":"            .build();"},{"lineNumber":104,"author":{"gitID":"chilipadiboy"},"content":"    public static final ReadOnlyPerson IDA \u003d new PersonBuilder()"},{"lineNumber":105,"author":{"gitID":"chilipadiboy"},"content":"            .withName(\"Ida Mueller\")"},{"lineNumber":106,"author":{"gitID":"chilipadiboy"},"content":"            .withPhone(\"8482131\")"},{"lineNumber":107,"author":{"gitID":"chilipadiboy"},"content":"            .withEmail(\"hans@example.com\")"},{"lineNumber":108,"author":{"gitID":"chilipadiboy"},"content":"            .withAddress(\"chicago ave\")"},{"lineNumber":109,"author":{"gitID":"chilipadiboy"},"content":"            .withBirthday(\"15/02/2000\")"},{"lineNumber":110,"author":{"gitID":"Jemereny"},"content":"            .withWebsite(Website.WEBSITE_EXAMPLE)"},{"lineNumber":111,"author":{"gitID":"chilipadiboy"},"content":"            .build();"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":114,"author":{"gitID":"chilipadiboy"},"content":"    public static final ReadOnlyPerson AMY \u003d new PersonBuilder()"},{"lineNumber":115,"author":{"gitID":"chilipadiboy"},"content":"            .withName(VALID_NAME_AMY)"},{"lineNumber":116,"author":{"gitID":"chilipadiboy"},"content":"            .withPhone(VALID_PHONE_AMY)"},{"lineNumber":117,"author":{"gitID":"chilipadiboy"},"content":"            .withEmail(VALID_EMAIL_AMY)"},{"lineNumber":118,"author":{"gitID":"chilipadiboy"},"content":"            .withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":119,"author":{"gitID":"chilipadiboy"},"content":"            .withBirthday(VALID_BIRTHDAY_AMY)"},{"lineNumber":120,"author":{"gitID":"chilipadiboy"},"content":"            .withWebsite(VALID_WEBSITE_AMY)"},{"lineNumber":121,"author":{"gitID":"chilipadiboy"},"content":"            .withTags(VALID_TAG_FRIEND)"},{"lineNumber":122,"author":{"gitID":"chilipadiboy"},"content":"            .build();"},{"lineNumber":123,"author":{"gitID":"chilipadiboy"},"content":"    public static final ReadOnlyPerson BOB \u003d new PersonBuilder()"},{"lineNumber":124,"author":{"gitID":"chilipadiboy"},"content":"            .withName(VALID_NAME_BOB)"},{"lineNumber":125,"author":{"gitID":"chilipadiboy"},"content":"            .withPhone(VALID_PHONE_BOB)"},{"lineNumber":126,"author":{"gitID":"chilipadiboy"},"content":"            .withEmail(VALID_EMAIL_BOB)"},{"lineNumber":127,"author":{"gitID":"chilipadiboy"},"content":"            .withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":128,"author":{"gitID":"chilipadiboy"},"content":"            .withBirthday(VALID_BIRTHDAY_BOB)"},{"lineNumber":129,"author":{"gitID":"chilipadiboy"},"content":"            .withWebsite(VALID_WEBSITE_BOB)"},{"lineNumber":130,"author":{"gitID":"chilipadiboy"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"chrisboo"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"n/Meier\"; // A keyword that matches MEIER"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        for (ReadOnlyPerson person : getTypicalPersons()) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                assert false : \"not possible\";"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public static List\u003cReadOnlyPerson\u003e getTypicalPersons() {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chilipadiboy":87,"Jemereny":13,"chrisboo":7,"-":48}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"chilipadiboy"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":8,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":9,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":12,"author":{"gitID":"Jemereny"},"content":"import seedu.address.model.person.Picture;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":14,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":15,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Website;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":28,"author":{"gitID":"Jemereny"},"content":"    public static final String DEFAULT_WEBSITE \u003d Website.WEBSITE_EXAMPLE;"},{"lineNumber":29,"author":{"gitID":"Jemereny"},"content":"    public static final String DEFAULT_PICTURE \u003d null;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":31,"author":{"gitID":"chilipadiboy"},"content":"    public static final String DEFAULT_REMARK \u003d \"\";"},{"lineNumber":32,"author":{"gitID":"chilipadiboy"},"content":"    public static final String DEFAULT_BIRTHDAY \u003d \"15/02/1992\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Person person;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            Name defaultName \u003d new Name(DEFAULT_NAME);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            Phone defaultPhone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            Email defaultEmail \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            Address defaultAddress \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":42,"author":{"gitID":"chilipadiboy"},"content":"            Remark defaultRemark \u003d new Remark(DEFAULT_REMARK);"},{"lineNumber":43,"author":{"gitID":"chilipadiboy"},"content":"            Birthday defaultBirthday \u003d new Birthday(DEFAULT_BIRTHDAY);"},{"lineNumber":44,"author":{"gitID":"Jemereny"},"content":"            Website defaultWebsite \u003d new Website(DEFAULT_WEBSITE);"},{"lineNumber":45,"author":{"gitID":"Jemereny"},"content":"            Picture defaultPicture \u003d new Picture(DEFAULT_PICTURE);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e defaultTags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":47,"author":{"gitID":"Jemereny"},"content":"            this.person \u003d new Person(defaultName, defaultPhone, defaultEmail,"},{"lineNumber":48,"author":{"gitID":"Jemereny"},"content":"                    defaultAddress, defaultBirthday, defaultRemark, defaultWebsite,"},{"lineNumber":49,"author":{"gitID":"Jemereny"},"content":"                    defaultPicture, defaultTags);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Default person\u0027s values are invalid.\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public PersonBuilder(ReadOnlyPerson personToCopy) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.person \u003d new Person(personToCopy);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            this.person.setName(new Name(name));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"name is expected to be unique.\");"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            this.person.setTags(SampleDataUtil.getTagSet(tags));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tags are expected to be unique.\");"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            this.person.setAddress(new Address(address));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"address is expected to be unique.\");"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            this.person.setPhone(new Phone(phone));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"phone is expected to be unique.\");"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            this.person.setEmail(new Email(email));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"email is expected to be unique.\");"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"chilipadiboy"},"content":"     * Sets the {@code Birthday} of the {@code Person} that we are building."},{"lineNumber":124,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"chilipadiboy"},"content":"    public PersonBuilder withBirthday(String birthday) {"},{"lineNumber":126,"author":{"gitID":"chilipadiboy"},"content":"        try {"},{"lineNumber":127,"author":{"gitID":"chilipadiboy"},"content":"            this.person.setBirthday(new Birthday(birthday));"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":129,"author":{"gitID":"chilipadiboy"},"content":"            throw new IllegalArgumentException(\"Birthday should be in dd/MM/yyyy format\");"},{"lineNumber":130,"author":{"gitID":"chilipadiboy"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"chilipadiboy"},"content":"        return this;"},{"lineNumber":132,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":134,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"chilipadiboy"},"content":"     * Sets the {@code Remark} of the {@code Person} that we are building."},{"lineNumber":136,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"chilipadiboy"},"content":"    public PersonBuilder withRemark(String remark) {"},{"lineNumber":138,"author":{"gitID":"chilipadiboy"},"content":"        this.person.setRemark(new Remark(remark));"},{"lineNumber":139,"author":{"gitID":"chilipadiboy"},"content":"        return this;"},{"lineNumber":140,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":142,"author":{"gitID":"Jemereny"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"Jemereny"},"content":"     * Sets the {@code Website} of the {@code Person} that we are building."},{"lineNumber":144,"author":{"gitID":"Jemereny"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"Jemereny"},"content":"    public PersonBuilder withWebsite(String website) {"},{"lineNumber":146,"author":{"gitID":"Jemereny"},"content":"        try {"},{"lineNumber":147,"author":{"gitID":"Jemereny"},"content":"            this.person.setWebsite(new Website(website));"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":149,"author":{"gitID":"Jemereny"},"content":"            throw new IllegalArgumentException(\"website is expected to be unique.\");"},{"lineNumber":150,"author":{"gitID":"Jemereny"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"Jemereny"},"content":"        return this;"},{"lineNumber":152,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":154,"author":{"gitID":"Jemereny"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"Jemereny"},"content":"     * Sets the {@code Picture} of the {@code Person} that we are building."},{"lineNumber":156,"author":{"gitID":"Jemereny"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"Jemereny"},"content":"    public PersonBuilder withPicture(String picture) {"},{"lineNumber":158,"author":{"gitID":"Jemereny"},"content":"        try {"},{"lineNumber":159,"author":{"gitID":"Jemereny"},"content":"            this.person.setPicture(new Picture(picture));"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":161,"author":{"gitID":"Jemereny"},"content":"            throw new IllegalArgumentException(\"website is expected to be unique.\");"},{"lineNumber":162,"author":{"gitID":"Jemereny"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"Jemereny"},"content":"        return this;"},{"lineNumber":164,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        return this.person;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chilipadiboy":33,"Jemereny":30,"-":107}},{"path":"src/test/java/guitests/GuiRobot.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.BooleanSupplier;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.testfx.api.FxRobot;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.exceptions.StageNotFoundException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":12,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Robot used to simulate user actions on the GUI."},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Extends {@link FxRobot} by adding some customized functionality and workarounds."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class GuiRobot extends FxRobot {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final int PAUSE_FOR_HUMAN_DELAY_MILLISECONDS \u003d 250;"},{"lineNumber":20,"author":{"gitID":"Jemereny"},"content":"    private static final int DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS \u003d 50000;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String PROPERTY_TESTFX_HEADLESS \u003d \"testfx.headless\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final boolean isHeadlessMode;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public GuiRobot() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        String headlessPropertyValue \u003d System.getProperty(PROPERTY_TESTFX_HEADLESS);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        isHeadlessMode \u003d headlessPropertyValue !\u003d null \u0026\u0026 headlessPropertyValue.equals(\"true\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Pauses execution for {@code PAUSE_FOR_HUMAN_DELAY_MILLISECONDS} milliseconds for a human to examine the"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * effects of the test. This method will be disabled when the GUI tests are executed in headless mode to avoid"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * unnecessary delays."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void pauseForHuman() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        if (isHeadlessMode) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        sleep(PAUSE_FOR_HUMAN_DELAY_MILLISECONDS);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Waits for {@code event} to be true by {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS} milliseconds."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * @throws EventTimeoutException if the time taken exceeds {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS}"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * milliseconds."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void waitForEvent(BooleanSupplier event) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        waitForEvent(event, DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Waits for {@code event} to be true."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * @param timeOut in milliseconds"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * @throws EventTimeoutException if the time taken exceeds {@code timeOut}."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void waitForEvent(BooleanSupplier event, int timeOut) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        int timePassed \u003d 0;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        final int retryInterval \u003d 50;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        while (!event.getAsBoolean()) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            sleep(retryInterval);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            timePassed +\u003d retryInterval;"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"            if (timePassed \u003e\u003d timeOut) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                throw new EventTimeoutException();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        pauseForHuman();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Returns true if the window with {@code stageTitle} is currently open."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public boolean isWindowShown(String stageTitle) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return listTargetWindows().stream()"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                .filter(window -\u003e window instanceof Stage \u0026\u0026 ((Stage) window).getTitle().equals(stageTitle))"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                .count() \u003e\u003d 1;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Returns the first stage, ordered by proximity to the current target window, with the stage title."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * The order that the windows are searched are as follows (proximity): current target window,"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * children of the target window, rest of the windows."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * @throws StageNotFoundException if the stage is not found."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public Stage getStage(String stageTitle) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Optional\u003cStage\u003e targetStage \u003d listTargetWindows().stream()"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                .filter(Stage.class::isInstance)    // checks that the window is of type Stage"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                .map(Stage.class::cast)"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                .filter(stage -\u003e stage.getTitle().equals(stageTitle))"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                .findFirst();"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return targetStage.orElseThrow(StageNotFoundException::new);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Represents an error which occurs when a timeout occurs when waiting for an event."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private class EventTimeoutException extends RuntimeException {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chilipadiboy":2,"Jemereny":1,"-":104}},{"path":"src/test/java/seedu/address/testutil/PictureUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"Jemereny"},"content":"//@@author Jemereny"},{"lineNumber":2,"author":{"gitID":"Jemereny"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":4,"author":{"gitID":"Jemereny"},"content":"import java.io.File;"},{"lineNumber":5,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":6,"author":{"gitID":"Jemereny"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"Jemereny"},"content":"import seedu.address.model.person.Picture;"},{"lineNumber":8,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":9,"author":{"gitID":"Jemereny"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"Jemereny"},"content":" * Utility class for picture"},{"lineNumber":11,"author":{"gitID":"Jemereny"},"content":" */"},{"lineNumber":12,"author":{"gitID":"Jemereny"},"content":"public class PictureUtil {"},{"lineNumber":13,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":14,"author":{"gitID":"Jemereny"},"content":"    private static final String DEFAULT_PICTURE_LOCATION \u003d \"src/main/resources/images/\";"},{"lineNumber":15,"author":{"gitID":"Jemereny"},"content":"    private static final String TEST_FILENAME \u003d \"test.png\";"},{"lineNumber":16,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":17,"author":{"gitID":"Jemereny"},"content":"    public static File getValidFileSrc() {"},{"lineNumber":18,"author":{"gitID":"Jemereny"},"content":"        return new File(DEFAULT_PICTURE_LOCATION + Picture.DEFAULT_ALEX);"},{"lineNumber":19,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":21,"author":{"gitID":"Jemereny"},"content":"    public static File getValidFileDst() {"},{"lineNumber":22,"author":{"gitID":"Jemereny"},"content":"        return new File(Picture.PICTURE_SAVE_LOCATION);"},{"lineNumber":23,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":25,"author":{"gitID":"Jemereny"},"content":"    public static File getValidFileDstWithFilename() {"},{"lineNumber":26,"author":{"gitID":"Jemereny"},"content":"        return new File(Picture.PICTURE_SAVE_LOCATION + TEST_FILENAME);"},{"lineNumber":27,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":29,"author":{"gitID":"Jemereny"},"content":"    public static File getInvalidFileSrc() {"},{"lineNumber":30,"author":{"gitID":"Jemereny"},"content":"        return new File(\"\");"},{"lineNumber":31,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":33,"author":{"gitID":"Jemereny"},"content":"    public static String getValidFilename() {"},{"lineNumber":34,"author":{"gitID":"Jemereny"},"content":"        return TEST_FILENAME;"},{"lineNumber":35,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":37,"author":{"gitID":"Jemereny"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"Jemereny"},"content":"     * Returns a default picture from resource folder"},{"lineNumber":39,"author":{"gitID":"Jemereny"},"content":"     * which should IS valid"},{"lineNumber":40,"author":{"gitID":"Jemereny"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"Jemereny"},"content":"    public static String getValidPictureString() {"},{"lineNumber":42,"author":{"gitID":"Jemereny"},"content":"        return DEFAULT_PICTURE_LOCATION + Picture.DEFAULT_ALEX;"},{"lineNumber":43,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":45,"author":{"gitID":"Jemereny"},"content":"    public static Picture getNullPicture() throws IllegalValueException {"},{"lineNumber":46,"author":{"gitID":"Jemereny"},"content":"        return new Picture(null);"},{"lineNumber":47,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":49,"author":{"gitID":"Jemereny"},"content":"    public static Picture getPictureWithInvalidLocation() throws IllegalValueException {"},{"lineNumber":50,"author":{"gitID":"Jemereny"},"content":"        return new Picture(\"\");"},{"lineNumber":51,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":53,"author":{"gitID":"Jemereny"},"content":"    public static Picture getPictureWithValidLocation() throws IllegalValueException {"},{"lineNumber":54,"author":{"gitID":"Jemereny"},"content":"        return new Picture(Picture.DEFAULT_PICTURE_LOCATION + Picture.DEFAULT_ALEX);"},{"lineNumber":55,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"Jemereny"},"content":"}"}],"authorContributionMap":{"Jemereny":56}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":20,"author":{"gitID":"chilipadiboy"},"content":"    private static final String REMARK_FIELD_ID \u003d \"#remark\";"},{"lineNumber":21,"author":{"gitID":"Jemereny"},"content":"    private static final String WEBSITE_FIELD_ID \u003d \"#website\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label addressLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":28,"author":{"gitID":"chilipadiboy"},"content":"    private final Label remarkLabel;"},{"lineNumber":29,"author":{"gitID":"Jemereny"},"content":"    private final Label websiteLabel;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":40,"author":{"gitID":"chilipadiboy"},"content":"        this.remarkLabel \u003d getChildNode(REMARK_FIELD_ID);"},{"lineNumber":41,"author":{"gitID":"Jemereny"},"content":"        this.websiteLabel \u003d getChildNode(WEBSITE_FIELD_ID);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public String getAddress() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return addressLabel.getText();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"chilipadiboy"},"content":"    public String getRemark() {"},{"lineNumber":72,"author":{"gitID":"chilipadiboy"},"content":"        return remarkLabel.getText();"},{"lineNumber":73,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":75,"author":{"gitID":"Jemereny"},"content":"    public String getWebsite() {"},{"lineNumber":76,"author":{"gitID":"Jemereny"},"content":"        return websiteLabel.getText();"},{"lineNumber":77,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chilipadiboy":7,"Jemereny":7,"-":71}},{"path":"src/test/java/guitests/guihandles/MainMenuHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Provides a handle to the main menu of the app."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class MainMenuHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MENU_BAR_ID \u003d \"#menuBar\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public MainMenuHandle(Node mainMenuNode) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        super(mainMenuNode);"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Opens the {@code HelpWindow} using the menu bar in {@code MainWindow}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void openHelpWindowUsingMenu() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        clickOnMenuItemsSequentially(\"Help\", \"F1\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"chilipadiboy"},"content":"    //@@author chilipadiboy"},{"lineNumber":26,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"chilipadiboy"},"content":"     * Opens the {@code BirthdayAlarmWindow} using the menu bar in {@code MainWindow}."},{"lineNumber":28,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":30,"author":{"gitID":"chilipadiboy"},"content":"    public void openBirthdayAlarmWindowUsingMenu() {"},{"lineNumber":31,"author":{"gitID":"chilipadiboy"},"content":"        clickOnMenuItemsSequentially(\"Reminders\", \"Birthdays\");"},{"lineNumber":32,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":34,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"chilipadiboy"},"content":"     * Opens the {@code HelpWindow} by pressing the shortcut key associated"},{"lineNumber":36,"author":{"gitID":"chilipadiboy"},"content":"     * with the menu bar in {@code MainWindow}."},{"lineNumber":37,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"chilipadiboy"},"content":"    public void openHelpWindowUsingAccelerator() {"},{"lineNumber":39,"author":{"gitID":"chilipadiboy"},"content":"        guiRobot.push(KeyCode.F1);"},{"lineNumber":40,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":42,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"chilipadiboy"},"content":"     * Clicks on {@code menuItems} in order."},{"lineNumber":44,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"chilipadiboy"},"content":"    private void clickOnMenuItemsSequentially(String... menuItems) {"},{"lineNumber":46,"author":{"gitID":"chilipadiboy"},"content":"        Arrays.stream(menuItems).forEach(guiRobot::clickOn);"},{"lineNumber":47,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"chilipadiboy"},"content":"}"}],"authorContributionMap":{"chilipadiboy":24,"-":24}},{"path":"src/test/java/guitests/guihandles/BirthdayAlarmWindowHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"chilipadiboy"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * A handle to the {@code HelpWindow} of the application."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"chilipadiboy"},"content":"public class BirthdayAlarmWindowHandle extends StageHandle {"},{"lineNumber":10,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":11,"author":{"gitID":"chilipadiboy"},"content":"    public static final String BIRTHDAYALARM_WINDOW_TITLE \u003d \"Birthday Alarm\";"},{"lineNumber":12,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":13,"author":{"gitID":"chilipadiboy"},"content":"    public BirthdayAlarmWindowHandle(Stage birthdayAlarmWindowStage) {"},{"lineNumber":14,"author":{"gitID":"chilipadiboy"},"content":"        super(birthdayAlarmWindowStage);"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Returns true if a help window is currently present in the application."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static boolean isWindowPresent() {"},{"lineNumber":21,"author":{"gitID":"chilipadiboy"},"content":"        return new GuiRobot().isWindowShown(BIRTHDAYALARM_WINDOW_TITLE);"},{"lineNumber":22,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"chilipadiboy"},"content":"}"}],"authorContributionMap":{"chilipadiboy":11,"-":12}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":37,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":110,"author":{"gitID":"Jemereny"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser, false));"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":117,"author":{"gitID":"Jemereny"},"content":"            raise(new NewResultAvailableEvent(e.getMessage(), true));"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":128,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Jemereny":2,"-":149}},{"path":"src/main/java/seedu/address/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String GOOGLE_SEARCH_URL_PREFIX \u003d \"https://www.google.com.sg/search?safe\u003doff\u0026q\u003d\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String GOOGLE_SEARCH_URL_SUFFIX \u003d \"\u0026cad\u003dh\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public BrowserPanel() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        loadDefaultPage();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Jemereny"},"content":"    //@@author Jemereny"},{"lineNumber":44,"author":{"gitID":"Jemereny"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"Jemereny"},"content":"     * Load website of person if he has a website"},{"lineNumber":46,"author":{"gitID":"Jemereny"},"content":"     * If not just google search his name"},{"lineNumber":47,"author":{"gitID":"Jemereny"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"Jemereny"},"content":"    private void loadPersonPage(ReadOnlyPerson person) {"},{"lineNumber":49,"author":{"gitID":"Jemereny"},"content":"        if (person.getWebsite().hasWebsite()) {"},{"lineNumber":50,"author":{"gitID":"Jemereny"},"content":"            loadPage(person.getWebsite().value);"},{"lineNumber":51,"author":{"gitID":"Jemereny"},"content":"        } else {"},{"lineNumber":52,"author":{"gitID":"Jemereny"},"content":"            loadPage(GOOGLE_SEARCH_URL_PREFIX + person.getName().fullName.replaceAll(\" \", \"+\")"},{"lineNumber":53,"author":{"gitID":"Jemereny"},"content":"                    + GOOGLE_SEARCH_URL_SUFFIX);"},{"lineNumber":54,"author":{"gitID":"Jemereny"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"Jemereny"},"content":"    //@@author"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void loadPage(String url) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private void loadDefaultPage() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void freeResources() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        browser \u003d null;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        loadPersonPage(event.getNewSelection().person);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Jemereny":14,"-":68}},{"path":"src/test/java/guitests/BirthdayAlarmWindowTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chilipadiboy"},"content":"//@@author chilipadiboy"},{"lineNumber":2,"author":{"gitID":"chilipadiboy"},"content":"package guitests;"},{"lineNumber":3,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":4,"author":{"gitID":"chilipadiboy"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":6,"author":{"gitID":"chilipadiboy"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":8,"author":{"gitID":"chilipadiboy"},"content":"import guitests.guihandles.BirthdayAlarmWindowHandle;"},{"lineNumber":9,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.logic.commands.BirthdayAlarmCommand;"},{"lineNumber":10,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":11,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":12,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":13,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":14,"author":{"gitID":"chilipadiboy"},"content":"public class BirthdayAlarmWindowTest extends AddressBookGuiTest {"},{"lineNumber":15,"author":{"gitID":"chilipadiboy"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":16,"author":{"gitID":"chilipadiboy"},"content":"        + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":17,"author":{"gitID":"chilipadiboy"},"content":"        + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":18,"author":{"gitID":"chilipadiboy"},"content":"        + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":19,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":20,"author":{"gitID":"chilipadiboy"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"chilipadiboy"},"content":"    public void openBirthdayAlarmWindow() {"},{"lineNumber":22,"author":{"gitID":"chilipadiboy"},"content":"        //use menu button"},{"lineNumber":23,"author":{"gitID":"chilipadiboy"},"content":"        getMainMenu().openBirthdayAlarmWindowUsingMenu();"},{"lineNumber":24,"author":{"gitID":"chilipadiboy"},"content":"        assertBirthdayAlarmWindowOpen();"},{"lineNumber":25,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":26,"author":{"gitID":"chilipadiboy"},"content":"        //use command box"},{"lineNumber":27,"author":{"gitID":"chilipadiboy"},"content":"        runCommand(BirthdayAlarmCommand.COMMAND_WORD);"},{"lineNumber":28,"author":{"gitID":"chilipadiboy"},"content":"        assertBirthdayAlarmWindowOpen();"},{"lineNumber":29,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":31,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"chilipadiboy"},"content":"     * Asserts that the Birthday Alarm window is open, and closes it after checking."},{"lineNumber":33,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"chilipadiboy"},"content":"    private void assertBirthdayAlarmWindowOpen() {"},{"lineNumber":35,"author":{"gitID":"chilipadiboy"},"content":"        assertTrue(ERROR_MESSAGE, BirthdayAlarmWindowHandle.isWindowPresent());"},{"lineNumber":36,"author":{"gitID":"chilipadiboy"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":37,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":38,"author":{"gitID":"chilipadiboy"},"content":"        new BirthdayAlarmWindowHandle(guiRobot.getStage(BirthdayAlarmWindowHandle.BIRTHDAYALARM_WINDOW_TITLE)).close();"},{"lineNumber":39,"author":{"gitID":"chilipadiboy"},"content":"        mainWindowHandle.focus();"},{"lineNumber":40,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"chilipadiboy"},"content":"}"}],"authorContributionMap":{"chilipadiboy":41}},{"path":"src/main/java/seedu/address/ui/Ui.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * API of UI component"},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public interface Ui {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":11,"author":{"gitID":"chrisboo"},"content":"     * Starts the UI (and the App)."},{"lineNumber":12,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    void start(Stage primaryStage);"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"chrisboo"},"content":"     * Stops the UI."},{"lineNumber":17,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    void stop();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":6,"-":14}},{"path":"src/test/java/seedu/address/testutil/FindPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"chrisboo"},"content":"//@@author chrisboo"},{"lineNumber":2,"author":{"gitID":"chrisboo"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":4,"author":{"gitID":"chrisboo"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"chrisboo"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":7,"author":{"gitID":"chrisboo"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"chrisboo"},"content":"import seedu.address.logic.commands.FindCommand.FindPersonDescriptor;"},{"lineNumber":9,"author":{"gitID":"chrisboo"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":10,"author":{"gitID":"chrisboo"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":11,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":12,"author":{"gitID":"chrisboo"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"chrisboo"},"content":" * A utility class to help with building FindPersonDescriptor objects."},{"lineNumber":14,"author":{"gitID":"chrisboo"},"content":" */"},{"lineNumber":15,"author":{"gitID":"chrisboo"},"content":"public class FindPersonDescriptorBuilder {"},{"lineNumber":16,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":17,"author":{"gitID":"chrisboo"},"content":"    private FindPersonDescriptor descriptor;"},{"lineNumber":18,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":19,"author":{"gitID":"chrisboo"},"content":"    public FindPersonDescriptorBuilder() {"},{"lineNumber":20,"author":{"gitID":"chrisboo"},"content":"        descriptor \u003d new FindPersonDescriptor();"},{"lineNumber":21,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":23,"author":{"gitID":"chrisboo"},"content":"    public FindPersonDescriptorBuilder(FindPersonDescriptor descriptor) {"},{"lineNumber":24,"author":{"gitID":"chrisboo"},"content":"        this.descriptor \u003d new FindPersonDescriptor(descriptor);"},{"lineNumber":25,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":27,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"chrisboo"},"content":"     * Returns an {@code FindPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":29,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"chrisboo"},"content":"    public FindPersonDescriptorBuilder(ReadOnlyPerson person) {"},{"lineNumber":31,"author":{"gitID":"chrisboo"},"content":"        descriptor \u003d new FindPersonDescriptor();"},{"lineNumber":32,"author":{"gitID":"chrisboo"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":33,"author":{"gitID":"chrisboo"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":34,"author":{"gitID":"chrisboo"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":35,"author":{"gitID":"chrisboo"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":36,"author":{"gitID":"chrisboo"},"content":"        descriptor.setBirthday(person.getBirthday());"},{"lineNumber":37,"author":{"gitID":"chrisboo"},"content":"        descriptor.setWebsite(person.getWebsite());"},{"lineNumber":38,"author":{"gitID":"chrisboo"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":39,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":41,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"chrisboo"},"content":"     * Sets the {@code Name} of the {@code FindPersonDescriptor} that we are building."},{"lineNumber":43,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"chrisboo"},"content":"    public FindPersonDescriptorBuilder withName(String name) {"},{"lineNumber":45,"author":{"gitID":"chrisboo"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"chrisboo"},"content":"            ParserUtil.parseName(Optional.of(name)).ifPresent(descriptor::setName);"},{"lineNumber":47,"author":{"gitID":"chrisboo"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":48,"author":{"gitID":"chrisboo"},"content":"            throw new IllegalArgumentException(\"name is expected to be unique.\");"},{"lineNumber":49,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"chrisboo"},"content":"        return this;"},{"lineNumber":51,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":53,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"chrisboo"},"content":"     * Sets the {@code Phone} of the {@code FindPersonDescriptor} that we are building."},{"lineNumber":55,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"chrisboo"},"content":"    public FindPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":57,"author":{"gitID":"chrisboo"},"content":"        try {"},{"lineNumber":58,"author":{"gitID":"chrisboo"},"content":"            ParserUtil.parsePhone(Optional.of(phone)).ifPresent(descriptor::setPhone);"},{"lineNumber":59,"author":{"gitID":"chrisboo"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":60,"author":{"gitID":"chrisboo"},"content":"            throw new IllegalArgumentException(\"phone is expected to be unique.\");"},{"lineNumber":61,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"chrisboo"},"content":"        return this;"},{"lineNumber":63,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":65,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"chrisboo"},"content":"     * Sets the {@code Email} of the {@code FindPersonDescriptor} that we are building."},{"lineNumber":67,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"chrisboo"},"content":"    public FindPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":69,"author":{"gitID":"chrisboo"},"content":"        try {"},{"lineNumber":70,"author":{"gitID":"chrisboo"},"content":"            ParserUtil.parseEmail(Optional.of(email)).ifPresent(descriptor::setEmail);"},{"lineNumber":71,"author":{"gitID":"chrisboo"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":72,"author":{"gitID":"chrisboo"},"content":"            throw new IllegalArgumentException(\"email is expected to be unique.\");"},{"lineNumber":73,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"chrisboo"},"content":"        return this;"},{"lineNumber":75,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":77,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"chrisboo"},"content":"     * Sets the {@code Address} of the {@code FindPersonDescriptor} that we are building."},{"lineNumber":79,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"chrisboo"},"content":"    public FindPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":81,"author":{"gitID":"chrisboo"},"content":"        try {"},{"lineNumber":82,"author":{"gitID":"chrisboo"},"content":"            ParserUtil.parseAddress(Optional.of(address)).ifPresent(descriptor::setAddress);"},{"lineNumber":83,"author":{"gitID":"chrisboo"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":84,"author":{"gitID":"chrisboo"},"content":"            throw new IllegalArgumentException(\"address is expected to be unique.\");"},{"lineNumber":85,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"chrisboo"},"content":"        return this;"},{"lineNumber":87,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":89,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"chrisboo"},"content":"     * Sets the {@code Birthday} of the {@code FindPersonDescriptor} that we are building."},{"lineNumber":91,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"chrisboo"},"content":"    public FindPersonDescriptorBuilder withBirthday(String birthday) {"},{"lineNumber":93,"author":{"gitID":"chrisboo"},"content":"        try {"},{"lineNumber":94,"author":{"gitID":"chrisboo"},"content":"            ParserUtil.parseBirthday(Optional.of(birthday)).ifPresent(descriptor::setBirthday);"},{"lineNumber":95,"author":{"gitID":"chrisboo"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":96,"author":{"gitID":"chrisboo"},"content":"            throw new IllegalArgumentException(\"Birthday should be id dd/MM/yyyy format\");"},{"lineNumber":97,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"chrisboo"},"content":"        return this;"},{"lineNumber":99,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":101,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"chrisboo"},"content":"     * Sets the {@code Website} of the {@code FindPersonDescriptor} that we are building."},{"lineNumber":103,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"chrisboo"},"content":"    public FindPersonDescriptorBuilder withWebsite(String website) {"},{"lineNumber":105,"author":{"gitID":"chrisboo"},"content":"        try {"},{"lineNumber":106,"author":{"gitID":"chrisboo"},"content":"            ParserUtil.parseWebsite(Optional.of(website)).ifPresent(descriptor::setWebsite);"},{"lineNumber":107,"author":{"gitID":"chrisboo"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":108,"author":{"gitID":"chrisboo"},"content":"            throw new IllegalArgumentException(\"Website is expected to be unique.\");"},{"lineNumber":109,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"chrisboo"},"content":"        return this;"},{"lineNumber":111,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":113,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"chrisboo"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code FindPersonDescriptor}"},{"lineNumber":115,"author":{"gitID":"chrisboo"},"content":"     * that we are building."},{"lineNumber":116,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"chrisboo"},"content":"    public FindPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":118,"author":{"gitID":"chrisboo"},"content":"        try {"},{"lineNumber":119,"author":{"gitID":"chrisboo"},"content":"            descriptor.setTags(ParserUtil.parseTags(Arrays.asList(tags)));"},{"lineNumber":120,"author":{"gitID":"chrisboo"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":121,"author":{"gitID":"chrisboo"},"content":"            throw new IllegalArgumentException(\"tags are expected to be unique.\");"},{"lineNumber":122,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"chrisboo"},"content":"        return this;"},{"lineNumber":124,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":126,"author":{"gitID":"chrisboo"},"content":"    public FindPersonDescriptor build() {"},{"lineNumber":127,"author":{"gitID":"chrisboo"},"content":"        return descriptor;"},{"lineNumber":128,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"chrisboo"},"content":"}"}],"authorContributionMap":{"chrisboo":129}},{"path":"src/main/java/seedu/address/ui/StatusBarFooter.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Used to generate time stamps."},{"lineNumber":27,"author":{"gitID":"chrisboo"},"content":"     * \u003cp\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * TODO: change clock to an instance variable."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * We leave it as a static variable because manual dependency injection"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * will require passing down the clock reference all the way from MainApp,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * but it should be easier once we have factories/DI frameworks."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static Clock clock \u003d Clock.systemDefaultZone();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private StatusBar syncStatus;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private StatusBar saveLocationStatus;"},{"lineNumber":43,"author":{"gitID":"Jemereny"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"Jemereny"},"content":"    private StatusBar totalPersons;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"Jemereny"},"content":"    public StatusBarFooter(String saveLocation, int totalPersons) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        setSyncStatus(SYNC_STATUS_INITIAL);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        setSaveLocation(\"./\" + saveLocation);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":52,"author":{"gitID":"Jemereny"},"content":"        //@@author Jemereny"},{"lineNumber":53,"author":{"gitID":"Jemereny"},"content":"        this.totalPersons.setText(totalPersons + \" person(s) total\");"},{"lineNumber":54,"author":{"gitID":"Jemereny"},"content":"        //@@author"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Sets the clock used to determine the current time."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static void setClock(Clock clock) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        StatusBarFooter.clock \u003d clock;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Returns the clock currently in use."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static Clock getClock() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return clock;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private void setSaveLocation(String location) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.saveLocationStatus.setText(location));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    private void setSyncStatus(String status) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.syncStatus.setText(status));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"Jemereny"},"content":"    //@@author Jemereny"},{"lineNumber":80,"author":{"gitID":"Jemereny"},"content":"    private void setTotalPersons(int totalPersons) {"},{"lineNumber":81,"author":{"gitID":"Jemereny"},"content":"        this.totalPersons.setText(totalPersons + \" person(s) total\");"},{"lineNumber":82,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"Jemereny"},"content":"    //@@author"},{"lineNumber":84,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent abce) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        long now \u003d clock.millis();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        String lastUpdated \u003d new Date(now).toString();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"},{"lineNumber":91,"author":{"gitID":"Jemereny"},"content":"        //@@author Jemereny"},{"lineNumber":92,"author":{"gitID":"Jemereny"},"content":"        setTotalPersons(abce.data.getPersonList().size());"},{"lineNumber":93,"author":{"gitID":"Jemereny"},"content":"        //@@author"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Jemereny":15,"chrisboo":1,"-":79}},{"path":"src/main/java/seedu/address/ui/ResultDisplay.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleStringProperty;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.beans.property.StringProperty;"},{"lineNumber":10,"author":{"gitID":"Jemereny"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the header of the application."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";"},{"lineNumber":24,"author":{"gitID":"Jemereny"},"content":"    private static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private TextArea resultDisplay;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public ResultDisplay() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        resultDisplay.textProperty().bind(displayed);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e displayed.setValue(event.message));"},{"lineNumber":41,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":42,"author":{"gitID":"Jemereny"},"content":"        //@@author Jemereny"},{"lineNumber":43,"author":{"gitID":"Jemereny"},"content":"        if (event.isError) {"},{"lineNumber":44,"author":{"gitID":"Jemereny"},"content":"            setStyleToIndicateCommandFailture();"},{"lineNumber":45,"author":{"gitID":"Jemereny"},"content":"        } else {"},{"lineNumber":46,"author":{"gitID":"Jemereny"},"content":"            setStyleToDefault();"},{"lineNumber":47,"author":{"gitID":"Jemereny"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"Jemereny"},"content":"        //@@author"},{"lineNumber":49,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":51,"author":{"gitID":"Jemereny"},"content":"    //@@author Jemereny"},{"lineNumber":52,"author":{"gitID":"Jemereny"},"content":"    private void setStyleToDefault() {"},{"lineNumber":53,"author":{"gitID":"Jemereny"},"content":"        resultDisplay.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":54,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":56,"author":{"gitID":"Jemereny"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"Jemereny"},"content":"     * Sets resultDisplay style to indicate failed command."},{"lineNumber":58,"author":{"gitID":"Jemereny"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"Jemereny"},"content":"    private void setStyleToIndicateCommandFailture() {"},{"lineNumber":60,"author":{"gitID":"Jemereny"},"content":"        ObservableList\u003cString\u003e styleClass \u003d resultDisplay.getStyleClass();"},{"lineNumber":61,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":62,"author":{"gitID":"Jemereny"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":63,"author":{"gitID":"Jemereny"},"content":"            return;"},{"lineNumber":64,"author":{"gitID":"Jemereny"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":66,"author":{"gitID":"Jemereny"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":67,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"Jemereny"},"content":"    //@@author"},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Jemereny":30,"-":39}},{"path":"src/main/java/seedu/address/ui/HelpWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FxViewUtil;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Controller for a help page"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class HelpWindow extends UiPart\u003cRegion\u003e {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/UserGuide.html\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String ICON \u003d \"/images/help_icon.png\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String TITLE \u003d \"Help\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final Stage dialogStage;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public HelpWindow() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Scene scene \u003d new Scene(getRoot());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        //Null passed as the parent stage to make it non-modal."},{"lineNumber":34,"author":{"gitID":"-"},"content":"        dialogStage \u003d createDialogStage(TITLE, null, scene);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        dialogStage.setMaximized(true); //TODO: set a more appropriate initial size"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        FxViewUtil.setStageIcon(dialogStage, ICON);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        browser.getEngine().load(userGuideUrl);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Shows the help window."},{"lineNumber":44,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"chrisboo"},"content":"     * @throws IllegalStateException \u003cul\u003e"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     *                               \u003cli\u003e"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     *                               if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     *                               \u003c/li\u003e"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     *                               \u003cli\u003e"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     *                               if this method is called during animation or layout processing."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     *                               \u003c/li\u003e"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     *                               \u003cli\u003e"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     *                               if this method is called on the primary stage."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *                               \u003c/li\u003e"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     *                               \u003cli\u003e"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     *                               if {@code dialogStage} is already showing."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     *                               \u003c/li\u003e"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     *                               \u003c/ul\u003e"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void show() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        logger.fine(\"Showing help page about the application.\");"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        dialogStage.showAndWait();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":2,"-":62}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"chrisboo"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"chilipadiboy"},"content":"import java.text.ParseException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":19,"author":{"gitID":"chrisboo"},"content":"import seedu.address.MainApp;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":24,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.commons.events.ui.ShowBirthdayAlarmRequestEvent;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":26,"author":{"gitID":"chrisboo"},"content":"import seedu.address.commons.events.ui.SwitchAddressBookRequestEvent;"},{"lineNumber":27,"author":{"gitID":"chrisboo"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FxViewUtil;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":35,"author":{"gitID":"-"},"content":" */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cRegion\u003e {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String ICON \u003d \"/images/address_book_32.png\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final int MIN_HEIGHT \u003d 600;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final int MIN_WIDTH \u003d 450;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"chrisboo"},"content":"    private MainApp mainApp;"},{"lineNumber":46,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        setIcon(ICON);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        setWindowMinSize();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Scene scene \u003d new Scene(getRoot());"},{"lineNumber":89,"author":{"gitID":"Jemereny"},"content":"        //@@author Jemereny"},{"lineNumber":90,"author":{"gitID":"Jemereny"},"content":"        UiStyle.getInstance().setScene(scene);"},{"lineNumber":91,"author":{"gitID":"Jemereny"},"content":"        //@@author"},{"lineNumber":92,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        primaryStage.setScene(scene);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":109,"author":{"gitID":"Jemereny"},"content":"     *"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":116,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":117,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":118,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":119,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":120,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":121,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":122,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":123,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":124,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":125,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":126,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":127,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":128,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":129,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        browserPanel \u003d new BrowserPanel();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        browserPlaceholder.getChildren().add(browserPanel.getRoot());"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"Jemereny"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath(),"},{"lineNumber":152,"author":{"gitID":"Jemereny"},"content":"            logic.getFilteredPersonList().size());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * Sets the given image as the icon of the main window."},{"lineNumber":169,"author":{"gitID":"Jemereny"},"content":"     *"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * @param iconSource e.g. {@code \"/images/help_icon.png\"}"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    private void setIcon(String iconSource) {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        FxViewUtil.setStageIcon(primaryStage, iconSource);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":178,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    private void setWindowMinSize() {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        primaryStage.setMinHeight(MIN_HEIGHT);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        primaryStage.setMinWidth(MIN_WIDTH);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":198,"author":{"gitID":"-"},"content":"            (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":203,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"chrisboo"},"content":"    //@@author chrisboo"},{"lineNumber":215,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":216,"author":{"gitID":"chrisboo"},"content":"     * Opens a FileChooser to let the user select an address book to save."},{"lineNumber":217,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":218,"author":{"gitID":"chrisboo"},"content":"    @FXML"},{"lineNumber":219,"author":{"gitID":"chrisboo"},"content":"    private void handleNew() {"},{"lineNumber":220,"author":{"gitID":"chrisboo"},"content":"        File file \u003d FileUtil.getFileFromChooser(true);"},{"lineNumber":221,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":222,"author":{"gitID":"chrisboo"},"content":"        raise(new SwitchAddressBookRequestEvent(file, true));"},{"lineNumber":223,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":225,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"chrisboo"},"content":"     * Opens a FileChooser to let the user select an address book to load."},{"lineNumber":227,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":228,"author":{"gitID":"chrisboo"},"content":"    @FXML"},{"lineNumber":229,"author":{"gitID":"chrisboo"},"content":"    private void handleOpen() {"},{"lineNumber":230,"author":{"gitID":"chrisboo"},"content":"        File file \u003d FileUtil.getFileFromChooser(false);"},{"lineNumber":231,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":232,"author":{"gitID":"chrisboo"},"content":"        raise(new SwitchAddressBookRequestEvent(file, false));"},{"lineNumber":233,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"chrisboo"},"content":"    //@@author"},{"lineNumber":235,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":236,"author":{"gitID":"chilipadiboy"},"content":"    //@@author chilipadiboy"},{"lineNumber":237,"author":{"gitID":"chilipadiboy"},"content":"    @FXML"},{"lineNumber":238,"author":{"gitID":"chilipadiboy"},"content":"    private void handlebirthdayalarms() throws ParseException {"},{"lineNumber":239,"author":{"gitID":"chilipadiboy"},"content":"        BirthdayAlarmWindow birthdayAlarmWindow \u003d new BirthdayAlarmWindow(logic.getReadOnlyAddressBook());"},{"lineNumber":240,"author":{"gitID":"chilipadiboy"},"content":"        birthdayAlarmWindow.show();"},{"lineNumber":241,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"chilipadiboy"},"content":"    //@@author"},{"lineNumber":243,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":246,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"    void releaseResources() {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        browserPanel.freeResources();"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":266,"author":{"gitID":"chilipadiboy"},"content":"    //@@author chilipadiboy"},{"lineNumber":267,"author":{"gitID":"chilipadiboy"},"content":"    @Subscribe"},{"lineNumber":268,"author":{"gitID":"chilipadiboy"},"content":"    private void handleShowBirthdayAlarmEvent (ShowBirthdayAlarmRequestEvent event) throws ParseException {"},{"lineNumber":269,"author":{"gitID":"chilipadiboy"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":270,"author":{"gitID":"chilipadiboy"},"content":"        handlebirthdayalarms();"},{"lineNumber":271,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"chilipadiboy"},"content":"}"}],"authorContributionMap":{"chilipadiboy":17,"Jemereny":8,"chrisboo":29,"-":218}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.beans.binding.Bindings;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"Jemereny"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitID":"Jemereny"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"Jemereny"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"Jemereny"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":22,"author":{"gitID":"Jemereny"},"content":"    private static HashMap\u003cString, String\u003e tagColors \u003d new HashMap\u003c\u003e();"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public final ReadOnlyPerson person;"},{"lineNumber":33,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":48,"author":{"gitID":"chilipadiboy"},"content":"    //@@author chilipadiboy"},{"lineNumber":49,"author":{"gitID":"chilipadiboy"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"chilipadiboy"},"content":"    private Label birthday;"},{"lineNumber":51,"author":{"gitID":"chilipadiboy"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitID":"chilipadiboy"},"content":"    private Label remark;"},{"lineNumber":53,"author":{"gitID":"Jemereny"},"content":"    //@@author Jemereny"},{"lineNumber":54,"author":{"gitID":"Jemereny"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitID":"Jemereny"},"content":"    private Label website;"},{"lineNumber":56,"author":{"gitID":"Jemereny"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitID":"Jemereny"},"content":"    private ImageView picture;"},{"lineNumber":58,"author":{"gitID":"Jemereny"},"content":"    //@@author"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public PersonCard(ReadOnlyPerson person, int displayedIndex) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        initTags(person);"},{"lineNumber":65,"author":{"gitID":"Jemereny"},"content":"        initPicture(person);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        bindListeners(person);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Binds the individual UI elements to observe their respective {@code Person} properties"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * so that they will be notified of any changes."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private void bindListeners(ReadOnlyPerson person) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        name.textProperty().bind(Bindings.convert(person.nameProperty()));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        phone.textProperty().bind(Bindings.convert(person.phoneProperty()));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        address.textProperty().bind(Bindings.convert(person.addressProperty()));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        email.textProperty().bind(Bindings.convert(person.emailProperty()));"},{"lineNumber":78,"author":{"gitID":"chilipadiboy"},"content":"        //@@author chilipadiboy"},{"lineNumber":79,"author":{"gitID":"chilipadiboy"},"content":"        birthday.textProperty().bind(Bindings.convert(person.birthdayProperty()));"},{"lineNumber":80,"author":{"gitID":"chilipadiboy"},"content":"        remark.textProperty().bind(Bindings.convert(person.remarkProperty()));"},{"lineNumber":81,"author":{"gitID":"Jemereny"},"content":"        //@@author Jemereny"},{"lineNumber":82,"author":{"gitID":"Jemereny"},"content":"        website.textProperty().bind(Bindings.convert(person.websiteProperty()));"},{"lineNumber":83,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":84,"author":{"gitID":"Jemereny"},"content":"        person.pictureProperty().addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":85,"author":{"gitID":"Jemereny"},"content":"            picture.setImage(new Image(person.getPicture().getPictureLocation()));"},{"lineNumber":86,"author":{"gitID":"Jemereny"},"content":"        });"},{"lineNumber":87,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":88,"author":{"gitID":"Jemereny"},"content":"        person.tagProperty().addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":89,"author":{"gitID":"Jemereny"},"content":"            tags.getChildren().clear();"},{"lineNumber":90,"author":{"gitID":"Jemereny"},"content":"            person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":91,"author":{"gitID":"Jemereny"},"content":"        });"},{"lineNumber":92,"author":{"gitID":"Jemereny"},"content":"        //@@author"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"Jemereny"},"content":"    //@@author Jemereny"},{"lineNumber":96,"author":{"gitID":"Jemereny"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"Jemereny"},"content":"     * Initialise tag colors for person"},{"lineNumber":98,"author":{"gitID":"Jemereny"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"Jemereny"},"content":"    private void initTags(ReadOnlyPerson person) {"},{"lineNumber":100,"author":{"gitID":"Jemereny"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":101,"author":{"gitID":"Jemereny"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":102,"author":{"gitID":"Jemereny"},"content":"            tagLabel.setStyle(UiStyle.getInstance().getBackgroundStyle(getColorForTag(tag.tagName)));"},{"lineNumber":103,"author":{"gitID":"Jemereny"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":104,"author":{"gitID":"Jemereny"},"content":"        });"},{"lineNumber":105,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":107,"author":{"gitID":"Jemereny"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"Jemereny"},"content":"     * Initialise pictures for person"},{"lineNumber":109,"author":{"gitID":"Jemereny"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"Jemereny"},"content":"    private void initPicture(ReadOnlyPerson person) {"},{"lineNumber":111,"author":{"gitID":"Jemereny"},"content":"        picture.setImage(new Image(person.getPicture().getPictureLocation()));"},{"lineNumber":112,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":113,"author":{"gitID":"Jemereny"},"content":"        Circle circle \u003d new Circle(32.0, 32.0, 30.0);"},{"lineNumber":114,"author":{"gitID":"Jemereny"},"content":"        picture.setClip(circle);"},{"lineNumber":115,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"Jemereny"},"content":"    //@@author"},{"lineNumber":117,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            \u0026\u0026 person.equals(card.person);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"Jemereny"},"content":"    //@@author Jemereny"},{"lineNumber":137,"author":{"gitID":"Jemereny"},"content":"    private static String getColorForTag(String tagValue) {"},{"lineNumber":138,"author":{"gitID":"Jemereny"},"content":"        if (!tagColors.containsKey(tagValue)) {"},{"lineNumber":139,"author":{"gitID":"Jemereny"},"content":"            tagColors.put(tagValue, UiStyle.getInstance().getRandomHexColor());"},{"lineNumber":140,"author":{"gitID":"Jemereny"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":142,"author":{"gitID":"Jemereny"},"content":"        return tagColors.get(tagValue);"},{"lineNumber":143,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"Jemereny"},"content":"    //@@author"},{"lineNumber":145,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chilipadiboy":8,"Jemereny":57,"-":80}},{"path":"src/main/java/seedu/address/commons/core/ComponentManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Base class for *Manager classes"},{"lineNumber":7,"author":{"gitID":"chrisboo"},"content":" * \u003cp\u003e"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Registers the class\u0027 event handlers in eventsCenter"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public abstract class ComponentManager {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    protected EventsCenter eventsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * Uses default {@link EventsCenter}"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public ComponentManager() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        this(EventsCenter.getInstance());"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public ComponentManager(EventsCenter eventsCenter) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        this.eventsCenter \u003d eventsCenter;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        eventsCenter.registerHandler(this);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    protected void raise(BaseEvent event) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        eventsCenter.post(event);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":1,"-":27}},{"path":"src/main/java/seedu/address/commons/core/Config.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Config values used by the app"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Config {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":14,"author":{"gitID":"Jemereny"},"content":"    private String appTitle \u003d \"Death Note\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return appTitle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return logLevel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        sb.append(\"App title : \" + appTitle);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        sb.append(\"\\nCurrent log level : \" + logLevel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Jemereny":1,"-":71}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"chrisboo"},"content":"    public static final String MESSAGE_INVALID_FILE_PATH \u003d \"The file path provided is invalid\";"},{"lineNumber":10,"author":{"gitID":"chrisboo"},"content":"    public static final String MESSAGE_EXISTING_FILE \u003d \"Unable to create new DeathNote - file already exists\";"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":2,"-":13}},{"path":"src/main/java/seedu/address/ui/UiPart.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.stage.Modality;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."},{"lineNumber":18,"author":{"gitID":"-"},"content":" * It contains a scene graph with a root node of type {@code T}."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public abstract class UiPart\u003cT\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"chrisboo"},"content":"     * Resource folder where FXML files are stored."},{"lineNumber":24,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private FXMLLoader fxmlLoader;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public UiPart(URL fxmlFileUrl) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        requireNonNull(fxmlFileUrl);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        fxmlLoader \u003d new FXMLLoader(fxmlFileUrl);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        fxmlLoader.setController(this);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            fxmlLoader.load();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            throw new AssertionError(e);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."},{"lineNumber":46,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * @see #UiPart(URL)"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public UiPart(String fxmlFileName) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this(fxmlFileName !\u003d null ? MainApp.class.getResource(FXML_FILE_FOLDER + fxmlFileName) : null);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Returns the root object of the scene graph of this UiPart."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public T getRoot() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return fxmlLoader.getRoot();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Raises the event via {@link EventsCenter#post(BaseEvent)}"},{"lineNumber":62,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * @param event"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    protected void raise(BaseEvent event) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(event);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Registers the object as an event handler at the {@link EventsCenter}"},{"lineNumber":71,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * @param handler usually {@code this}"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    protected void registerAsAnEventHandler(Object handler) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(handler);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Creates a modal dialog."},{"lineNumber":80,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * @param title       Title of the dialog."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * @param parentStage The owner stage of the dialog."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * @param scene       The scene that will contain the dialog."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * @return the created dialog, not yet made visible."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    protected Stage createDialogStage(String title, Stage parentStage, Scene scene) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        Stage dialogStage \u003d new Stage();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        dialogStage.setTitle(title);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        dialogStage.initModality(Modality.WINDOW_MODAL);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        dialogStage.initOwner(parentStage);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        dialogStage.setScene(scene);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return dialogStage;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":7,"-":88}},{"path":"src/main/java/seedu/address/commons/core/Version.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a version with major, minor and patch number"},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class Version implements Comparable\u003cVersion\u003e {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final int major;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final int minor;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final int patch;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final boolean isEarlyAccess;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.major \u003d major;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.minor \u003d minor;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.patch \u003d patch;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.isEarlyAccess \u003d isEarlyAccess;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public int getMajor() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return major;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public int getMinor() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return minor;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public int getPatch() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return patch;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public boolean isEarlyAccess() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return isEarlyAccess;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Parses a version number string in the format V1.2.3."},{"lineNumber":50,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @param versionString version number string"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @return a Version object"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @JsonCreator"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static Version fromString(String versionString) throws IllegalArgumentException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        if (!versionMatcher.find()) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return new Version(Integer.parseInt(versionMatcher.group(1)),"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            Integer.parseInt(versionMatcher.group(2)),"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            Integer.parseInt(versionMatcher.group(3)),"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            versionMatcher.group(4) \u003d\u003d null ? false : true);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @JsonValue"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public int compareTo(Version other) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        if (this.major !\u003d other.major) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return this.major - other.major;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        if (this.minor !\u003d other.minor) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            return this.minor - other.minor;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        if (this.patch !\u003d other.patch) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            return this.patch - other.patch;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        if (this.isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            return 0;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (this.isEarlyAccess) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return -1;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return 1;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d null) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        if (!(obj instanceof Version)) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        final Version other \u003d (Version) obj;"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return this.compareTo(other) \u003d\u003d 0;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        if (!isEarlyAccess) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            hash \u003d \"1\" + hash;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return Integer.parseInt(hash);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":1,"-":113}},{"path":"src/main/java/seedu/address/commons/core/LogsCenter.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.ConsoleHandler;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.FileHandler;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Handler;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.SimpleFormatter;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Configures and manages loggers and handlers, including their logging level"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class LogsCenter {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String LOG_FILE \u003d \"addressbook.log\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static FileHandler fileHandler;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static ConsoleHandler consoleHandler;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * is requested again from the LogsCenter."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static void init(Config config) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Creates a logger with the given name."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static Logger getLogger(String name) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        logger.setUseParentHandlers(false);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        removeHandlers(logger);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        addConsoleHandler(logger);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        addFileHandler(logger);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return Logger.getLogger(name);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Creates a Logger for the given class name."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        if (clazz \u003d\u003d null) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            return Logger.getLogger(\"\");"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return getLogger(clazz.getSimpleName());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Creates the {@code consoleHandler} if it is null."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private static void addConsoleHandler(Logger logger) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (consoleHandler \u003d\u003d null) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            consoleHandler \u003d createConsoleHandler();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        logger.addHandler(consoleHandler);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Remove all the handlers from {@code logger}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private static void removeHandlers(Logger logger) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Handler[] handlers \u003d logger.getHandlers();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        for (Handler handler : handlers) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            logger.removeHandler(handler);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Creates {@code fileHandler} if it is null."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private static void addFileHandler(Logger logger) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            if (fileHandler \u003d\u003d null) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                fileHandler \u003d createFileHandler();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            logger.addHandler(fileHandler);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Creates a {@code FileHandler} for the log file."},{"lineNumber":102,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * @throws IOException if there are problems opening the file."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        fileHandler.setLevel(currentLogLevel);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return fileHandler;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        return consoleHandler;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Decorates the given string to create a log message suitable for logging event handling methods."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public static String getEventHandlingLogMessage(BaseEvent e, String message) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        return \"---[Event handled][\" + e + \"]\" + message;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * @see #getEventHandlingLogMessage(BaseEvent, String)"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public static String getEventHandlingLogMessage(BaseEvent e) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        return getEventHandlingLogMessage(e, \"\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":1,"-":130}},{"path":"src/main/java/seedu/address/ui/UiStyle.java","lines":[{"lineNumber":1,"author":{"gitID":"Jemereny"},"content":"//@@author Jemereny"},{"lineNumber":2,"author":{"gitID":"Jemereny"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":4,"author":{"gitID":"Jemereny"},"content":"import java.util.Random;"},{"lineNumber":5,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":6,"author":{"gitID":"Jemereny"},"content":"import javafx.scene.Scene;"},{"lineNumber":7,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":8,"author":{"gitID":"Jemereny"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"Jemereny"},"content":" * Contains the Styles / Colors that can be used in UI"},{"lineNumber":10,"author":{"gitID":"Jemereny"},"content":" */"},{"lineNumber":11,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":12,"author":{"gitID":"Jemereny"},"content":"public class UiStyle {"},{"lineNumber":13,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":14,"author":{"gitID":"Jemereny"},"content":"    private static UiStyle instance \u003d null;"},{"lineNumber":15,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":16,"author":{"gitID":"Jemereny"},"content":"    private static final String LIGHT_THEME_STYLE \u003d \"view/LightTheme.css\";"},{"lineNumber":17,"author":{"gitID":"Jemereny"},"content":"    private static final String DARK_THEME_STYLE \u003d \"view/DarkTheme.css\";"},{"lineNumber":18,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":19,"author":{"gitID":"Jemereny"},"content":"    private static Scene scene \u003d null;"},{"lineNumber":20,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":21,"author":{"gitID":"Jemereny"},"content":"    private static final String STYLE_BACKGROUND_COLOR \u003d \"-fx-background-color: \";"},{"lineNumber":22,"author":{"gitID":"Jemereny"},"content":"    private static final String HEX_COLOR \u003d \"#%1$s\";"},{"lineNumber":23,"author":{"gitID":"Jemereny"},"content":"    // Max hex color \"FFFFFF\" in integer"},{"lineNumber":24,"author":{"gitID":"Jemereny"},"content":"    private static final int MAX_HEX_COLOR \u003d 16777216;"},{"lineNumber":25,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":26,"author":{"gitID":"Jemereny"},"content":"    private static Random random \u003d new Random();"},{"lineNumber":27,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":28,"author":{"gitID":"Jemereny"},"content":"    public static UiStyle getInstance() {"},{"lineNumber":29,"author":{"gitID":"Jemereny"},"content":"        if (instance \u003d\u003d null) {"},{"lineNumber":30,"author":{"gitID":"Jemereny"},"content":"            instance \u003d new UiStyle();"},{"lineNumber":31,"author":{"gitID":"Jemereny"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":33,"author":{"gitID":"Jemereny"},"content":"        return instance;"},{"lineNumber":34,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":36,"author":{"gitID":"Jemereny"},"content":"    public static void setScene(Scene s) {"},{"lineNumber":37,"author":{"gitID":"Jemereny"},"content":"        scene \u003d s;"},{"lineNumber":38,"author":{"gitID":"Jemereny"},"content":"        setToDarkTheme();"},{"lineNumber":39,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":41,"author":{"gitID":"Jemereny"},"content":"    public static String getRandomHexColor() {"},{"lineNumber":42,"author":{"gitID":"Jemereny"},"content":"        return String.format(HEX_COLOR, Integer.toHexString(random.nextInt(MAX_HEX_COLOR)));"},{"lineNumber":43,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":45,"author":{"gitID":"Jemereny"},"content":"    public static String getSpecificHexColor(String hexString) {"},{"lineNumber":46,"author":{"gitID":"Jemereny"},"content":"        return String.format(HEX_COLOR, hexString);"},{"lineNumber":47,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":49,"author":{"gitID":"Jemereny"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"Jemereny"},"content":"     * @param color in hexadecimals"},{"lineNumber":51,"author":{"gitID":"Jemereny"},"content":"     * @return String to indicate background color"},{"lineNumber":52,"author":{"gitID":"Jemereny"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"Jemereny"},"content":"    public static String getBackgroundStyle(String color) {"},{"lineNumber":54,"author":{"gitID":"Jemereny"},"content":"        return UiStyle.STYLE_BACKGROUND_COLOR + color;"},{"lineNumber":55,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":57,"author":{"gitID":"Jemereny"},"content":"    //---------------------------------------------------------"},{"lineNumber":58,"author":{"gitID":"Jemereny"},"content":"    public static void setToLightTheme() {"},{"lineNumber":59,"author":{"gitID":"Jemereny"},"content":"        scene.getStylesheets().remove(DARK_THEME_STYLE);"},{"lineNumber":60,"author":{"gitID":"Jemereny"},"content":"        scene.getStylesheets().add(LIGHT_THEME_STYLE);"},{"lineNumber":61,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":63,"author":{"gitID":"Jemereny"},"content":"    public static void setToDarkTheme() {"},{"lineNumber":64,"author":{"gitID":"Jemereny"},"content":"        scene.getStylesheets().remove(LIGHT_THEME_STYLE);"},{"lineNumber":65,"author":{"gitID":"Jemereny"},"content":"        scene.getStylesheets().add(DARK_THEME_STYLE);"},{"lineNumber":66,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":68,"author":{"gitID":"Jemereny"},"content":"}"}],"authorContributionMap":{"Jemereny":68}},{"path":"src/main/java/seedu/address/commons/util/ConfigUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * A class for accessing the Config File."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class ConfigUtil {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static Optional\u003cConfig\u003e readConfig(String configFilePath) throws DataConversionException {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        return JsonUtil.readJsonFile(configFilePath, Config.class);"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static void saveConfig(Config config, String configFilePath) throws IOException {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        JsonUtil.saveJsonFile(config, configFilePath);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"chrisboo"},"content":"     * Update the appTitle field in config.json"},{"lineNumber":24,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"chrisboo"},"content":"    public static void updateConfig(String configFilePath, String addressBookFileName)"},{"lineNumber":26,"author":{"gitID":"chrisboo"},"content":"        throws DataConversionException, IOException {"},{"lineNumber":27,"author":{"gitID":"chrisboo"},"content":"        Config config \u003d readConfig(configFilePath).get();"},{"lineNumber":28,"author":{"gitID":"chrisboo"},"content":"        config.setAppTitle(addressBookFileName);"},{"lineNumber":29,"author":{"gitID":"chrisboo"},"content":"        saveConfig(config, configFilePath);"},{"lineNumber":30,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":9,"-":22}},{"path":"src/main/java/seedu/address/ui/BirthdayAlarmWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"chilipadiboy"},"content":"//@@author chilipadiboy"},{"lineNumber":2,"author":{"gitID":"chilipadiboy"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":4,"author":{"gitID":"chilipadiboy"},"content":"import java.net.URL;"},{"lineNumber":5,"author":{"gitID":"chilipadiboy"},"content":"import java.text.ParseException;"},{"lineNumber":6,"author":{"gitID":"chilipadiboy"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitID":"chilipadiboy"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitID":"chilipadiboy"},"content":"import java.util.ResourceBundle;"},{"lineNumber":9,"author":{"gitID":"chilipadiboy"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":11,"author":{"gitID":"chilipadiboy"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"chilipadiboy"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"chilipadiboy"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":14,"author":{"gitID":"chilipadiboy"},"content":"import javafx.collections.transformation.SortedList;"},{"lineNumber":15,"author":{"gitID":"chilipadiboy"},"content":"import javafx.fxml.FXML;"},{"lineNumber":16,"author":{"gitID":"chilipadiboy"},"content":"import javafx.fxml.Initializable;"},{"lineNumber":17,"author":{"gitID":"chilipadiboy"},"content":"import javafx.scene.Scene;"},{"lineNumber":18,"author":{"gitID":"chilipadiboy"},"content":"import javafx.scene.control.TableColumn;"},{"lineNumber":19,"author":{"gitID":"chilipadiboy"},"content":"import javafx.scene.control.TableView;"},{"lineNumber":20,"author":{"gitID":"chilipadiboy"},"content":"import javafx.scene.control.cell.PropertyValueFactory;"},{"lineNumber":21,"author":{"gitID":"chilipadiboy"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":22,"author":{"gitID":"chilipadiboy"},"content":"import javafx.stage.Stage;"},{"lineNumber":23,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":24,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":25,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":26,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":27,"author":{"gitID":"chilipadiboy"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"chilipadiboy"},"content":" * Controller for Birthday Alarm"},{"lineNumber":29,"author":{"gitID":"chilipadiboy"},"content":" */"},{"lineNumber":30,"author":{"gitID":"chilipadiboy"},"content":"public class BirthdayAlarmWindow extends UiPart\u003cRegion\u003e implements Initializable {"},{"lineNumber":31,"author":{"gitID":"chilipadiboy"},"content":"    private static final String FXML \u003d \"BirthdayAlarmWindow.fxml\";"},{"lineNumber":32,"author":{"gitID":"chilipadiboy"},"content":"    private static final String TITLE \u003d \"Birthday Alarm\";"},{"lineNumber":33,"author":{"gitID":"chilipadiboy"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(BirthdayAlarmWindow.class);"},{"lineNumber":34,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":35,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":36,"author":{"gitID":"chilipadiboy"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"chilipadiboy"},"content":"    private TableView\u003cReadOnlyPerson\u003e BirthdayTable;"},{"lineNumber":38,"author":{"gitID":"chilipadiboy"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"chilipadiboy"},"content":"    private TableColumn\u003cReadOnlyPerson , String\u003e NameColumn;"},{"lineNumber":40,"author":{"gitID":"chilipadiboy"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"chilipadiboy"},"content":"    private TableColumn\u003cReadOnlyPerson, String\u003e BirthdayColumn;"},{"lineNumber":42,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":43,"author":{"gitID":"chilipadiboy"},"content":"    private final Stage dialogStage;"},{"lineNumber":44,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":45,"author":{"gitID":"chilipadiboy"},"content":"    public BirthdayAlarmWindow(ReadOnlyAddressBook ab) throws ParseException {"},{"lineNumber":46,"author":{"gitID":"chilipadiboy"},"content":"        super(FXML);"},{"lineNumber":47,"author":{"gitID":"chilipadiboy"},"content":"        ObservableList\u003cReadOnlyPerson\u003e pl \u003d FXCollections.observableArrayList();"},{"lineNumber":48,"author":{"gitID":"chilipadiboy"},"content":"        Scene scene \u003d new Scene(getRoot());"},{"lineNumber":49,"author":{"gitID":"chilipadiboy"},"content":"        //Null passed as the parent stage to make it non-modal."},{"lineNumber":50,"author":{"gitID":"chilipadiboy"},"content":"        dialogStage \u003d createDialogStage(TITLE, null, scene);"},{"lineNumber":51,"author":{"gitID":"chilipadiboy"},"content":"        dialogStage.setResizable(true);"},{"lineNumber":52,"author":{"gitID":"chilipadiboy"},"content":"        pl.addAll(ab.getPersonList());"},{"lineNumber":53,"author":{"gitID":"chilipadiboy"},"content":"        for (int i \u003d pl.size() - 1; i \u003e\u003d 0; i--) {"},{"lineNumber":54,"author":{"gitID":"chilipadiboy"},"content":"            DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"},{"lineNumber":55,"author":{"gitID":"chilipadiboy"},"content":"            LocalDate storedDate \u003d LocalDate.parse(pl.get(i).getBirthday().value, dtf);"},{"lineNumber":56,"author":{"gitID":"chilipadiboy"},"content":"            LocalDate currentDate \u003d LocalDate.now();"},{"lineNumber":57,"author":{"gitID":"chilipadiboy"},"content":"            int bdayMonth \u003d storedDate.getMonthValue();"},{"lineNumber":58,"author":{"gitID":"chilipadiboy"},"content":"            int currentMonth \u003d currentDate.getMonthValue();"},{"lineNumber":59,"author":{"gitID":"chilipadiboy"},"content":"            if (bdayMonth \u003c currentMonth) {"},{"lineNumber":60,"author":{"gitID":"chilipadiboy"},"content":"                pl.remove(i); //removes entry before current month"},{"lineNumber":61,"author":{"gitID":"chilipadiboy"},"content":"            }"},{"lineNumber":62,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":63,"author":{"gitID":"chilipadiboy"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":65,"author":{"gitID":"chilipadiboy"},"content":"        FilteredList\u003cReadOnlyPerson\u003e fd \u003d new FilteredList(pl);"},{"lineNumber":66,"author":{"gitID":"chilipadiboy"},"content":"        SortedList\u003cReadOnlyPerson\u003e sl \u003d new SortedList\u003c\u003e(fd);"},{"lineNumber":67,"author":{"gitID":"chilipadiboy"},"content":"        BirthdayTable.setItems(sl);"},{"lineNumber":68,"author":{"gitID":"chilipadiboy"},"content":"        sl.comparatorProperty().bind(BirthdayTable.comparatorProperty());"},{"lineNumber":69,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":71,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"chilipadiboy"},"content":"     * Shows the reminders window."},{"lineNumber":73,"author":{"gitID":"chilipadiboy"},"content":"     *"},{"lineNumber":74,"author":{"gitID":"chilipadiboy"},"content":"     * @throws IllegalStateException \u003cul\u003e"},{"lineNumber":75,"author":{"gitID":"chilipadiboy"},"content":"     *                               \u003cli\u003e"},{"lineNumber":76,"author":{"gitID":"chilipadiboy"},"content":"     *                               if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":77,"author":{"gitID":"chilipadiboy"},"content":"     *                               \u003c/li\u003e"},{"lineNumber":78,"author":{"gitID":"chilipadiboy"},"content":"     *                               \u003cli\u003e"},{"lineNumber":79,"author":{"gitID":"chilipadiboy"},"content":"     *                               if this method is called during animation or layout processing."},{"lineNumber":80,"author":{"gitID":"chilipadiboy"},"content":"     *                               \u003c/li\u003e"},{"lineNumber":81,"author":{"gitID":"chilipadiboy"},"content":"     *                               \u003cli\u003e"},{"lineNumber":82,"author":{"gitID":"chilipadiboy"},"content":"     *                               if this method is called on the primary stage."},{"lineNumber":83,"author":{"gitID":"chilipadiboy"},"content":"     *                               \u003c/li\u003e"},{"lineNumber":84,"author":{"gitID":"chilipadiboy"},"content":"     *                               \u003cli\u003e"},{"lineNumber":85,"author":{"gitID":"chilipadiboy"},"content":"     *                               if {@code dialogStage} is already showing."},{"lineNumber":86,"author":{"gitID":"chilipadiboy"},"content":"     *                               \u003c/li\u003e"},{"lineNumber":87,"author":{"gitID":"chilipadiboy"},"content":"     *                               \u003c/ul\u003e"},{"lineNumber":88,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"chilipadiboy"},"content":"    public void show() {"},{"lineNumber":90,"author":{"gitID":"chilipadiboy"},"content":"        logger.fine(\"Showing Birthday Alarm Page\");"},{"lineNumber":91,"author":{"gitID":"chilipadiboy"},"content":"        dialogStage.showAndWait();"},{"lineNumber":92,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":94,"author":{"gitID":"chilipadiboy"},"content":"    @Override"},{"lineNumber":95,"author":{"gitID":"chilipadiboy"},"content":"    public void initialize(URL location, ResourceBundle resources) {"},{"lineNumber":96,"author":{"gitID":"chilipadiboy"},"content":"        //set up columns"},{"lineNumber":97,"author":{"gitID":"chilipadiboy"},"content":"        NameColumn.setCellValueFactory(new PropertyValueFactory\u003cReadOnlyPerson, String\u003e(\"Name\"));"},{"lineNumber":98,"author":{"gitID":"chilipadiboy"},"content":"        BirthdayColumn.setCellValueFactory(new PropertyValueFactory\u003cReadOnlyPerson, String\u003e(\"Birthday\"));"},{"lineNumber":99,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"chilipadiboy"},"content":"}"},{"lineNumber":101,"author":{"gitID":"chilipadiboy"},"content":""}],"authorContributionMap":{"chilipadiboy":101}},{"path":"src/main/java/seedu/address/commons/util/FxViewUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Contains utility methods for JavaFX views"},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class FxViewUtil {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":11,"author":{"gitID":"-"},"content":"     * Sets the given image as the icon for the given stage."},{"lineNumber":12,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":13,"author":{"gitID":"-"},"content":"     * @param iconSource e.g. {@code \"/images/help_icon.png\"}"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static void setStageIcon(Stage stage, String iconSource) {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        stage.getIcons().setAll(AppUtil.getImage(iconSource));"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":1,"-":18}},{"path":"src/main/java/seedu/address/commons/util/StringUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.PrintWriter;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.StringWriter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Helper functions for handling strings."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class StringUtil {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Ignores case, but a full word match is required."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * \u003cbr\u003eexamples:\u003cpre\u003e"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *       \u003c/pre\u003e"},{"lineNumber":22,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @param sentence cannot be null"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @param word     cannot be null, cannot be empty, must be a single word"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        requireNonNull(sentence);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        requireNonNull(word);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String preppedWord \u003d word.trim();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        String preppedSentence \u003d sentence;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        for (String wordInSentence : wordsInPreppedSentence) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            if (wordInSentence.equalsIgnoreCase(preppedWord)) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return false;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Returns a detailed message of the t, including the stack trace."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static String getDetails(Throwable t) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        requireNonNull(t);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        StringWriter sw \u003d new StringWriter();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Will return false for any other non-null string input"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"},{"lineNumber":60,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code s} is null."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        requireNonNull(s);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            int value \u003d Integer.parseInt(s);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":2,"-":71}},{"path":"src/main/java/seedu/address/commons/util/JsonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.annotation.JsonAutoDetect;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.annotation.PropertyAccessor;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.module.SimpleModule;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Converts a Java object instance to JSON and vice versa"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class JsonUtil {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        .registerModule(new SimpleModule(\"SimpleModule\")"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .addSerializer(Level.class, new ToStringSerializer())"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    static \u003cT\u003e void serializeObjectToJsonFile(File jsonFile, T objectToSerialize) throws IOException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    static \u003cT\u003e T deserializeObjectFromJsonFile(File jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        throws IOException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."},{"lineNumber":53,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * @param filePath                   cannot be null."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file format is not as expected."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("},{"lineNumber":59,"author":{"gitID":"-"},"content":"        String filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        if (!file.exists()) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            logger.info(\"Json file \" + file + \" not found\");"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        T jsonFile;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            jsonFile \u003d deserializeObjectFromJsonFile(file, classOfObjectToDeserialize);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            logger.warning(\"Error reading from jsonFile file \" + file + \": \" + e);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return Optional.of(jsonFile);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Saves the Json object to the specified file."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."},{"lineNumber":83,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * @param jsonFile cannot be null"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * @param filePath cannot be null"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * @throws IOException if there was an error during writing to the file"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e void saveJsonFile(T jsonFile, String filePath) throws IOException {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        requireNonNull(jsonFile);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        serializeObjectToJsonFile(new File(filePath), jsonFile);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Converts a given string representation of a JSON data to instance of a class"},{"lineNumber":98,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * @return The instance of T with the specified values in the JSON string"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return objectMapper.readValue(json, instanceClass);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * Converts a given instance of a class into its JSON data string representation"},{"lineNumber":108,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * @param instance The T object to be converted into the JSON string"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * @param \u003cT\u003e      The generic type to create an instance of"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * @return JSON data representation of the given class instance, in string"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Contains methods that retrieve logging level from serialized string."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        protected LevelDeserializer(Class\u003c?\u003e vc) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            super(vc);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        protected Level _deserialize(String value, DeserializationContext ctxt) throws IOException {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            return getLoggingLevel(value);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":132,"author":{"gitID":"-"},"content":"         * Gets the logging level that matches loggingLevelString"},{"lineNumber":133,"author":{"gitID":"-"},"content":"         * \u003cp\u003e"},{"lineNumber":134,"author":{"gitID":"-"},"content":"         * Returns null if there are no matches"},{"lineNumber":135,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        private Level getLoggingLevel(String loggingLevelString) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            return Level.parse(loggingLevelString);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        public Class\u003cLevel\u003e handledType() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            return Level.class;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":4,"-":142}},{"path":"src/main/java/seedu/address/commons/core/index/Index.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core.index;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Represents a zero-based or one-based index."},{"lineNumber":5,"author":{"gitID":"chrisboo"},"content":" * \u003cp\u003e"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * base the other component is using for its index. However, after receiving the {@code Index}, that component can"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * convert it back to an int if the index will not be passed to a different component again."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class Index {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private int zeroBasedIndex;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * {@link Index#fromOneBased(int)}."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private Index(int zeroBasedIndex) {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        if (zeroBasedIndex \u003c 0) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"            throw new IndexOutOfBoundsException();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.zeroBasedIndex \u003d zeroBasedIndex;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public int getZeroBased() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return zeroBasedIndex;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public int getOneBased() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return zeroBasedIndex + 1;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Creates a new {@code Index} using a zero-based index."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static Index fromZeroBased(int zeroBasedIndex) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return new Index(zeroBasedIndex);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Creates a new {@code Index} using a one-based index."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static Index fromOneBased(int oneBasedIndex) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return new Index(oneBasedIndex - 1);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            || (other instanceof Index // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            \u0026\u0026 this.zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":1,"-":53}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowBirthdayAlarmRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"chilipadiboy"},"content":"//@@author chilipadiboy"},{"lineNumber":2,"author":{"gitID":"chilipadiboy"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":4,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":6,"author":{"gitID":"chilipadiboy"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"chilipadiboy"},"content":" * An event requesting to view the Birthday Alarm page"},{"lineNumber":8,"author":{"gitID":"chilipadiboy"},"content":" */"},{"lineNumber":9,"author":{"gitID":"chilipadiboy"},"content":"public class ShowBirthdayAlarmRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"chilipadiboy"},"content":"    @Override"},{"lineNumber":11,"author":{"gitID":"chilipadiboy"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitID":"chilipadiboy"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":13,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"chilipadiboy"},"content":"}"}],"authorContributionMap":{"chilipadiboy":14}},{"path":"src/main/java/seedu/address/commons/util/FileUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"chrisboo"},"content":"import javafx.stage.FileChooser;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"chrisboo"},"content":" * Handle files"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class FileUtil {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String CHARSET \u003d \"UTF-8\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static boolean isFileExists(File file) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return file.exists() \u0026\u0026 file.isFile();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"chrisboo"},"content":"    //@@author chrisboo"},{"lineNumber":24,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"chrisboo"},"content":"     * Return a file from FileChooser."},{"lineNumber":26,"author":{"gitID":"chrisboo"},"content":"     * If {@code isNewFile} is true, opens a FileChooser that creates/overwrite file."},{"lineNumber":27,"author":{"gitID":"chrisboo"},"content":"     * Otherwise, opens a FileChooser that selects existing file."},{"lineNumber":28,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"chrisboo"},"content":"    public static File getFileFromChooser(boolean isNewFile) {"},{"lineNumber":30,"author":{"gitID":"chrisboo"},"content":"        FileChooser fileChooser \u003d new FileChooser();"},{"lineNumber":31,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":32,"author":{"gitID":"chrisboo"},"content":"        // Set and add extension filter"},{"lineNumber":33,"author":{"gitID":"chrisboo"},"content":"        FileChooser.ExtensionFilter extFilter \u003d new FileChooser.ExtensionFilter("},{"lineNumber":34,"author":{"gitID":"chrisboo"},"content":"            \"XML files (*.xml)\", \"*.xml\");"},{"lineNumber":35,"author":{"gitID":"chrisboo"},"content":"        fileChooser.getExtensionFilters().add(extFilter);"},{"lineNumber":36,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":37,"author":{"gitID":"chrisboo"},"content":"        return isNewFile ? fileChooser.showSaveDialog(new Stage())"},{"lineNumber":38,"author":{"gitID":"chrisboo"},"content":"                         : fileChooser.showOpenDialog(new Stage());"},{"lineNumber":39,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"chrisboo"},"content":"    //@@author"},{"lineNumber":41,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories."},{"lineNumber":44,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @throws IOException if the file or directory cannot be created."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static void createIfMissing(File file) throws IOException {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (!isFileExists(file)) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            createFile(file);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * @return true if file is created, false if file already exists"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static boolean createFile(File file) throws IOException {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        if (file.exists()) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        createParentDirsOfFile(file);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return file.createNewFile();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Creates the given directory along with its parent directories"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * @param dir the directory to be created; assumed not null"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * @throws IOException if the directory or a parent directory cannot be created"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static void createDirs(File dir) throws IOException {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        if (!dir.exists() \u0026\u0026 !dir.mkdirs()) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            throw new IOException(\"Failed to make directories of \" + dir.getName());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Creates parent directories of file if it has a parent directory"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static void createParentDirsOfFile(File file) throws IOException {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        File parentDir \u003d file.getParentFile();"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        if (parentDir !\u003d null) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            createDirs(parentDir);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Assumes file exists"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public static String readFromFile(File file) throws IOException {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return new String(Files.readAllBytes(file.toPath()), CHARSET);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Writes given string to a file."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Will create the file if it does not exist yet."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public static void writeToFile(File file, String content) throws IOException {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Files.write(file.toPath(), content.getBytes(CHARSET));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * Converts a string to a platform-specific file path"},{"lineNumber":108,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * @param pathWithForwardSlash A String representing a file path but using \u0027/\u0027 as the separator"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * @return {@code pathWithForwardSlash} but \u0027/\u0027 replaced with {@code File.separator}"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public static String getPath(String pathWithForwardSlash) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        checkArgument(pathWithForwardSlash.contains(\"/\"));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return pathWithForwardSlash.replace(\"/\", File.separator);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"chrisboo"},"content":"    public static String getExtension(File file) {"},{"lineNumber":118,"author":{"gitID":"chrisboo"},"content":"        String fileName \u003d file.getName();"},{"lineNumber":119,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":120,"author":{"gitID":"chrisboo"},"content":"        int index \u003d fileName.lastIndexOf(\u0027.\u0027);"},{"lineNumber":121,"author":{"gitID":"chrisboo"},"content":"        return index \u003d\u003d -1 ? \"\" : fileName.substring(fileName.lastIndexOf(\u0027.\u0027));"},{"lineNumber":122,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":30,"-":93}},{"path":"src/main/java/seedu/address/commons/util/CollectionUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Utility methods related to Collections"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class CollectionUtil {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"chrisboo"},"content":"     * @see #requireAllNonNull(Collection)"},{"lineNumber":19,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static void requireAllNonNull(Object... items) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        requireNonNull(items);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        Stream.of(items).forEach(Objects::requireNonNull);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Throws NullPointerException if {@code items} or any element of {@code items} is null."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static void requireAllNonNull(Collection\u003c?\u003e items) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(items);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        items.forEach(Objects::requireNonNull);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Returns true if {@code items} contain any elements that are non-null."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static boolean isAnyNonNull(Object... items) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Returns true if every element in a collection are unique by {@link Object#equals(Object)}."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static boolean elementsAreUnique(Collection\u003c?\u003e items) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        final Set\u003cObject\u003e testSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        for (Object item : items) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            final boolean itemAlreadyExists \u003d !testSet.add(item); // see Set documentation"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            if (itemAlreadyExists) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return true;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":3,"-":50}},{"path":"src/main/java/seedu/address/commons/events/BaseEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * The base class for all event classes."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public abstract class BaseEvent {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":9,"author":{"gitID":"-"},"content":"     * All Events should have a clear unambiguous custom toString message so that feedback message creation"},{"lineNumber":10,"author":{"gitID":"-"},"content":"     * stays consistent and reusable."},{"lineNumber":11,"author":{"gitID":"chrisboo"},"content":"     * \u003cp\u003e"},{"lineNumber":12,"author":{"gitID":"-"},"content":"     * For example, the event manager post method will call any posted event\u0027s toString and print it in the console."},{"lineNumber":13,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public abstract String toString();"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":1,"-":15}},{"path":"src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Indicates that a new result is available."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class NewResultAvailableEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public final String message;"},{"lineNumber":11,"author":{"gitID":"Jemereny"},"content":"    public final boolean isError;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"Jemereny"},"content":"    public NewResultAvailableEvent(String message, boolean isError) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        this.message \u003d message;"},{"lineNumber":15,"author":{"gitID":"Jemereny"},"content":"        this.isError \u003d isError;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Jemereny":3,"-":20}},{"path":"src/main/java/seedu/address/commons/events/model/AddressBookChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"chrisboo"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"chrisboo"},"content":" * Indicates the AddressBook in the model has changed"},{"lineNumber":8,"author":{"gitID":"chrisboo"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class AddressBookChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public final ReadOnlyAddressBook data;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public AddressBookChangedEvent(ReadOnlyAddressBook data) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        this.data \u003d data;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return \"number of persons \" + data.getPersonList().size() + \", number of tags \" + data.getTagList().size();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":3,"-":18}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":16,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @throws ParseException   If an error occurs during parsing."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"chrisboo"},"content":"     * Returns an unmodifiable view of the filtered list of persons"},{"lineNumber":26,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"chrisboo"},"content":"     * Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object"},{"lineNumber":31,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":33,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":34,"author":{"gitID":"chilipadiboy"},"content":"    //@@author chilipadiboy"},{"lineNumber":35,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"chilipadiboy"},"content":"     *Returns an unmodifiable AddressBook"},{"lineNumber":37,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"chilipadiboy"},"content":"    ReadOnlyAddressBook getReadOnlyAddressBook();"},{"lineNumber":39,"author":{"gitID":"chilipadiboy"},"content":"}"}],"authorContributionMap":{"chilipadiboy":8,"chrisboo":7,"-":24}},{"path":"src/main/java/seedu/address/logic/parser/ArgumentMultimap.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Stores mapping of prefixes to their respective arguments."},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Each key may be associated with multiple argument values."},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained."},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * can be inserted multiple times for the same prefix."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class ArgumentMultimap {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"chrisboo"},"content":"     * Prefixes mapped to their respective arguments"},{"lineNumber":20,"author":{"gitID":"chrisboo"},"content":"     **/"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void put(Prefix prefix, String argValue) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        argValues.add(argValue);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        argMultimap.put(prefix, argValues);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Returns the last value of {@code prefix}."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Returns all values of {@code prefix}."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            return new ArrayList\u003c\u003e();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public String getPreamble() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":3,"-":59}},{"path":"src/main/java/seedu/address/logic/parser/Parser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public interface Parser\u003cT extends Command\u003e {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a command and returns it."},{"lineNumber":13,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    T parse(String userInput) throws ParseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":1,"-":16}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":6,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"Jemereny"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PICTURE;"},{"lineNumber":10,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_WEBSITE;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":20,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":21,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":22,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":23,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":25,"author":{"gitID":"Jemereny"},"content":"import seedu.address.model.person.Picture;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":27,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":28,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Website;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":40,"author":{"gitID":"Jemereny"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":45,"author":{"gitID":"chilipadiboy"},"content":"                ArgumentTokenizer.tokenize(args,"},{"lineNumber":46,"author":{"gitID":"chilipadiboy"},"content":"                    PREFIX_NAME,"},{"lineNumber":47,"author":{"gitID":"chilipadiboy"},"content":"                    PREFIX_PHONE,"},{"lineNumber":48,"author":{"gitID":"chilipadiboy"},"content":"                    PREFIX_EMAIL,"},{"lineNumber":49,"author":{"gitID":"chilipadiboy"},"content":"                    PREFIX_ADDRESS,"},{"lineNumber":50,"author":{"gitID":"chilipadiboy"},"content":"                    PREFIX_BIRTHDAY,"},{"lineNumber":51,"author":{"gitID":"chilipadiboy"},"content":"                    PREFIX_WEBSITE,"},{"lineNumber":52,"author":{"gitID":"Jemereny"},"content":"                    PREFIX_PICTURE,"},{"lineNumber":53,"author":{"gitID":"chilipadiboy"},"content":"                    PREFIX_TAG);"},{"lineNumber":54,"author":{"gitID":"chilipadiboy"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)) { //checks if name is present as this is compulsory"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":63,"author":{"gitID":"chilipadiboy"},"content":"            Birthday birthday \u003d ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY)).get();"},{"lineNumber":64,"author":{"gitID":"chilipadiboy"},"content":"            Remark remark \u003d new Remark(\"\"); // add command does not allow adding remarks straight away"},{"lineNumber":65,"author":{"gitID":"Jemereny"},"content":"            Website website \u003d ParserUtil.parseWebsite(argMultimap.getValue(PREFIX_WEBSITE)).get();"},{"lineNumber":66,"author":{"gitID":"Jemereny"},"content":"            Picture picture \u003d ParserUtil.parsePicture(argMultimap.getValue(PREFIX_PICTURE)).get();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"Jemereny"},"content":"            ReadOnlyPerson person \u003d new Person(name, phone, email, address, birthday, remark, website,"},{"lineNumber":70,"author":{"gitID":"Jemereny"},"content":"                    picture, tagList);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chilipadiboy":27,"Jemereny":8,"-":51}},{"path":"src/main/java/seedu/address/logic/parser/DeleteCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * and returns an DeleteCommand object for execution."},{"lineNumber":18,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public DeleteCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            return new DeleteCommand(index);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":1,"-":30}},{"path":"src/main/java/seedu/address/logic/parser/SelectCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new SelectCommand object"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the SelectCommand"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * and returns an SelectCommand object for execution."},{"lineNumber":18,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public SelectCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            return new SelectCommand(index);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":1,"-":29}},{"path":"src/main/java/seedu/address/commons/events/ui/SwitchAddressBookRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"chrisboo"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":3,"author":{"gitID":"chrisboo"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"chrisboo"},"content":"//@@author chrisboo"},{"lineNumber":8,"author":{"gitID":"chrisboo"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"chrisboo"},"content":" * Indicates a request to switch (open existing / create new) AddressBook"},{"lineNumber":10,"author":{"gitID":"chrisboo"},"content":" */"},{"lineNumber":11,"author":{"gitID":"chrisboo"},"content":"public class SwitchAddressBookRequestEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":13,"author":{"gitID":"chrisboo"},"content":"    private String fileName;"},{"lineNumber":14,"author":{"gitID":"chrisboo"},"content":"    private String filePath;"},{"lineNumber":15,"author":{"gitID":"chrisboo"},"content":"    private boolean isNewFile;"},{"lineNumber":16,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":17,"author":{"gitID":"chrisboo"},"content":"    public SwitchAddressBookRequestEvent(File file, boolean isNewFile) {"},{"lineNumber":18,"author":{"gitID":"chrisboo"},"content":"        fileName \u003d file.getName();"},{"lineNumber":19,"author":{"gitID":"chrisboo"},"content":"        filePath \u003d file.getPath();"},{"lineNumber":20,"author":{"gitID":"chrisboo"},"content":"        this.isNewFile \u003d isNewFile;"},{"lineNumber":21,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":23,"author":{"gitID":"chrisboo"},"content":"    public String getFilePath() {"},{"lineNumber":24,"author":{"gitID":"chrisboo"},"content":"        return filePath;"},{"lineNumber":25,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":27,"author":{"gitID":"chrisboo"},"content":"    public String getFileName() {"},{"lineNumber":28,"author":{"gitID":"chrisboo"},"content":"        return fileName;"},{"lineNumber":29,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":31,"author":{"gitID":"chrisboo"},"content":"    public boolean isOpenNewAddressBook() { return isNewFile; }"},{"lineNumber":32,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":33,"author":{"gitID":"chrisboo"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"chrisboo"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitID":"chrisboo"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":36,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"chrisboo"},"content":"}"},{"lineNumber":38,"author":{"gitID":"chrisboo"},"content":"//@@author"}],"authorContributionMap":{"chrisboo":36,"-":2}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":6,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_WEBSITE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"chrisboo"},"content":"import java.util.Collection;"},{"lineNumber":13,"author":{"gitID":"chrisboo"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"chrisboo"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitID":"chrisboo"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":19,"author":{"gitID":"chrisboo"},"content":"import seedu.address.logic.commands.FindCommand.FindPersonDescriptor;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":21,"author":{"gitID":"chrisboo"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"content":"    //@@author"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * and returns an FindCommand object for execution."},{"lineNumber":32,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public FindCommand parse(String args) throws ParseException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":38,"author":{"gitID":"chilipadiboy"},"content":"                ArgumentTokenizer.tokenize(args,"},{"lineNumber":39,"author":{"gitID":"chilipadiboy"},"content":"                    PREFIX_NAME,"},{"lineNumber":40,"author":{"gitID":"chilipadiboy"},"content":"                    PREFIX_PHONE,"},{"lineNumber":41,"author":{"gitID":"chilipadiboy"},"content":"                    PREFIX_EMAIL,"},{"lineNumber":42,"author":{"gitID":"chilipadiboy"},"content":"                    PREFIX_ADDRESS,"},{"lineNumber":43,"author":{"gitID":"chilipadiboy"},"content":"                    PREFIX_BIRTHDAY,"},{"lineNumber":44,"author":{"gitID":"chilipadiboy"},"content":"                    PREFIX_WEBSITE,"},{"lineNumber":45,"author":{"gitID":"chilipadiboy"},"content":"                    PREFIX_TAG);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"chrisboo"},"content":"        FindPersonDescriptor findPersonDescriptor \u003d new FindPersonDescriptor();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"chilipadiboy"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME))"},{"lineNumber":50,"author":{"gitID":"chrisboo"},"content":"                .ifPresent(findPersonDescriptor::setName);"},{"lineNumber":51,"author":{"gitID":"chilipadiboy"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE))"},{"lineNumber":52,"author":{"gitID":"chrisboo"},"content":"                .ifPresent(findPersonDescriptor::setPhone);"},{"lineNumber":53,"author":{"gitID":"chilipadiboy"},"content":"            ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY))"},{"lineNumber":54,"author":{"gitID":"chrisboo"},"content":"                .ifPresent(findPersonDescriptor::setBirthday);"},{"lineNumber":55,"author":{"gitID":"chilipadiboy"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL))"},{"lineNumber":56,"author":{"gitID":"chrisboo"},"content":"                .ifPresent(findPersonDescriptor::setEmail);"},{"lineNumber":57,"author":{"gitID":"chilipadiboy"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS))"},{"lineNumber":58,"author":{"gitID":"chrisboo"},"content":"                .ifPresent(findPersonDescriptor::setAddress);"},{"lineNumber":59,"author":{"gitID":"chilipadiboy"},"content":"            ParserUtil.parseWebsite(argMultimap.getValue(PREFIX_WEBSITE))"},{"lineNumber":60,"author":{"gitID":"chrisboo"},"content":"                .ifPresent(findPersonDescriptor::setWebsite);"},{"lineNumber":61,"author":{"gitID":"chrisboo"},"content":"            parseTagsForFind(argMultimap.getAllValues(PREFIX_TAG))"},{"lineNumber":62,"author":{"gitID":"chrisboo"},"content":"                .ifPresent(findPersonDescriptor::setTags);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"chrisboo"},"content":"        if (findPersonDescriptor.allNull()) {"},{"lineNumber":68,"author":{"gitID":"chrisboo"},"content":"            throw new ParseException(FindCommand.MESSAGE_NO_FIELD_PROVIDED);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"chrisboo"},"content":"        return new FindCommand(findPersonDescriptor);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"chrisboo"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":77,"author":{"gitID":"chrisboo"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":78,"author":{"gitID":"chrisboo"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":79,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"chrisboo"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForFind(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":81,"author":{"gitID":"chrisboo"},"content":"        assert tags !\u003d null;"},{"lineNumber":82,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":83,"author":{"gitID":"chrisboo"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":84,"author":{"gitID":"chrisboo"},"content":"            return Optional.empty();"},{"lineNumber":85,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"chrisboo"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":87,"author":{"gitID":"chrisboo"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":88,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":89,"content":"    //@@author"},{"lineNumber":90,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":2,"chilipadiboy":21,"chrisboo":34,"-":33}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.logic.commands.BirthdayAlarmCommand;"},{"lineNumber":11,"author":{"gitID":"Jemereny"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":12,"author":{"gitID":"Jemereny"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":13,"author":{"gitID":"Jemereny"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":14,"author":{"gitID":"Jemereny"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":15,"author":{"gitID":"Jemereny"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":16,"author":{"gitID":"Jemereny"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":17,"author":{"gitID":"Jemereny"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":18,"author":{"gitID":"Jemereny"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":19,"author":{"gitID":"Jemereny"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":20,"author":{"gitID":"chrisboo"},"content":"import seedu.address.logic.commands.NewCommand;"},{"lineNumber":21,"author":{"gitID":"chrisboo"},"content":"import seedu.address.logic.commands.OpenCommand;"},{"lineNumber":22,"author":{"gitID":"Jemereny"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":23,"author":{"gitID":"Jemereny"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":24,"author":{"gitID":"Jemereny"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":25,"author":{"gitID":"Jemereny"},"content":"import seedu.address.logic.commands.ThemeCommand;"},{"lineNumber":26,"author":{"gitID":"Jemereny"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"chrisboo"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":57,"author":{"gitID":"chrisboo"},"content":"        case AddCommand.COMMAND_SHORT:"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"chrisboo"},"content":"        case EditCommand.COMMAND_ALIAS:"},{"lineNumber":62,"author":{"gitID":"chrisboo"},"content":"        case EditCommand.COMMAND_SHORT:"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"chrisboo"},"content":"        case SelectCommand.COMMAND_SHORT:"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"chrisboo"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":71,"author":{"gitID":"chrisboo"},"content":"        case DeleteCommand.COMMAND_SHORT:"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"chrisboo"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":76,"author":{"gitID":"chrisboo"},"content":"        case ClearCommand.COMMAND_SHORT:"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"chrisboo"},"content":"        case FindCommand.COMMAND_ALIAS:"},{"lineNumber":81,"author":{"gitID":"chrisboo"},"content":"        case FindCommand.COMMAND_SHORT:"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"chrisboo"},"content":"        case ListCommand.COMMAND_SHORT:"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"chrisboo"},"content":"        case HistoryCommand.COMMAND_SHORT:"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"chrisboo"},"content":"        //@@author chrisboo"},{"lineNumber":94,"author":{"gitID":"chrisboo"},"content":"        case OpenCommand.COMMAND_SHORT:"},{"lineNumber":95,"author":{"gitID":"chrisboo"},"content":"        case OpenCommand.COMMAND_WORD:"},{"lineNumber":96,"author":{"gitID":"chrisboo"},"content":"            return new OpenCommandParser().parse(arguments);"},{"lineNumber":97,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":98,"author":{"gitID":"chrisboo"},"content":"        case NewCommand.COMMAND_SHORT:"},{"lineNumber":99,"author":{"gitID":"chrisboo"},"content":"        case NewCommand.COMMAND_WORD:"},{"lineNumber":100,"author":{"gitID":"chrisboo"},"content":"            return new NewCommandParser().parse(arguments);"},{"lineNumber":101,"author":{"gitID":"chrisboo"},"content":"        //@@author"},{"lineNumber":102,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"chrisboo"},"content":"        case UndoCommand.COMMAND_SHORT:"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"chrisboo"},"content":"        case RedoCommand.COMMAND_SHORT:"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"chilipadiboy"},"content":"        case RemarkCommand.COMMAND_WORD:"},{"lineNumber":118,"author":{"gitID":"chilipadiboy"},"content":"            return new RemarkCommandParser().parse(arguments);"},{"lineNumber":119,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":120,"author":{"gitID":"Jemereny"},"content":"        //@@author Jemereny"},{"lineNumber":121,"author":{"gitID":"Jemereny"},"content":"        case ThemeCommand.COMMAND_WORD:"},{"lineNumber":122,"author":{"gitID":"Jemereny"},"content":"        case ThemeCommand.COMMAND_SHORT:"},{"lineNumber":123,"author":{"gitID":"Jemereny"},"content":"            return new ThemeCommandParser().parse(arguments);"},{"lineNumber":124,"author":{"gitID":"Jemereny"},"content":"        //@@author"},{"lineNumber":125,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":126,"author":{"gitID":"chilipadiboy"},"content":"        //@@author chilipadiboy"},{"lineNumber":127,"author":{"gitID":"chilipadiboy"},"content":"        case BirthdayAlarmCommand.COMMAND_WORD:"},{"lineNumber":128,"author":{"gitID":"chilipadiboy"},"content":"        case BirthdayAlarmCommand.COMMAND_SHORT:"},{"lineNumber":129,"author":{"gitID":"chilipadiboy"},"content":"            return new BirthdayAlarmCommand();"},{"lineNumber":130,"author":{"gitID":"chilipadiboy"},"content":"        //@@author"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chilipadiboy":10,"Jemereny":19,"chrisboo":27,"-":80}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":14,"author":{"gitID":"chilipadiboy"},"content":"    //@@author chilipadiboy"},{"lineNumber":15,"author":{"gitID":"chilipadiboy"},"content":"    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"},{"lineNumber":16,"author":{"gitID":"chilipadiboy"},"content":"    public static final Prefix PREFIX_BIRTHDAY \u003d new Prefix(\"b/\");"},{"lineNumber":17,"author":{"gitID":"Jemereny"},"content":"    //@@author Jemereny"},{"lineNumber":18,"author":{"gitID":"Jemereny"},"content":"    public static final Prefix PREFIX_WEBSITE \u003d new Prefix(\"w/\");"},{"lineNumber":19,"author":{"gitID":"Jemereny"},"content":"    public static final Prefix PREFIX_PICTURE \u003d new Prefix(\"pic/\");"},{"lineNumber":20,"author":{"gitID":"Jemereny"},"content":"    //author"},{"lineNumber":21,"author":{"gitID":"Jemereny"},"content":"}"}],"authorContributionMap":{"chilipadiboy":3,"Jemereny":5,"-":13}},{"path":"src/main/java/seedu/address/logic/parser/OpenCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"Jemereny"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":3,"author":{"gitID":"Jemereny"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":5,"author":{"gitID":"chrisboo"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"chrisboo"},"content":"import seedu.address.logic.commands.OpenCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"chrisboo"},"content":"//@@author chrisboo"},{"lineNumber":12,"author":{"gitID":"chrisboo"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"chrisboo"},"content":" * Parses input arguments and creates a new OpenCommand object"},{"lineNumber":14,"author":{"gitID":"chrisboo"},"content":" */"},{"lineNumber":15,"author":{"gitID":"chrisboo"},"content":"public class OpenCommandParser implements Parser\u003cOpenCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":17,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"chrisboo"},"content":"     * Parses the given {@code String} of arguments in the context of the OpenCommand"},{"lineNumber":19,"author":{"gitID":"chrisboo"},"content":"     * and returns an OpenCommand object for execution."},{"lineNumber":20,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"chrisboo"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"chrisboo"},"content":"    public OpenCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"chrisboo"},"content":"        try {"},{"lineNumber":25,"author":{"gitID":"chrisboo"},"content":"            File file \u003d ParserUtil.parseFile(args);"},{"lineNumber":26,"author":{"gitID":"chrisboo"},"content":"            return new OpenCommand(file);"},{"lineNumber":27,"author":{"gitID":"chrisboo"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":28,"author":{"gitID":"chrisboo"},"content":"            throw new ParseException("},{"lineNumber":29,"author":{"gitID":"chrisboo"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"chrisboo"},"content":"}"},{"lineNumber":33,"author":{"gitID":"chrisboo"},"content":"//@@author"}],"authorContributionMap":{"Jemereny":3,"chrisboo":27,"-":3}},{"path":"src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * in the above example.\u003cbr\u003e"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class ArgumentTokenizer {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @param prefixes   Prefixes to tokenize the arguments string with"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @return ArgumentMultimap object that maps prefixes to their arguments"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return extractArguments(argsString, positions);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Finds all zero-based prefix positions in the given arguments string."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @param prefixes   Prefixes to find in the arguments string"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @return List of zero-based prefix positions in the given arguments string"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        for (Prefix prefix : prefixes) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            positions.addAll(findPrefixPositions(argsString, prefix));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return positions;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * {@see findAllPrefixPositions}"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        while (prefixPosition !\u003d -1) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            positions.add(extendedPrefix);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return positions;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Returns the index of the first occurrence of {@code prefix} in"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * {@code argsString} starting from index {@code fromIndex}. An occurrence"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * such occurrence can be found."},{"lineNumber":67,"author":{"gitID":"chrisboo"},"content":"     * \u003cp\u003e"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * occurrences of \"p/\" with whitespace before it. However, if"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns 5."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return prefixIndex \u003d\u003d -1 ? -1"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            : prefixIndex + 1; // +1 as offset for whitespace"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * {@code argsString}."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * @return ArgumentMultimap object that maps prefixes to their arguments"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // Sort by start position"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // Insert a PrefixPosition to represent the preamble"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        prefixPositions.add(0, preambleMarker);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // Add a dummy PrefixPosition to represent the end of the string"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        prefixPositions.add(endPositionMarker);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // Map prefixes to their argument values (if any)"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            // Extract and store prefixes and their arguments"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            argMultimap.put(argPrefix, argValue);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return argMultimap;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * The end position of the value is determined by {@code nextPrefixPosition}."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    private static String extractArgumentValue(String argsString,"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                                               PrefixPosition currentPrefixPosition,"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                                               PrefixPosition nextPrefixPosition) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        Prefix prefix \u003d currentPrefixPosition.getPrefix();"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return value.trim();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Represents a prefix\u0027s position in an arguments string."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    private static class PrefixPosition {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        private int startPosition;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        private final Prefix prefix;"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        PrefixPosition(Prefix prefix, int startPosition) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            this.prefix \u003d prefix;"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            this.startPosition \u003d startPosition;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        int getStartPosition() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            return this.startPosition;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        Prefix getPrefix() {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            return this.prefix;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":1,"-":149}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"chrisboo"},"content":"import static seedu.address.commons.util.FileUtil.getExtension;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"chrisboo"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":15,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":16,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":17,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":20,"author":{"gitID":"Jemereny"},"content":"import seedu.address.model.person.Picture;"},{"lineNumber":21,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Website;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":27,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"chrisboo"},"content":"    static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":37,"author":{"gitID":"chrisboo"},"content":"    static final String MESSAGE_INVALID_FILE \u003d \"File must be an xml document.\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":42,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"chrisboo"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"chrisboo"},"content":"    //@@author chrisboo"},{"lineNumber":54,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"chrisboo"},"content":"     * Parse {@code path} into a {@code File} and returns it. Leading and trailing whitespaces will be trimmed."},{"lineNumber":56,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":57,"author":{"gitID":"chrisboo"},"content":"     * @throws IllegalValueException if the file does not exist"},{"lineNumber":58,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"chrisboo"},"content":"    public static File parseFile(String path) throws IllegalValueException {"},{"lineNumber":60,"author":{"gitID":"chrisboo"},"content":"        String trimmedAddress \u003d path.trim();"},{"lineNumber":61,"author":{"gitID":"chrisboo"},"content":"        File file \u003d new File(trimmedAddress);"},{"lineNumber":62,"author":{"gitID":"chrisboo"},"content":"        if (!getExtension(file).equals(\".xml\")) {"},{"lineNumber":63,"author":{"gitID":"chrisboo"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_FILE);"},{"lineNumber":64,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"chrisboo"},"content":"        return file;"},{"lineNumber":66,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"chrisboo"},"content":"    //@@author"},{"lineNumber":68,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(new Name(name.get())) : Optional.empty();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":83,"author":{"gitID":"chrisboo"},"content":"        return phone.isPresent() ? Optional.of(new Phone(phone.get())) : Optional.of(new Phone(null));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":91,"author":{"gitID":"chrisboo"},"content":"        return address.isPresent() ? Optional.of(new Address(address.get())) : Optional.of(new Address(null));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":99,"author":{"gitID":"chrisboo"},"content":"        return email.isPresent() ? Optional.of(new Email(email.get())) : Optional.of(new Email(null));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"Jemereny"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"chrisboo"},"content":"     * Parses a {@code Optional\u003cString\u003e website} into an {@code Optional\u003cWebsite\u003e} if {@code website} is present."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"Jemereny"},"content":"    public static Optional\u003cWebsite\u003e parseWebsite(Optional\u003cString\u003e website) throws IllegalValueException {"},{"lineNumber":107,"author":{"gitID":"Jemereny"},"content":"        return website.isPresent() ? Optional.of(new Website(website.get())) : Optional.of(new Website(null));"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"Jemereny"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"Jemereny"},"content":"     * Parses a {@code Optional\u003cString\u003e picture} into an {@code Optional\u003cPicture\u003e} if {@code picture} is present."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"Jemereny"},"content":"    public static Optional\u003cPicture\u003e parsePicture(Optional\u003cString\u003e picture) throws IllegalValueException {"},{"lineNumber":115,"author":{"gitID":"Jemereny"},"content":"        return picture.isPresent() ? Optional.of(new Picture(picture.get())) : Optional.of(new Picture(null));"},{"lineNumber":116,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":118,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"chilipadiboy"},"content":"     * Parses a {@code Optional\u003cString\u003e birthday} into an {@code Optional\u003cBirthday\u003e} if {@code birthday} is present."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"chilipadiboy"},"content":"    public static Optional\u003cBirthday\u003e parseBirthday(Optional\u003cString\u003e birthday) throws IllegalValueException {"},{"lineNumber":123,"author":{"gitID":"chrisboo"},"content":"        return birthday.isPresent() ? Optional.of(new Birthday(birthday.get())) : Optional.of(new Birthday(null));"},{"lineNumber":124,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            tagSet.add(new Tag(tagName));"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chilipadiboy":11,"Jemereny":10,"chrisboo":27,"-":89}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":7,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"Jemereny"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PICTURE;"},{"lineNumber":11,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_WEBSITE;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":34,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":40,"author":{"gitID":"chilipadiboy"},"content":"                ArgumentTokenizer.tokenize(args,"},{"lineNumber":41,"author":{"gitID":"chilipadiboy"},"content":"                    PREFIX_NAME,"},{"lineNumber":42,"author":{"gitID":"chilipadiboy"},"content":"                    PREFIX_PHONE,"},{"lineNumber":43,"author":{"gitID":"chilipadiboy"},"content":"                    PREFIX_EMAIL,"},{"lineNumber":44,"author":{"gitID":"chilipadiboy"},"content":"                    PREFIX_ADDRESS,"},{"lineNumber":45,"author":{"gitID":"chilipadiboy"},"content":"                    PREFIX_BIRTHDAY,"},{"lineNumber":46,"author":{"gitID":"chilipadiboy"},"content":"                    PREFIX_WEBSITE,"},{"lineNumber":47,"author":{"gitID":"Jemereny"},"content":"                    PREFIX_PICTURE,"},{"lineNumber":48,"author":{"gitID":"chilipadiboy"},"content":"                    PREFIX_TAG);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":60,"author":{"gitID":"chilipadiboy"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME))"},{"lineNumber":61,"author":{"gitID":"chilipadiboy"},"content":"                .ifPresent(editPersonDescriptor::setName);"},{"lineNumber":62,"author":{"gitID":"chilipadiboy"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE))"},{"lineNumber":63,"author":{"gitID":"chilipadiboy"},"content":"                .ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":64,"author":{"gitID":"chilipadiboy"},"content":"            ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY))"},{"lineNumber":65,"author":{"gitID":"chilipadiboy"},"content":"                .ifPresent(editPersonDescriptor::setBirthday);"},{"lineNumber":66,"author":{"gitID":"chilipadiboy"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL))"},{"lineNumber":67,"author":{"gitID":"chilipadiboy"},"content":"                .ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":68,"author":{"gitID":"chilipadiboy"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS))"},{"lineNumber":69,"author":{"gitID":"chilipadiboy"},"content":"                .ifPresent(editPersonDescriptor::setAddress);"},{"lineNumber":70,"author":{"gitID":"chilipadiboy"},"content":"            ParserUtil.parseWebsite(argMultimap.getValue(PREFIX_WEBSITE))"},{"lineNumber":71,"author":{"gitID":"chilipadiboy"},"content":"                .ifPresent(editPersonDescriptor::setWebsite);"},{"lineNumber":72,"author":{"gitID":"Jemereny"},"content":"            ParserUtil.parsePicture(argMultimap.getValue(PREFIX_PICTURE))"},{"lineNumber":73,"author":{"gitID":"Jemereny"},"content":"                    .ifPresent(editPersonDescriptor::setPicture);"},{"lineNumber":74,"author":{"gitID":"chilipadiboy"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG))"},{"lineNumber":75,"author":{"gitID":"chilipadiboy"},"content":"                .ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chilipadiboy":29,"Jemereny":4,"chrisboo":1,"-":68}},{"path":"src/main/java/seedu/address/logic/ListElementPointer.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.NoSuchElementException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Has a cursor that points to an element in the list, and is able to iterate through the list."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * This is different from {@code ListIterator}, which has a cursor that points in between elements."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * The {@code ListIterator}\u0027s behaviour: when making alternating calls of {@code next()} and"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * {@code previous()}, the same element is returned on both calls."},{"lineNumber":11,"author":{"gitID":"-"},"content":" * In contrast, {@code ListElementPointer}\u0027s behaviour: when making alternating calls of"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * {@code next()} and {@code previous()}, the next and previous elements are returned respectively."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class ListElementPointer {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private List\u003cString\u003e list;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private int index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Constructs {@code ListElementPointer} which is backed by a defensive copy of {@code list}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * The cursor points to the last element in {@code list}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public ListElementPointer(List\u003cString\u003e list) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.list \u003d list;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        index \u003d this.list.size() - 1;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Appends {@code element} to the end of the list."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void add(String element) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        list.add(element);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Returns true if calling {@code #next()} does not throw an {@code NoSuchElementException}."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public boolean hasNext() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        int nextIndex \u003d index + 1;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return isWithinBounds(nextIndex);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Returns true if calling {@code #previous()} does not throw an {@code NoSuchElementException}."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public boolean hasPrevious() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        int previousIndex \u003d index - 1;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return isWithinBounds(previousIndex);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Returns true if calling {@code #current()} does not throw an {@code NoSuchElementException}."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public boolean hasCurrent() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return isWithinBounds(index);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private boolean isWithinBounds(int index) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return index \u003e\u003d 0 \u0026\u0026 index \u003c list.size();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Returns the next element in the list and advances the cursor position."},{"lineNumber":63,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * @throws NoSuchElementException if there is no more next element in the list."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public String next() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        if (!hasNext()) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            throw new NoSuchElementException();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return list.get(++index);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns the previous element in the list and moves the cursor position backwards."},{"lineNumber":75,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * @throws NoSuchElementException if there is no more previous element in the list."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public String previous() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        if (!hasPrevious()) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throw new NoSuchElementException();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return list.get(--index);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Returns the current element in the list."},{"lineNumber":87,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * @throws NoSuchElementException if the list is empty."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public String current() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        if (!hasCurrent()) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            throw new NoSuchElementException();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return list.get(index);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        if (!(other instanceof ListElementPointer)) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        ListElementPointer iterator \u003d (ListElementPointer) other;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return list.equals(iterator.list) \u0026\u0026 index \u003d\u003d iterator.index;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":3,"-":110}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Deletes a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":17,"author":{"gitID":"chrisboo"},"content":"    public static final String COMMAND_SHORT \u003d \"d\";"},{"lineNumber":18,"author":{"gitID":"chrisboo"},"content":"    public static final String COMMAND_ALIAS \u003d \"destroy\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        + \": Deletes the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"        + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"        + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        ReadOnlyPerson personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            assert false : \"The target person cannot be missing\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":2,"-":58}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":11,"author":{"gitID":"chrisboo"},"content":"    public static final String COMMAND_SHORT \u003d \"l\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":1,"-":20}},{"path":"src/main/java/seedu/address/logic/parser/RemarkCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":12,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":13,"author":{"gitID":"Jemereny"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Jemereny"},"content":" * Parses remark commands"},{"lineNumber":15,"author":{"gitID":"Jemereny"},"content":" */"},{"lineNumber":16,"author":{"gitID":"chilipadiboy"},"content":"public class RemarkCommandParser implements Parser\u003cRemarkCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"chilipadiboy"},"content":"     * Parses the given {@code String} of arguments in the context of the RemarkCommand"},{"lineNumber":19,"author":{"gitID":"chilipadiboy"},"content":"     * and returns an RemarkCommand object for execution."},{"lineNumber":20,"author":{"gitID":"Jemereny"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"chilipadiboy"},"content":"    public RemarkCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":26,"author":{"gitID":"chilipadiboy"},"content":"            ArgumentTokenizer.tokenize(args, PREFIX_REMARK);"},{"lineNumber":27,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":28,"author":{"gitID":"chilipadiboy"},"content":"        Index index;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":32,"author":{"gitID":"chilipadiboy"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"chilipadiboy"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":35,"author":{"gitID":"chilipadiboy"},"content":"        String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"},{"lineNumber":36,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":37,"author":{"gitID":"chilipadiboy"},"content":"        return new RemarkCommand(index, new Remark(remark));"},{"lineNumber":38,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"chilipadiboy"},"content":"}"}],"authorContributionMap":{"chilipadiboy":20,"Jemereny":4,"-":15}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Clears the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":13,"author":{"gitID":"chrisboo"},"content":"    public static final String COMMAND_SHORT \u003d \"c\";"},{"lineNumber":14,"author":{"gitID":"chrisboo"},"content":"    public static final String COMMAND_ALIAS \u003d \"purge\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        model.resetData(new AddressBook());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":2,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/ThemeCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"Jemereny"},"content":"//@@author Jemereny"},{"lineNumber":2,"author":{"gitID":"Jemereny"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":4,"author":{"gitID":"Jemereny"},"content":"import seedu.address.ui.UiStyle;"},{"lineNumber":5,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":6,"author":{"gitID":"Jemereny"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Jemereny"},"content":" * change the theme of the address book"},{"lineNumber":8,"author":{"gitID":"Jemereny"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Jemereny"},"content":"public class ThemeCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":11,"author":{"gitID":"Jemereny"},"content":"    public static final String COMMAND_WORD \u003d \"theme\";"},{"lineNumber":12,"author":{"gitID":"Jemereny"},"content":"    public static final String COMMAND_SHORT \u003d \"t\";"},{"lineNumber":13,"author":{"gitID":"Jemereny"},"content":"    public static final String LIGHT_THEME \u003d \"light\";"},{"lineNumber":14,"author":{"gitID":"Jemereny"},"content":"    public static final String DARK_THEME \u003d \"dark\";"},{"lineNumber":15,"author":{"gitID":"Jemereny"},"content":"    public static final String LIGHT_THEME2 \u003d \"holy\";"},{"lineNumber":16,"author":{"gitID":"Jemereny"},"content":"    public static final String DARK_THEME2 \u003d \"evil\";"},{"lineNumber":17,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":18,"author":{"gitID":"Jemereny"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Theme has been changed!\";"},{"lineNumber":19,"author":{"gitID":"Jemereny"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Changes to selected theme. \""},{"lineNumber":20,"author":{"gitID":"Jemereny"},"content":"            + \"Parameters: light/dark\";"},{"lineNumber":21,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":22,"author":{"gitID":"Jemereny"},"content":"    private String theme;"},{"lineNumber":23,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":24,"author":{"gitID":"Jemereny"},"content":"    public ThemeCommand(String theme) {"},{"lineNumber":25,"author":{"gitID":"Jemereny"},"content":"        this.theme \u003d theme;"},{"lineNumber":26,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":28,"author":{"gitID":"Jemereny"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"Jemereny"},"content":"    public CommandResult execute() {"},{"lineNumber":30,"author":{"gitID":"Jemereny"},"content":"        if (theme.equalsIgnoreCase(ThemeCommand.LIGHT_THEME) || theme.equalsIgnoreCase(ThemeCommand.LIGHT_THEME2)) {"},{"lineNumber":31,"author":{"gitID":"Jemereny"},"content":"            UiStyle.getInstance().setToLightTheme();"},{"lineNumber":32,"author":{"gitID":"Jemereny"},"content":"        } else {"},{"lineNumber":33,"author":{"gitID":"Jemereny"},"content":"            UiStyle.getInstance().setToDarkTheme();"},{"lineNumber":34,"author":{"gitID":"Jemereny"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":36,"author":{"gitID":"Jemereny"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":37,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":39,"author":{"gitID":"Jemereny"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"Jemereny"},"content":"    public boolean equals(Object other) {"},{"lineNumber":41,"author":{"gitID":"Jemereny"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":42,"author":{"gitID":"Jemereny"},"content":"                || (other instanceof ThemeCommand // instanceof handles nulls"},{"lineNumber":43,"author":{"gitID":"Jemereny"},"content":"                \u0026\u0026 theme.equals(((ThemeCommand) other).theme));"},{"lineNumber":44,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":46,"author":{"gitID":"Jemereny"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"Jemereny"},"content":"    public String toString() {"},{"lineNumber":48,"author":{"gitID":"Jemereny"},"content":"        return theme;"},{"lineNumber":49,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"Jemereny"},"content":"}"}],"authorContributionMap":{"Jemereny":50}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"Jemereny"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PICTURE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"Jemereny"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_WEBSITE;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":19,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":26,"author":{"gitID":"chrisboo"},"content":"    public static final String COMMAND_SHORT \u003d \"a\";"},{"lineNumber":27,"author":{"gitID":"chrisboo"},"content":"    public static final String COMMAND_ALIAS \u003d \"curse\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        + \"Parameters: \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        + PREFIX_NAME + \"NAME \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        + PREFIX_PHONE + \"PHONE \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":35,"author":{"gitID":"chilipadiboy"},"content":"        + PREFIX_BIRTHDAY + \"DD/MM/YYYY \""},{"lineNumber":36,"author":{"gitID":"Jemereny"},"content":"        + PREFIX_WEBSITE + \"WEBSITE \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        + PREFIX_NAME + \"John Doe \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        + PREFIX_PHONE + \"98765432 \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":43,"author":{"gitID":"chilipadiboy"},"content":"        + PREFIX_BIRTHDAY + \"15/02/1992 \""},{"lineNumber":44,"author":{"gitID":"Jemereny"},"content":"        + PREFIX_WEBSITE + \"https://www.website.com \""},{"lineNumber":45,"author":{"gitID":"Jemereny"},"content":"        + PREFIX_PICTURE + \"C:/Users/User/Picture/JohnDoe.png \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        + PREFIX_TAG + \"friends \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code ReadOnlyPerson}"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public AddCommand(ReadOnlyPerson person) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        toAdd \u003d new Person(person);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chilipadiboy":5,"Jemereny":5,"chrisboo":2,"-":67}},{"path":"src/main/java/seedu/address/logic/parser/NewCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"Jemereny"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":3,"author":{"gitID":"Jemereny"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":5,"author":{"gitID":"chrisboo"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"chrisboo"},"content":"import seedu.address.logic.commands.NewCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"chrisboo"},"content":"//@@author chrisboo"},{"lineNumber":12,"author":{"gitID":"chrisboo"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"chrisboo"},"content":" * Parses input arguments and creates a new NewCommand object"},{"lineNumber":14,"author":{"gitID":"chrisboo"},"content":" */"},{"lineNumber":15,"author":{"gitID":"chrisboo"},"content":"public class NewCommandParser implements Parser\u003cNewCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":17,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"chrisboo"},"content":"     * Parses the given {@code String} of arguments in the context of the NewCommand"},{"lineNumber":19,"author":{"gitID":"chrisboo"},"content":"     * and returns an NewCommand object for execution."},{"lineNumber":20,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"chrisboo"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"chrisboo"},"content":"    public NewCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"chrisboo"},"content":"        try {"},{"lineNumber":25,"author":{"gitID":"chrisboo"},"content":"            File file \u003d ParserUtil.parseFile(args);"},{"lineNumber":26,"author":{"gitID":"chrisboo"},"content":"            return new NewCommand(file);"},{"lineNumber":27,"author":{"gitID":"chrisboo"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":28,"author":{"gitID":"chrisboo"},"content":"            throw new ParseException("},{"lineNumber":29,"author":{"gitID":"chrisboo"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, NewCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"chrisboo"},"content":"}"},{"lineNumber":33,"author":{"gitID":"chrisboo"},"content":"//@@author"}],"authorContributionMap":{"chilipadiboy":1,"Jemereny":3,"chrisboo":26,"-":3}},{"path":"src/main/java/seedu/address/logic/commands/RedoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Redo the previously undone command."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class RedoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";"},{"lineNumber":16,"author":{"gitID":"chrisboo"},"content":"    public static final String COMMAND_SHORT \u003d \"r\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canRedo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popRedo().redo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":1,"-":36}},{"path":"src/main/java/seedu/address/logic/parser/ThemeCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"Jemereny"},"content":"//@@author Jemereny"},{"lineNumber":2,"author":{"gitID":"Jemereny"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":4,"author":{"gitID":"Jemereny"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":6,"author":{"gitID":"Jemereny"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"Jemereny"},"content":"import seedu.address.logic.commands.ThemeCommand;"},{"lineNumber":8,"author":{"gitID":"Jemereny"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":10,"author":{"gitID":"Jemereny"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Jemereny"},"content":" * Parses the input arguments and creates a new ThemeCommand object"},{"lineNumber":12,"author":{"gitID":"Jemereny"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Jemereny"},"content":"public class ThemeCommandParser implements Parser\u003cThemeCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"Jemereny"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"Jemereny"},"content":"     * Parses the given {@code String} of arguments in the context of ThemeCommand"},{"lineNumber":16,"author":{"gitID":"Jemereny"},"content":"     * and returns a ThemeCommand object for execution"},{"lineNumber":17,"author":{"gitID":"Jemereny"},"content":"     *"},{"lineNumber":18,"author":{"gitID":"Jemereny"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"Jemereny"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"Jemereny"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"Jemereny"},"content":"    public ThemeCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"Jemereny"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"Jemereny"},"content":"            String trimmedArgs \u003d args.trim();"},{"lineNumber":24,"author":{"gitID":"Jemereny"},"content":"            if (trimmedArgs.isEmpty()"},{"lineNumber":25,"author":{"gitID":"Jemereny"},"content":"                    || (!trimmedArgs.equalsIgnoreCase(ThemeCommand.LIGHT_THEME)"},{"lineNumber":26,"author":{"gitID":"Jemereny"},"content":"                    \u0026\u0026 !trimmedArgs.equalsIgnoreCase(ThemeCommand.LIGHT_THEME2)"},{"lineNumber":27,"author":{"gitID":"Jemereny"},"content":"                    \u0026\u0026 !trimmedArgs.equalsIgnoreCase(ThemeCommand.DARK_THEME)"},{"lineNumber":28,"author":{"gitID":"Jemereny"},"content":"                    \u0026\u0026 !trimmedArgs.equalsIgnoreCase(ThemeCommand.DARK_THEME2))) {"},{"lineNumber":29,"author":{"gitID":"Jemereny"},"content":"                throw new IllegalValueException(\"\");"},{"lineNumber":30,"author":{"gitID":"Jemereny"},"content":"            } else {"},{"lineNumber":31,"author":{"gitID":"Jemereny"},"content":"                return new ThemeCommand(trimmedArgs);"},{"lineNumber":32,"author":{"gitID":"Jemereny"},"content":"            }"},{"lineNumber":33,"author":{"gitID":"Jemereny"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":34,"author":{"gitID":"Jemereny"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":35,"author":{"gitID":"Jemereny"},"content":"                                    ThemeCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"Jemereny"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Jemereny"},"content":"}"}],"authorContributionMap":{"Jemereny":38}},{"path":"src/main/java/seedu/address/logic/commands/HistoryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Lists all the commands entered by user from the start of app launch."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class HistoryCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"history\";"},{"lineNumber":18,"author":{"gitID":"chrisboo"},"content":"    public static final String COMMAND_SHORT \u003d \"h\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        List\u003cString\u003e previousCommands \u003d history.getHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        if (previousCommands.isEmpty()) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_NO_HISTORY);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Collections.reverse(previousCommands);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireNonNull(history);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.history \u003d history;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":1,"-":38}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"chrisboo"},"content":"    public static final String COMMAND_SHORT \u003d \"s\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"        + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"        + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":1,"-":52}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"chrisboo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"chrisboo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":6,"author":{"gitID":"chrisboo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"chrisboo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"chrisboo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"chrisboo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"chrisboo"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_WEBSITE;"},{"lineNumber":11,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":12,"author":{"gitID":"chrisboo"},"content":"import java.util.Optional;"},{"lineNumber":13,"author":{"gitID":"chrisboo"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":15,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":16,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":17,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"chrisboo"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":20,"author":{"gitID":"chrisboo"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":21,"author":{"gitID":"chrisboo"},"content":"import seedu.address.model.person.Website;"},{"lineNumber":22,"author":{"gitID":"chrisboo"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"chrisboo"},"content":" * Finds and lists all persons in address book whose fields matches all of the argument keywords."},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":32,"author":{"gitID":"chrisboo"},"content":"    public static final String COMMAND_SHORT \u003d \"f\";"},{"lineNumber":33,"author":{"gitID":"chrisboo"},"content":"    public static final String COMMAND_ALIAS \u003d \"summon\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"chrisboo"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Find a list of person that satisfies \""},{"lineNumber":36,"author":{"gitID":"chrisboo"},"content":"        + \"all the characteristic provided.\\n\""},{"lineNumber":37,"author":{"gitID":"chrisboo"},"content":"        + \"Parameters: \""},{"lineNumber":38,"author":{"gitID":"chrisboo"},"content":"        + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":39,"author":{"gitID":"chrisboo"},"content":"        + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":40,"author":{"gitID":"chrisboo"},"content":"        + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":41,"author":{"gitID":"chrisboo"},"content":"        + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":42,"author":{"gitID":"chrisboo"},"content":"        + \"[\" + PREFIX_WEBSITE + \"WEBSITE] \""},{"lineNumber":43,"author":{"gitID":"chrisboo"},"content":"        + \"[\" + PREFIX_BIRTHDAY + \"DD/MM/YYYY] \""},{"lineNumber":44,"author":{"gitID":"chrisboo"},"content":"        + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":45,"author":{"gitID":"chrisboo"},"content":"        + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":46,"author":{"gitID":"chrisboo"},"content":"        + PREFIX_PHONE + \"91234567 \""},{"lineNumber":47,"author":{"gitID":"chrisboo"},"content":"        + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"chrisboo"},"content":"    public static final String MESSAGE_NO_FIELD_PROVIDED \u003d \"At least one field to find must be provided.\";"},{"lineNumber":50,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":51,"author":{"gitID":"chrisboo"},"content":"    //@@author chrisboo"},{"lineNumber":52,"author":{"gitID":"chrisboo"},"content":"    private FindPersonDescriptor findPersonDescriptor;"},{"lineNumber":53,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":54,"author":{"gitID":"chrisboo"},"content":"    public FindCommand(FindPersonDescriptor findPersonDescriptor) {"},{"lineNumber":55,"author":{"gitID":"chrisboo"},"content":"        requireNonNull(findPersonDescriptor);"},{"lineNumber":56,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":57,"author":{"gitID":"chrisboo"},"content":"        this.findPersonDescriptor \u003d new FindPersonDescriptor(findPersonDescriptor);"},{"lineNumber":58,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":60,"author":{"gitID":"chrisboo"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"chrisboo"},"content":"    public CommandResult execute() {"},{"lineNumber":62,"author":{"gitID":"chrisboo"},"content":"        model.updateFilteredPersonList(person -\u003e findPersonDescriptor.match(person));"},{"lineNumber":63,"author":{"gitID":"chrisboo"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":64,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":66,"author":{"gitID":"chrisboo"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"chrisboo"},"content":"    public boolean equals(Object other) {"},{"lineNumber":68,"author":{"gitID":"chrisboo"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":69,"author":{"gitID":"chrisboo"},"content":"            || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":70,"author":{"gitID":"chrisboo"},"content":"            \u0026\u0026 this.findPersonDescriptor.equals(((FindCommand) other).findPersonDescriptor)); // state check"},{"lineNumber":71,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":73,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"chrisboo"},"content":"     * Stores the details of the finder."},{"lineNumber":75,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"chrisboo"},"content":"    public static class FindPersonDescriptor {"},{"lineNumber":77,"author":{"gitID":"chrisboo"},"content":"        private Name name;"},{"lineNumber":78,"author":{"gitID":"chrisboo"},"content":"        private Phone phone;"},{"lineNumber":79,"author":{"gitID":"chrisboo"},"content":"        private Email email;"},{"lineNumber":80,"author":{"gitID":"chrisboo"},"content":"        private Address address;"},{"lineNumber":81,"author":{"gitID":"chrisboo"},"content":"        private Birthday birthday;"},{"lineNumber":82,"author":{"gitID":"chrisboo"},"content":"        private Website website;"},{"lineNumber":83,"author":{"gitID":"chrisboo"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":84,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":85,"author":{"gitID":"chrisboo"},"content":"        public FindPersonDescriptor() {"},{"lineNumber":86,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":88,"author":{"gitID":"chrisboo"},"content":"        public FindPersonDescriptor(FindPersonDescriptor toCopy) {"},{"lineNumber":89,"author":{"gitID":"chrisboo"},"content":"            this.name \u003d toCopy.name;"},{"lineNumber":90,"author":{"gitID":"chrisboo"},"content":"            this.phone \u003d toCopy.phone;"},{"lineNumber":91,"author":{"gitID":"chrisboo"},"content":"            this.email \u003d toCopy.email;"},{"lineNumber":92,"author":{"gitID":"chrisboo"},"content":"            this.address \u003d toCopy.address;"},{"lineNumber":93,"author":{"gitID":"chrisboo"},"content":"            this.birthday \u003d toCopy.birthday;"},{"lineNumber":94,"author":{"gitID":"chrisboo"},"content":"            this.website \u003d toCopy.website;"},{"lineNumber":95,"author":{"gitID":"chrisboo"},"content":"            this.tags \u003d toCopy.tags;"},{"lineNumber":96,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":98,"author":{"gitID":"chrisboo"},"content":"        /**"},{"lineNumber":99,"author":{"gitID":"chrisboo"},"content":"         * @return false if no fields are provided"},{"lineNumber":100,"author":{"gitID":"chrisboo"},"content":"         */"},{"lineNumber":101,"author":{"gitID":"chrisboo"},"content":"        public boolean allNull() {"},{"lineNumber":102,"author":{"gitID":"chrisboo"},"content":"            return this.name \u003d\u003d null"},{"lineNumber":103,"author":{"gitID":"chrisboo"},"content":"                \u0026\u0026 this.phone \u003d\u003d null"},{"lineNumber":104,"author":{"gitID":"chrisboo"},"content":"                \u0026\u0026 this.email \u003d\u003d null"},{"lineNumber":105,"author":{"gitID":"chrisboo"},"content":"                \u0026\u0026 this.address \u003d\u003d null"},{"lineNumber":106,"author":{"gitID":"chrisboo"},"content":"                \u0026\u0026 this.birthday \u003d\u003d null"},{"lineNumber":107,"author":{"gitID":"chrisboo"},"content":"                \u0026\u0026 this.website \u003d\u003d null"},{"lineNumber":108,"author":{"gitID":"chrisboo"},"content":"                \u0026\u0026 this.tags \u003d\u003d null;"},{"lineNumber":109,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":111,"author":{"gitID":"chrisboo"},"content":"        /**"},{"lineNumber":112,"author":{"gitID":"chrisboo"},"content":"         * Check {@code Person} in DeathNote against {@code this} finder target."},{"lineNumber":113,"author":{"gitID":"chrisboo"},"content":"         *"},{"lineNumber":114,"author":{"gitID":"chrisboo"},"content":"         * @param person in DeathNote to check"},{"lineNumber":115,"author":{"gitID":"chrisboo"},"content":"         * @return true if other all fields matches"},{"lineNumber":116,"author":{"gitID":"chrisboo"},"content":"         */"},{"lineNumber":117,"author":{"gitID":"chrisboo"},"content":"        public boolean match(ReadOnlyPerson person) {"},{"lineNumber":118,"author":{"gitID":"chrisboo"},"content":"            if (this.name !\u003d null \u0026\u0026 !matchName(this.name, person.getName())) {"},{"lineNumber":119,"author":{"gitID":"chrisboo"},"content":"                return false;"},{"lineNumber":120,"author":{"gitID":"chrisboo"},"content":"            }"},{"lineNumber":121,"author":{"gitID":"chrisboo"},"content":"            if (this.phone !\u003d null \u0026\u0026 !matchPhone(this.phone, person.getPhone())) {"},{"lineNumber":122,"author":{"gitID":"chrisboo"},"content":"                return false;"},{"lineNumber":123,"author":{"gitID":"chrisboo"},"content":"            }"},{"lineNumber":124,"author":{"gitID":"chrisboo"},"content":"            if (this.email !\u003d null \u0026\u0026 !this.email.equals(person.getEmail())) {"},{"lineNumber":125,"author":{"gitID":"chrisboo"},"content":"                return false;"},{"lineNumber":126,"author":{"gitID":"chrisboo"},"content":"            }"},{"lineNumber":127,"author":{"gitID":"chrisboo"},"content":"            if (this.address !\u003d null \u0026\u0026 !this.address.equals(person.getAddress())) {"},{"lineNumber":128,"author":{"gitID":"chrisboo"},"content":"                return false;"},{"lineNumber":129,"author":{"gitID":"chrisboo"},"content":"            }"},{"lineNumber":130,"author":{"gitID":"chrisboo"},"content":"            if (this.website !\u003d null \u0026\u0026 !this.website.equals(person.getWebsite())) {"},{"lineNumber":131,"author":{"gitID":"chrisboo"},"content":"                return false;"},{"lineNumber":132,"author":{"gitID":"chrisboo"},"content":"            }"},{"lineNumber":133,"author":{"gitID":"chrisboo"},"content":"            if (this.birthday !\u003d null \u0026\u0026 !this.birthday.equals(person.getBirthday())) {"},{"lineNumber":134,"author":{"gitID":"chrisboo"},"content":"                return false;"},{"lineNumber":135,"author":{"gitID":"chrisboo"},"content":"            }"},{"lineNumber":136,"author":{"gitID":"chrisboo"},"content":"            if (this.tags !\u003d null \u0026\u0026 !matchTag(this.tags, person.getTags())) {"},{"lineNumber":137,"author":{"gitID":"chrisboo"},"content":"                return false;"},{"lineNumber":138,"author":{"gitID":"chrisboo"},"content":"            }"},{"lineNumber":139,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":140,"author":{"gitID":"chrisboo"},"content":"            return true;"},{"lineNumber":141,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":143,"author":{"gitID":"chrisboo"},"content":"        /**"},{"lineNumber":144,"author":{"gitID":"chrisboo"},"content":"         * Returns true only if the person\u0027s name {@code personName} have all the words in {@code finderName}."},{"lineNumber":145,"author":{"gitID":"chrisboo"},"content":"         *"},{"lineNumber":146,"author":{"gitID":"chrisboo"},"content":"         * @param finderName Name specified by the user to be found"},{"lineNumber":147,"author":{"gitID":"chrisboo"},"content":"         * @param personName Name of a person in DeathNote to be matched"},{"lineNumber":148,"author":{"gitID":"chrisboo"},"content":"         * @return a boolean value to check whether {@code personName} specify the requirement"},{"lineNumber":149,"author":{"gitID":"chrisboo"},"content":"         */"},{"lineNumber":150,"author":{"gitID":"chrisboo"},"content":"        private boolean matchName(Name finderName, Name personName) {"},{"lineNumber":151,"author":{"gitID":"chrisboo"},"content":"            if (finderName \u003d\u003d personName) {"},{"lineNumber":152,"author":{"gitID":"chrisboo"},"content":"                return true;"},{"lineNumber":153,"author":{"gitID":"chrisboo"},"content":"            }"},{"lineNumber":154,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":155,"author":{"gitID":"chrisboo"},"content":"            String personNameStr \u003d personName.toString().toUpperCase();"},{"lineNumber":156,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":157,"author":{"gitID":"chrisboo"},"content":"            for (String word : finderName.toString().toUpperCase().split(\"\\\\s+\")) {"},{"lineNumber":158,"author":{"gitID":"chrisboo"},"content":"                if (word.equals(\"\")) { continue; }"},{"lineNumber":159,"author":{"gitID":"chrisboo"},"content":"                if (!personNameStr.contains(word)) {"},{"lineNumber":160,"author":{"gitID":"chrisboo"},"content":"                    return false;"},{"lineNumber":161,"author":{"gitID":"chrisboo"},"content":"                }"},{"lineNumber":162,"author":{"gitID":"chrisboo"},"content":"            }"},{"lineNumber":163,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":164,"author":{"gitID":"chrisboo"},"content":"            return true;"},{"lineNumber":165,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":167,"author":{"gitID":"chrisboo"},"content":"        /**"},{"lineNumber":168,"author":{"gitID":"chrisboo"},"content":"         * Returns true only if the person\u0027s phone {@code personPhone} is a substring of {@code finderPhone}."},{"lineNumber":169,"author":{"gitID":"chrisboo"},"content":"         *"},{"lineNumber":170,"author":{"gitID":"chrisboo"},"content":"         * @param finderPhone Phone specified by the user to be found"},{"lineNumber":171,"author":{"gitID":"chrisboo"},"content":"         * @param personPhone Phone of a person in DeathNote to be matched"},{"lineNumber":172,"author":{"gitID":"chrisboo"},"content":"         * @return a boolean value to check whether {@code personPhone} specify the requirement"},{"lineNumber":173,"author":{"gitID":"chrisboo"},"content":"         */"},{"lineNumber":174,"author":{"gitID":"chrisboo"},"content":"        private boolean matchPhone(Phone finderPhone, Phone personPhone) {"},{"lineNumber":175,"author":{"gitID":"chrisboo"},"content":"            return personPhone.toString().contains(finderPhone.toString());"},{"lineNumber":176,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":178,"author":{"gitID":"chrisboo"},"content":"        /**"},{"lineNumber":179,"author":{"gitID":"chrisboo"},"content":"         * Returns true only if the person\u0027s tag {@code personTags} have all the tags specified in {@code finderTags}."},{"lineNumber":180,"author":{"gitID":"chrisboo"},"content":"         *"},{"lineNumber":181,"author":{"gitID":"chrisboo"},"content":"         * @param finderTags Tags specified by the user to be found"},{"lineNumber":182,"author":{"gitID":"chrisboo"},"content":"         * @param personTags Tags of a person in DeathNote to be matched"},{"lineNumber":183,"author":{"gitID":"chrisboo"},"content":"         * @return a boolean value to check whether {@code personTags} specify the requirement"},{"lineNumber":184,"author":{"gitID":"chrisboo"},"content":"         */"},{"lineNumber":185,"author":{"gitID":"chrisboo"},"content":"        private boolean matchTag(Set\u003cTag\u003e finderTags, Set\u003cTag\u003e personTags) {"},{"lineNumber":186,"author":{"gitID":"chrisboo"},"content":"            for (Tag finderTag : finderTags) {"},{"lineNumber":187,"author":{"gitID":"chrisboo"},"content":"                if (!personTags.contains(finderTag)) {"},{"lineNumber":188,"author":{"gitID":"chrisboo"},"content":"                    return false;"},{"lineNumber":189,"author":{"gitID":"chrisboo"},"content":"                }"},{"lineNumber":190,"author":{"gitID":"chrisboo"},"content":"            }"},{"lineNumber":191,"author":{"gitID":"chrisboo"},"content":"            return true;"},{"lineNumber":192,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":194,"author":{"gitID":"chrisboo"},"content":"        public void setName(Name name) {"},{"lineNumber":195,"author":{"gitID":"chrisboo"},"content":"            this.name \u003d name;"},{"lineNumber":196,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":198,"author":{"gitID":"chrisboo"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":199,"author":{"gitID":"chrisboo"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":200,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":202,"author":{"gitID":"chrisboo"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":203,"author":{"gitID":"chrisboo"},"content":"            if (phone.value !\u003d null) {"},{"lineNumber":204,"author":{"gitID":"chrisboo"},"content":"                this.phone \u003d phone;"},{"lineNumber":205,"author":{"gitID":"chrisboo"},"content":"            }"},{"lineNumber":206,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":208,"author":{"gitID":"chrisboo"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":209,"author":{"gitID":"chrisboo"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":210,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":212,"author":{"gitID":"chrisboo"},"content":"        public void setEmail(Email email) {"},{"lineNumber":213,"author":{"gitID":"chrisboo"},"content":"            if (email.value !\u003d null) {"},{"lineNumber":214,"author":{"gitID":"chrisboo"},"content":"                this.email \u003d email;"},{"lineNumber":215,"author":{"gitID":"chrisboo"},"content":"            }"},{"lineNumber":216,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":218,"author":{"gitID":"chrisboo"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":219,"author":{"gitID":"chrisboo"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":220,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":222,"author":{"gitID":"chrisboo"},"content":"        public void setAddress(Address address) {"},{"lineNumber":223,"author":{"gitID":"chrisboo"},"content":"            if (address.value !\u003d null) {"},{"lineNumber":224,"author":{"gitID":"chrisboo"},"content":"                this.address \u003d address;"},{"lineNumber":225,"author":{"gitID":"chrisboo"},"content":"            }"},{"lineNumber":226,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":227,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":228,"author":{"gitID":"chrisboo"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":229,"author":{"gitID":"chrisboo"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":230,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":232,"author":{"gitID":"chrisboo"},"content":"        public void setBirthday(Birthday birthday) {"},{"lineNumber":233,"author":{"gitID":"chrisboo"},"content":"            if (birthday.value !\u003d null) {"},{"lineNumber":234,"author":{"gitID":"chrisboo"},"content":"                this.birthday \u003d birthday;"},{"lineNumber":235,"author":{"gitID":"chrisboo"},"content":"            }"},{"lineNumber":236,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":237,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":238,"author":{"gitID":"chrisboo"},"content":"        public Optional\u003cBirthday\u003e getBirthday() {"},{"lineNumber":239,"author":{"gitID":"chrisboo"},"content":"            return Optional.ofNullable(birthday);"},{"lineNumber":240,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":241,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":242,"author":{"gitID":"chrisboo"},"content":"        public void setWebsite(Website website) {"},{"lineNumber":243,"author":{"gitID":"chrisboo"},"content":"            if (website.value !\u003d null) {"},{"lineNumber":244,"author":{"gitID":"chrisboo"},"content":"                this.website \u003d website;"},{"lineNumber":245,"author":{"gitID":"chrisboo"},"content":"            }"},{"lineNumber":246,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":247,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":248,"author":{"gitID":"chrisboo"},"content":"        public Optional\u003cWebsite\u003e getWebsite() {"},{"lineNumber":249,"author":{"gitID":"chrisboo"},"content":"            return Optional.ofNullable(website);"},{"lineNumber":250,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":251,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":252,"author":{"gitID":"chrisboo"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":253,"author":{"gitID":"chrisboo"},"content":"            this.tags \u003d tags;"},{"lineNumber":254,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":255,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":256,"author":{"gitID":"chrisboo"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":257,"author":{"gitID":"chrisboo"},"content":"            return Optional.ofNullable(tags);"},{"lineNumber":258,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":259,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":260,"author":{"gitID":"chrisboo"},"content":"        @Override"},{"lineNumber":261,"author":{"gitID":"chrisboo"},"content":"        public boolean equals(Object other) {"},{"lineNumber":262,"author":{"gitID":"chrisboo"},"content":"            // short circuit if same object"},{"lineNumber":263,"author":{"gitID":"chrisboo"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":264,"author":{"gitID":"chrisboo"},"content":"                return true;"},{"lineNumber":265,"author":{"gitID":"chrisboo"},"content":"            }"},{"lineNumber":266,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":267,"author":{"gitID":"chrisboo"},"content":"            // instanceof handles nulls"},{"lineNumber":268,"author":{"gitID":"chrisboo"},"content":"            if (!(other instanceof FindPersonDescriptor)) {"},{"lineNumber":269,"author":{"gitID":"chrisboo"},"content":"                return false;"},{"lineNumber":270,"author":{"gitID":"chrisboo"},"content":"            }"},{"lineNumber":271,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":272,"author":{"gitID":"chrisboo"},"content":"            // state check"},{"lineNumber":273,"author":{"gitID":"chrisboo"},"content":"            FindPersonDescriptor e \u003d (FindPersonDescriptor) other;"},{"lineNumber":274,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":275,"author":{"gitID":"chrisboo"},"content":"            return getName().equals(e.getName())"},{"lineNumber":276,"author":{"gitID":"chrisboo"},"content":"                \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":277,"author":{"gitID":"chrisboo"},"content":"                \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":278,"author":{"gitID":"chrisboo"},"content":"                \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":279,"author":{"gitID":"chrisboo"},"content":"                \u0026\u0026 getBirthday().equals(e.getBirthday())"},{"lineNumber":280,"author":{"gitID":"chrisboo"},"content":"                \u0026\u0026 getWebsite().equals(e.getWebsite())"},{"lineNumber":281,"author":{"gitID":"chrisboo"},"content":"                \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":282,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":283,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"chrisboo"},"content":"    //@@author"},{"lineNumber":285,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chilipadiboy":4,"chrisboo":268,"-":13}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Undo the previous {@code UndoableCommand}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class UndoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";"},{"lineNumber":16,"author":{"gitID":"chrisboo"},"content":"    public static final String COMMAND_SHORT \u003d \"u\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canUndo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popUndo().undo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":1,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/BirthdayAlarmCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"chilipadiboy"},"content":"//@@author chilipadiboy"},{"lineNumber":2,"author":{"gitID":"chilipadiboy"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":4,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":5,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.commons.events.ui.ShowBirthdayAlarmRequestEvent;"},{"lineNumber":6,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":7,"author":{"gitID":"chilipadiboy"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"chilipadiboy"},"content":" * Opens up the Reminders Panel"},{"lineNumber":9,"author":{"gitID":"chilipadiboy"},"content":" */"},{"lineNumber":10,"author":{"gitID":"chilipadiboy"},"content":"public class BirthdayAlarmCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":12,"author":{"gitID":"chilipadiboy"},"content":"    public static final String COMMAND_WORD \u003d \"reminders\";"},{"lineNumber":13,"author":{"gitID":"chilipadiboy"},"content":"    public static final String COMMAND_SHORT \u003d \"rem\";"},{"lineNumber":14,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":15,"author":{"gitID":"chilipadiboy"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows the reminders window.\\n\""},{"lineNumber":16,"author":{"gitID":"chilipadiboy"},"content":"        + \"Example: \" + COMMAND_WORD;"},{"lineNumber":17,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":18,"author":{"gitID":"chilipadiboy"},"content":"    public static final String SHOWING_REMINDERS_MESSAGE \u003d \"Opened reminders window.\";"},{"lineNumber":19,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":20,"author":{"gitID":"chilipadiboy"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"chilipadiboy"},"content":"    public CommandResult execute() {"},{"lineNumber":22,"author":{"gitID":"chilipadiboy"},"content":"        EventsCenter.getInstance().post(new ShowBirthdayAlarmRequestEvent());"},{"lineNumber":23,"author":{"gitID":"chilipadiboy"},"content":"        return new CommandResult(SHOWING_REMINDERS_MESSAGE);"},{"lineNumber":24,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"chilipadiboy"},"content":"}"}],"authorContributionMap":{"chilipadiboy":25}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":6,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"Jemereny"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PICTURE;"},{"lineNumber":10,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_WEBSITE;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":23,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":24,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":25,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":26,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":28,"author":{"gitID":"Jemereny"},"content":"import seedu.address.model.person.Picture;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":30,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":31,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Website;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":37,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":44,"author":{"gitID":"chrisboo"},"content":"    public static final String COMMAND_SHORT \u003d \"e\";"},{"lineNumber":45,"author":{"gitID":"chrisboo"},"content":"    public static final String COMMAND_ALIAS \u003d \"mutate\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        + \"by the index number used in the last person listing. \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":55,"author":{"gitID":"chilipadiboy"},"content":"        + \"[\" + PREFIX_BIRTHDAY + \"BIRTHDAY] \""},{"lineNumber":56,"author":{"gitID":"Jemereny"},"content":"        + \"[\" + PREFIX_WEBSITE + \"WEBSITE] \""},{"lineNumber":57,"author":{"gitID":"Jemereny"},"content":"        + \"[\" + PREFIX_PICTURE + \"PICTURE] \""},{"lineNumber":58,"author":{"gitID":"chilipadiboy"},"content":"        + \"[\" + PREFIX_BIRTHDAY + \"DD/MM/YYYY] \""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        + PREFIX_PHONE + \"91234567 \""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * @param index                of the person in the filtered person list to edit"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        ReadOnlyPerson personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(ReadOnlyPerson personToEdit,"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                                             EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":118,"author":{"gitID":"chilipadiboy"},"content":"        Birthday updatedBirthday \u003d editPersonDescriptor.getBirthday().orElse(personToEdit.getBirthday());"},{"lineNumber":119,"author":{"gitID":"chilipadiboy"},"content":"        Remark updatedRemark \u003d personToEdit.getRemark(); // edit command does not allow editing remarks"},{"lineNumber":120,"author":{"gitID":"Jemereny"},"content":"        Picture updatedPicture \u003d editPersonDescriptor.getPicture().orElse(personToEdit.getPicture());"},{"lineNumber":121,"author":{"gitID":"Jemereny"},"content":"        Website updatedWebsite \u003d editPersonDescriptor.getWebsite().orElse(personToEdit.getWebsite());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"chilipadiboy"},"content":"        return new Person(updatedName,"},{"lineNumber":125,"author":{"gitID":"chilipadiboy"},"content":"            updatedPhone,"},{"lineNumber":126,"author":{"gitID":"chilipadiboy"},"content":"            updatedEmail,"},{"lineNumber":127,"author":{"gitID":"chilipadiboy"},"content":"            updatedAddress,"},{"lineNumber":128,"author":{"gitID":"chilipadiboy"},"content":"            updatedBirthday,"},{"lineNumber":129,"author":{"gitID":"chilipadiboy"},"content":"            updatedRemark,"},{"lineNumber":130,"author":{"gitID":"chilipadiboy"},"content":"            updatedWebsite,"},{"lineNumber":131,"author":{"gitID":"Jemereny"},"content":"            updatedPicture,"},{"lineNumber":132,"author":{"gitID":"chilipadiboy"},"content":"            updatedTags);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":162,"author":{"gitID":"chilipadiboy"},"content":"        private Birthday birthday;"},{"lineNumber":163,"author":{"gitID":"Jemereny"},"content":"        private Website website;"},{"lineNumber":164,"author":{"gitID":"Jemereny"},"content":"        private Picture picture;"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"chrisboo"},"content":"        public EditPersonDescriptor() {"},{"lineNumber":168,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            this.name \u003d toCopy.name;"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            this.phone \u003d toCopy.phone;"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            this.email \u003d toCopy.email;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            this.address \u003d toCopy.address;"},{"lineNumber":175,"author":{"gitID":"chilipadiboy"},"content":"            this.birthday \u003d toCopy.birthday;"},{"lineNumber":176,"author":{"gitID":"Jemereny"},"content":"            this.website \u003d toCopy.website;"},{"lineNumber":177,"author":{"gitID":"Jemereny"},"content":"            this.picture \u003d toCopy.picture;"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            this.tags \u003d toCopy.tags;"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":182,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":183,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":185,"author":{"gitID":"chilipadiboy"},"content":"            return CollectionUtil.isAnyNonNull(this.name,"},{"lineNumber":186,"author":{"gitID":"chilipadiboy"},"content":"                this.phone,"},{"lineNumber":187,"author":{"gitID":"chilipadiboy"},"content":"                this.email,"},{"lineNumber":188,"author":{"gitID":"chilipadiboy"},"content":"                this.address,"},{"lineNumber":189,"author":{"gitID":"chilipadiboy"},"content":"                this.birthday,"},{"lineNumber":190,"author":{"gitID":"chilipadiboy"},"content":"                this.website,"},{"lineNumber":191,"author":{"gitID":"Jemereny"},"content":"                this.picture,"},{"lineNumber":192,"author":{"gitID":"chilipadiboy"},"content":"                this.tags);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":204,"author":{"gitID":"chrisboo"},"content":"            if (phone.value !\u003d null) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"                this.phone \u003d phone;"},{"lineNumber":206,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":207,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":214,"author":{"gitID":"chrisboo"},"content":"            if (email.value !\u003d null) {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"                this.email \u003d email;"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":217,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":224,"author":{"gitID":"chrisboo"},"content":"            if (address.value !\u003d null) {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"                this.address \u003d address;"},{"lineNumber":226,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"chilipadiboy"},"content":"        public void setBirthday(Birthday birthday) {"},{"lineNumber":234,"author":{"gitID":"chrisboo"},"content":"            if (birthday.value !\u003d null) {"},{"lineNumber":235,"author":{"gitID":"chrisboo"},"content":"                this.birthday \u003d birthday;"},{"lineNumber":236,"author":{"gitID":"chrisboo"},"content":"            }"},{"lineNumber":237,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":238,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":239,"author":{"gitID":"chrisboo"},"content":"        public Optional\u003cBirthday\u003e getBirthday() {"},{"lineNumber":240,"author":{"gitID":"chrisboo"},"content":"            return Optional.ofNullable(birthday);"},{"lineNumber":241,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":242,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":243,"author":{"gitID":"Jemereny"},"content":"        public void setWebsite(Website website) {"},{"lineNumber":244,"author":{"gitID":"chrisboo"},"content":"            if (website.value !\u003d null) {"},{"lineNumber":245,"author":{"gitID":"Jemereny"},"content":"                this.website \u003d website;"},{"lineNumber":246,"author":{"gitID":"Jemereny"},"content":"            }"},{"lineNumber":247,"author":{"gitID":"Jemereny"},"content":"        }"},{"lineNumber":248,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":249,"author":{"gitID":"Jemereny"},"content":"        public Optional\u003cWebsite\u003e getWebsite() {"},{"lineNumber":250,"author":{"gitID":"Jemereny"},"content":"            return Optional.ofNullable(website);"},{"lineNumber":251,"author":{"gitID":"Jemereny"},"content":"        }"},{"lineNumber":252,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":253,"author":{"gitID":"Jemereny"},"content":"        public void setPicture(Picture picture) {"},{"lineNumber":254,"author":{"gitID":"Jemereny"},"content":"            if (picture.value !\u003d null) {"},{"lineNumber":255,"author":{"gitID":"Jemereny"},"content":"                this.picture \u003d picture;"},{"lineNumber":256,"author":{"gitID":"Jemereny"},"content":"            }"},{"lineNumber":257,"author":{"gitID":"Jemereny"},"content":"        }"},{"lineNumber":258,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":259,"author":{"gitID":"Jemereny"},"content":"        public Optional\u003cPicture\u003e getPicture() {"},{"lineNumber":260,"author":{"gitID":"Jemereny"},"content":"            return Optional.ofNullable(picture);"},{"lineNumber":261,"author":{"gitID":"Jemereny"},"content":"        }"},{"lineNumber":262,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"            this.tags \u003d tags;"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(tags);"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":273,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":274,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":276,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":279,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":280,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":281,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":284,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":287,"author":{"gitID":"-"},"content":"                \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":288,"author":{"gitID":"-"},"content":"                \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":289,"author":{"gitID":"-"},"content":"                \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":290,"author":{"gitID":"chilipadiboy"},"content":"                \u0026\u0026 getBirthday().equals(e.getBirthday())"},{"lineNumber":291,"author":{"gitID":"Jemereny"},"content":"                \u0026\u0026 getWebsite().equals(e.getWebsite())"},{"lineNumber":292,"author":{"gitID":"Jemereny"},"content":"                \u0026\u0026 getPicture().equals(e.getPicture())"},{"lineNumber":293,"author":{"gitID":"-"},"content":"                \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":296,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chilipadiboy":42,"Jemereny":33,"chrisboo":18,"-":203}},{"path":"src/main/java/seedu/address/logic/commands/OpenCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"chrisboo"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":3,"author":{"gitID":"chrisboo"},"content":"import static seedu.address.commons.util.FileUtil.isFileExists;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"chrisboo"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":8,"author":{"gitID":"chrisboo"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"chrisboo"},"content":"import seedu.address.commons.events.ui.SwitchAddressBookRequestEvent;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":12,"author":{"gitID":"chrisboo"},"content":"//@@author chrisboo"},{"lineNumber":13,"author":{"gitID":"chrisboo"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"chrisboo"},"content":" * Open existing DeathNote"},{"lineNumber":15,"author":{"gitID":"chrisboo"},"content":" */"},{"lineNumber":16,"author":{"gitID":"chrisboo"},"content":"public class OpenCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":18,"author":{"gitID":"chrisboo"},"content":"    public static final String COMMAND_WORD \u003d \"open\";"},{"lineNumber":19,"author":{"gitID":"chrisboo"},"content":"    public static final String COMMAND_SHORT \u003d \"o\";"},{"lineNumber":20,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":21,"author":{"gitID":"chrisboo"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":22,"author":{"gitID":"chrisboo"},"content":"        + \": Open a different DeathNote. \\n\""},{"lineNumber":23,"author":{"gitID":"chrisboo"},"content":"        + \"Paremeters: PATH \\n\""},{"lineNumber":24,"author":{"gitID":"chrisboo"},"content":"        + \"Example: \" + COMMAND_WORD + \" C:\\\\Users\\\\crispy\\\\Downloads\\\\DeathNote.xml\";"},{"lineNumber":25,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":26,"author":{"gitID":"chrisboo"},"content":"    public static final String MESSAGE_OPEN_DEATHNOTE_SUCCESS \u003d \"Opened DeathNote: %1$s\";"},{"lineNumber":27,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":28,"author":{"gitID":"chrisboo"},"content":"    private final File file;"},{"lineNumber":29,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":30,"author":{"gitID":"chrisboo"},"content":"    public OpenCommand(File file) {"},{"lineNumber":31,"author":{"gitID":"chrisboo"},"content":"        this.file \u003d file;"},{"lineNumber":32,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":34,"author":{"gitID":"chrisboo"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"chrisboo"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":36,"author":{"gitID":"chrisboo"},"content":"        if (!isFileExists(file)) {"},{"lineNumber":37,"author":{"gitID":"chrisboo"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_FILE_PATH);"},{"lineNumber":38,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":40,"author":{"gitID":"chrisboo"},"content":"        EventsCenter.getInstance().post(new SwitchAddressBookRequestEvent(file, false));"},{"lineNumber":41,"author":{"gitID":"chrisboo"},"content":"        return new CommandResult(String.format(MESSAGE_OPEN_DEATHNOTE_SUCCESS, file.getPath()));"},{"lineNumber":42,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":44,"author":{"gitID":"chrisboo"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"chrisboo"},"content":"    public boolean equals(Object other) {"},{"lineNumber":46,"author":{"gitID":"chrisboo"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":47,"author":{"gitID":"chrisboo"},"content":"            || (other instanceof OpenCommand // instanceof handles nulls"},{"lineNumber":48,"author":{"gitID":"chrisboo"},"content":"            \u0026\u0026 this.file.equals(((OpenCommand) other).file)); // state check"},{"lineNumber":49,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"chrisboo"},"content":"}"},{"lineNumber":51,"author":{"gitID":"chrisboo"},"content":"//@@author"}],"authorContributionMap":{"chrisboo":48,"-":3}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.history \u003d new CommandHistory();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.addressBookParser \u003d new AddressBookParser();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":59,"author":{"gitID":"chilipadiboy"},"content":"    //@@author chilipadiboy"},{"lineNumber":60,"author":{"gitID":"chilipadiboy"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"chilipadiboy"},"content":"    public ReadOnlyAddressBook getReadOnlyAddressBook() {"},{"lineNumber":62,"author":{"gitID":"chilipadiboy"},"content":"        return model.getAddressBook(); }"},{"lineNumber":63,"author":{"gitID":"chilipadiboy"},"content":"}"}],"authorContributionMap":{"chilipadiboy":7,"-":56}},{"path":"src/main/java/seedu/address/storage/UserPrefsStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a storage for {@link seedu.address.model.UserPrefs}."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface UserPrefsStorage {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns the file path of the UserPrefs data file."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    String getUserPrefsFilePath();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns UserPrefs data from storage."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":22,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @throws IOException             if there was any problem when reading from the storage."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Saves the given {@link seedu.address.model.UserPrefs} to the storage."},{"lineNumber":30,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @param userPrefs cannot be null."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":2,"-":34}},{"path":"src/main/java/seedu/address/storage/AddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a storage for {@link seedu.address.model.AddressBook}."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface AddressBookStorage {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns the file path of the data file."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":22,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @throws IOException             if there was any problem when reading from the storage."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * @see #getAddressBookFilePath()"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage."},{"lineNumber":35,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @see #saveAddressBook(ReadOnlyAddressBook)"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"chilipadiboy"},"content":"    void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chilipadiboy":1,"chrisboo":2,"-":44}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":76,"author":{"gitID":"chrisboo"},"content":"        logger.info(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":78,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            saveAddressBook(event.data);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"chilipadiboy"},"content":"    @Override"},{"lineNumber":92,"author":{"gitID":"chilipadiboy"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":93,"author":{"gitID":"chilipadiboy"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath() + \"-backup.xml\");"},{"lineNumber":94,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chilipadiboy":5,"chrisboo":2,"-":89}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedTag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlValue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * JAXB-friendly adapted version of the Tag."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class XmlAdaptedTag {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @XmlValue"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private String tagName;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedTag."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"chrisboo"},"content":"    public XmlAdaptedTag() {"},{"lineNumber":21,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Converts a given Tag into this class for JAXB use."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag(Tag source) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        tagName \u003d source.tagName;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public Tag toModelType() throws IllegalValueException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return new Tag(tagName);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":2,"-":39}},{"path":"src/main/java/seedu/address/storage/XmlAddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A class to access AddressBook data stored as an xml file on the hard disk."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorage implements AddressBookStorage {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public XmlAddressBookStorage(String filePath) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return readAddressBook(filePath);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Similar to {@link #readAddressBook()}"},{"lineNumber":40,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException,"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        FileNotFoundException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        File addressBookFile \u003d new File(filePath);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (!addressBookFile.exists()) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            logger.info(\"AddressBook file \" + addressBookFile + \" not found\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook addressBookOptional \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return Optional.of(addressBookOptional);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, filePath);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"},{"lineNumber":67,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableAddressBook(addressBook));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"chilipadiboy"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"chilipadiboy"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":81,"author":{"gitID":"chilipadiboy"},"content":"        backupAddressBook(addressBook);"},{"lineNumber":82,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chilipadiboy":5,"chrisboo":2,"-":77}},{"path":"src/main/java/seedu/address/logic/commands/RemarkCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"chilipadiboy"},"content":"//@@author chilipadiboy"},{"lineNumber":2,"author":{"gitID":"chilipadiboy"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":4,"author":{"gitID":"chilipadiboy"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"chilipadiboy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":6,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":7,"author":{"gitID":"chilipadiboy"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":9,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":14,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":15,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":17,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":18,"author":{"gitID":"chilipadiboy"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"chilipadiboy"},"content":" * Changes the remark of an existing person in the address book."},{"lineNumber":20,"author":{"gitID":"chilipadiboy"},"content":" */"},{"lineNumber":21,"author":{"gitID":"chilipadiboy"},"content":"public class RemarkCommand extends UndoableCommand {"},{"lineNumber":22,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":23,"author":{"gitID":"chilipadiboy"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";"},{"lineNumber":24,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":25,"author":{"gitID":"chilipadiboy"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""},{"lineNumber":26,"author":{"gitID":"chilipadiboy"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":27,"author":{"gitID":"chilipadiboy"},"content":"            + \"Existing remark will be overwritten by the input.\\n\""},{"lineNumber":28,"author":{"gitID":"chilipadiboy"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":29,"author":{"gitID":"chilipadiboy"},"content":"            + PREFIX_REMARK + \"[REMARK]\\n\""},{"lineNumber":30,"author":{"gitID":"chilipadiboy"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":31,"author":{"gitID":"chilipadiboy"},"content":"            + PREFIX_REMARK + \"Likes to swim.\";"},{"lineNumber":32,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":33,"author":{"gitID":"chilipadiboy"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"},{"lineNumber":34,"author":{"gitID":"chilipadiboy"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"},{"lineNumber":35,"author":{"gitID":"chilipadiboy"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":36,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":37,"author":{"gitID":"chilipadiboy"},"content":"    private final Index index;"},{"lineNumber":38,"author":{"gitID":"chilipadiboy"},"content":"    private final Remark remark;"},{"lineNumber":39,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":40,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"chilipadiboy"},"content":"     * @param index of the person in the filtered person list to edit the remark"},{"lineNumber":42,"author":{"gitID":"chilipadiboy"},"content":"     * @param remark of the person"},{"lineNumber":43,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"chilipadiboy"},"content":"    public RemarkCommand(Index index, Remark remark) {"},{"lineNumber":45,"author":{"gitID":"chilipadiboy"},"content":"        requireNonNull(index);"},{"lineNumber":46,"author":{"gitID":"chilipadiboy"},"content":"        requireNonNull(remark);"},{"lineNumber":47,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":48,"author":{"gitID":"chilipadiboy"},"content":"        this.index \u003d index;"},{"lineNumber":49,"author":{"gitID":"chilipadiboy"},"content":"        this.remark \u003d remark;"},{"lineNumber":50,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":52,"author":{"gitID":"chilipadiboy"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"chilipadiboy"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":54,"author":{"gitID":"chilipadiboy"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":55,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":56,"author":{"gitID":"chilipadiboy"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":57,"author":{"gitID":"chilipadiboy"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":58,"author":{"gitID":"chilipadiboy"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":60,"author":{"gitID":"chilipadiboy"},"content":"        ReadOnlyPerson personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":61,"author":{"gitID":"chilipadiboy"},"content":"        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"},{"lineNumber":62,"author":{"gitID":"chilipadiboy"},"content":"                personToEdit.getAddress(), personToEdit.getBirthday(), remark, personToEdit.getWebsite(),"},{"lineNumber":63,"author":{"gitID":"chilipadiboy"},"content":"                personToEdit.getPicture(), personToEdit.getTags());"},{"lineNumber":64,"author":{"gitID":"chilipadiboy"},"content":"        try {"},{"lineNumber":65,"author":{"gitID":"chilipadiboy"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":66,"author":{"gitID":"chilipadiboy"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":67,"author":{"gitID":"chilipadiboy"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":68,"author":{"gitID":"chilipadiboy"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":69,"author":{"gitID":"chilipadiboy"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":70,"author":{"gitID":"chilipadiboy"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":72,"author":{"gitID":"chilipadiboy"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));"},{"lineNumber":73,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":75,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"chilipadiboy"},"content":"     * Generate success message based on the person edited"},{"lineNumber":77,"author":{"gitID":"chilipadiboy"},"content":"     * @param personToEdit"},{"lineNumber":78,"author":{"gitID":"chilipadiboy"},"content":"     * @return message whether remark is added or deleted"},{"lineNumber":79,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"chilipadiboy"},"content":"    private String generateSuccessMessage(ReadOnlyPerson personToEdit) {"},{"lineNumber":81,"author":{"gitID":"chilipadiboy"},"content":"        if (!remark.value.isEmpty()) {"},{"lineNumber":82,"author":{"gitID":"chilipadiboy"},"content":"            return String.format(MESSAGE_ADD_REMARK_SUCCESS, personToEdit);"},{"lineNumber":83,"author":{"gitID":"chilipadiboy"},"content":"        } else {"},{"lineNumber":84,"author":{"gitID":"chilipadiboy"},"content":"            return String.format(MESSAGE_DELETE_REMARK_SUCCESS, personToEdit);"},{"lineNumber":85,"author":{"gitID":"chilipadiboy"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":88,"author":{"gitID":"chilipadiboy"},"content":"    @Override"},{"lineNumber":89,"author":{"gitID":"chilipadiboy"},"content":"    public boolean equals(Object other) {"},{"lineNumber":90,"author":{"gitID":"chilipadiboy"},"content":"        // short circuit if same object"},{"lineNumber":91,"author":{"gitID":"chilipadiboy"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":92,"author":{"gitID":"chilipadiboy"},"content":"            return true;"},{"lineNumber":93,"author":{"gitID":"chilipadiboy"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":95,"author":{"gitID":"chilipadiboy"},"content":"        // instanceof handles nulls"},{"lineNumber":96,"author":{"gitID":"chilipadiboy"},"content":"        if (!(other instanceof RemarkCommand)) {"},{"lineNumber":97,"author":{"gitID":"chilipadiboy"},"content":"            return false;"},{"lineNumber":98,"author":{"gitID":"chilipadiboy"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":100,"author":{"gitID":"chilipadiboy"},"content":"        // state check"},{"lineNumber":101,"author":{"gitID":"chilipadiboy"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;"},{"lineNumber":102,"author":{"gitID":"chilipadiboy"},"content":"        return index.equals(e.index)"},{"lineNumber":103,"author":{"gitID":"chilipadiboy"},"content":"                \u0026\u0026 remark.equals(e.remark);"},{"lineNumber":104,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"chilipadiboy"},"content":"}"}],"authorContributionMap":{"chilipadiboy":105}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"chrisboo"},"content":"import static seedu.address.commons.util.ConfigUtil.updateConfig;"},{"lineNumber":4,"author":{"gitID":"chrisboo"},"content":"import static seedu.address.storage.JsonUserPrefsStorage.updateUserPrefs;"},{"lineNumber":5,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":21,"author":{"gitID":"chrisboo"},"content":"import seedu.address.commons.events.ui.SwitchAddressBookRequestEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":43,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":44,"author":{"gitID":"-"},"content":" */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":57,"author":{"gitID":"chrisboo"},"content":"    protected JsonUserPrefsStorage userPrefsStorage;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"chrisboo"},"content":"    protected Stage primaryStage;"},{"lineNumber":60,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"chrisboo"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":67,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"chrisboo"},"content":"        userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":143,"author":{"gitID":"-"},"content":"                + \"Using default config properties\");"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":171,"author":{"gitID":"-"},"content":"                + \"Using default user prefs\");"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"chrisboo"},"content":"    private void restart() throws Exception {"},{"lineNumber":193,"author":{"gitID":"chrisboo"},"content":"        init();"},{"lineNumber":194,"author":{"gitID":"chrisboo"},"content":"        start(this.primaryStage);"},{"lineNumber":195,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":199,"author":{"gitID":"chrisboo"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":200,"author":{"gitID":"chrisboo"},"content":"        this.primaryStage.setTitle(\"\");"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"chrisboo"},"content":"    //@@author chrisboo"},{"lineNumber":219,"author":{"gitID":"chrisboo"},"content":"    @Subscribe"},{"lineNumber":220,"author":{"gitID":"chrisboo"},"content":"    public void handleSwitchAddressBookRequestEvent(SwitchAddressBookRequestEvent event) {"},{"lineNumber":221,"author":{"gitID":"chrisboo"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":222,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":223,"author":{"gitID":"chrisboo"},"content":"        try {"},{"lineNumber":224,"author":{"gitID":"chrisboo"},"content":"            updateConfig(\"config.json\", event.getFileName());"},{"lineNumber":225,"author":{"gitID":"chrisboo"},"content":"            updateUserPrefs(\"preferences.json\", event.getFilePath(), event.getFileName());"},{"lineNumber":226,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":227,"author":{"gitID":"chrisboo"},"content":"            restart();"},{"lineNumber":228,"author":{"gitID":"chrisboo"},"content":"        } catch (Exception e) {"},{"lineNumber":229,"author":{"gitID":"chrisboo"},"content":"            e.printStackTrace();"},{"lineNumber":230,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"chrisboo"},"content":"    //@@author"},{"lineNumber":233,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":33,"-":210}},{"path":"src/main/java/seedu/address/model/person/Phone.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s phone number in the address book."},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Phone {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"-"},"content":"        \"Phone numbers can only contain numbers, and should be at least 3 digits long\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d{3,}\";"},{"lineNumber":15,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Validates given phone number."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if given phone string is invalid."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public Phone(String phone) throws IllegalValueException {"},{"lineNumber":24,"author":{"gitID":"chrisboo"},"content":"        String trimmedPhone \u003d phone \u003d\u003d null ? null : phone.trim();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        if (!isValidPhone(trimmedPhone)) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.value \u003d trimmedPhone;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person phone number."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static boolean isValidPhone(String test) {"},{"lineNumber":35,"author":{"gitID":"chrisboo"},"content":"        return test \u003d\u003d null || test.matches(PHONE_VALIDATION_REGEX);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitID":"chrisboo"},"content":"        if (other \u003d\u003d this) { // short circuit if same object"},{"lineNumber":46,"author":{"gitID":"chrisboo"},"content":"            return true;"},{"lineNumber":47,"author":{"gitID":"chrisboo"},"content":"        } else if (!(other instanceof Phone)) { // instanceof handle nulls"},{"lineNumber":48,"author":{"gitID":"chrisboo"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"chrisboo"},"content":"        } else if (this.value \u003d\u003d ((Phone) other).value) {"},{"lineNumber":50,"author":{"gitID":"chrisboo"},"content":"            return true;"},{"lineNumber":51,"author":{"gitID":"chrisboo"},"content":"        } else if (this.value !\u003d null \u0026\u0026 this.value.equals(((Phone) other).value)) { // state check"},{"lineNumber":52,"author":{"gitID":"chrisboo"},"content":"            return true;"},{"lineNumber":53,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":55,"author":{"gitID":"chrisboo"},"content":"        return false;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":14,"-":49}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":9,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":10,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":11,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":12,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":13,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":15,"author":{"gitID":"Jemereny"},"content":"import seedu.address.model.person.Picture;"},{"lineNumber":16,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":17,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Website;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":28,"author":{"gitID":"chrisboo"},"content":"            return new Person[] {"},{"lineNumber":29,"author":{"gitID":"chrisboo"},"content":"                new Person(new Name(\"Alexej Kiro\"), new Phone(\"29505368\"), new Email(\"alexej@gmail.com\"),"},{"lineNumber":30,"author":{"gitID":"chrisboo"},"content":"                    new Address(\"2 Sembawang Walk\"), new Birthday(\"27/07/1997\"),"},{"lineNumber":31,"author":{"gitID":"chrisboo"},"content":"                    new Remark(\"Badminton champion\"), new Website(Website.WEBSITE_NULL),"},{"lineNumber":32,"author":{"gitID":"chrisboo"},"content":"                    new Picture(Picture.DEFAULT_BALAKRISHNAN), getTagSet(\"friends\")),"},{"lineNumber":33,"author":{"gitID":"chrisboo"},"content":"                new Person(new Name(\"Alex Yeoh\"), new Phone(\"47261490\"), new Email(\"alexyeoh@gmail.com\"),"},{"lineNumber":34,"author":{"gitID":"chrisboo"},"content":"                    new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Birthday(\"13/01/1970\"),"},{"lineNumber":35,"author":{"gitID":"chrisboo"},"content":"                    new Remark(\"Taking CS2103T\"), new Website(Website.WEBSITE_NULL),"},{"lineNumber":36,"author":{"gitID":"chrisboo"},"content":"                    new Picture(Picture.DEFAULT_ALEX), getTagSet(\"friends\", \"classmates\")),"},{"lineNumber":37,"author":{"gitID":"chrisboo"},"content":"                new Person(new Name(\"Beatrix Lauryn\"), new Phone(\"98415482\"), new Email(\"beatrixl@u.nus.edu.sg\"),"},{"lineNumber":38,"author":{"gitID":"chrisboo"},"content":"                    new Address(\"Blk 1090 Lower Delta Road 03-01\"), new Birthday(\"21/10/1977\"),"},{"lineNumber":39,"author":{"gitID":"chrisboo"},"content":"                    new Remark(\"Owes me 50 dollar\"), new Website(Website.WEBSITE_NULL),"},{"lineNumber":40,"author":{"gitID":"chrisboo"},"content":"                    new Picture(Picture.DEFAULT_BALAKRISHNAN), getTagSet(\"classmates\", \"roommates\")),"},{"lineNumber":41,"author":{"gitID":"chrisboo"},"content":"                new Person(new Name(\"Bernice Yu\"), new Phone(\"96632044\"), new Email(\"berniceyu@yahoo.com\"),"},{"lineNumber":42,"author":{"gitID":"chrisboo"},"content":"                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Birthday(\"06/12/1975\"),"},{"lineNumber":43,"author":{"gitID":"chilipadiboy"},"content":"                    new Remark(\"Likes to swim.\"), new Website(Website.WEBSITE_NULL),"},{"lineNumber":44,"author":{"gitID":"Jemereny"},"content":"                    new Picture(Picture.DEFAULT_BERNICE), getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":45,"author":{"gitID":"chrisboo"},"content":"                new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"29085937\"), new Email(\"charlotte@hotmail.com\"),"},{"lineNumber":46,"author":{"gitID":"chrisboo"},"content":"                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Birthday(\"17/04/1976\"),"},{"lineNumber":47,"author":{"gitID":"chrisboo"},"content":"                    new Remark(\"CAP 5.0\"), new Website(Website.WEBSITE_NULL),"},{"lineNumber":48,"author":{"gitID":"chrisboo"},"content":"                    new Picture(Picture.DEFAULT_CHARLOTTE), getTagSet(\"neighbours\", \"classmates\")),"},{"lineNumber":49,"author":{"gitID":"chrisboo"},"content":"                new Person(new Name(\"David Li\"), new Phone(\"43379440\"), new Email(\"lidavid@yahoo.com.sg\"),"},{"lineNumber":50,"author":{"gitID":"chrisboo"},"content":"                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Birthday(\"02/12/1976\"),"},{"lineNumber":51,"author":{"gitID":"Jemereny"},"content":"                    new Remark(\"As quick as a leopard.\"), new Website(Website.WEBSITE_NULL),"},{"lineNumber":52,"author":{"gitID":"Jemereny"},"content":"                    new Picture(Picture.DEFAULT_DAVID), getTagSet(\"family\")),"},{"lineNumber":53,"author":{"gitID":"chrisboo"},"content":"                new Person(new Name(\"Dijana Domitianus\"), new Phone(\"28278063\"), new Email(\"dijana@hotmail.com\"),"},{"lineNumber":54,"author":{"gitID":"chrisboo"},"content":"                    new Address(\"85 Science Park Drive #03-01/04\"), new Birthday(\"15/05/1990\"),"},{"lineNumber":55,"author":{"gitID":"chrisboo"},"content":"                    new Remark(\"Love Char Kuey Teow\"), new Website(Website.WEBSITE_NULL),"},{"lineNumber":56,"author":{"gitID":"chrisboo"},"content":"                    new Picture(Picture.DEFAULT_BALAKRISHNAN), getTagSet(\"friends\")),"},{"lineNumber":57,"author":{"gitID":"chrisboo"},"content":"                new Person(new Name(\"Hisham Vasileios\"), new Phone(\"30408853\"), new Email(\"hisham@yahoo.com\"),"},{"lineNumber":58,"author":{"gitID":"chrisboo"},"content":"                    new Address(\"110A Killiney Road TAI WAH BUILDING\"), new Birthday(\"02/02/1995\"),"},{"lineNumber":59,"author":{"gitID":"chrisboo"},"content":"                    new Remark(\"Hiker\"), new Website(Website.WEBSITE_NULL),"},{"lineNumber":60,"author":{"gitID":"chrisboo"},"content":"                    new Picture(Picture.DEFAULT_BALAKRISHNAN), getTagSet(\"friends\")),"},{"lineNumber":61,"author":{"gitID":"chrisboo"},"content":"                new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"60248065\"), new Email(\"irfan@gmail.com\"),"},{"lineNumber":62,"author":{"gitID":"chrisboo"},"content":"                    new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Birthday(\"12/02/1977\"),"},{"lineNumber":63,"author":{"gitID":"chrisboo"},"content":"                    new Remark(\"Plays the piano\"), new Website(Website.WEBSITE_NULL),"},{"lineNumber":64,"author":{"gitID":"chrisboo"},"content":"                    new Picture(Picture.DEFAULT_IRFAN), getTagSet(\"classmates\", \"colleagues\")),"},{"lineNumber":65,"author":{"gitID":"chrisboo"},"content":"                new Person(new Name(\"Keshia Deloris\"), new Phone(\"21038401\"), new Email(\"keshia@hotmail.com\"),"},{"lineNumber":66,"author":{"gitID":"chrisboo"},"content":"                    new Address(\"7500A Beach Road #05-312 The Plaza\"), new Birthday(\"08/06/1995\"),"},{"lineNumber":67,"author":{"gitID":"chrisboo"},"content":"                    new Remark(\"Likes watermelon\"), new Website(Website.WEBSITE_NULL),"},{"lineNumber":68,"author":{"gitID":"chrisboo"},"content":"                    new Picture(Picture.DEFAULT_BALAKRISHNAN), getTagSet(\"roommates\", \"classmates\")),"},{"lineNumber":69,"author":{"gitID":"chrisboo"},"content":"                new Person(new Name(\"Kumar Louisa\"), new Phone(\"63774380\"), new Email(\"kumar@yahoo.com\"),"},{"lineNumber":70,"author":{"gitID":"chrisboo"},"content":"                    new Address(\"71 Sultan Gate\"), new Birthday(\"29/04/1989\"),"},{"lineNumber":71,"author":{"gitID":"chrisboo"},"content":"                    new Remark(\"Got A in CS2103T last year\"), new Website(Website.WEBSITE_NULL),"},{"lineNumber":72,"author":{"gitID":"chrisboo"},"content":"                    new Picture(Picture.DEFAULT_BALAKRISHNAN), getTagSet(\"friends\", \"classmates\")),"},{"lineNumber":73,"author":{"gitID":"chrisboo"},"content":"                new Person(new Name(\"Leto Thulile\"), new Phone(\"34853934\"), new Email(\"letot@yahoo.com\"),"},{"lineNumber":74,"author":{"gitID":"chrisboo"},"content":"                    new Address(\"100 Gul Circle, 629586\"), new Birthday(\"07/05/1987\"),"},{"lineNumber":75,"author":{"gitID":"chrisboo"},"content":"                    new Remark(\"Googler\"), new Website(Website.WEBSITE_NULL),"},{"lineNumber":76,"author":{"gitID":"chrisboo"},"content":"                    new Picture(Picture.DEFAULT_BALAKRISHNAN), getTagSet(\"roommates\")),"},{"lineNumber":77,"author":{"gitID":"chrisboo"},"content":"                new Person(new Name(\"Lise Puja\"), new Phone(\"61653993\"), new Email(\"lisa@google.com\"),"},{"lineNumber":78,"author":{"gitID":"chrisboo"},"content":"                    new Address(\"77 High Street 179433\"), new Birthday(\"08/12/1985\"),"},{"lineNumber":79,"author":{"gitID":"chrisboo"},"content":"                    new Remark(\"NUS Wind Symphony\"), new Website(Website.WEBSITE_NULL),"},{"lineNumber":80,"author":{"gitID":"chrisboo"},"content":"                    new Picture(Picture.DEFAULT_BALAKRISHNAN), getTagSet(\"neighbours\", \"colleagues\")),"},{"lineNumber":81,"author":{"gitID":"chrisboo"},"content":"                new Person(new Name(\"Ljube Shun\"), new Phone(\"16047567\"), new Email(\"ljube@gmail.com\"),"},{"lineNumber":82,"author":{"gitID":"chrisboo"},"content":"                    new Address(\"23 Defu Lane 4\"), new Birthday(\"16/08/1989\"),"},{"lineNumber":83,"author":{"gitID":"chrisboo"},"content":"                    new Remark(\"Prospective doctor\"), new Website(Website.WEBSITE_NULL),"},{"lineNumber":84,"author":{"gitID":"chrisboo"},"content":"                    new Picture(Picture.DEFAULT_BALAKRISHNAN), getTagSet(\"colleagues\", \"roommates\")),"},{"lineNumber":85,"author":{"gitID":"chrisboo"},"content":"                new Person(new Name(\"Mikulas Larisa\"), new Phone(\"56737480\"), new Email(\"mikulasl@facebook.com\"),"},{"lineNumber":86,"author":{"gitID":"chrisboo"},"content":"                    new Address(\"62 Tannery Lane, 347804, Singapore\"), new Birthday(\"08/10/1980\"),"},{"lineNumber":87,"author":{"gitID":"chrisboo"},"content":"                    new Remark(\"Exchange student from Poland\"), new Website(Website.WEBSITE_NULL),"},{"lineNumber":88,"author":{"gitID":"chrisboo"},"content":"                    new Picture(Picture.DEFAULT_BALAKRISHNAN), getTagSet(\"friends\", \"colleagues\")),"},{"lineNumber":89,"author":{"gitID":"chrisboo"},"content":"                new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"98259530\"), new Email(\"royb@hotmail.com\"),"},{"lineNumber":90,"author":{"gitID":"chrisboo"},"content":"                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Birthday(\"29/03/1977\"),"},{"lineNumber":91,"author":{"gitID":"chrisboo"},"content":"                    new Remark(\"Speaks 6 languages\"), new Website(Website.WEBSITE_NULL),"},{"lineNumber":92,"author":{"gitID":"chrisboo"},"content":"                    new Picture(Picture.DEFAULT_BALAKRISHNAN), getTagSet(\"colleagues\")),"},{"lineNumber":93,"author":{"gitID":"chrisboo"},"content":"                new Person(new Name(\"Shila Siguro\"), new Phone(\"85577250\"), new Email(\"shila@hotmail.com\"),"},{"lineNumber":94,"author":{"gitID":"chrisboo"},"content":"                    new Address(\"12 Prince Edward Rd #04-06\"), new Birthday(\"20/09/1990\"),"},{"lineNumber":95,"author":{"gitID":"chrisboo"},"content":"                    new Remark(\"Make delicious tacos\"), new Website(Website.WEBSITE_NULL),"},{"lineNumber":96,"author":{"gitID":"chrisboo"},"content":"                    new Picture(Picture.DEFAULT_BALAKRISHNAN), getTagSet(\"roommates\", \"classmates\")),"},{"lineNumber":97,"author":{"gitID":"chrisboo"},"content":"                new Person(new Name(\"Tim Bone\"), new Phone(\"67894650\"), new Email(\"tim@gmail.com\"),"},{"lineNumber":98,"author":{"gitID":"chrisboo"},"content":"                    new Address(\"1003 Bukit Merah Central #04-16 Entrepreneur Centre\"), new Birthday(\"25/09/1993\"),"},{"lineNumber":99,"author":{"gitID":"chrisboo"},"content":"                    new Remark(\"Math nerd\"), new Website(Website.WEBSITE_NULL),"},{"lineNumber":100,"author":{"gitID":"chrisboo"},"content":"                    new Picture(Picture.DEFAULT_BALAKRISHNAN), getTagSet(\"colleagues\", \"neighbours\")),"},{"lineNumber":101,"author":{"gitID":"chrisboo"},"content":"                new Person(new Name(\"Vasu Drust\"), new Phone(\"80280434\"), new Email(\"me@vasu.com\"),"},{"lineNumber":102,"author":{"gitID":"chrisboo"},"content":"                    new Address(\"177 River Valley Rd #03-40\"), new Birthday(\"06/08/1992\"),"},{"lineNumber":103,"author":{"gitID":"chrisboo"},"content":"                    new Remark(\"Stand up comedian\"), new Website(Website.WEBSITE_NULL),"},{"lineNumber":104,"author":{"gitID":"chrisboo"},"content":"                    new Picture(Picture.DEFAULT_BALAKRISHNAN), getTagSet(\"friends\")),"},{"lineNumber":105,"author":{"gitID":"chrisboo"},"content":"                new Person(new Name(\"Viktoras Theodore\"), new Phone(\"55046009\"), new Email(\"vik@vk.com\"),"},{"lineNumber":106,"author":{"gitID":"chrisboo"},"content":"                    new Address(\"7 Orange Grove Road Singapore 258355\"), new Birthday(\"24/07/1985\"),"},{"lineNumber":107,"author":{"gitID":"chrisboo"},"content":"                    new Remark(\"Footballer\"), new Website(Website.WEBSITE_NULL),"},{"lineNumber":108,"author":{"gitID":"chrisboo"},"content":"                    new Picture(Picture.DEFAULT_BALAKRISHNAN), getTagSet(\"friends\", \"neighbours\"))"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            };"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot be invalid\", e);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) throws IllegalValueException {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chilipadiboy":9,"Jemereny":5,"chrisboo":77,"-":48}},{"path":"src/main/java/seedu/address/storage/JsonUserPrefsStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * A class to access UserPrefs stored in the hard disk as a json file"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class JsonUserPrefsStorage implements UserPrefsStorage {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public JsonUserPrefsStorage(String filePath) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return readUserPrefs(filePath);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Similar to {@link #readUserPrefs()}"},{"lineNumber":33,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @param prefsFilePath location of the data. Cannot be null."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file format is not as expected."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"chrisboo"},"content":"    public static Optional\u003cUserPrefs\u003e readUserPrefs(String prefsFilePath) throws DataConversionException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"chrisboo"},"content":"    public static void saveUserPrefs(UserPrefs userPrefs, String prefsFilePath) throws IOException {"},{"lineNumber":42,"author":{"gitID":"chrisboo"},"content":"        JsonUtil.saveJsonFile(userPrefs, prefsFilePath);"},{"lineNumber":43,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        JsonUtil.saveJsonFile(userPrefs, filePath);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"chrisboo"},"content":"    //@@author chrisboo"},{"lineNumber":51,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"chrisboo"},"content":"     * Update the addressBookFilePath and addressBookName fields in preferences.json"},{"lineNumber":53,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"chrisboo"},"content":"    public static void updateUserPrefs(String userPrefsFilePath, String addressBookFilePath, String addressBookName)"},{"lineNumber":55,"author":{"gitID":"chrisboo"},"content":"        throws DataConversionException, IOException {"},{"lineNumber":56,"author":{"gitID":"chrisboo"},"content":"        UserPrefs userPrefs \u003d readUserPrefs(userPrefsFilePath).get();"},{"lineNumber":57,"author":{"gitID":"chrisboo"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);"},{"lineNumber":58,"author":{"gitID":"chrisboo"},"content":"        userPrefs.setAddressBookName(addressBookName);"},{"lineNumber":59,"author":{"gitID":"chrisboo"},"content":"        saveUserPrefs(userPrefs, userPrefsFilePath);"},{"lineNumber":60,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"chrisboo"},"content":"    //@@author"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":18,"-":44}},{"path":"src/main/java/seedu/address/model/person/Email.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s phone number in the address book."},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Email {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        \"Person emails should be 2 alphanumeric/period strings separated by \u0027@\u0027\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String EMAIL_VALIDATION_REGEX \u003d \"[\\\\w\\\\.]+@[\\\\w\\\\.]+\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Validates given email."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if given email address string is invalid."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public Email(String email) throws IllegalValueException {"},{"lineNumber":23,"author":{"gitID":"chrisboo"},"content":"        String trimmedEmail \u003d email \u003d\u003d null ? null : email.trim();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!isValidEmail(trimmedEmail)) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.value \u003d trimmedEmail;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Returns if a given string is a valid person email."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"chrisboo"},"content":"    public static boolean isValidEmail(String test) {"},{"lineNumber":34,"author":{"gitID":"chrisboo"},"content":"        return test \u003d\u003d null || test.matches(EMAIL_VALIDATION_REGEX);"},{"lineNumber":35,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"chrisboo"},"content":"        if (other \u003d\u003d this) { // short circuit if same object"},{"lineNumber":45,"author":{"gitID":"chrisboo"},"content":"            return true;"},{"lineNumber":46,"author":{"gitID":"chrisboo"},"content":"        } else if (!(other instanceof Email)) { // instanceof handle nulls"},{"lineNumber":47,"author":{"gitID":"chrisboo"},"content":"            return false;"},{"lineNumber":48,"author":{"gitID":"chrisboo"},"content":"        } else if (this.value \u003d\u003d ((Email) other).value) {"},{"lineNumber":49,"author":{"gitID":"chrisboo"},"content":"            return true;"},{"lineNumber":50,"author":{"gitID":"chrisboo"},"content":"        } else if (this.value !\u003d null \u0026\u0026 this.value.equals(((Email) other).value)) { // state check"},{"lineNumber":51,"author":{"gitID":"chrisboo"},"content":"            return true;"},{"lineNumber":52,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":54,"author":{"gitID":"chrisboo"},"content":"        return false;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":15,"-":47}},{"path":"src/main/java/seedu/address/model/person/ReadOnlyPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"chilipadiboy"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * A read-only immutable interface for a Person in the addressbook."},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Implementations should guarantee: details are present and not null, field values are validated."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public interface ReadOnlyPerson {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cName\u003e nameProperty();"},{"lineNumber":16,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    Name getName();"},{"lineNumber":18,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cPhone\u003e phoneProperty();"},{"lineNumber":20,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    Phone getPhone();"},{"lineNumber":22,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cEmail\u003e emailProperty();"},{"lineNumber":24,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    Email getEmail();"},{"lineNumber":26,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":27,"author":{"gitID":"chilipadiboy"},"content":"    ObjectProperty\u003cBirthday\u003e birthdayProperty();"},{"lineNumber":28,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":29,"author":{"gitID":"chilipadiboy"},"content":"    Birthday getBirthday();"},{"lineNumber":30,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cAddress\u003e addressProperty();"},{"lineNumber":32,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    Address getAddress();"},{"lineNumber":34,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":35,"author":{"gitID":"chilipadiboy"},"content":"    ObjectProperty\u003cRemark\u003e remarkProperty();"},{"lineNumber":36,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":37,"author":{"gitID":"chilipadiboy"},"content":"    Remark getRemark();"},{"lineNumber":38,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":39,"author":{"gitID":"Jemereny"},"content":"    ObjectProperty\u003cWebsite\u003e websiteProperty();"},{"lineNumber":40,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":41,"author":{"gitID":"Jemereny"},"content":"    Website getWebsite();"},{"lineNumber":42,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":43,"author":{"gitID":"Jemereny"},"content":"    ObjectProperty\u003cPicture\u003e pictureProperty();"},{"lineNumber":44,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":45,"author":{"gitID":"Jemereny"},"content":"    Picture getPicture();"},{"lineNumber":46,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cUniqueTagList\u003e tagProperty();"},{"lineNumber":48,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    Set\u003cTag\u003e getTags();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Returns true if both have the same state. (interfaces cannot override .equals)"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    default boolean isSameStateAs(ReadOnlyPerson other) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                      || (other !\u003d null // this is first to avoid NPE below"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                      \u0026\u0026 other.getName().equals(this.getName()) // state checks here onwards"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                      \u0026\u0026 other.getPhone().equals(this.getPhone())"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                      \u0026\u0026 other.getEmail().equals(this.getEmail())"},{"lineNumber":60,"author":{"gitID":"chilipadiboy"},"content":"                      \u0026\u0026 other.getBirthday().equals(this.getBirthday())"},{"lineNumber":61,"author":{"gitID":"chilipadiboy"},"content":"                      //@@author chilipadiboy"},{"lineNumber":62,"author":{"gitID":"chilipadiboy"},"content":"                      \u0026\u0026 other.getAddress().equals(this.getAddress())"},{"lineNumber":63,"author":{"gitID":"Jemereny"},"content":"                      //@@author Jemereny"},{"lineNumber":64,"author":{"gitID":"Jemereny"},"content":"                      \u0026\u0026 other.getWebsite().equals(this.getWebsite())"},{"lineNumber":65,"author":{"gitID":"Jemereny"},"content":"                      \u0026\u0026 other.getPicture().equals(this.getPicture())"},{"lineNumber":66,"author":{"gitID":"chilipadiboy"},"content":"                      //@@author chilipadiboy"},{"lineNumber":67,"author":{"gitID":"chilipadiboy"},"content":"                      \u0026\u0026 other.getRemark().equals(this.getRemark()));"},{"lineNumber":68,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":70,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"chilipadiboy"},"content":"     * Formats the person as text, showing all contact details."},{"lineNumber":72,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"chilipadiboy"},"content":"    default String getAsText() {"},{"lineNumber":74,"author":{"gitID":"chilipadiboy"},"content":"        //@@author chilipadiboy"},{"lineNumber":75,"author":{"gitID":"chilipadiboy"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":76,"author":{"gitID":"chilipadiboy"},"content":"        builder.append(getName());"},{"lineNumber":77,"author":{"gitID":"chilipadiboy"},"content":"        if (getPhone().toString() !\u003d null) {"},{"lineNumber":78,"author":{"gitID":"chilipadiboy"},"content":"            builder.append(\" Phone: \")"},{"lineNumber":79,"author":{"gitID":"chilipadiboy"},"content":"                .append(getPhone());"},{"lineNumber":80,"author":{"gitID":"chilipadiboy"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":82,"author":{"gitID":"chilipadiboy"},"content":"        if (getEmail().toString() !\u003d null) {"},{"lineNumber":83,"author":{"gitID":"chilipadiboy"},"content":"            builder.append(\" Email: \")"},{"lineNumber":84,"author":{"gitID":"chilipadiboy"},"content":"                .append(getEmail());"},{"lineNumber":85,"author":{"gitID":"chilipadiboy"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"chilipadiboy"},"content":"        if (getAddress().toString() !\u003d null) {"},{"lineNumber":87,"author":{"gitID":"chilipadiboy"},"content":"            builder.append(\" Address: \")"},{"lineNumber":88,"author":{"gitID":"chilipadiboy"},"content":"                .append(getAddress());"},{"lineNumber":89,"author":{"gitID":"chilipadiboy"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"chilipadiboy"},"content":"        if (getBirthday().toString() !\u003d null) {"},{"lineNumber":91,"author":{"gitID":"chilipadiboy"},"content":"            builder.append(\" Birthday: \")"},{"lineNumber":92,"author":{"gitID":"chilipadiboy"},"content":"                .append(getBirthday());"},{"lineNumber":93,"author":{"gitID":"chilipadiboy"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"chilipadiboy"},"content":"        builder.append(\" Remarks: \")"},{"lineNumber":95,"author":{"gitID":"chilipadiboy"},"content":"            .append(getRemark());"},{"lineNumber":96,"author":{"gitID":"chilipadiboy"},"content":"        if (getWebsite().toString() !\u003d null) {"},{"lineNumber":97,"author":{"gitID":"chilipadiboy"},"content":"            builder.append(\" Website: \")"},{"lineNumber":98,"author":{"gitID":"chilipadiboy"},"content":"                .append(getWebsite());"},{"lineNumber":99,"author":{"gitID":"chilipadiboy"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":101,"author":{"gitID":"chilipadiboy"},"content":"        if (getPicture().toString() !\u003d null) {"},{"lineNumber":102,"author":{"gitID":"chilipadiboy"},"content":"            builder.append(\" Picture: \")"},{"lineNumber":103,"author":{"gitID":"chilipadiboy"},"content":"                    .append(getPicture());"},{"lineNumber":104,"author":{"gitID":"chilipadiboy"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"chilipadiboy"},"content":"        //@@author"},{"lineNumber":106,"author":{"gitID":"chilipadiboy"},"content":"        if (!(getTags().isEmpty())) {"},{"lineNumber":107,"author":{"gitID":"chilipadiboy"},"content":"            builder.append(\" Tags: \");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            getTags().forEach(builder::append);"},{"lineNumber":109,"author":{"gitID":"chilipadiboy"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chilipadiboy":54,"Jemereny":11,"chrisboo":11,"-":37}},{"path":"src/main/java/seedu/address/model/person/Address.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s address in the address book."},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Address {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        \"Person addresses can take any values, and it should not be blank\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Validates given address."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if given address string is invalid."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public Address(String address) throws IllegalValueException {"},{"lineNumber":28,"author":{"gitID":"chrisboo"},"content":"        String trimmedAddress \u003d address \u003d\u003d null ? null : address.trim();"},{"lineNumber":29,"author":{"gitID":"chrisboo"},"content":"        if (!isValidAddress(trimmedAddress)) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"chrisboo"},"content":"        this.value \u003d trimmedAddress;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"chrisboo"},"content":"     * Returns true if a given string is a valid person address."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"chrisboo"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":39,"author":{"gitID":"chrisboo"},"content":"        return test \u003d\u003d null || test.matches(ADDRESS_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"chrisboo"},"content":"        if (other \u003d\u003d this) { // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"chrisboo"},"content":"            return true;"},{"lineNumber":51,"author":{"gitID":"chrisboo"},"content":"        } else if (!(other instanceof Address)) { // instanceof handle nulls"},{"lineNumber":52,"author":{"gitID":"chrisboo"},"content":"            return false;"},{"lineNumber":53,"author":{"gitID":"chrisboo"},"content":"        } else if (this.value \u003d\u003d ((Address) other).value) {"},{"lineNumber":54,"author":{"gitID":"chrisboo"},"content":"            return true;"},{"lineNumber":55,"author":{"gitID":"chrisboo"},"content":"        } else if (this.value !\u003d null \u0026\u0026 this.value.equals(((Address) other).value)) { // state check"},{"lineNumber":56,"author":{"gitID":"chrisboo"},"content":"            return true;"},{"lineNumber":57,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":59,"author":{"gitID":"chrisboo"},"content":"        return false;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":18,"-":49}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":12,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":13,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":14,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitID":"Jemereny"},"content":"import seedu.address.model.person.Picture;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":19,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":20,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.model.person.Website;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":38,"author":{"gitID":"chilipadiboy"},"content":"    private String birthday;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":40,"author":{"gitID":"chilipadiboy"},"content":"    private String remark;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":42,"author":{"gitID":"Jemereny"},"content":"    private String website;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":44,"author":{"gitID":"Jemereny"},"content":"    private String picture;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"chrisboo"},"content":"    public XmlAdaptedPerson() {"},{"lineNumber":54,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(ReadOnlyPerson source) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":67,"author":{"gitID":"chilipadiboy"},"content":"        birthday \u003d source.getBirthday().value;"},{"lineNumber":68,"author":{"gitID":"chilipadiboy"},"content":"        remark \u003d source.getRemark().value;"},{"lineNumber":69,"author":{"gitID":"Jemereny"},"content":"        website \u003d source.getWebsite().value;"},{"lineNumber":70,"author":{"gitID":"Jemereny"},"content":"        picture \u003d source.getPicture().value;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":91,"author":{"gitID":"chilipadiboy"},"content":"        final Birthday birthday \u003d new Birthday(this.birthday);"},{"lineNumber":92,"author":{"gitID":"chilipadiboy"},"content":"        final Remark remark \u003d new Remark(this.remark);"},{"lineNumber":93,"author":{"gitID":"Jemereny"},"content":"        final Website website \u003d new Website(this.website);"},{"lineNumber":94,"author":{"gitID":"Jemereny"},"content":"        final Picture picture \u003d new Picture(this.picture);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":96,"author":{"gitID":"Jemereny"},"content":"        return new Person(name, phone, email, address, birthday, remark, website,"},{"lineNumber":97,"author":{"gitID":"Jemereny"},"content":"                picture, tags);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chilipadiboy":14,"Jemereny":9,"chrisboo":3,"-":73}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":18,"author":{"gitID":"chrisboo"},"content":" * \u003cp\u003e"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":20,"author":{"gitID":"-"},"content":" *"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * @see Person#equals(Object)"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    // used by asObservableList()"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cReadOnlyPerson\u003e mappedList \u003d EasyBind.map(internalList, (person) -\u003e person);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public boolean contains(ReadOnlyPerson toCheck) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Adds a person to the list."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void add(ReadOnlyPerson toAdd) throws DuplicatePersonException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        internalList.add(new Person(toAdd));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the replacement is equivalent to another existing person in the list."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void setPerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        if (!target.equals(editedPerson) \u0026\u0026 internalList.contains(editedPerson)) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        internalList.set(index, new Person(editedPerson));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public boolean remove(ReadOnlyPerson toRemove) throws PersonNotFoundException {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        if (!personFoundAndDeleted) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return personFoundAndDeleted;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void setPersons(UniquePersonList replacement) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003c? extends ReadOnlyPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        final UniquePersonList replacement \u003d new UniquePersonList();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        for (final ReadOnlyPerson person : persons) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            replacement.add(new Person(person));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        setPersons(replacement);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e asObservableList() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(mappedList);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            || (other instanceof UniquePersonList // instanceof handles nulls"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            \u0026\u0026 this.internalList.equals(((UniquePersonList) other).internalList));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":1,"-":121}},{"path":"src/main/java/seedu/address/model/person/exceptions/PersonNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Signals that the operation is unable to find the specified person."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"chrisboo"},"content":"public class PersonNotFoundException extends Exception {"},{"lineNumber":7,"author":{"gitID":"chrisboo"},"content":"}"}],"authorContributionMap":{"chrisboo":2,"-":5}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleObjectProperty;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"chrisboo"},"content":"public class Person implements ReadOnlyPerson {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cName\u003e name;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cPhone\u003e phone;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cEmail\u003e email;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cAddress\u003e address;"},{"lineNumber":25,"author":{"gitID":"chilipadiboy"},"content":"    private ObjectProperty\u003cBirthday\u003e birthday;"},{"lineNumber":26,"author":{"gitID":"chilipadiboy"},"content":"    private ObjectProperty\u003cRemark\u003e remark;"},{"lineNumber":27,"author":{"gitID":"Jemereny"},"content":"    private ObjectProperty\u003cWebsite\u003e website;"},{"lineNumber":28,"author":{"gitID":"Jemereny"},"content":"    private ObjectProperty\u003cPicture\u003e picture;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cUniqueTagList\u003e tags;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"chrisboo"},"content":"     * Every field must be present and name must not be null."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"chilipadiboy"},"content":"    public Person(Name name, Phone phone, Email email, Address address,"},{"lineNumber":35,"author":{"gitID":"Jemereny"},"content":"                  Birthday birthday, Remark remark, Website website, Picture picture, Set\u003cTag\u003e tags) {"},{"lineNumber":36,"author":{"gitID":"chrisboo"},"content":"        requireNonNull(name);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.name \u003d new SimpleObjectProperty\u003c\u003e(name);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.phone \u003d new SimpleObjectProperty\u003c\u003e(phone);"},{"lineNumber":39,"author":{"gitID":"chilipadiboy"},"content":"        this.birthday \u003d new SimpleObjectProperty\u003c\u003e(birthday);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.email \u003d new SimpleObjectProperty\u003c\u003e(email);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.address \u003d new SimpleObjectProperty\u003c\u003e(address);"},{"lineNumber":42,"author":{"gitID":"chilipadiboy"},"content":"        this.remark \u003d new SimpleObjectProperty\u003c\u003e(remark);"},{"lineNumber":43,"author":{"gitID":"Jemereny"},"content":"        this.website \u003d new SimpleObjectProperty\u003c\u003e(website);"},{"lineNumber":44,"author":{"gitID":"Jemereny"},"content":"        this.picture \u003d new SimpleObjectProperty\u003c\u003e(picture);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.tags \u003d new SimpleObjectProperty\u003c\u003e(new UniqueTagList(tags));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Creates a copy of the given ReadOnlyPerson."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public Person(ReadOnlyPerson source) {"},{"lineNumber":53,"author":{"gitID":"chilipadiboy"},"content":"        this(source.getName(), source.getPhone(), source.getEmail(), source.getAddress(),"},{"lineNumber":54,"author":{"gitID":"Jemereny"},"content":"            source.getBirthday(), source.getRemark(), source.getWebsite(),"},{"lineNumber":55,"author":{"gitID":"Jemereny"},"content":"                source.getPicture(), source.getTags());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void setName(Name name) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.name.set(requireNonNull(name));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cName\u003e nameProperty() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return name.get();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"chrisboo"},"content":"    public void setPhone(Phone phone) {"},{"lineNumber":73,"author":{"gitID":"chrisboo"},"content":"        this.phone.set(requireNonNull(phone));"},{"lineNumber":74,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cPhone\u003e phoneProperty() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return phone.get();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void setEmail(Email email) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        this.email.set(requireNonNull(email));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cEmail\u003e emailProperty() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"chrisboo"},"content":"    public Email getEmail() {"},{"lineNumber":97,"author":{"gitID":"chrisboo"},"content":"        return email.get();"},{"lineNumber":98,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"chilipadiboy"},"content":"    //@@author chilipadiboy"},{"lineNumber":100,"author":{"gitID":"chilipadiboy"},"content":"    public void setBirthday(Birthday birthday) {"},{"lineNumber":101,"author":{"gitID":"chilipadiboy"},"content":"        this.birthday.set(requireNonNull(birthday));"},{"lineNumber":102,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":104,"author":{"gitID":"chilipadiboy"},"content":"    @Override"},{"lineNumber":105,"author":{"gitID":"chilipadiboy"},"content":"    public ObjectProperty\u003cBirthday\u003e birthdayProperty() {"},{"lineNumber":106,"author":{"gitID":"chilipadiboy"},"content":"        return birthday;"},{"lineNumber":107,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":109,"author":{"gitID":"chilipadiboy"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"chilipadiboy"},"content":"    public Birthday getBirthday() {"},{"lineNumber":111,"author":{"gitID":"chilipadiboy"},"content":"        return birthday.get();"},{"lineNumber":112,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"chilipadiboy"},"content":"    //@@author"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void setAddress(Address address) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        this.address.set(requireNonNull(address));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cAddress\u003e addressProperty() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        return address.get();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"chilipadiboy"},"content":"    //@@author chilipadiboy"},{"lineNumber":128,"author":{"gitID":"chilipadiboy"},"content":"    public void setRemark(Remark remark) {"},{"lineNumber":129,"author":{"gitID":"chilipadiboy"},"content":"        this.remark.set(requireNonNull(remark));"},{"lineNumber":130,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":132,"author":{"gitID":"chilipadiboy"},"content":"    @Override"},{"lineNumber":133,"author":{"gitID":"chilipadiboy"},"content":"    public ObjectProperty\u003cRemark\u003e remarkProperty() {"},{"lineNumber":134,"author":{"gitID":"chilipadiboy"},"content":"        return remark;"},{"lineNumber":135,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":137,"author":{"gitID":"chilipadiboy"},"content":"    @Override"},{"lineNumber":138,"author":{"gitID":"chilipadiboy"},"content":"    public Remark getRemark() {"},{"lineNumber":139,"author":{"gitID":"chilipadiboy"},"content":"        return remark.get();"},{"lineNumber":140,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"Jemereny"},"content":"    //@@author Jemereny"},{"lineNumber":142,"author":{"gitID":"Jemereny"},"content":"    public void setWebsite(Website website) {"},{"lineNumber":143,"author":{"gitID":"Jemereny"},"content":"        this.website.set(requireNonNull(website));"},{"lineNumber":144,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":146,"author":{"gitID":"Jemereny"},"content":"    @Override"},{"lineNumber":147,"author":{"gitID":"Jemereny"},"content":"    public ObjectProperty\u003cWebsite\u003e websiteProperty() {"},{"lineNumber":148,"author":{"gitID":"Jemereny"},"content":"        return website;"},{"lineNumber":149,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":151,"author":{"gitID":"Jemereny"},"content":"    @Override"},{"lineNumber":152,"author":{"gitID":"Jemereny"},"content":"    public Website getWebsite() {"},{"lineNumber":153,"author":{"gitID":"Jemereny"},"content":"        return website.get();"},{"lineNumber":154,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":156,"author":{"gitID":"Jemereny"},"content":"    public void setPicture(Picture picture) {"},{"lineNumber":157,"author":{"gitID":"Jemereny"},"content":"        this.picture.set(requireNonNull(picture));"},{"lineNumber":158,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":160,"author":{"gitID":"Jemereny"},"content":"    @Override"},{"lineNumber":161,"author":{"gitID":"Jemereny"},"content":"    public ObjectProperty\u003cPicture\u003e pictureProperty() {"},{"lineNumber":162,"author":{"gitID":"Jemereny"},"content":"        return picture;"},{"lineNumber":163,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":165,"author":{"gitID":"Jemereny"},"content":"    @Override"},{"lineNumber":166,"author":{"gitID":"Jemereny"},"content":"    public Picture getPicture() {"},{"lineNumber":167,"author":{"gitID":"Jemereny"},"content":"        return picture.get();"},{"lineNumber":168,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"Jemereny"},"content":"    //@@author"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":173,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.get().toSet());"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cUniqueTagList\u003e tagProperty() {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * Replaces  this person\u0027s tags with the tags in the argument tag set."},{"lineNumber":185,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e replacement) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        tags.set(new UniqueTagList(replacement));"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"chilipadiboy"},"content":"     * Updates this person with the details of {@code replacement}."},{"lineNumber":192,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"chilipadiboy"},"content":"    //@@author chilipadiboy"},{"lineNumber":194,"author":{"gitID":"chilipadiboy"},"content":"    public void resetData(ReadOnlyPerson replacement) {"},{"lineNumber":195,"author":{"gitID":"chilipadiboy"},"content":"        requireNonNull(replacement);"},{"lineNumber":196,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":197,"author":{"gitID":"chilipadiboy"},"content":"        this.setName(replacement.getName());"},{"lineNumber":198,"author":{"gitID":"chilipadiboy"},"content":"        this.setPhone(replacement.getPhone());"},{"lineNumber":199,"author":{"gitID":"chilipadiboy"},"content":"        this.setEmail(replacement.getEmail());"},{"lineNumber":200,"author":{"gitID":"chilipadiboy"},"content":"        this.setAddress(replacement.getAddress());"},{"lineNumber":201,"author":{"gitID":"chilipadiboy"},"content":"        this.setRemark(replacement.getRemark());"},{"lineNumber":202,"author":{"gitID":"chilipadiboy"},"content":"        this.setWebsite(replacement.getWebsite());"},{"lineNumber":203,"author":{"gitID":"chilipadiboy"},"content":"        this.setPicture(replacement.getPicture());"},{"lineNumber":204,"author":{"gitID":"chilipadiboy"},"content":"        this.setTags(replacement.getTags());"},{"lineNumber":205,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"chilipadiboy"},"content":"    //@@author chilipadiboy"},{"lineNumber":207,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":208,"author":{"gitID":"chilipadiboy"},"content":"    @Override"},{"lineNumber":209,"author":{"gitID":"chilipadiboy"},"content":"    public boolean equals(Object other) {"},{"lineNumber":210,"author":{"gitID":"chilipadiboy"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":211,"author":{"gitID":"chilipadiboy"},"content":"            || (other instanceof ReadOnlyPerson // instanceof handles nulls"},{"lineNumber":212,"author":{"gitID":"chilipadiboy"},"content":"            \u0026\u0026 this.isSameStateAs((ReadOnlyPerson) other));"},{"lineNumber":213,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":215,"author":{"gitID":"chilipadiboy"},"content":"    @Override"},{"lineNumber":216,"author":{"gitID":"chilipadiboy"},"content":"    public int hashCode() {"},{"lineNumber":217,"author":{"gitID":"chilipadiboy"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":218,"author":{"gitID":"chilipadiboy"},"content":"        return Objects.hash(name, phone, email, address, remark, website, picture, tags);"},{"lineNumber":219,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":221,"author":{"gitID":"chilipadiboy"},"content":"    @Override"},{"lineNumber":222,"author":{"gitID":"chilipadiboy"},"content":"    public String toString() {"},{"lineNumber":223,"author":{"gitID":"chilipadiboy"},"content":"        return getAsText();"},{"lineNumber":224,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"chilipadiboy"},"content":"}"}],"authorContributionMap":{"chilipadiboy":71,"Jemereny":36,"chrisboo":9,"-":109}},{"path":"src/main/java/seedu/address/model/person/Birthday.java","lines":[{"lineNumber":1,"author":{"gitID":"chilipadiboy"},"content":"//@@author chilipadiboy"},{"lineNumber":2,"author":{"gitID":"chilipadiboy"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":4,"author":{"gitID":"chilipadiboy"},"content":"import java.text.ParseException;"},{"lineNumber":5,"author":{"gitID":"chilipadiboy"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":6,"author":{"gitID":"chilipadiboy"},"content":"import java.util.Date;"},{"lineNumber":7,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":8,"author":{"gitID":"chilipadiboy"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":10,"author":{"gitID":"chilipadiboy"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"chilipadiboy"},"content":" * Represents a Person\u0027s address in the address book."},{"lineNumber":12,"author":{"gitID":"chilipadiboy"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidBirthday(String)}"},{"lineNumber":13,"author":{"gitID":"chilipadiboy"},"content":" */"},{"lineNumber":14,"author":{"gitID":"chilipadiboy"},"content":"public class Birthday {"},{"lineNumber":15,"author":{"gitID":"chilipadiboy"},"content":"    public static final String MESSAGE_BIRTHDAY_CONSTRAINTS \u003d"},{"lineNumber":16,"author":{"gitID":"chilipadiboy"},"content":"            \"Person Birthday should be in the format of DD/MM/YYYY and also valid\";"},{"lineNumber":17,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":18,"author":{"gitID":"chilipadiboy"},"content":"    public final String value;"},{"lineNumber":19,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":20,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"chilipadiboy"},"content":"     * Validates given birthday."},{"lineNumber":22,"author":{"gitID":"chilipadiboy"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"chilipadiboy"},"content":"     * @throws IllegalValueException if given address string is invalid."},{"lineNumber":24,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"chilipadiboy"},"content":"    public Birthday(String birthday) throws IllegalValueException {"},{"lineNumber":26,"author":{"gitID":"chilipadiboy"},"content":"        String trimmedBirthday \u003d birthday \u003d\u003d null ? null : birthday.trim();"},{"lineNumber":27,"author":{"gitID":"chilipadiboy"},"content":"        if (!isValidBirthday(trimmedBirthday)) {"},{"lineNumber":28,"author":{"gitID":"chilipadiboy"},"content":"            throw new IllegalValueException(MESSAGE_BIRTHDAY_CONSTRAINTS);"},{"lineNumber":29,"author":{"gitID":"chilipadiboy"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"chilipadiboy"},"content":"        this.value \u003d trimmedBirthday;"},{"lineNumber":31,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":33,"author":{"gitID":"chilipadiboy"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"chilipadiboy"},"content":"     * Returns true if a given string is a valid date."},{"lineNumber":35,"author":{"gitID":"chilipadiboy"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"chilipadiboy"},"content":"    static boolean isValidBirthday(String test) {"},{"lineNumber":37,"author":{"gitID":"chilipadiboy"},"content":"        if (test \u003d\u003d null) {"},{"lineNumber":38,"author":{"gitID":"chilipadiboy"},"content":"            return true;"},{"lineNumber":39,"author":{"gitID":"chilipadiboy"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":41,"author":{"gitID":"chilipadiboy"},"content":"        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"},{"lineNumber":42,"author":{"gitID":"chilipadiboy"},"content":"        format.setLenient(false);"},{"lineNumber":43,"author":{"gitID":"chilipadiboy"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"chilipadiboy"},"content":"            Date strToDate \u003d format.parse(test);      //tries to parse provided string in given format"},{"lineNumber":45,"author":{"gitID":"chilipadiboy"},"content":"        } catch (ParseException e) {"},{"lineNumber":46,"author":{"gitID":"chilipadiboy"},"content":"            return false;"},{"lineNumber":47,"author":{"gitID":"chilipadiboy"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"chilipadiboy"},"content":"        return true;"},{"lineNumber":49,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":51,"author":{"gitID":"chilipadiboy"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"chilipadiboy"},"content":"    public String toString() {"},{"lineNumber":53,"author":{"gitID":"chilipadiboy"},"content":"        return value;"},{"lineNumber":54,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":56,"author":{"gitID":"chilipadiboy"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"chilipadiboy"},"content":"    public boolean equals(Object other) {"},{"lineNumber":58,"author":{"gitID":"chilipadiboy"},"content":"        if (other \u003d\u003d this) { // short circuit if same object"},{"lineNumber":59,"author":{"gitID":"chilipadiboy"},"content":"            return true;"},{"lineNumber":60,"author":{"gitID":"chilipadiboy"},"content":"        } else if (!(other instanceof Birthday)) { // instanceof handle nulls"},{"lineNumber":61,"author":{"gitID":"chilipadiboy"},"content":"            return false;"},{"lineNumber":62,"author":{"gitID":"chilipadiboy"},"content":"        } else if (this.value \u003d\u003d ((Birthday) other).value) {"},{"lineNumber":63,"author":{"gitID":"chilipadiboy"},"content":"            return true;"},{"lineNumber":64,"author":{"gitID":"chilipadiboy"},"content":"        } else if (this.value !\u003d null \u0026\u0026 this.value.equals(((Birthday) other).value)) { // state check"},{"lineNumber":65,"author":{"gitID":"chilipadiboy"},"content":"            return true;"},{"lineNumber":66,"author":{"gitID":"chilipadiboy"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":68,"author":{"gitID":"chilipadiboy"},"content":"        return false;"},{"lineNumber":69,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":71,"author":{"gitID":"chilipadiboy"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"chilipadiboy"},"content":"    public int hashCode() {"},{"lineNumber":73,"author":{"gitID":"chilipadiboy"},"content":"        return value.hashCode();"},{"lineNumber":74,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"chilipadiboy"},"content":"}"}],"authorContributionMap":{"chilipadiboy":75}},{"path":"src/main/java/seedu/address/model/person/Name.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s name in the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class Name {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        \"Person names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public final String fullName;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * Validates given name."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if given name string is invalid."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public Name(String name) throws IllegalValueException {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        if (!isValidName(trimmedName)) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.fullName \u003d trimmedName;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person name."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":42,"author":{"gitID":"chrisboo"},"content":"        return test !\u003d null \u0026\u0026 test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return fullName;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            || (other instanceof Name // instanceof handles nulls"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            \u0026\u0026 this.fullName.equals(((Name) other).fullName)); // state check"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":1,"-":62}},{"path":"src/main/java/seedu/address/model/person/Remark.java","lines":[{"lineNumber":1,"author":{"gitID":"chilipadiboy"},"content":"//@@author chilipadiboy"},{"lineNumber":2,"author":{"gitID":"chilipadiboy"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":4,"author":{"gitID":"chilipadiboy"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":6,"author":{"gitID":"chilipadiboy"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"chilipadiboy"},"content":" * Represents a Person\u0027s remark in the address book."},{"lineNumber":8,"author":{"gitID":"chilipadiboy"},"content":" * Guarantees: immutable; is always valid"},{"lineNumber":9,"author":{"gitID":"chilipadiboy"},"content":" */"},{"lineNumber":10,"author":{"gitID":"chilipadiboy"},"content":"public class Remark {"},{"lineNumber":11,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":12,"author":{"gitID":"chilipadiboy"},"content":"    public static final String MESSAGE_REMARK_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"chilipadiboy"},"content":"        \"Person remarks can take any values, can even be blank\";"},{"lineNumber":14,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":15,"author":{"gitID":"chilipadiboy"},"content":"    public final String value;"},{"lineNumber":16,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":17,"author":{"gitID":"chilipadiboy"},"content":"    public Remark(String remark) {"},{"lineNumber":18,"author":{"gitID":"chilipadiboy"},"content":"        requireNonNull(remark);"},{"lineNumber":19,"author":{"gitID":"chilipadiboy"},"content":"        this.value \u003d remark;"},{"lineNumber":20,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":22,"author":{"gitID":"chilipadiboy"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"chilipadiboy"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitID":"chilipadiboy"},"content":"        return value;"},{"lineNumber":25,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":27,"author":{"gitID":"chilipadiboy"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"chilipadiboy"},"content":"    public boolean equals(Object other) {"},{"lineNumber":29,"author":{"gitID":"chilipadiboy"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":30,"author":{"gitID":"chilipadiboy"},"content":"            || (other instanceof Remark // instanceof handles nulls"},{"lineNumber":31,"author":{"gitID":"chilipadiboy"},"content":"            \u0026\u0026 this.value.equals(((Remark) other).value)); // state check"},{"lineNumber":32,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"chilipadiboy"},"content":""},{"lineNumber":34,"author":{"gitID":"chilipadiboy"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"chilipadiboy"},"content":"    public int hashCode() {"},{"lineNumber":36,"author":{"gitID":"chilipadiboy"},"content":"        return value.hashCode();"},{"lineNumber":37,"author":{"gitID":"chilipadiboy"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"chilipadiboy"},"content":"}"}],"authorContributionMap":{"chilipadiboy":38}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class UserPrefs {"},{"lineNumber":11,"author":{"gitID":"Jemereny"},"content":"    //@@author Jemereny"},{"lineNumber":12,"author":{"gitID":"Jemereny"},"content":"    public static final String FOLDER_LOCATION \u003d \"data/\";"},{"lineNumber":13,"author":{"gitID":"Jemereny"},"content":"    //@@author"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private GuiSettings guiSettings;"},{"lineNumber":16,"author":{"gitID":"Jemereny"},"content":"    private String addressBookFilePath \u003d FOLDER_LOCATION + \"addressbook.xml\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private String addressBookName \u003d \"MyAddressBook\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public UserPrefs() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        this.setGuiSettings(500, 500, 0, 0);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void setGuiSettings(double width, double height, int x, int y) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        guiSettings \u003d new GuiSettings(width, height, x, y);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return addressBookFilePath;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void setAddressBookFilePath(String addressBookFilePath) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String getAddressBookName() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return addressBookName;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void setAddressBookName(String addressBookName) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this.addressBookName \u003d addressBookName;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return Objects.equals(guiSettings, o.guiSettings)"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath)"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            \u0026\u0026 Objects.equals(addressBookName, o.addressBookName);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath, addressBookName);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings.toString());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        sb.append(\"\\nAddressBook name : \" + addressBookName);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Jemereny":4,"-":77}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"chrisboo"},"content":"    public AddressBook() {"},{"lineNumber":43,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003c? extends ReadOnlyPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            setPersons(newData.getPersonList());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            assert false : \"AddressBooks should not have duplicate persons\";"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        syncMasterTagListWith(persons);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void addPerson(ReadOnlyPerson p) throws DuplicatePersonException {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Person newPerson \u003d new Person(p);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        syncMasterTagListWith(newPerson);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":93,"author":{"gitID":"-"},"content":"        persons.add(newPerson);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedReadOnlyPerson}."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedReadOnlyPerson}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     *                                  another existing person in the list."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * @see #syncMasterTagListWith(Person)"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedReadOnlyPerson)"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        requireNonNull(editedReadOnlyPerson);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new Person(editedReadOnlyPerson);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        syncMasterTagListWith(editedPerson);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":114,"author":{"gitID":"-"},"content":"        persons.setPerson(target, editedPerson);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Ensures that every tag in this person:"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * - exists in the master list {@link #tags}"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * - points to a Tag object in the master list"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    private void syncMasterTagListWith(Person person) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":132,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        person.setTags(correctTagReferences);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * Ensures that every tag in these persons:"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * - exists in the master list {@link #tags}"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * - points to a Tag object in the master list"},{"lineNumber":141,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * @see #syncMasterTagListWith(Person)"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void syncMasterTagListWith(UniquePersonList persons) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        persons.forEach(this::syncMasterTagListWith);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":150,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public boolean removePerson(ReadOnlyPerson key) throws PersonNotFoundException {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() + \" tags\";"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getPersonList() {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":4,"-":194}},{"path":"src/main/java/seedu/address/logic/commands/NewCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"chrisboo"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":3,"author":{"gitID":"chrisboo"},"content":"import static seedu.address.commons.util.FileUtil.isFileExists;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"chrisboo"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":8,"author":{"gitID":"chrisboo"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"chrisboo"},"content":"import seedu.address.commons.events.ui.SwitchAddressBookRequestEvent;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":12,"author":{"gitID":"chrisboo"},"content":"//@@author chrisboo"},{"lineNumber":13,"author":{"gitID":"chrisboo"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"chrisboo"},"content":" * Create new DeathNote"},{"lineNumber":15,"author":{"gitID":"chrisboo"},"content":" */"},{"lineNumber":16,"author":{"gitID":"chrisboo"},"content":"public class NewCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":18,"author":{"gitID":"chrisboo"},"content":"    public static final String COMMAND_SHORT \u003d \"n\";"},{"lineNumber":19,"author":{"gitID":"chrisboo"},"content":"    public static final String COMMAND_WORD \u003d \"new\";"},{"lineNumber":20,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":21,"author":{"gitID":"chrisboo"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":22,"author":{"gitID":"chrisboo"},"content":"        + \": Open a new DeathNote. \\n\""},{"lineNumber":23,"author":{"gitID":"chrisboo"},"content":"        + \"Paremeters: PATH \\n\""},{"lineNumber":24,"author":{"gitID":"chrisboo"},"content":"        + \"Example: \" + COMMAND_WORD + \" C:\\\\Users\\\\crispy\\\\Downloads\\\\NewDeathNote.xml\";"},{"lineNumber":25,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":26,"author":{"gitID":"chrisboo"},"content":"    public static final String MESSAGE_OPEN_DEATHNOTE_SUCCESS \u003d \"Opened DeathNote: %1$s\";"},{"lineNumber":27,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":28,"author":{"gitID":"chrisboo"},"content":"    private final File file;"},{"lineNumber":29,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":30,"author":{"gitID":"chrisboo"},"content":"    public NewCommand(File file) {"},{"lineNumber":31,"author":{"gitID":"chrisboo"},"content":"        this.file \u003d file;"},{"lineNumber":32,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":34,"author":{"gitID":"chrisboo"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"chrisboo"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":36,"author":{"gitID":"chrisboo"},"content":"        if (isFileExists(file)) {"},{"lineNumber":37,"author":{"gitID":"chrisboo"},"content":"            throw new CommandException(Messages.MESSAGE_EXISTING_FILE);"},{"lineNumber":38,"author":{"gitID":"chrisboo"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":40,"author":{"gitID":"chrisboo"},"content":"        EventsCenter.getInstance().post(new SwitchAddressBookRequestEvent(file, true));"},{"lineNumber":41,"author":{"gitID":"chrisboo"},"content":"        return new CommandResult(String.format(MESSAGE_OPEN_DEATHNOTE_SUCCESS, file.getPath()));"},{"lineNumber":42,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"chrisboo"},"content":""},{"lineNumber":44,"author":{"gitID":"chrisboo"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"chrisboo"},"content":"    public boolean equals(Object other) {"},{"lineNumber":46,"author":{"gitID":"chrisboo"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":47,"author":{"gitID":"chrisboo"},"content":"            || (other instanceof NewCommand // instanceof handles nulls"},{"lineNumber":48,"author":{"gitID":"chrisboo"},"content":"            \u0026\u0026 this.file.equals(((NewCommand) other).file)); // state check"},{"lineNumber":49,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"chrisboo"},"content":"}"},{"lineNumber":51,"author":{"gitID":"chrisboo"},"content":"//@@author"}],"authorContributionMap":{"chrisboo":48,"-":3}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents a Tag in the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class Tag {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public final String tagName;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Validates given tag name."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given tag name string is invalid."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public Tag(String name) throws IllegalValueException {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        if (!isValidTagName(trimmedName)) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.tagName \u003d trimmedName;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return test.matches(TAG_VALIDATION_REGEX);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            \u0026\u0026 this.tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"chrisboo"},"content":"    public String toString() { return tagName; }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":1,"-":55}},{"path":"src/main/java/seedu/address/model/person/Picture.java","lines":[{"lineNumber":1,"author":{"gitID":"Jemereny"},"content":"//@@author Jemereny"},{"lineNumber":2,"author":{"gitID":"Jemereny"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":4,"author":{"gitID":"Jemereny"},"content":"import java.awt.AlphaComposite;"},{"lineNumber":5,"author":{"gitID":"Jemereny"},"content":"import java.awt.Graphics2D;"},{"lineNumber":6,"author":{"gitID":"Jemereny"},"content":"import java.awt.RenderingHints;"},{"lineNumber":7,"author":{"gitID":"Jemereny"},"content":"import java.awt.image.BufferedImage;"},{"lineNumber":8,"author":{"gitID":"Jemereny"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitID":"Jemereny"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"Jemereny"},"content":"import java.nio.file.Paths;"},{"lineNumber":11,"author":{"gitID":"Jemereny"},"content":"import java.util.UUID;"},{"lineNumber":12,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":13,"author":{"gitID":"Jemereny"},"content":"import javax.imageio.ImageIO;"},{"lineNumber":14,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":15,"author":{"gitID":"Jemereny"},"content":"import org.apache.commons.io.FileUtils;"},{"lineNumber":16,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":17,"author":{"gitID":"Jemereny"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitID":"Jemereny"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":20,"author":{"gitID":"Jemereny"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"Jemereny"},"content":" * Represents a Person\u0027s picture\u0027s name"},{"lineNumber":22,"author":{"gitID":"Jemereny"},"content":" * Guarantees: immutable; is always valid"},{"lineNumber":23,"author":{"gitID":"Jemereny"},"content":" */"},{"lineNumber":24,"author":{"gitID":"Jemereny"},"content":"public class Picture {"},{"lineNumber":25,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":26,"author":{"gitID":"Jemereny"},"content":"    public static final String MESSAGE_PROFILEPICTURE_CONSTRAINTS \u003d"},{"lineNumber":27,"author":{"gitID":"Jemereny"},"content":"            \"There should be a valid location to the picture, the picture must be a .png \";"},{"lineNumber":28,"author":{"gitID":"Jemereny"},"content":"    public static final String MESSAGE_PROFILEPICTURE_ERROR \u003d"},{"lineNumber":29,"author":{"gitID":"Jemereny"},"content":"            \"Error copying file.\";"},{"lineNumber":30,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":31,"author":{"gitID":"Jemereny"},"content":"    public static final String PREFIX_PICTURE \u003d \"file://\";"},{"lineNumber":32,"author":{"gitID":"Jemereny"},"content":"    public static final String PICTURE_SAVE_LOCATION \u003d"},{"lineNumber":33,"author":{"gitID":"Jemereny"},"content":"            UserPrefs.FOLDER_LOCATION; // Where images are stored when added"},{"lineNumber":34,"author":{"gitID":"Jemereny"},"content":"    public static final String DEFAULT_PICTURE_LOCATION \u003d"},{"lineNumber":35,"author":{"gitID":"Jemereny"},"content":"            \"/images/\";"},{"lineNumber":36,"author":{"gitID":"Jemereny"},"content":"    public static final String DEFAULT_PICTURE \u003d"},{"lineNumber":37,"author":{"gitID":"Jemereny"},"content":"            \"default_profile.png\";"},{"lineNumber":38,"author":{"gitID":"Jemereny"},"content":"    public static final String DEFAULT_ALEX \u003d"},{"lineNumber":39,"author":{"gitID":"Jemereny"},"content":"            \"default_alex.png\";"},{"lineNumber":40,"author":{"gitID":"Jemereny"},"content":"    public static final String DEFAULT_BALAKRISHNAN \u003d"},{"lineNumber":41,"author":{"gitID":"Jemereny"},"content":"            \"default_balakrishnan.png\";"},{"lineNumber":42,"author":{"gitID":"Jemereny"},"content":"    public static final String DEFAULT_BERNICE \u003d"},{"lineNumber":43,"author":{"gitID":"Jemereny"},"content":"            \"default_bernice.png\";"},{"lineNumber":44,"author":{"gitID":"Jemereny"},"content":"    public static final String DEFAULT_CHARLOTTE \u003d"},{"lineNumber":45,"author":{"gitID":"Jemereny"},"content":"            \"default_charlotte.png\";"},{"lineNumber":46,"author":{"gitID":"Jemereny"},"content":"    public static final String DEFAULT_DAVID \u003d"},{"lineNumber":47,"author":{"gitID":"Jemereny"},"content":"            \"default_david.png\";"},{"lineNumber":48,"author":{"gitID":"Jemereny"},"content":"    public static final String DEFAULT_IRFAN \u003d"},{"lineNumber":49,"author":{"gitID":"Jemereny"},"content":"            \"default_irfan.png\";"},{"lineNumber":50,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":51,"author":{"gitID":"Jemereny"},"content":"    private static final int RESIZE_IMAGE_WIDTH \u003d 256;"},{"lineNumber":52,"author":{"gitID":"Jemereny"},"content":"    private static final int RESIZE_IMAGE_HEIGHT \u003d 256;"},{"lineNumber":53,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":54,"author":{"gitID":"Jemereny"},"content":"    private static final String PICTURE_SUFFIX \u003d \".png\";"},{"lineNumber":55,"author":{"gitID":"Jemereny"},"content":"    private static final String PICTURE_DELIMITER_SLASH \u003d \"/\";"},{"lineNumber":56,"author":{"gitID":"Jemereny"},"content":"    private static final String PICTURE_DELIMITER_BACKSLASH \u003d \"\\\\\\\\\";"},{"lineNumber":57,"author":{"gitID":"Jemereny"},"content":"    private static final int PICTURE_MAX_SIZE \u003d 512000; // 512 KB"},{"lineNumber":58,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":59,"author":{"gitID":"Jemereny"},"content":"    public final String value;"},{"lineNumber":60,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":61,"author":{"gitID":"Jemereny"},"content":"    public Picture(String fileLocation) throws IllegalValueException {"},{"lineNumber":62,"author":{"gitID":"Jemereny"},"content":"        String trimmedFileLocation \u003d fileLocation \u003d\u003d null ? null : fileLocation.trim();"},{"lineNumber":63,"author":{"gitID":"Jemereny"},"content":"        if (!isValidPicture(trimmedFileLocation)) {"},{"lineNumber":64,"author":{"gitID":"Jemereny"},"content":"            System.out.println(fileLocation);"},{"lineNumber":65,"author":{"gitID":"Jemereny"},"content":"            throw new IllegalValueException(MESSAGE_PROFILEPICTURE_CONSTRAINTS);"},{"lineNumber":66,"author":{"gitID":"Jemereny"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":68,"author":{"gitID":"Jemereny"},"content":"        if (trimmedFileLocation !\u003d null) {"},{"lineNumber":69,"author":{"gitID":"Jemereny"},"content":"            String[] split \u003d splitFileLocation(trimmedFileLocation);"},{"lineNumber":70,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":71,"author":{"gitID":"Jemereny"},"content":"            // length will give 1 when it is the file we saved"},{"lineNumber":72,"author":{"gitID":"Jemereny"},"content":"            // in that case just put PICTURE_IMAGE_LOCATION to find it"},{"lineNumber":73,"author":{"gitID":"Jemereny"},"content":"            if (split.length !\u003d 1) {"},{"lineNumber":74,"author":{"gitID":"Jemereny"},"content":"                // Rename and copied files to avoid clashing"},{"lineNumber":75,"author":{"gitID":"Jemereny"},"content":"                String newFileName \u003d UUID.randomUUID().toString() + PICTURE_SUFFIX;"},{"lineNumber":76,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":77,"author":{"gitID":"Jemereny"},"content":"                File src \u003d new File(trimmedFileLocation);"},{"lineNumber":78,"author":{"gitID":"Jemereny"},"content":"                File dest \u003d new File(PICTURE_SAVE_LOCATION + newFileName);"},{"lineNumber":79,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":80,"author":{"gitID":"Jemereny"},"content":"                // If file is too big, resize it."},{"lineNumber":81,"author":{"gitID":"Jemereny"},"content":"                if (src.length() \u003e PICTURE_MAX_SIZE) {"},{"lineNumber":82,"author":{"gitID":"Jemereny"},"content":"                    resizeAndSaveImage(src, newFileName);"},{"lineNumber":83,"author":{"gitID":"Jemereny"},"content":"                } else {"},{"lineNumber":84,"author":{"gitID":"Jemereny"},"content":"                    copyImage(src, dest);"},{"lineNumber":85,"author":{"gitID":"Jemereny"},"content":"                }"},{"lineNumber":86,"author":{"gitID":"Jemereny"},"content":"                this.value \u003d newFileName;"},{"lineNumber":87,"author":{"gitID":"Jemereny"},"content":"            } else {"},{"lineNumber":88,"author":{"gitID":"Jemereny"},"content":"                // Last value is file name"},{"lineNumber":89,"author":{"gitID":"Jemereny"},"content":"                this.value \u003d split[split.length - 1];"},{"lineNumber":90,"author":{"gitID":"Jemereny"},"content":"            }"},{"lineNumber":91,"author":{"gitID":"Jemereny"},"content":"        } else {"},{"lineNumber":92,"author":{"gitID":"Jemereny"},"content":"            this.value \u003d null;"},{"lineNumber":93,"author":{"gitID":"Jemereny"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":96,"author":{"gitID":"Jemereny"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"Jemereny"},"content":"     * Splits the file depending on the delimiter used \u0027/\u0027 or \u0027\\\u0027"},{"lineNumber":98,"author":{"gitID":"Jemereny"},"content":"     * @param trimmedFileLocation location of valid file"},{"lineNumber":99,"author":{"gitID":"Jemereny"},"content":"     * @return split fileLocation"},{"lineNumber":100,"author":{"gitID":"Jemereny"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"Jemereny"},"content":"    public static String[] splitFileLocation(String trimmedFileLocation) {"},{"lineNumber":102,"author":{"gitID":"Jemereny"},"content":"        String [] split \u003d trimmedFileLocation.split(PICTURE_DELIMITER_SLASH);"},{"lineNumber":103,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":104,"author":{"gitID":"Jemereny"},"content":"        // If the fileLocation has been split but has length of 1,"},{"lineNumber":105,"author":{"gitID":"Jemereny"},"content":"        // It is either using another delimiter or is the file itself."},{"lineNumber":106,"author":{"gitID":"Jemereny"},"content":"        if (split.length \u003c 2) {"},{"lineNumber":107,"author":{"gitID":"Jemereny"},"content":"            split \u003d trimmedFileLocation.split(PICTURE_DELIMITER_BACKSLASH);"},{"lineNumber":108,"author":{"gitID":"Jemereny"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":110,"author":{"gitID":"Jemereny"},"content":"        return split;"},{"lineNumber":111,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":113,"author":{"gitID":"Jemereny"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"Jemereny"},"content":"     * Returns true if file location of picture is valid and the picture exist"},{"lineNumber":115,"author":{"gitID":"Jemereny"},"content":"     * @param fileLocation"},{"lineNumber":116,"author":{"gitID":"Jemereny"},"content":"     * @return"},{"lineNumber":117,"author":{"gitID":"Jemereny"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"Jemereny"},"content":"    public static boolean isValidPicture(String fileLocation) {"},{"lineNumber":119,"author":{"gitID":"Jemereny"},"content":"        if (fileLocation \u003d\u003d null) {"},{"lineNumber":120,"author":{"gitID":"Jemereny"},"content":"            return true;"},{"lineNumber":121,"author":{"gitID":"Jemereny"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":123,"author":{"gitID":"Jemereny"},"content":"        if (\"\".equals(fileLocation)) {"},{"lineNumber":124,"author":{"gitID":"Jemereny"},"content":"            return false;"},{"lineNumber":125,"author":{"gitID":"Jemereny"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":127,"author":{"gitID":"Jemereny"},"content":"        // For default people"},{"lineNumber":128,"author":{"gitID":"Jemereny"},"content":"        if (fileLocation.equals(Picture.DEFAULT_ALEX) || fileLocation.equals(Picture.DEFAULT_BALAKRISHNAN)"},{"lineNumber":129,"author":{"gitID":"Jemereny"},"content":"                || fileLocation.equals(Picture.DEFAULT_BERNICE) || fileLocation.equals(Picture.DEFAULT_CHARLOTTE)"},{"lineNumber":130,"author":{"gitID":"Jemereny"},"content":"                || fileLocation.equals(Picture.DEFAULT_DAVID) || fileLocation.equals(Picture.DEFAULT_IRFAN)) {"},{"lineNumber":131,"author":{"gitID":"Jemereny"},"content":"            return true;"},{"lineNumber":132,"author":{"gitID":"Jemereny"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":134,"author":{"gitID":"Jemereny"},"content":"        File file \u003d new File(fileLocation);"},{"lineNumber":135,"author":{"gitID":"Jemereny"},"content":"        if (file.exists() \u0026\u0026 (fileLocation.endsWith(PICTURE_SUFFIX))) {"},{"lineNumber":136,"author":{"gitID":"Jemereny"},"content":"            return true;"},{"lineNumber":137,"author":{"gitID":"Jemereny"},"content":"        } else {"},{"lineNumber":138,"author":{"gitID":"Jemereny"},"content":"            file \u003d new File(PICTURE_SAVE_LOCATION + fileLocation);"},{"lineNumber":139,"author":{"gitID":"Jemereny"},"content":"            if (file.exists()) {"},{"lineNumber":140,"author":{"gitID":"Jemereny"},"content":"                return true;"},{"lineNumber":141,"author":{"gitID":"Jemereny"},"content":"            }"},{"lineNumber":142,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":143,"author":{"gitID":"Jemereny"},"content":"            return false;"},{"lineNumber":144,"author":{"gitID":"Jemereny"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":147,"author":{"gitID":"Jemereny"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"Jemereny"},"content":"     * Copies the image and puts into data folder"},{"lineNumber":149,"author":{"gitID":"Jemereny"},"content":"     * @param src Source of file to save"},{"lineNumber":150,"author":{"gitID":"Jemereny"},"content":"     * @param dest Destination of the file to save"},{"lineNumber":151,"author":{"gitID":"Jemereny"},"content":"     * @throws IllegalValueException when src or dest is an invalid file/location"},{"lineNumber":152,"author":{"gitID":"Jemereny"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"Jemereny"},"content":"    public static void copyImage(File src, File dest) throws IllegalValueException {"},{"lineNumber":154,"author":{"gitID":"Jemereny"},"content":"        try {"},{"lineNumber":155,"author":{"gitID":"Jemereny"},"content":"            FileUtils.copyFile(src, dest);"},{"lineNumber":156,"author":{"gitID":"Jemereny"},"content":"        } catch (IOException e) {"},{"lineNumber":157,"author":{"gitID":"Jemereny"},"content":"            throw new IllegalValueException(MESSAGE_PROFILEPICTURE_ERROR);"},{"lineNumber":158,"author":{"gitID":"Jemereny"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":161,"author":{"gitID":"Jemereny"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"Jemereny"},"content":"     * Resizes and saves image to data folder"},{"lineNumber":163,"author":{"gitID":"Jemereny"},"content":"     * @param file the image"},{"lineNumber":164,"author":{"gitID":"Jemereny"},"content":"     * @param newFileName file name to save as"},{"lineNumber":165,"author":{"gitID":"Jemereny"},"content":"     * @throws IllegalValueException if there is an error loading the file"},{"lineNumber":166,"author":{"gitID":"Jemereny"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"Jemereny"},"content":"    public static void resizeAndSaveImage(File file, String newFileName) throws IllegalValueException {"},{"lineNumber":168,"author":{"gitID":"Jemereny"},"content":"        try {"},{"lineNumber":169,"author":{"gitID":"Jemereny"},"content":"            BufferedImage resizedImage \u003d resizeImage(ImageIO.read(file));"},{"lineNumber":170,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":171,"author":{"gitID":"Jemereny"},"content":"            // Saving of image into data folder"},{"lineNumber":172,"author":{"gitID":"Jemereny"},"content":"            ImageIO.write(resizedImage, \"png\", new File(PICTURE_SAVE_LOCATION + newFileName));"},{"lineNumber":173,"author":{"gitID":"Jemereny"},"content":"        } catch (IOException e) {"},{"lineNumber":174,"author":{"gitID":"Jemereny"},"content":"            throw new IllegalValueException(MESSAGE_PROFILEPICTURE_ERROR);"},{"lineNumber":175,"author":{"gitID":"Jemereny"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":178,"author":{"gitID":"Jemereny"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"Jemereny"},"content":"     * Redraws the original image into a smaller canvas, resizing the image."},{"lineNumber":180,"author":{"gitID":"Jemereny"},"content":"     * @param originalImage The original image to be resized"},{"lineNumber":181,"author":{"gitID":"Jemereny"},"content":"     * @return BufferedImage image that is redrawn and resized"},{"lineNumber":182,"author":{"gitID":"Jemereny"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"Jemereny"},"content":"    public static BufferedImage resizeImage(BufferedImage originalImage) {"},{"lineNumber":184,"author":{"gitID":"Jemereny"},"content":"        int type \u003d originalImage.getType() \u003d\u003d 0 ? BufferedImage.TYPE_INT_ARGB : originalImage.getType();"},{"lineNumber":185,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":186,"author":{"gitID":"Jemereny"},"content":"        BufferedImage resizedImage \u003d new BufferedImage(RESIZE_IMAGE_WIDTH, RESIZE_IMAGE_HEIGHT, type);"},{"lineNumber":187,"author":{"gitID":"Jemereny"},"content":"        Graphics2D g \u003d resizedImage.createGraphics();"},{"lineNumber":188,"author":{"gitID":"Jemereny"},"content":"        g.drawImage(originalImage, 0, 0, RESIZE_IMAGE_WIDTH, RESIZE_IMAGE_HEIGHT, null);"},{"lineNumber":189,"author":{"gitID":"Jemereny"},"content":"        g.dispose();"},{"lineNumber":190,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":191,"author":{"gitID":"Jemereny"},"content":"        g.setComposite(AlphaComposite.Src);"},{"lineNumber":192,"author":{"gitID":"Jemereny"},"content":"        g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);"},{"lineNumber":193,"author":{"gitID":"Jemereny"},"content":"        g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);"},{"lineNumber":194,"author":{"gitID":"Jemereny"},"content":"        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);"},{"lineNumber":195,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":196,"author":{"gitID":"Jemereny"},"content":"        return resizedImage;"},{"lineNumber":197,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":199,"author":{"gitID":"Jemereny"},"content":"    /**"},{"lineNumber":200,"author":{"gitID":"Jemereny"},"content":"     * Returns default picture location if there is no value"},{"lineNumber":201,"author":{"gitID":"Jemereny"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"Jemereny"},"content":"    public String getPictureLocation() {"},{"lineNumber":203,"author":{"gitID":"Jemereny"},"content":"        if (value \u003d\u003d null) {"},{"lineNumber":204,"author":{"gitID":"Jemereny"},"content":"            return DEFAULT_PICTURE_LOCATION + DEFAULT_PICTURE;"},{"lineNumber":205,"author":{"gitID":"Jemereny"},"content":"        } else if (value.equals(Picture.DEFAULT_ALEX) || value.equals(Picture.DEFAULT_BALAKRISHNAN)"},{"lineNumber":206,"author":{"gitID":"Jemereny"},"content":"                || value.equals(Picture.DEFAULT_BERNICE) || value.equals(Picture.DEFAULT_CHARLOTTE)"},{"lineNumber":207,"author":{"gitID":"Jemereny"},"content":"                || value.equals(Picture.DEFAULT_DAVID) || value.equals(Picture.DEFAULT_IRFAN)) {"},{"lineNumber":208,"author":{"gitID":"Jemereny"},"content":"            // Sample data"},{"lineNumber":209,"author":{"gitID":"Jemereny"},"content":"            return DEFAULT_PICTURE_LOCATION + value;"},{"lineNumber":210,"author":{"gitID":"Jemereny"},"content":"        } else {"},{"lineNumber":211,"author":{"gitID":"Jemereny"},"content":"            return PREFIX_PICTURE + Paths.get(PICTURE_SAVE_LOCATION + value)"},{"lineNumber":212,"author":{"gitID":"Jemereny"},"content":"                    .toAbsolutePath().toUri().getPath();"},{"lineNumber":213,"author":{"gitID":"Jemereny"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":216,"author":{"gitID":"Jemereny"},"content":"    @Override"},{"lineNumber":217,"author":{"gitID":"Jemereny"},"content":"    public String toString() {"},{"lineNumber":218,"author":{"gitID":"Jemereny"},"content":"        return value;"},{"lineNumber":219,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":221,"author":{"gitID":"Jemereny"},"content":"    @Override"},{"lineNumber":222,"author":{"gitID":"Jemereny"},"content":"    public boolean equals(Object other) {"},{"lineNumber":223,"author":{"gitID":"Jemereny"},"content":"        if (other \u003d\u003d this) { // short circuit if same object"},{"lineNumber":224,"author":{"gitID":"Jemereny"},"content":"            return true;"},{"lineNumber":225,"author":{"gitID":"Jemereny"},"content":"        } else if (!(other instanceof Picture)) { // instanceof handle nulls"},{"lineNumber":226,"author":{"gitID":"Jemereny"},"content":"            return false;"},{"lineNumber":227,"author":{"gitID":"Jemereny"},"content":"        } else if (this.value \u003d\u003d ((Picture) other).value) {"},{"lineNumber":228,"author":{"gitID":"Jemereny"},"content":"            return true;"},{"lineNumber":229,"author":{"gitID":"Jemereny"},"content":"        } else if (this.value !\u003d null \u0026\u0026 this.value.equals(((Picture) other).value)) { // state check"},{"lineNumber":230,"author":{"gitID":"Jemereny"},"content":"            return true;"},{"lineNumber":231,"author":{"gitID":"Jemereny"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":233,"author":{"gitID":"Jemereny"},"content":"        return false;"},{"lineNumber":234,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":236,"author":{"gitID":"Jemereny"},"content":"    @Override"},{"lineNumber":237,"author":{"gitID":"Jemereny"},"content":"    public int hashCode() {"},{"lineNumber":238,"author":{"gitID":"Jemereny"},"content":"        return value.hashCode();"},{"lineNumber":239,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"Jemereny"},"content":"}"}],"authorContributionMap":{"Jemereny":240}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":21,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cReadOnlyPerson\u003e filteredPersons;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"chrisboo"},"content":"     * Raises an event to indicate the model has changed"},{"lineNumber":59,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"Jemereny"},"content":"    //@@author Jemereny"},{"lineNumber":89,"author":{"gitID":"Jemereny"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"Jemereny"},"content":"     * Returns an unmodifiable view of the list of {@code ReadOnlyPerson} backed by the internal list of"},{"lineNumber":91,"author":{"gitID":"Jemereny"},"content":"     * {@code addressBook}"},{"lineNumber":92,"author":{"gitID":"Jemereny"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"Jemereny"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"Jemereny"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":95,"author":{"gitID":"Jemereny"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons.sorted());"},{"lineNumber":96,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"Jemereny"},"content":"    //@@author"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Jemereny":10,"chrisboo":3,"-":110}},{"path":"src/main/java/seedu/address/model/tag/UniqueTagList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A list of tags that enforces no nulls and uniqueness between its elements."},{"lineNumber":17,"author":{"gitID":"chrisboo"},"content":" * \u003cp\u003e"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":19,"author":{"gitID":"-"},"content":" *"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * @see Tag#equals(Object)"},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class UniqueTagList implements Iterable\u003cTag\u003e {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cTag\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Constructs empty TagList."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"chrisboo"},"content":"    public UniqueTagList() {"},{"lineNumber":30,"author":{"gitID":"chrisboo"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Creates a UniqueTagList using given tags."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Enforces no nulls."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public UniqueTagList(Set\u003cTag\u003e tags) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        requireAllNonNull(tags);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        internalList.addAll(tags);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Returns all tags in this list as a Set."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e toSet() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Replaces the Tags in this list with those in the argument tag list."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        requireAllNonNull(tags);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        internalList.setAll(tags);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Ensures every tag in the argument list exists in this object."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void mergeFrom(UniqueTagList from) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e alreadyInside \u003d this.toSet();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        from.internalList.stream()"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            .filter(tag -\u003e !alreadyInside.contains(tag))"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            .forEach(internalList::add);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent Tag as the given argument."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public boolean contains(Tag toCheck) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Adds a Tag to the list."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * @throws DuplicateTagException if the Tag to add is a duplicate of an existing Tag in the list."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void add(Tag toAdd) throws DuplicateTagException {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            throw new DuplicateTagException();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public Iterator\u003cTag\u003e iterator() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e asObservableList() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            || (other instanceof UniqueTagList // instanceof handles nulls"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            \u0026\u0026 this.internalList.equals(((UniqueTagList) other).internalList));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Returns true if the element in this list is equal to the elements in {@code other}."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public boolean equalsOrderInsensitive(UniqueTagList other) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(other.internalList);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public static class DuplicateTagException extends DuplicateDataException {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        protected DuplicateTagException() {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            super(\"Operation would result in duplicate tags\");"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":3,"-":140}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":14,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"chrisboo"},"content":"     * {@code Predicate} that always evaluate to true"},{"lineNumber":16,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    Predicate\u003cReadOnlyPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"chrisboo"},"content":"     * Clears existing backing model and replaces with the provided new data."},{"lineNumber":21,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"chrisboo"},"content":"     * Returns the AddressBook"},{"lineNumber":26,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"chrisboo"},"content":"     * Deletes the given person."},{"lineNumber":31,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"chrisboo"},"content":"     * Adds the given person"},{"lineNumber":36,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    void addPerson(ReadOnlyPerson person) throws DuplicatePersonException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     *                                  another existing person in the list."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"chrisboo"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"chrisboo"},"content":"     * Returns an unmodifiable view of the filtered person list"},{"lineNumber":51,"author":{"gitID":"chrisboo"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":56,"author":{"gitID":"chrisboo"},"content":"     *"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chrisboo":19,"-":42}},{"path":"src/main/java/seedu/address/model/person/Website.java","lines":[{"lineNumber":1,"author":{"gitID":"Jemereny"},"content":"//@@author Jemereny"},{"lineNumber":2,"author":{"gitID":"Jemereny"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":4,"author":{"gitID":"Jemereny"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":5,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":6,"author":{"gitID":"Jemereny"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Jemereny"},"content":" * Represents a Person\u0027s website in the address book."},{"lineNumber":8,"author":{"gitID":"Jemereny"},"content":" * Guarantees: immutable; is valid as declared"},{"lineNumber":9,"author":{"gitID":"Jemereny"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Jemereny"},"content":"public class Website {"},{"lineNumber":11,"author":{"gitID":"Jemereny"},"content":"    public static final String MESSAGE_WEBSITE_CONSTRAINTS \u003d"},{"lineNumber":12,"author":{"gitID":"Jemereny"},"content":"            \"Website should contain a prefix of http:// https://.\";"},{"lineNumber":13,"author":{"gitID":"Jemereny"},"content":"    public static final String WEBSITE_VALIDATION_REGEX \u003d"},{"lineNumber":14,"author":{"gitID":"Jemereny"},"content":"            \"https?://(www\\\\.)?[-a-z0-9]{2,256}\\\\.[a-z]{2,6}\\\\b([-a-zA-Z0-9@:%_+.~#?\u0026//\u003d]*)\";"},{"lineNumber":15,"author":{"gitID":"Jemereny"},"content":"    public static final String WEBSITE_EXAMPLE \u003d \"https://www.website.com/\";"},{"lineNumber":16,"author":{"gitID":"Jemereny"},"content":"    public static final String WEBSITE_NULL \u003d null; // no website"},{"lineNumber":17,"author":{"gitID":"Jemereny"},"content":"    public final String value;"},{"lineNumber":18,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":19,"author":{"gitID":"Jemereny"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"Jemereny"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"Jemereny"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"Jemereny"},"content":"    public Website(String website)throws IllegalValueException {"},{"lineNumber":23,"author":{"gitID":"Jemereny"},"content":"        String trimmedWebsite \u003d website \u003d\u003d WEBSITE_NULL ? WEBSITE_NULL : website.trim();"},{"lineNumber":24,"author":{"gitID":"Jemereny"},"content":"        if (!isValidWebsite(trimmedWebsite)) {"},{"lineNumber":25,"author":{"gitID":"Jemereny"},"content":"            throw new IllegalValueException(MESSAGE_WEBSITE_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"Jemereny"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":28,"author":{"gitID":"Jemereny"},"content":"        this.value \u003d trimmedWebsite;"},{"lineNumber":29,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":31,"author":{"gitID":"Jemereny"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"Jemereny"},"content":"     * Returns true if given string is valid person website"},{"lineNumber":33,"author":{"gitID":"Jemereny"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"Jemereny"},"content":"    public static boolean isValidWebsite(String test) {"},{"lineNumber":35,"author":{"gitID":"Jemereny"},"content":"        return test \u003d\u003d WEBSITE_NULL || test.matches(WEBSITE_VALIDATION_REGEX);"},{"lineNumber":36,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":38,"author":{"gitID":"Jemereny"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"Jemereny"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitID":"Jemereny"},"content":"        return value;"},{"lineNumber":41,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":43,"author":{"gitID":"Jemereny"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"Jemereny"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitID":"Jemereny"},"content":"        if (other \u003d\u003d this) { // short circuit if same object"},{"lineNumber":46,"author":{"gitID":"Jemereny"},"content":"            return true;"},{"lineNumber":47,"author":{"gitID":"Jemereny"},"content":"        } else if (!(other instanceof Website)) { // instanceof handle nulls"},{"lineNumber":48,"author":{"gitID":"Jemereny"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"Jemereny"},"content":"        } else if (this.value \u003d\u003d ((Website) other).value) {"},{"lineNumber":50,"author":{"gitID":"Jemereny"},"content":"            return true;"},{"lineNumber":51,"author":{"gitID":"Jemereny"},"content":"        } else if (this.value !\u003d null \u0026\u0026 this.value.equals(((Website) other).value)) { // state check"},{"lineNumber":52,"author":{"gitID":"Jemereny"},"content":"            return true;"},{"lineNumber":53,"author":{"gitID":"Jemereny"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":55,"author":{"gitID":"Jemereny"},"content":"        return false;"},{"lineNumber":56,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":58,"author":{"gitID":"Jemereny"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"Jemereny"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"Jemereny"},"content":"        return value.hashCode();"},{"lineNumber":61,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"Jemereny"},"content":""},{"lineNumber":63,"author":{"gitID":"Jemereny"},"content":"    public boolean hasWebsite() {"},{"lineNumber":64,"author":{"gitID":"Jemereny"},"content":"        return !(value \u003d\u003d WEBSITE_NULL);"},{"lineNumber":65,"author":{"gitID":"Jemereny"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"Jemereny"},"content":"}"}],"authorContributionMap":{"Jemereny":66}}]
