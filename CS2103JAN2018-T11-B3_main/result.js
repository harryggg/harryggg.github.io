var resultJson = [{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"reInsurance was developed by the CS2103JAN2018-T11-B3 team. +"},{"lineNumber":7,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d David Dalmaso"},{"lineNumber":12,"author":{"gitID":"-"},"content":"image::daviddalmaso.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":13,"author":{"gitID":"-"},"content":"{empty}[http://daviddalmaso.github.io/[homepage]] [https://github.com/daviddalmaso[github]]"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"Role: Software Engineer +"},{"lineNumber":16,"author":{"gitID":"-"},"content":"Responsibilities: Storage"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Kion Shi Rong"},{"lineNumber":21,"author":{"gitID":"-"},"content":"image::cambioforma.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":22,"author":{"gitID":"-"},"content":"{empty}[http://github.com/cambioforma[github]]"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":25,"author":{"gitID":"-"},"content":"Responsibilities: Logic"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Lim Zheng Kai"},{"lineNumber":30,"author":{"gitID":"-"},"content":"image::zhengkai.jpeg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"{empty}[https://github.com/limzk1994[github]]"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":34,"author":{"gitID":"-"},"content":"Responsibilities: Data"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"Sebry9"},"content":"\u003d\u003d\u003d Jeremy Lee Jun Wei"},{"lineNumber":39,"author":{"gitID":"Sebry9"},"content":"image::Sebry9.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":40,"author":{"gitID":"Sebry9"},"content":"{empty}[https://github.com/Sebry9[github]]"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":43,"author":{"gitID":"-"},"content":"Responsibilities: UI"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":46,"author":{"gitID":"Sebry9"},"content":""}],"authorContributionMap":{"Sebry9":4,"-":42}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d reInsurance"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"https://travis-ci.org/CS2103JAN2018-T11-B3/main[image:https://travis-ci.org/CS2103JAN2018-T11-B3/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"-"},"content":"https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"},{"lineNumber":6,"author":{"gitID":"-"},"content":"https://coveralls.io/github/CS2103JAN2018-T11-B3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-T11-B3/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":7,"author":{"gitID":"-"},"content":"https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"},{"lineNumber":8,"author":{"gitID":"-"},"content":"https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"Sebry9"},"content":"* With the increase in the number of insurance plans handle by a particular insurance agent, he/she will find that"},{"lineNumber":15,"author":{"gitID":"Sebry9"},"content":" managing client\u0027s data and profile are getting increasingly difficult, thus the need for reInsurance"},{"lineNumber":16,"author":{"gitID":"Sebry9"},"content":"* reInsurance is a desktop application that serves as an client tracking book for insurance agents to use to manage information about their clients."},{"lineNumber":17,"author":{"gitID":"-"},"content":"* reInsurance provides revolutionary technology that not only aims to organize the clutter of the agent\u0027s address book"},{"lineNumber":18,"author":{"gitID":"-"},"content":"but also to simplify tedious tasks of calculating important information."},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":23,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":24,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":25,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":30,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":31,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"Sebry9":3,"-":30}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d reInsurance - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"Sebry9"},"content":":repoURL: https://github.com/CS2103JAN2018-T11-B3/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Sebry9"},"content":"By: `T11-B3`      Since: `Jan 2018`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"reInsurance is for those who *prefer to use a desktop app for managing contacts*. More importantly, reInsurance is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, reInsurance can get your contact management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":25,"author":{"gitID":"-"},"content":"+"},{"lineNumber":26,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":27,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":28,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"Sebry9"},"content":".  Download the latest `reInsurance.jar` link:https://github.com/CS2103JAN2018-T11-B3/main/releases[here]."},{"lineNumber":31,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for your reInsurance application."},{"lineNumber":32,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":33,"author":{"gitID":"-"},"content":"+"},{"lineNumber":34,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":35,"author":{"gitID":"-"},"content":"+"},{"lineNumber":36,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":37,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":38,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"* *`list`* : lists all contacts"},{"lineNumber":41,"author":{"gitID":"Sebry9"},"content":"* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 b/09-09-1995` : adds a contact named `John Doe` to the reInsurance."},{"lineNumber":42,"author":{"gitID":"-"},"content":"* **`delete`**`3` : deletes the 3rd contact shown in the current list"},{"lineNumber":43,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":54,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":55,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":56,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":57,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"Sebry9"},"content":"Format: `help`, Alias: `h`"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a person: `add`"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"Sebry9"},"content":"Adds a person to reInsurance +"},{"lineNumber":66,"author":{"gitID":"Sebry9"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS b/BIRTHDAY [d/APPOINTMENT] [t/TAG] [i/INSURANCE[COMMISSION]] [g/GROUP] ...` Alias: `a`"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":69,"author":{"gitID":"Sebry9"},"content":"A person can have any number of tags, appointment and insurance plans (including 0)"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"Sebry9"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 b/09-12-1994 i/Health[100] g/family`"},{"lineNumber":74,"author":{"gitID":"Sebry9"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 b/29-10-1992 g/friends i/General t/criminal`"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing all persons : `list`"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"Sebry9"},"content":"Shows a list of all persons in reInsurance. +"},{"lineNumber":79,"author":{"gitID":"Sebry9"},"content":"Format: `list` Alias: `l`"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"Sebry9"},"content":"\u003d\u003d\u003d Getting count of reInsurance size : `count`"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"Sebry9"},"content":"Returns the number of client in reInsurance"},{"lineNumber":84,"author":{"gitID":"-"},"content":"Format: `count`"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a person : `edit`"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"Sebry9"},"content":"Edits an existing person in the reInsurance. +"},{"lineNumber":89,"author":{"gitID":"Sebry9"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [b/BIRTHDAY] [d/APPOINTMENT] [t/TAG] [i/INSURANCE]...` Alias: `e`"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"****"},{"lineNumber":92,"author":{"gitID":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":93,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":94,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":95,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."},{"lineNumber":96,"author":{"gitID":"-"},"content":"* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":97,"author":{"gitID":"-"},"content":"****"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":102,"author":{"gitID":"-"},"content":"Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":103,"author":{"gitID":"-"},"content":"* `edit 2 n/Betsy Crower t/` +"},{"lineNumber":104,"author":{"gitID":"-"},"content":"Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Locating persons by name: `find`"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"Finds persons whose names contain any of the given keywords. +"},{"lineNumber":109,"author":{"gitID":"Sebry9"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]` Alias: `f`"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"****"},{"lineNumber":112,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":113,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":114,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":115,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":116,"author":{"gitID":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":117,"author":{"gitID":"-"},"content":"****"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"* `find John` +"},{"lineNumber":122,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":123,"author":{"gitID":"-"},"content":"* `find Betsy Tim John` +"},{"lineNumber":124,"author":{"gitID":"-"},"content":"Returns any person having names `Betsy`, `Tim`, or `John`"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Locating persons by tag: `findtag`"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"Finds persons whose names contain any of the given tags. +"},{"lineNumber":129,"author":{"gitID":"-"},"content":"Format: `findtag KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"****"},{"lineNumber":132,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `friends` will match `Friends`"},{"lineNumber":133,"author":{"gitID":"-"},"content":"* The order of the tags does not matter. e.g. `Friends Colleagues` will match `Colleagues Friends`"},{"lineNumber":134,"author":{"gitID":"-"},"content":"* Only the tag is searched."},{"lineNumber":135,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Friend` will not match `Friends`"},{"lineNumber":136,"author":{"gitID":"-"},"content":"* Persons matching at least one tag will be returned (i.e. `OR` search)."},{"lineNumber":137,"author":{"gitID":"-"},"content":"****"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"* `find Friends` +"},{"lineNumber":142,"author":{"gitID":"-"},"content":"Returns any person having tag `Friends`"},{"lineNumber":143,"author":{"gitID":"-"},"content":"* `find Friends Colleagues Neighbours` +"},{"lineNumber":144,"author":{"gitID":"-"},"content":"Returns any person having tags `Friends`, `Colleagues`, or `Neighbours`"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person : `delete`"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"Sebry9"},"content":"Deletes the specified person from reInsurance. +"},{"lineNumber":149,"author":{"gitID":"Sebry9"},"content":"Format: `delete INDEX` Alias: `d`"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"****"},{"lineNumber":152,"author":{"gitID":"-"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":153,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":154,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":155,"author":{"gitID":"-"},"content":"****"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":160,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":161,"author":{"gitID":"Sebry9"},"content":"Deletes the 2nd person in the reInsurance."},{"lineNumber":162,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":163,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":164,"author":{"gitID":"-"},"content":"Deletes the 1st person in the results of the `find` command."},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting a person : `select`"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"Selects the person identified by the index number used in the last person listing. +"},{"lineNumber":169,"author":{"gitID":"Sebry9"},"content":"Format: `select INDEX` Alias: `s`"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"****"},{"lineNumber":172,"author":{"gitID":"-"},"content":"* Selects the person and loads the Google search page the person at the specified `INDEX`."},{"lineNumber":173,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":174,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":175,"author":{"gitID":"-"},"content":"****"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":180,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":181,"author":{"gitID":"Sebry9"},"content":"Selects the 2nd person in reInsurance."},{"lineNumber":182,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":183,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":184,"author":{"gitID":"-"},"content":"Selects the 1st person in the results of the `find` command."},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":189,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":192,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":193,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":194,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":197,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"Sebry9"},"content":"Restores reInsurance to the state before the previous _undoable_ command was executed. +"},{"lineNumber":200,"author":{"gitID":"Sebry9"},"content":"Format: `undo` Alias: `u`"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":203,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":204,"author":{"gitID":"Sebry9"},"content":"Undoable commands: those commands that modify reInsurance\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":205,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":210,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":211,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":214,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":215,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":216,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":219,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":220,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":221,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":226,"author":{"gitID":"Sebry9"},"content":"Format: `redo` Alias: `r`"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":231,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":232,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":235,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":236,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":239,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":240,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":241,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":242,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":243,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":244,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":245,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Sorting all entries : `sort`"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"Sebry9"},"content":"Sort all entries from reInsurance by given condition in lexicographical order. +"},{"lineNumber":248,"author":{"gitID":"-"},"content":"Format: `sort`"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"Sebry9"},"content":"Clears all entries from reInsurance. +"},{"lineNumber":253,"author":{"gitID":"-"},"content":"Alias: `c` +"},{"lineNumber":254,"author":{"gitID":"Sebry9"},"content":"Format: `clear` Alias: `c`"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Export data : `export`"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"Exports the data from the specified export type (case insensitive). +"},{"lineNumber":259,"author":{"gitID":"-"},"content":"Format: `export EXPORT_TYPE`"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"* `export calendar` +"},{"lineNumber":264,"author":{"gitID":"-"},"content":"Exports the data on the calendar to Google Calendar"},{"lineNumber":265,"author":{"gitID":"-"},"content":"** When running this command, you will be prompted to enter your credentials to your Google Account."},{"lineNumber":266,"author":{"gitID":"-"},"content":"* `export portfolio` +"},{"lineNumber":267,"author":{"gitID":"-"},"content":"Exports the data in the portfolio to a .csv file"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":270,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":271,"author":{"gitID":"-"},"content":"* Coming in v2.0, there will be more options on the types of data to export."},{"lineNumber":272,"author":{"gitID":"-"},"content":"* As of v1.4, the application handles the command for the portfolio and calendar."},{"lineNumber":273,"author":{"gitID":"-"},"content":"* Default destination file is at `data/portfolio.csv` for the `export portfolio` command."},{"lineNumber":274,"author":{"gitID":"-"},"content":"* The default calendar created in Google Calendars is titled `reInsurance Events`, which contains birthdays and appointments."},{"lineNumber":275,"author":{"gitID":"-"},"content":"* Coming in v2.0, the user will be able to specify what the created calendar is called."},{"lineNumber":276,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":281,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"reInsurance data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":286,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":289,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"_{explain how the user can enable/disable data encryption}_"},{"lineNumber":292,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":297,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous reInsurance folder."},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"},{"lineNumber":302,"author":{"gitID":"Sebry9"},"content":"e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 b/09-09-1995 t/friend t/colleague`"},{"lineNumber":303,"author":{"gitID":"-"},"content":"* *Clear* : `clear`"},{"lineNumber":304,"author":{"gitID":"-"},"content":"* *Delete* : `delete INDEX` +"},{"lineNumber":305,"author":{"gitID":"-"},"content":"e.g. `delete 3`"},{"lineNumber":306,"author":{"gitID":"-"},"content":"* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"},{"lineNumber":307,"author":{"gitID":"-"},"content":"e.g. `edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":308,"author":{"gitID":"-"},"content":"* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":309,"author":{"gitID":"-"},"content":"e.g. `find James Jake`"},{"lineNumber":310,"author":{"gitID":"-"},"content":"* *List* : `list`"},{"lineNumber":311,"author":{"gitID":"-"},"content":"* *Help* : `help`"},{"lineNumber":312,"author":{"gitID":"-"},"content":"* *Select* : `select INDEX` +"},{"lineNumber":313,"author":{"gitID":"-"},"content":"e.g.`select 2`"},{"lineNumber":314,"author":{"gitID":"-"},"content":"* *History* : `history`"},{"lineNumber":315,"author":{"gitID":"-"},"content":"* *Undo* : `undo`"},{"lineNumber":316,"author":{"gitID":"-"},"content":"* *Redo* : `redo`"}],"authorContributionMap":{"Sebry9":30,"-":286}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPOINTMENT_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GROUP_DESC_AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GROUP_DESC_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INSURANCE_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_AMY;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * TODO: Fix test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Will remain untested until fixed"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @throws Exception"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":74,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":75,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        Person toAdd \u003d AMY;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":78,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + BIRTHDAY_DESC_AMY + \"   \" + APPOINTMENT_DESC_AMY"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                + \"   \" + GROUP_DESC_AMY + \"   \" + INSURANCE_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"Sebry9"},"content":"        /* Case: add a person with Alias command \"a\" -\u003e added */"},{"lineNumber":88,"author":{"gitID":"Sebry9"},"content":"        toAdd \u003d AMY;"},{"lineNumber":89,"author":{"gitID":"Sebry9"},"content":"        command \u003d \"   \" + AddCommand.COMMAND_WORD_ALIAS + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":90,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + BIRTHDAY_DESC_AMY + \"   \" + GROUP_DESC_AMY"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                + \"   \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"Sebry9"},"content":"        /* Case: Undo adding Amy with Alias command \"u\" -\u003e Amy deleted */"},{"lineNumber":95,"author":{"gitID":"Sebry9"},"content":"        command \u003d UndoCommand.COMMAND_WORD_ALIAS;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withGroup(VALID_GROUP_AMY)"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                + BIRTHDAY_DESC_AMY + GROUP_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withGroup(VALID_GROUP_AMY)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                + BIRTHDAY_DESC_AMY + GROUP_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withGroup(VALID_GROUP_AMY)"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                + BIRTHDAY_DESC_AMY + GROUP_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withBirthday(VALID_BIRTHDAY_AMY).withGroup(VALID_GROUP_AMY)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                + BIRTHDAY_DESC_AMY + GROUP_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":143,"author":{"gitID":"-"},"content":"                + BIRTHDAY_DESC_BOB + GROUP_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":196,"author":{"gitID":"-"},"content":"                + BIRTHDAY_DESC_AMY + GROUP_DESC_AMY;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":201,"author":{"gitID":"-"},"content":"                + BIRTHDAY_DESC_AMY + GROUP_DESC_AMY;;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY"},{"lineNumber":206,"author":{"gitID":"-"},"content":"                + BIRTHDAY_DESC_AMY + GROUP_DESC_AMY;;"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC"},{"lineNumber":211,"author":{"gitID":"-"},"content":"                + BIRTHDAY_DESC_AMY + GROUP_DESC_AMY;;"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":216,"author":{"gitID":"-"},"content":"                + BIRTHDAY_DESC_AMY + GROUP_DESC_AMY + INVALID_TAG_DESC;"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Person toAdd) {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) {"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":246,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":274,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":275,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":277,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":278,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":279,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":280,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":281,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":290,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":291,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sebry9":5,"-":286}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d reInsurance - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":22,"author":{"gitID":"-"},"content":"+"},{"lineNumber":23,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":24,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":25,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":26,"author":{"gitID":"-"},"content":"+"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":32,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":38,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":39,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":40,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":41,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":42,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":43,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":45,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":47,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":52,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":61,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":62,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":65,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":80,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":85,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":92,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":97,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":100,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":105,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":110,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":120,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":121,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":132,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":135,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":143,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the reInsurance data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":151,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":156,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":159,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":170,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":171,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":174,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":177,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":178,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":181,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":184,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":187,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":188,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":189,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":194,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":197,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":200,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":207,"author":{"gitID":"-"},"content":"* stores the reInsurance data."},{"lineNumber":208,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":209,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":212,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":215,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":222,"author":{"gitID":"-"},"content":"* can save the reInsurance data in xml format and read it back."},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":225,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":234,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":235,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":246,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":247,"author":{"gitID":"-"},"content":"----"},{"lineNumber":248,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":"}"},{"lineNumber":254,"author":{"gitID":"-"},"content":"----"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":257,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":258,"author":{"gitID":"-"},"content":"----"},{"lineNumber":259,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":"}"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":272,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"-"},"content":"}"},{"lineNumber":274,"author":{"gitID":"-"},"content":"----"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":287,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":296,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":305,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":324,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":325,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":326,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":327,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":328,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":333,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":334,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":335,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":336,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":337,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":343,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":344,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":345,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":346,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":347,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":348,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":354,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":355,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":356,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":357,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":358,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":359,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"-"},"content":"// tag::appointments[]"},{"lineNumber":362,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Notifications with Clients"},{"lineNumber":363,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":364,"author":{"gitID":"-"},"content":"The idea for this feature is to allow users to recieve notifications for matters regarding their clients."},{"lineNumber":365,"author":{"gitID":"-"},"content":"This is so that the user will be able to be reminded of matters regarding their many clients and not lose track of events."},{"lineNumber":366,"author":{"gitID":"-"},"content":"A calendar view also provided so that it is easier for the user to have a good overview of the upcoming events as well as events in the month."},{"lineNumber":367,"author":{"gitID":"-"},"content":""},{"lineNumber":368,"author":{"gitID":"-"},"content":"Appointments and Birthdays will be created as a class on it\u0027s own. It is then added as an attribute of the person class."},{"lineNumber":369,"author":{"gitID":"-"},"content":"The calendar view will then check all persons for any appointments and birthday and display them accordingly."},{"lineNumber":370,"author":{"gitID":"-"},"content":"It will then trigger a notification when it is the day of the event."},{"lineNumber":371,"author":{"gitID":"-"},"content":""},{"lineNumber":372,"author":{"gitID":"-"},"content":"Appointments prefix \"d/\" has been added to the add command so that users can add appointments with the person."},{"lineNumber":373,"author":{"gitID":"-"},"content":"Birthday prefix \"b/\" has been added to the add command so that users can add the birthday of clients."},{"lineNumber":374,"author":{"gitID":"-"},"content":""},{"lineNumber":375,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":376,"author":{"gitID":"-"},"content":""},{"lineNumber":377,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of Appointments (Since v1.2)"},{"lineNumber":378,"author":{"gitID":"-"},"content":""},{"lineNumber":379,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice): ** Implementation of Appointments as an attribute of Person"},{"lineNumber":380,"author":{"gitID":"-"},"content":"** Pros: Appointments are merged with existing commands as a prefix"},{"lineNumber":381,"author":{"gitID":"-"},"content":"** Cons: Unable to add more attributes to appointment without breaking current convension"},{"lineNumber":382,"author":{"gitID":"-"},"content":"* **Alternative 2:** Implementation of Appointments as class with Person as an attribute"},{"lineNumber":383,"author":{"gitID":"-"},"content":"** Pros: Other attributes can be added to appointments e.g Location"},{"lineNumber":384,"author":{"gitID":"-"},"content":"** Cons: A lot of restructuring of existing code required"},{"lineNumber":385,"author":{"gitID":"-"},"content":""},{"lineNumber":386,"author":{"gitID":"-"},"content":""},{"lineNumber":387,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of viewing Appointments (Coming in V2.0)"},{"lineNumber":388,"author":{"gitID":"-"},"content":""},{"lineNumber":389,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice): ** Implementation View as Calendar View"},{"lineNumber":390,"author":{"gitID":"-"},"content":"** Pros: Easy to have an overview for the current month"},{"lineNumber":391,"author":{"gitID":"-"},"content":"** Cons: Requires more display space and limits views by month"},{"lineNumber":392,"author":{"gitID":"-"},"content":"* **Alternative 2:** Implementation of View as List"},{"lineNumber":393,"author":{"gitID":"-"},"content":"** Pros: Easy to integrate with current set up and can view more information in a smaller space"},{"lineNumber":394,"author":{"gitID":"-"},"content":"** Cons: Have to read each date of each event to get a general feel of the upcoming events"},{"lineNumber":395,"author":{"gitID":"-"},"content":""},{"lineNumber":396,"author":{"gitID":"-"},"content":""},{"lineNumber":397,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of Notifications (Coming in v2.0)"},{"lineNumber":398,"author":{"gitID":"-"},"content":""},{"lineNumber":399,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice): ** Implementation of Notifications as a side panel"},{"lineNumber":400,"author":{"gitID":"-"},"content":"** Pros: Notifications are neatly organised and easily reviewed"},{"lineNumber":401,"author":{"gitID":"-"},"content":"** Cons: Notifications might be missed if user does not review them"},{"lineNumber":402,"author":{"gitID":"-"},"content":"* **Alternative 2:** Implementation of Notifications as a Popup Alert"},{"lineNumber":403,"author":{"gitID":"-"},"content":"** Pros: Requires user interaction therefore it ensures that user has been notified"},{"lineNumber":404,"author":{"gitID":"-"},"content":"** Cons: Pop ups might be unwelcomed as they can interupt current user tasks"},{"lineNumber":405,"author":{"gitID":"-"},"content":"// end::appointments[]"},{"lineNumber":406,"author":{"gitID":"-"},"content":""},{"lineNumber":407,"author":{"gitID":"-"},"content":"// tag::sort[]"},{"lineNumber":408,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Sort command"},{"lineNumber":409,"author":{"gitID":"-"},"content":""},{"lineNumber":410,"author":{"gitID":"-"},"content":"*Since V1.4*"},{"lineNumber":411,"author":{"gitID":"-"},"content":""},{"lineNumber":412,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":413,"author":{"gitID":"-"},"content":"The sort command allows the users to sort their clients according to the lexicographical order of their name. It is facilitated by a custom comparator. The sort command would be implemented as an not undoable command."},{"lineNumber":414,"author":{"gitID":"-"},"content":""},{"lineNumber":415,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the sortCommand operation works. In the sequence diagram, the sortCommand is passed to the AddressBookParser, which executes the parseCommand method. The Model then executes the sortedFilteredPersonList,  which sorts the internalList using a comparator."},{"lineNumber":416,"author":{"gitID":"-"},"content":""},{"lineNumber":417,"author":{"gitID":"-"},"content":"Suppose that the user has a list of clients in the application as shown in the diagram below, after executing the command, the list of clients will be as follows."},{"lineNumber":418,"author":{"gitID":"-"},"content":""},{"lineNumber":419,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":420,"author":{"gitID":"-"},"content":""},{"lineNumber":421,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of SortCommand"},{"lineNumber":422,"author":{"gitID":"-"},"content":""},{"lineNumber":423,"author":{"gitID":"-"},"content":"* **Alternative 1 (Current):** Implementation of SortCommand as a command that is not undoable"},{"lineNumber":424,"author":{"gitID":"-"},"content":"** Pros: The SortCommand will be easier for developers to implement this way."},{"lineNumber":425,"author":{"gitID":"-"},"content":"** Cons: Users that wish to revert the changes made might not be able to do so and this will decrease the usability of the program."},{"lineNumber":426,"author":{"gitID":"-"},"content":"* **Alternative 2 (Prospective):** Implementation of SortCommand as a undoable command"},{"lineNumber":427,"author":{"gitID":"-"},"content":"** Pros: Users that wish to revert the changes made will be able to do so, thus increasing the usability of the program."},{"lineNumber":428,"author":{"gitID":"-"},"content":"** Cons: The SortCommand will be harder for developers to implement."},{"lineNumber":429,"author":{"gitID":"-"},"content":""},{"lineNumber":430,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Parameters of the SortCommand"},{"lineNumber":431,"author":{"gitID":"-"},"content":""},{"lineNumber":432,"author":{"gitID":"-"},"content":"* **Alternative 1 (Current):** Implementation of SortCommand as a command that only allows users to sort clients according to their names in lexicographical order."},{"lineNumber":433,"author":{"gitID":"-"},"content":"** Pros: The SortCommand will be easier for developers to implement as it only needs to sort the names of the internalList."},{"lineNumber":434,"author":{"gitID":"-"},"content":"** Cons: Usability is low as the client might wish to sort clients according to their commissions earned."},{"lineNumber":435,"author":{"gitID":"-"},"content":"* **Alternative 2 (Prospective):** Implementation of SortCommand as a command that allows users to sort clients according to multiple parameters such as commission"},{"lineNumber":436,"author":{"gitID":"-"},"content":"** Pros: This will allow the user to have a more organised view of all data in the program."},{"lineNumber":437,"author":{"gitID":"-"},"content":"** Cons: Although this might increase usability, the usability might actually decrease as the user will need to remember more commands for the SortCommand, which might not be ideal since this is a command line style address book."},{"lineNumber":438,"author":{"gitID":"-"},"content":""},{"lineNumber":439,"author":{"gitID":"-"},"content":"// end::sort[]"},{"lineNumber":440,"author":{"gitID":"-"},"content":""},{"lineNumber":441,"author":{"gitID":"-"},"content":"// tag::group[]"},{"lineNumber":442,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Group feature"},{"lineNumber":443,"author":{"gitID":"-"},"content":""},{"lineNumber":444,"author":{"gitID":"-"},"content":"*Since V1.4*"},{"lineNumber":445,"author":{"gitID":"-"},"content":""},{"lineNumber":446,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":447,"author":{"gitID":"-"},"content":"The Group feature will allow users to group their clients according to a specified group. Users will be required to add their clients to a group when adding a new user. Users can change the grouping of their clients later on if they wish to do so."},{"lineNumber":448,"author":{"gitID":"-"},"content":""},{"lineNumber":449,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the group feature is being implemented."},{"lineNumber":450,"author":{"gitID":"-"},"content":""},{"lineNumber":451,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":452,"author":{"gitID":"-"},"content":""},{"lineNumber":453,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of Group"},{"lineNumber":454,"author":{"gitID":"-"},"content":""},{"lineNumber":455,"author":{"gitID":"-"},"content":"* ** Alternative 1:** Requires users to specify the group of the client when adding a new client"},{"lineNumber":456,"author":{"gitID":"-"},"content":"** Pros: It will easier for developers to implement this way."},{"lineNumber":457,"author":{"gitID":"-"},"content":"** Cons: Users of the application might not know which group to place the clients into when adding a new client."},{"lineNumber":458,"author":{"gitID":"-"},"content":"* ** Alternative 2:** Allow users to add the group of the client after they have added a new client"},{"lineNumber":459,"author":{"gitID":"-"},"content":"** Pros: Users will have time to decide how to group their clients after a period of time. i.e If the user wants to group their clients according to their commissions paid, it can only be done so after the client has been with the user for a period of time."},{"lineNumber":460,"author":{"gitID":"-"},"content":"** Cons: Some clients might not have any groupings. Developer will need an extra command to list those clients without any groupings."},{"lineNumber":461,"author":{"gitID":"-"},"content":""},{"lineNumber":462,"author":{"gitID":"-"},"content":"// end::group[]"},{"lineNumber":463,"author":{"gitID":"-"},"content":""},{"lineNumber":464,"author":{"gitID":"-"},"content":"// tag::commission[]"},{"lineNumber":465,"author":{"gitID":"Sebry9"},"content":"\u003d\u003d\u003d Insurance with information of commission"},{"lineNumber":466,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":467,"author":{"gitID":"Sebry9"},"content":"*Since V1.4*"},{"lineNumber":468,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":469,"author":{"gitID":"Sebry9"},"content":"* Insurance is tagged to a person with the format: \"INSURANCE[COMMISSION]\""},{"lineNumber":470,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":471,"author":{"gitID":"Sebry9"},"content":"* A particular client is tagged to 0 or more insurance plan, along with each insurance plan, user should input commission inside square bracket (\"[]\")"},{"lineNumber":472,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":473,"author":{"gitID":"Sebry9"},"content":"* Total commission yield by a particular client is then caclulated and displayed in the personCard."},{"lineNumber":474,"author":{"gitID":"-"},"content":""},{"lineNumber":475,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":476,"author":{"gitID":"-"},"content":""},{"lineNumber":477,"author":{"gitID":"Sebry9"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of Insurance tag"},{"lineNumber":478,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":479,"author":{"gitID":"Sebry9"},"content":"image::InsuranceClassInModel.png[width\u003d\"790\"]"},{"lineNumber":480,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":481,"author":{"gitID":"Sebry9"},"content":" *  **Alternative 1(current choice):** Create an Insurance class"},{"lineNumber":482,"author":{"gitID":"Sebry9"},"content":" ** Pros: Distinction between insurance and person, Insurance can exist without person."},{"lineNumber":483,"author":{"gitID":"Sebry9"},"content":" ** Cons: Harder to implement and possibly of a overlapping test cases."},{"lineNumber":484,"author":{"gitID":"Sebry9"},"content":" *  **Alternative 2:** Let insurance be under a special tag class and create subsequent child classes."},{"lineNumber":485,"author":{"gitID":"Sebry9"},"content":" ** Pros: Easier to implement and direct and not distinct objective of a tag/insurance."},{"lineNumber":486,"author":{"gitID":"Sebry9"},"content":" ** Cons: Harder to handle error (unsure of what cause the bug)."},{"lineNumber":487,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":488,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Calculating the total commission per client"},{"lineNumber":489,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":490,"author":{"gitID":"Sebry9"},"content":" * **Alternative 1(current choice):** Commission is tagged to person, everytime a insurance is added it will add to existing commission"},{"lineNumber":491,"author":{"gitID":"Sebry9"},"content":" ** Pros: Easier to calculate client based commission"},{"lineNumber":492,"author":{"gitID":"Sebry9"},"content":" ** Cons: May be difficult to get overall total commission"},{"lineNumber":493,"author":{"gitID":"Sebry9"},"content":" * **Alternative 2:**Create a storage to keep all commission"},{"lineNumber":494,"author":{"gitID":"Sebry9"},"content":" ** Pros: Easy to calculate overall total commission"},{"lineNumber":495,"author":{"gitID":"Sebry9"},"content":" ** Cons: Difficult to allocate commission to their respective client."},{"lineNumber":496,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":497,"author":{"gitID":"Sebry9"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Identify top clients"},{"lineNumber":498,"author":{"gitID":"Sebry9"},"content":" * **Alternative 1(current choice):** Sort by commission"},{"lineNumber":499,"author":{"gitID":"Sebry9"},"content":" ** Pros: Easy to implement"},{"lineNumber":500,"author":{"gitID":"Sebry9"},"content":" ** Cons: Difficult to view ranking of individual insurance plan (e.g top Health plan client)"},{"lineNumber":501,"author":{"gitID":"Sebry9"},"content":" * **Alternative 2:** Colour code top few client"},{"lineNumber":502,"author":{"gitID":"Sebry9"},"content":" ** Pros: Can sort by insurance plan to know if client belong to that category"},{"lineNumber":503,"author":{"gitID":"Sebry9"},"content":" ** Cons: Difficult to implement"},{"lineNumber":504,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":505,"author":{"gitID":"-"},"content":"// end::commission[]"},{"lineNumber":506,"author":{"gitID":"-"},"content":""},{"lineNumber":507,"author":{"gitID":"-"},"content":"// tag:: encryption[]"},{"lineNumber":508,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Data Encryption"},{"lineNumber":509,"author":{"gitID":"-"},"content":""},{"lineNumber":510,"author":{"gitID":"-"},"content":"*Since V1.4*"},{"lineNumber":511,"author":{"gitID":"-"},"content":""},{"lineNumber":512,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":513,"author":{"gitID":"-"},"content":"Client’s data is stored in an XML file in plain text is not secure, hence the need to encrypt XML data."},{"lineNumber":514,"author":{"gitID":"-"},"content":""},{"lineNumber":515,"author":{"gitID":"-"},"content":"Data is encrypted using a AES-256 bits encryption. File is automatically encrypted when the reInsurance closes and decrypted when the reInsurance is started."},{"lineNumber":516,"author":{"gitID":"-"},"content":""},{"lineNumber":517,"author":{"gitID":"-"},"content":"The current implementation is just a proof of concept and will be improved upon in upcoming version."},{"lineNumber":518,"author":{"gitID":"-"},"content":""},{"lineNumber":519,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":520,"author":{"gitID":"-"},"content":""},{"lineNumber":521,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of SecretKey"},{"lineNumber":522,"author":{"gitID":"-"},"content":""},{"lineNumber":523,"author":{"gitID":"-"},"content":"* **Alternative 1:** SecretKey will be stored in the same location as the XML file"},{"lineNumber":524,"author":{"gitID":"-"},"content":"** Pros: Data Encryption will be easier for developers to implement this way."},{"lineNumber":525,"author":{"gitID":"-"},"content":"** Cons: Akin to not having encrypted the file since the key is exposed"},{"lineNumber":526,"author":{"gitID":"-"},"content":"* **Alternative 2 (Prospective):** Use the Java Cryptography Extension KeyStore"},{"lineNumber":527,"author":{"gitID":"-"},"content":"** Pros: Encryption keys will not be exposed"},{"lineNumber":528,"author":{"gitID":"-"},"content":"** Cons: Harder for developers to code"},{"lineNumber":529,"author":{"gitID":"-"},"content":""},{"lineNumber":530,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Strength of the encryption"},{"lineNumber":531,"author":{"gitID":"-"},"content":""},{"lineNumber":532,"author":{"gitID":"-"},"content":"* **Alternative 1 (Current):** 256-bits encryption"},{"lineNumber":533,"author":{"gitID":"-"},"content":"** Pros: 256-bits provide much stronger encryption"},{"lineNumber":534,"author":{"gitID":"-"},"content":"** Cons: Requires more computation resources and might be a tad slower, albeit negligible"},{"lineNumber":535,"author":{"gitID":"-"},"content":"* **Alternative 2 (Prospective):** 128-bits encryption"},{"lineNumber":536,"author":{"gitID":"-"},"content":"** Pros: Using 128-bits encryption will be much faster and requires less computation resources"},{"lineNumber":537,"author":{"gitID":"-"},"content":"** Cons: Less stronger but still secure encryption"},{"lineNumber":538,"author":{"gitID":"-"},"content":""},{"lineNumber":539,"author":{"gitID":"-"},"content":"// end:: encryption[]"},{"lineNumber":540,"author":{"gitID":"-"},"content":""},{"lineNumber":541,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exporting"},{"lineNumber":542,"author":{"gitID":"-"},"content":""},{"lineNumber":543,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":544,"author":{"gitID":"-"},"content":""},{"lineNumber":545,"author":{"gitID":"-"},"content":"The export command allows the user to export the data that is normally stored within the application to an outside, nicely formatted manner."},{"lineNumber":546,"author":{"gitID":"-"},"content":"The two main pieces of data to export are the information about the persons in the reInsurance application as well as the birthdays and appointments of each person."},{"lineNumber":547,"author":{"gitID":"-"},"content":""},{"lineNumber":548,"author":{"gitID":"-"},"content":"In terms of implementation, the export command works in similar fashion to most commands. The important part is the EXPORT_TYPE field which is discussed in section `3.6.3`."},{"lineNumber":549,"author":{"gitID":"-"},"content":""},{"lineNumber":550,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":551,"author":{"gitID":"-"},"content":""},{"lineNumber":552,"author":{"gitID":"-"},"content":"* Separate the export functionality away from the rest of the commands."},{"lineNumber":553,"author":{"gitID":"-"},"content":"* Create a button that exports the data for the user"},{"lineNumber":554,"author":{"gitID":"-"},"content":""},{"lineNumber":555,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Aspect: Parameters of export"},{"lineNumber":556,"author":{"gitID":"-"},"content":""},{"lineNumber":557,"author":{"gitID":"-"},"content":"*Since v1.4*"},{"lineNumber":558,"author":{"gitID":"-"},"content":""},{"lineNumber":559,"author":{"gitID":"-"},"content":"* The application will handle the `export` command with one argument (Format: `export EXPORT_TYPE`)."},{"lineNumber":560,"author":{"gitID":"-"},"content":"* The export types are from an enum class at `seedu.address.model.export.ExportType`."},{"lineNumber":561,"author":{"gitID":"-"},"content":"* To add another export type to be caught by the user\u0027s input, simply add another value to the enum class mentioned above."},{"lineNumber":562,"author":{"gitID":"-"},"content":"** After adding an export type, an export function for that specific type should be created in the `seedu.address.model.AddressBook` class."},{"lineNumber":563,"author":{"gitID":"-"},"content":"** After adding the method in `AddressBook` class, a case should be added to the `seedu.address.model.ModelManager` class to handle when the export type is equivalent to the newly added one."},{"lineNumber":564,"author":{"gitID":"-"},"content":""},{"lineNumber":565,"author":{"gitID":"-"},"content":"*Coming in v2.0*"},{"lineNumber":566,"author":{"gitID":"-"},"content":""},{"lineNumber":567,"author":{"gitID":"-"},"content":"* The `export` function will need to be abstracted out in a way that it can handle all the types of exports allowed by the command."},{"lineNumber":568,"author":{"gitID":"-"},"content":"* The export file type should be controlled by the arguments of the command."},{"lineNumber":569,"author":{"gitID":"-"},"content":"** Example: `export portfolio csv`"},{"lineNumber":570,"author":{"gitID":"-"},"content":"*** Should download a portfolio as a csv file onto the user\u0027s computer"},{"lineNumber":571,"author":{"gitID":"-"},"content":"* Add another argument for specifying the output file name"},{"lineNumber":572,"author":{"gitID":"-"},"content":""},{"lineNumber":573,"author":{"gitID":"-"},"content":""},{"lineNumber":574,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":575,"author":{"gitID":"-"},"content":""},{"lineNumber":576,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":577,"author":{"gitID":"-"},"content":""},{"lineNumber":578,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":579,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":580,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":581,"author":{"gitID":"-"},"content":""},{"lineNumber":582,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":583,"author":{"gitID":"-"},"content":""},{"lineNumber":584,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":585,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":586,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":587,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":588,"author":{"gitID":"-"},"content":""},{"lineNumber":589,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":590,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":591,"author":{"gitID":"-"},"content":""},{"lineNumber":592,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":593,"author":{"gitID":"-"},"content":""},{"lineNumber":594,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":595,"author":{"gitID":"-"},"content":""},{"lineNumber":596,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":597,"author":{"gitID":"-"},"content":""},{"lineNumber":598,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":599,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":600,"author":{"gitID":"-"},"content":""},{"lineNumber":601,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":602,"author":{"gitID":"-"},"content":""},{"lineNumber":603,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":604,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":605,"author":{"gitID":"-"},"content":""},{"lineNumber":606,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":607,"author":{"gitID":"-"},"content":""},{"lineNumber":608,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":609,"author":{"gitID":"-"},"content":""},{"lineNumber":610,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":611,"author":{"gitID":"-"},"content":""},{"lineNumber":612,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":613,"author":{"gitID":"-"},"content":""},{"lineNumber":614,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":615,"author":{"gitID":"-"},"content":""},{"lineNumber":616,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":617,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":618,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":619,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":620,"author":{"gitID":"-"},"content":""},{"lineNumber":621,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":622,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":623,"author":{"gitID":"-"},"content":""},{"lineNumber":624,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":625,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":626,"author":{"gitID":"-"},"content":""},{"lineNumber":627,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":628,"author":{"gitID":"-"},"content":""},{"lineNumber":629,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":630,"author":{"gitID":"-"},"content":""},{"lineNumber":631,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":632,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":633,"author":{"gitID":"-"},"content":""},{"lineNumber":634,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":635,"author":{"gitID":"-"},"content":""},{"lineNumber":636,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":637,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":638,"author":{"gitID":"-"},"content":""},{"lineNumber":639,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":640,"author":{"gitID":"-"},"content":""},{"lineNumber":641,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":642,"author":{"gitID":"-"},"content":""},{"lineNumber":643,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":644,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":645,"author":{"gitID":"-"},"content":""},{"lineNumber":646,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":647,"author":{"gitID":"-"},"content":""},{"lineNumber":648,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":649,"author":{"gitID":"-"},"content":""},{"lineNumber":650,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":651,"author":{"gitID":"-"},"content":""},{"lineNumber":652,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":653,"author":{"gitID":"-"},"content":""},{"lineNumber":654,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":655,"author":{"gitID":"-"},"content":""},{"lineNumber":656,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":657,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":658,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":659,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":660,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":661,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":662,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":663,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":664,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":665,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":666,"author":{"gitID":"-"},"content":""},{"lineNumber":667,"author":{"gitID":"-"},"content":""},{"lineNumber":668,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":669,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":670,"author":{"gitID":"-"},"content":""},{"lineNumber":671,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":672,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":673,"author":{"gitID":"-"},"content":""},{"lineNumber":674,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":675,"author":{"gitID":"-"},"content":""},{"lineNumber":676,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":677,"author":{"gitID":"-"},"content":""},{"lineNumber":678,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":679,"author":{"gitID":"-"},"content":""},{"lineNumber":680,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":681,"author":{"gitID":"-"},"content":""},{"lineNumber":682,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":683,"author":{"gitID":"-"},"content":""},{"lineNumber":684,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":685,"author":{"gitID":"-"},"content":""},{"lineNumber":686,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":687,"author":{"gitID":"-"},"content":""},{"lineNumber":688,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":689,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":690,"author":{"gitID":"-"},"content":""},{"lineNumber":691,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":692,"author":{"gitID":"-"},"content":""},{"lineNumber":693,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":694,"author":{"gitID":"-"},"content":""},{"lineNumber":695,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":696,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":697,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":698,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":699,"author":{"gitID":"-"},"content":""},{"lineNumber":700,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":701,"author":{"gitID":"-"},"content":""},{"lineNumber":702,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, reInsurance depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":703,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":704,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":705,"author":{"gitID":"-"},"content":""},{"lineNumber":706,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":707,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":708,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":709,"author":{"gitID":"-"},"content":""},{"lineNumber":710,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":711,"author":{"gitID":"-"},"content":""},{"lineNumber":712,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":713,"author":{"gitID":"-"},"content":""},{"lineNumber":714,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":715,"author":{"gitID":"-"},"content":""},{"lineNumber":716,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":717,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":718,"author":{"gitID":"-"},"content":""},{"lineNumber":719,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":720,"author":{"gitID":"-"},"content":""},{"lineNumber":721,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":722,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":723,"author":{"gitID":"-"},"content":""},{"lineNumber":724,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":725,"author":{"gitID":"-"},"content":""},{"lineNumber":726,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":727,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":728,"author":{"gitID":"-"},"content":""},{"lineNumber":729,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."},{"lineNumber":730,"author":{"gitID":"-"},"content":"+"},{"lineNumber":731,"author":{"gitID":"-"},"content":"****"},{"lineNumber":732,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":733,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":734,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":735,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":736,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":737,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":738,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":739,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":740,"author":{"gitID":"-"},"content":"****"},{"lineNumber":741,"author":{"gitID":"-"},"content":""},{"lineNumber":742,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":743,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":744,"author":{"gitID":"-"},"content":""},{"lineNumber":745,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":746,"author":{"gitID":"-"},"content":""},{"lineNumber":747,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":748,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":749,"author":{"gitID":"-"},"content":""},{"lineNumber":750,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."},{"lineNumber":751,"author":{"gitID":"-"},"content":"+"},{"lineNumber":752,"author":{"gitID":"-"},"content":"****"},{"lineNumber":753,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":754,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":755,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":756,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":757,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":758,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."},{"lineNumber":759,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":760,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":761,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":762,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":763,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":764,"author":{"gitID":"-"},"content":"****"},{"lineNumber":765,"author":{"gitID":"-"},"content":""},{"lineNumber":766,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":767,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":768,"author":{"gitID":"-"},"content":""},{"lineNumber":769,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":770,"author":{"gitID":"-"},"content":""},{"lineNumber":771,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":772,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":773,"author":{"gitID":"-"},"content":""},{"lineNumber":774,"author":{"gitID":"-"},"content":". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":775,"author":{"gitID":"-"},"content":"+"},{"lineNumber":776,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":777,"author":{"gitID":"-"},"content":"+"},{"lineNumber":778,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":779,"author":{"gitID":"-"},"content":"+"},{"lineNumber":780,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":781,"author":{"gitID":"-"},"content":"+"},{"lineNumber":782,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":783,"author":{"gitID":"-"},"content":"+"},{"lineNumber":784,"author":{"gitID":"-"},"content":"****"},{"lineNumber":785,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":786,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":787,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":788,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":789,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":790,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":791,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":792,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":793,"author":{"gitID":"-"},"content":"****"},{"lineNumber":794,"author":{"gitID":"-"},"content":""},{"lineNumber":795,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":796,"author":{"gitID":"-"},"content":"+"},{"lineNumber":797,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":798,"author":{"gitID":"-"},"content":"+"},{"lineNumber":799,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":800,"author":{"gitID":"-"},"content":"+"},{"lineNumber":801,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":802,"author":{"gitID":"-"},"content":"+"},{"lineNumber":803,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":804,"author":{"gitID":"-"},"content":"+"},{"lineNumber":805,"author":{"gitID":"-"},"content":"****"},{"lineNumber":806,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":807,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":808,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":809,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":810,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":811,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":812,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":813,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":814,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":815,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":816,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":817,"author":{"gitID":"-"},"content":"****"},{"lineNumber":818,"author":{"gitID":"-"},"content":""},{"lineNumber":819,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."},{"lineNumber":820,"author":{"gitID":"-"},"content":"+"},{"lineNumber":821,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":822,"author":{"gitID":"-"},"content":"+"},{"lineNumber":823,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":824,"author":{"gitID":"-"},"content":"+"},{"lineNumber":825,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":826,"author":{"gitID":"-"},"content":"+"},{"lineNumber":827,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":828,"author":{"gitID":"-"},"content":"+"},{"lineNumber":829,"author":{"gitID":"-"},"content":"****"},{"lineNumber":830,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":831,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":832,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."},{"lineNumber":833,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":834,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."},{"lineNumber":835,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."},{"lineNumber":836,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":837,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."},{"lineNumber":838,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":839,"author":{"gitID":"-"},"content":"****"},{"lineNumber":840,"author":{"gitID":"-"},"content":""},{"lineNumber":841,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":842,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":843,"author":{"gitID":"-"},"content":""},{"lineNumber":844,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."},{"lineNumber":845,"author":{"gitID":"-"},"content":""},{"lineNumber":846,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":847,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":848,"author":{"gitID":"-"},"content":""},{"lineNumber":849,"author":{"gitID":"-"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."},{"lineNumber":850,"author":{"gitID":"-"},"content":"+"},{"lineNumber":851,"author":{"gitID":"-"},"content":"****"},{"lineNumber":852,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":853,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":854,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":855,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":856,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":857,"author":{"gitID":"-"},"content":"****"},{"lineNumber":858,"author":{"gitID":"-"},"content":""},{"lineNumber":859,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":860,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":861,"author":{"gitID":"-"},"content":""},{"lineNumber":862,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":863,"author":{"gitID":"-"},"content":""},{"lineNumber":864,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":865,"author":{"gitID":"-"},"content":""},{"lineNumber":866,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":867,"author":{"gitID":"-"},"content":"Edits the remark for a person specified in the `INDEX`. +"},{"lineNumber":868,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":869,"author":{"gitID":"-"},"content":""},{"lineNumber":870,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":871,"author":{"gitID":"-"},"content":""},{"lineNumber":872,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":873,"author":{"gitID":"-"},"content":"Edits the remark for the first person to `Likes to drink coffee.`"},{"lineNumber":874,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":875,"author":{"gitID":"-"},"content":"Removes the remark for the first person."},{"lineNumber":876,"author":{"gitID":"-"},"content":""},{"lineNumber":877,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":878,"author":{"gitID":"-"},"content":""},{"lineNumber":879,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":880,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":881,"author":{"gitID":"-"},"content":""},{"lineNumber":882,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":883,"author":{"gitID":"-"},"content":""},{"lineNumber":884,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":885,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":886,"author":{"gitID":"-"},"content":""},{"lineNumber":887,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":888,"author":{"gitID":"-"},"content":""},{"lineNumber":889,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":890,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":891,"author":{"gitID":"-"},"content":""},{"lineNumber":892,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":893,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":894,"author":{"gitID":"-"},"content":""},{"lineNumber":895,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":896,"author":{"gitID":"-"},"content":""},{"lineNumber":897,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":898,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":899,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":900,"author":{"gitID":"-"},"content":""},{"lineNumber":901,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":902,"author":{"gitID":"-"},"content":""},{"lineNumber":903,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":904,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":905,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":906,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":907,"author":{"gitID":"-"},"content":""},{"lineNumber":908,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":909,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":910,"author":{"gitID":"-"},"content":""},{"lineNumber":911,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":912,"author":{"gitID":"-"},"content":""},{"lineNumber":913,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":914,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":915,"author":{"gitID":"-"},"content":""},{"lineNumber":916,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":917,"author":{"gitID":"-"},"content":""},{"lineNumber":918,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":919,"author":{"gitID":"-"},"content":""},{"lineNumber":920,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":921,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":922,"author":{"gitID":"-"},"content":""},{"lineNumber":923,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":924,"author":{"gitID":"-"},"content":""},{"lineNumber":925,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":926,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":927,"author":{"gitID":"-"},"content":""},{"lineNumber":928,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":929,"author":{"gitID":"-"},"content":""},{"lineNumber":930,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":931,"author":{"gitID":"-"},"content":""},{"lineNumber":932,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":933,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":934,"author":{"gitID":"-"},"content":""},{"lineNumber":935,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":936,"author":{"gitID":"-"},"content":""},{"lineNumber":937,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":938,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":939,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":940,"author":{"gitID":"-"},"content":""},{"lineNumber":941,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":942,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":943,"author":{"gitID":"-"},"content":""},{"lineNumber":944,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":945,"author":{"gitID":"-"},"content":""},{"lineNumber":946,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":947,"author":{"gitID":"-"},"content":""},{"lineNumber":948,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":949,"author":{"gitID":"-"},"content":""},{"lineNumber":950,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":951,"author":{"gitID":"-"},"content":""},{"lineNumber":952,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":953,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":954,"author":{"gitID":"-"},"content":""},{"lineNumber":955,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":956,"author":{"gitID":"-"},"content":""},{"lineNumber":957,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":958,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":959,"author":{"gitID":"-"},"content":""},{"lineNumber":960,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":961,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":962,"author":{"gitID":"-"},"content":""},{"lineNumber":963,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":964,"author":{"gitID":"-"},"content":""},{"lineNumber":965,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":966,"author":{"gitID":"-"},"content":""},{"lineNumber":967,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":968,"author":{"gitID":"-"},"content":""},{"lineNumber":969,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":970,"author":{"gitID":"-"},"content":""},{"lineNumber":971,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":972,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":973,"author":{"gitID":"-"},"content":""},{"lineNumber":974,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":975,"author":{"gitID":"-"},"content":""},{"lineNumber":976,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":977,"author":{"gitID":"-"},"content":""},{"lineNumber":978,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":979,"author":{"gitID":"-"},"content":""},{"lineNumber":980,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":981,"author":{"gitID":"-"},"content":""},{"lineNumber":982,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":983,"author":{"gitID":"-"},"content":""},{"lineNumber":984,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":985,"author":{"gitID":"-"},"content":""},{"lineNumber":986,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":987,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":988,"author":{"gitID":"-"},"content":""},{"lineNumber":989,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":990,"author":{"gitID":"-"},"content":""},{"lineNumber":991,"author":{"gitID":"-"},"content":"* is an insurance agent"},{"lineNumber":992,"author":{"gitID":"-"},"content":"* has a need to manage a significant number of contacts"},{"lineNumber":993,"author":{"gitID":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":994,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":995,"author":{"gitID":"-"},"content":"* prefers typing over mouse input"},{"lineNumber":996,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":997,"author":{"gitID":"-"},"content":""},{"lineNumber":998,"author":{"gitID":"-"},"content":"*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"},{"lineNumber":999,"author":{"gitID":"-"},"content":""},{"lineNumber":1000,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1001,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1002,"author":{"gitID":"-"},"content":""},{"lineNumber":1003,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1004,"author":{"gitID":"-"},"content":""},{"lineNumber":1005,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":1006,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1007,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1008,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1009,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":1010,"author":{"gitID":"-"},"content":""},{"lineNumber":1011,"author":{"gitID":"Sebry9"},"content":"|`* * *` |user |add a new client | track the client"},{"lineNumber":1012,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":1013,"author":{"gitID":"Sebry9"},"content":"|`* * *` |user |add multiple client | track the number of clients I have"},{"lineNumber":1014,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":1015,"author":{"gitID":"Sebry9"},"content":"|`* * *` |user |remove my client | remove entries that I no longer need"},{"lineNumber":1016,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":1017,"author":{"gitID":"Sebry9"},"content":"|`* * *` |user |sort the client based on different category |directly get the type of data I want"},{"lineNumber":1018,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":1019,"author":{"gitID":"Sebry9"},"content":"|`* * *` |user |add my client’s personal detail  |know more about them"},{"lineNumber":1020,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":1021,"author":{"gitID":"Sebry9"},"content":"|`* * *` |user |update my client\u0027s personal detail |keep their information up to date"},{"lineNumber":1022,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":1023,"author":{"gitID":"Sebry9"},"content":"|`* * *` |user |search for a single client |narrow down to the client I am interested in in that time"},{"lineNumber":1024,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":1025,"author":{"gitID":"Sebry9"},"content":"|`* * *` |user |clear the address book |start on a clean slate"},{"lineNumber":1026,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":1027,"author":{"gitID":"Sebry9"},"content":"|`* * *` |user |exit my application |exit the application once I am done with it"},{"lineNumber":1028,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":1029,"author":{"gitID":"Sebry9"},"content":"|`* * *` |user |add remarks of my client |remember my personal comment of the client"},{"lineNumber":1030,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":1031,"author":{"gitID":"Sebry9"},"content":"|`* * *` |user |add the insurance plans that my clients are committed |track what plans he/she has"},{"lineNumber":1032,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":1033,"author":{"gitID":"Sebry9"},"content":"|`* * *` |user |add in how much commission I am getting off my client’s insurance plan|calculate my commission"},{"lineNumber":1034,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":1035,"author":{"gitID":"Sebry9"},"content":"|`* * *` |user |view the commission I get off a client |see how much I am earning off them"},{"lineNumber":1036,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":1037,"author":{"gitID":"Sebry9"},"content":"|`* * *` |user |view the total commission I am getting |view my total earning"},{"lineNumber":1038,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":1039,"author":{"gitID":"Sebry9"},"content":"|`* * *` |user |rank my clients |to serve them better"},{"lineNumber":1040,"author":{"gitID":"-"},"content":""},{"lineNumber":1041,"author":{"gitID":"-"},"content":"|`* * *` |user |group my clients|to manage the different groups differently"},{"lineNumber":1042,"author":{"gitID":"-"},"content":""},{"lineNumber":1043,"author":{"gitID":"-"},"content":"|`* * *` |user |add the birthday date of my client |keep track of my client\u0027s birthday"},{"lineNumber":1044,"author":{"gitID":"-"},"content":""},{"lineNumber":1045,"author":{"gitID":"-"},"content":"|`* * *` |user |edit the birthday date of my client |update it in case I got their birthday wrong at a earlier date"},{"lineNumber":1046,"author":{"gitID":"-"},"content":""},{"lineNumber":1047,"author":{"gitID":"-"},"content":"|`* * *` |user |add the appointment date I have with my client |schedule a meeting date with a client"},{"lineNumber":1048,"author":{"gitID":"-"},"content":""},{"lineNumber":1049,"author":{"gitID":"-"},"content":"|`* * *` |user |edit the appointment date I have with my client |make changes to the meeting date with a client"},{"lineNumber":1050,"author":{"gitID":"-"},"content":""},{"lineNumber":1051,"author":{"gitID":"-"},"content":"|`* * *` |user |delete the appointment date I have with my client |cancel a meeting date with a client"},{"lineNumber":1052,"author":{"gitID":"-"},"content":""},{"lineNumber":1053,"author":{"gitID":"-"},"content":"|`* * *` |user |view the appointment date I have with my client |keep track of the next meeting with a client"},{"lineNumber":1054,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":1055,"author":{"gitID":"Sebry9"},"content":"|`* * *` |user |view appointment on the calendar |have a more organized view of my schedule and at the same time plan for future appointment"},{"lineNumber":1056,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":1057,"author":{"gitID":"-"},"content":"|`* *` |user |export a calendar of my appointments and client birthdays |can use the data on a calendar outside of the application"},{"lineNumber":1058,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":1059,"author":{"gitID":"Sebry9"},"content":"|`* *` |user |receive notification 3 day prior to my client\u0027s appointment date |ensure that I will not miss it"},{"lineNumber":1060,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":1061,"author":{"gitID":"Sebry9"},"content":"|`* *` |user |check the history of my command |know what I have done"},{"lineNumber":1062,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":1063,"author":{"gitID":"Sebry9"},"content":"|`* *` |user |undo the previous command |retrieve lost information caused by accidents"},{"lineNumber":1064,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":1065,"author":{"gitID":"Sebry9"},"content":"|`* *` |user |redo the undo actions |trace what I have undid."},{"lineNumber":1066,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":1067,"author":{"gitID":"Sebry9"},"content":"|`* *` |user |create a new address book |use it for other purposes"},{"lineNumber":1068,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":1069,"author":{"gitID":"-"},"content":"|`* *` |user |export a portfolio of my clients |can use the data of the application elsewhere"},{"lineNumber":1070,"author":{"gitID":"-"},"content":""},{"lineNumber":1071,"author":{"gitID":"Sebry9"},"content":"|`* *` |user |hide some of my client\u0027s information |minimize the leak of my client\u0027s information"},{"lineNumber":1072,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":1073,"author":{"gitID":"Sebry9"},"content":"|`* *` |user |sort persons by name (by default) |view the address book in an organized manner"},{"lineNumber":1074,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":1075,"author":{"gitID":"Sebry9"},"content":"|`* *` |user |receive notification of my client\u0027s birthday |keep in touch with my clients"},{"lineNumber":1076,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":1077,"author":{"gitID":"Sebry9"},"content":"|`* *` |user |add in password access to my address book |be viewed/edited only by allowed users"},{"lineNumber":1078,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":1079,"author":{"gitID":"Sebry9"},"content":"|`* *` |user |change my password |further secure my address book"},{"lineNumber":1080,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":1081,"author":{"gitID":"Sebry9"},"content":"|`* *` |user |forget password |have a backup plan"},{"lineNumber":1082,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":1083,"author":{"gitID":"Sebry9"},"content":"|`*` |user |request access to other address book |seek potential customer from leaving colleague"},{"lineNumber":1084,"author":{"gitID":"-"},"content":""},{"lineNumber":1085,"author":{"gitID":"-"},"content":""},{"lineNumber":1086,"author":{"gitID":"-"},"content":""},{"lineNumber":1087,"author":{"gitID":"-"},"content":""},{"lineNumber":1088,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1089,"author":{"gitID":"-"},"content":""},{"lineNumber":1090,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1091,"author":{"gitID":"-"},"content":""},{"lineNumber":1092,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1093,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1094,"author":{"gitID":"-"},"content":""},{"lineNumber":1095,"author":{"gitID":"-"},"content":"(For all use cases below, the *System* is the `ClientBook` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1096,"author":{"gitID":"-"},"content":""},{"lineNumber":1097,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1098,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete person"},{"lineNumber":1099,"author":{"gitID":"-"},"content":""},{"lineNumber":1100,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1101,"author":{"gitID":"-"},"content":""},{"lineNumber":1102,"author":{"gitID":"-"},"content":"1.  User requests to list persons"},{"lineNumber":1103,"author":{"gitID":"-"},"content":"2.  reInsurance shows a list of persons"},{"lineNumber":1104,"author":{"gitID":"-"},"content":"3.  User requests to delete a specific person in the list"},{"lineNumber":1105,"author":{"gitID":"-"},"content":"4.  reInsurance deletes the person"},{"lineNumber":1106,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1107,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1108,"author":{"gitID":"-"},"content":""},{"lineNumber":1109,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1110,"author":{"gitID":"-"},"content":""},{"lineNumber":1111,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1112,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1113,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1114,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1115,"author":{"gitID":"-"},"content":""},{"lineNumber":1116,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1117,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1118,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1119,"author":{"gitID":"-"},"content":"** 3a1. ClientBook shows an error message."},{"lineNumber":1120,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1121,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1122,"author":{"gitID":"-"},"content":""},{"lineNumber":1123,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1124,"author":{"gitID":"-"},"content":"\u003d\u003d Use case: Add person"},{"lineNumber":1125,"author":{"gitID":"-"},"content":""},{"lineNumber":1126,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1127,"author":{"gitID":"-"},"content":""},{"lineNumber":1128,"author":{"gitID":"-"},"content":"1. User request to add person by specifying their details"},{"lineNumber":1129,"author":{"gitID":"-"},"content":"2. ClientBook adds the person"},{"lineNumber":1130,"author":{"gitID":"-"},"content":"3. ClientBook shows success message"},{"lineNumber":1131,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1132,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1133,"author":{"gitID":"-"},"content":""},{"lineNumber":1134,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1135,"author":{"gitID":"-"},"content":""},{"lineNumber":1136,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1137,"author":{"gitID":"-"},"content":"* 2a. Person already exists in ClientBook."},{"lineNumber":1138,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1139,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1140,"author":{"gitID":"-"},"content":"** 2a1. ClientBook shows error message."},{"lineNumber":1141,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1142,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1143,"author":{"gitID":"-"},"content":""},{"lineNumber":1144,"author":{"gitID":"-"},"content":"* 3a. The given input is invalid."},{"lineNumber":1145,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1146,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1147,"author":{"gitID":"-"},"content":"** 3a1. ClientBook shows error message."},{"lineNumber":1148,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1149,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1150,"author":{"gitID":"-"},"content":""},{"lineNumber":1151,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1152,"author":{"gitID":"-"},"content":"\u003d\u003d Use case: Edit person"},{"lineNumber":1153,"author":{"gitID":"-"},"content":""},{"lineNumber":1154,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1155,"author":{"gitID":"-"},"content":""},{"lineNumber":1156,"author":{"gitID":"-"},"content":"1. User requests to edit person by entering person’s name and new parameter(s)"},{"lineNumber":1157,"author":{"gitID":"-"},"content":"2. ClientBook shows confirm message."},{"lineNumber":1158,"author":{"gitID":"-"},"content":"3. User confirms to edit the Person."},{"lineNumber":1159,"author":{"gitID":"-"},"content":"4. ClientBook edits the Person’s given parameter(s)."},{"lineNumber":1160,"author":{"gitID":"-"},"content":"5. ClientBook shows the edited person entry."},{"lineNumber":1161,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1162,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1163,"author":{"gitID":"-"},"content":""},{"lineNumber":1164,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1165,"author":{"gitID":"-"},"content":""},{"lineNumber":1166,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1167,"author":{"gitID":"-"},"content":"* 2a. Person does not exist in the ClientBook."},{"lineNumber":1168,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1169,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1170,"author":{"gitID":"-"},"content":"** 2a1. ClientBook shows error message."},{"lineNumber":1171,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1172,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1173,"author":{"gitID":"-"},"content":""},{"lineNumber":1174,"author":{"gitID":"-"},"content":"* 3a. The given input is invalid."},{"lineNumber":1175,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1176,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1177,"author":{"gitID":"-"},"content":"** 3a1. ClientBook shows error message."},{"lineNumber":1178,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1179,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1180,"author":{"gitID":"-"},"content":""},{"lineNumber":1181,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1182,"author":{"gitID":"-"},"content":"\u003d\u003d Use case: Add Appointment"},{"lineNumber":1183,"author":{"gitID":"-"},"content":""},{"lineNumber":1184,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1185,"author":{"gitID":"-"},"content":""},{"lineNumber":1186,"author":{"gitID":"-"},"content":"1. User requests to add appointment with person by entering person\u0027s name and appointment date and time."},{"lineNumber":1187,"author":{"gitID":"-"},"content":"2. ClientBook adds the appointment."},{"lineNumber":1188,"author":{"gitID":"-"},"content":"3. ClientBook shows the added appointment entry"},{"lineNumber":1189,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1190,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1191,"author":{"gitID":"-"},"content":""},{"lineNumber":1192,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1193,"author":{"gitID":"-"},"content":""},{"lineNumber":1194,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1195,"author":{"gitID":"-"},"content":"* 2a. Person does not exist in the ClientBook."},{"lineNumber":1196,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1197,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1198,"author":{"gitID":"-"},"content":"** 2a1. ClientBook shows error message."},{"lineNumber":1199,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1200,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1201,"author":{"gitID":"-"},"content":""},{"lineNumber":1202,"author":{"gitID":"-"},"content":"* 3a. The given date is invalid."},{"lineNumber":1203,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1204,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1205,"author":{"gitID":"-"},"content":"** 3a1. ClientBook shows error message."},{"lineNumber":1206,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1207,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1208,"author":{"gitID":"-"},"content":""},{"lineNumber":1209,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1210,"author":{"gitID":"-"},"content":"\u003d\u003d Use case: Delete Appointment"},{"lineNumber":1211,"author":{"gitID":"-"},"content":""},{"lineNumber":1212,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1213,"author":{"gitID":"-"},"content":""},{"lineNumber":1214,"author":{"gitID":"-"},"content":"1. User requests to delete appointment with person by entering person\u0027s name."},{"lineNumber":1215,"author":{"gitID":"-"},"content":"2. ClientBook shows list of appointments."},{"lineNumber":1216,"author":{"gitID":"-"},"content":"3. User requests to delete a specific appointment in the list."},{"lineNumber":1217,"author":{"gitID":"-"},"content":"4. ClientBook deletes the appointment."},{"lineNumber":1218,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1219,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1220,"author":{"gitID":"-"},"content":""},{"lineNumber":1221,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1222,"author":{"gitID":"-"},"content":""},{"lineNumber":1223,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1224,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1225,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1226,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1227,"author":{"gitID":"-"},"content":""},{"lineNumber":1228,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1229,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1230,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1231,"author":{"gitID":"-"},"content":"** 3a1. ClientBook shows an error message."},{"lineNumber":1232,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1233,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1234,"author":{"gitID":"-"},"content":""},{"lineNumber":1235,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1236,"author":{"gitID":"-"},"content":"\u003d\u003d Use case: View Commission from Client"},{"lineNumber":1237,"author":{"gitID":"-"},"content":""},{"lineNumber":1238,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1239,"author":{"gitID":"-"},"content":""},{"lineNumber":1240,"author":{"gitID":"-"},"content":"1. User requests to view commission of client by entering person\u0027s name."},{"lineNumber":1241,"author":{"gitID":"-"},"content":"2. ClientBook shows commission earned from client."},{"lineNumber":1242,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1243,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1244,"author":{"gitID":"-"},"content":""},{"lineNumber":1245,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1246,"author":{"gitID":"-"},"content":""},{"lineNumber":1247,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1248,"author":{"gitID":"-"},"content":"* 2a. Person does not exist in the ClientBook."},{"lineNumber":1249,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1250,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1251,"author":{"gitID":"-"},"content":"** 2a1. ClientBook shows error message."},{"lineNumber":1252,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1253,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1254,"author":{"gitID":"-"},"content":""},{"lineNumber":1255,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1256,"author":{"gitID":"-"},"content":"\u003d\u003d Use case: View Total Commission"},{"lineNumber":1257,"author":{"gitID":"-"},"content":""},{"lineNumber":1258,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1259,"author":{"gitID":"-"},"content":""},{"lineNumber":1260,"author":{"gitID":"-"},"content":"1. User requests to view total commission."},{"lineNumber":1261,"author":{"gitID":"-"},"content":"2. AddressBook shows total commission."},{"lineNumber":1262,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1263,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1264,"author":{"gitID":"-"},"content":""},{"lineNumber":1265,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1266,"author":{"gitID":"-"},"content":""},{"lineNumber":1267,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1268,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1269,"author":{"gitID":"-"},"content":""},{"lineNumber":1270,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1271,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1272,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1273,"author":{"gitID":"-"},"content":".  Should come with open source code."},{"lineNumber":1274,"author":{"gitID":"-"},"content":".  Should be able to be used with any OS."},{"lineNumber":1275,"author":{"gitID":"-"},"content":".  Should allow the user to not have to use their mouse."},{"lineNumber":1276,"author":{"gitID":"-"},"content":".  Should be secure from users trying to enter malicious commands."},{"lineNumber":1277,"author":{"gitID":"-"},"content":".  Should be intuitive for any user that has experience using an address book (i.e add,delete,sort,list)"},{"lineNumber":1278,"author":{"gitID":"-"},"content":".  Should be able to respond to queries from users within 1 second"},{"lineNumber":1279,"author":{"gitID":"-"},"content":".  Should be able to export portfolio of clients to a .csv file"},{"lineNumber":1280,"author":{"gitID":"-"},"content":".  Should be able to export calendar of appointments and client birthdays to a .ics file"},{"lineNumber":1281,"author":{"gitID":"-"},"content":".  Should be able to assist the user in better managing his client database by providing a dashboard view of his client information"},{"lineNumber":1282,"author":{"gitID":"-"},"content":".  Should be able to work without an internet connection"},{"lineNumber":1283,"author":{"gitID":"-"},"content":""},{"lineNumber":1284,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1285,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1286,"author":{"gitID":"-"},"content":""},{"lineNumber":1287,"author":{"gitID":"-"},"content":"[[User]] User::"},{"lineNumber":1288,"author":{"gitID":"-"},"content":"An User is defined as the insurance agent"},{"lineNumber":1289,"author":{"gitID":"-"},"content":""},{"lineNumber":1290,"author":{"gitID":"-"},"content":"[[mainstream-OS]] Mainstream OS::"},{"lineNumber":1291,"author":{"gitID":"-"},"content":"A mainstream OS includes Windows, Linux, Unix and OS-X"},{"lineNumber":1292,"author":{"gitID":"-"},"content":""},{"lineNumber":1293,"author":{"gitID":"-"},"content":"[[client-information]] Clients\u0027s Information::"},{"lineNumber":1294,"author":{"gitID":"-"},"content":"Client\u0027s Information includes all personal details and metrics"},{"lineNumber":1295,"author":{"gitID":"-"},"content":""},{"lineNumber":1296,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1297,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1298,"author":{"gitID":"-"},"content":""},{"lineNumber":1299,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1300,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1301,"author":{"gitID":"-"},"content":""},{"lineNumber":1302,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1303,"author":{"gitID":"-"},"content":""},{"lineNumber":1304,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1305,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1306,"author":{"gitID":"-"},"content":""},{"lineNumber":1307,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1308,"author":{"gitID":"-"},"content":""},{"lineNumber":1309,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1310,"author":{"gitID":"-"},"content":""},{"lineNumber":1311,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1312,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1313,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1314,"author":{"gitID":"-"},"content":""},{"lineNumber":1315,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1316,"author":{"gitID":"-"},"content":""},{"lineNumber":1317,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1318,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1319,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1320,"author":{"gitID":"-"},"content":""},{"lineNumber":1321,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1322,"author":{"gitID":"-"},"content":""},{"lineNumber":1323,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":1324,"author":{"gitID":"-"},"content":""},{"lineNumber":1325,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":1326,"author":{"gitID":"-"},"content":""},{"lineNumber":1327,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":1328,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1329,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1330,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1331,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1332,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1333,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1334,"author":{"gitID":"-"},"content":""},{"lineNumber":1335,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1336,"author":{"gitID":"-"},"content":""},{"lineNumber":1337,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1338,"author":{"gitID":"-"},"content":""},{"lineNumber":1339,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1340,"author":{"gitID":"-"},"content":""},{"lineNumber":1341,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1342,"author":{"gitID":"-"},"content":""},{"lineNumber":1343,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"Sebry9":93,"-":1250}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Sebry9"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Sebry9"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"Sebry9"},"content":"import seedu.address.ui.PersonCard;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":20,"author":{"gitID":"Sebry9"},"content":"    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"},{"lineNumber":21,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":32,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":33,"author":{"gitID":"Sebry9"},"content":"        expectedCard.getTags().forEach(tag -\u003e"},{"lineNumber":34,"author":{"gitID":"Sebry9"},"content":"            assertEquals(expectedCard.getTagStyleClasses(tag), actualCard.getTagStyleClasses(tag)));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"},{"lineNumber":45,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":46,"author":{"gitID":"Sebry9"},"content":"        assertTagsEqual(expectedPerson, actualCard);"},{"lineNumber":47,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Sebry9"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"Sebry9"},"content":"     * Return the color style for {@code tagName}\u0027s label."},{"lineNumber":50,"author":{"gitID":"Sebry9"},"content":"     * @see PersonCard#getTagColorStyleFor(String)"},{"lineNumber":51,"author":{"gitID":"Sebry9"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":53,"author":{"gitID":"Sebry9"},"content":"    private static String getTagColorStyleFor(String tagName) {"},{"lineNumber":54,"author":{"gitID":"Sebry9"},"content":"        switch(tagName) {"},{"lineNumber":55,"author":{"gitID":"Sebry9"},"content":"        case \"friends\":"},{"lineNumber":56,"author":{"gitID":"Sebry9"},"content":"        case \"friend\":"},{"lineNumber":57,"author":{"gitID":"Sebry9"},"content":"            return \"yellow\";"},{"lineNumber":58,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":59,"author":{"gitID":"Sebry9"},"content":"        case \"teacher\":"},{"lineNumber":60,"author":{"gitID":"Sebry9"},"content":"        case \"classmates\":"},{"lineNumber":61,"author":{"gitID":"Sebry9"},"content":"            return \"blue\";"},{"lineNumber":62,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":63,"author":{"gitID":"Sebry9"},"content":"        case \"family\":"},{"lineNumber":64,"author":{"gitID":"Sebry9"},"content":"        case \"husband\":"},{"lineNumber":65,"author":{"gitID":"Sebry9"},"content":"            return \"green\";"},{"lineNumber":66,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":67,"author":{"gitID":"Sebry9"},"content":"        case \"enemy\":"},{"lineNumber":68,"author":{"gitID":"Sebry9"},"content":"        case \"owesMoney\":"},{"lineNumber":69,"author":{"gitID":"Sebry9"},"content":"            return \"red\";"},{"lineNumber":70,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":71,"author":{"gitID":"Sebry9"},"content":"        case \"boyfriend\":"},{"lineNumber":72,"author":{"gitID":"Sebry9"},"content":"        case \"girlfriend\":"},{"lineNumber":73,"author":{"gitID":"Sebry9"},"content":"            return \"purple\";"},{"lineNumber":74,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":75,"author":{"gitID":"Sebry9"},"content":"        case \"grandparent\":"},{"lineNumber":76,"author":{"gitID":"Sebry9"},"content":"        case \"neighbours\":"},{"lineNumber":77,"author":{"gitID":"Sebry9"},"content":"            return \"grey\";"},{"lineNumber":78,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":79,"author":{"gitID":"Sebry9"},"content":"        case \"colleagues\":"},{"lineNumber":80,"author":{"gitID":"Sebry9"},"content":"            return \"orange\";"},{"lineNumber":81,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":82,"author":{"gitID":"Sebry9"},"content":"        default:"},{"lineNumber":83,"author":{"gitID":"Sebry9"},"content":"            fail(tagName + \" does not have a color assigned to it.\");"},{"lineNumber":84,"author":{"gitID":"Sebry9"},"content":"            return \"\";"},{"lineNumber":85,"author":{"gitID":"Sebry9"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":88,"author":{"gitID":"Sebry9"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"Sebry9"},"content":"     * Assert that the tags in {@code actualCard} is aligned with {@code expectedPerson}"},{"lineNumber":90,"author":{"gitID":"Sebry9"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"Sebry9"},"content":"    private static void assertTagsEqual(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":92,"author":{"gitID":"Sebry9"},"content":"        List\u003cString\u003e expectedTags \u003d expectedPerson.getTags().stream()"},{"lineNumber":93,"author":{"gitID":"Sebry9"},"content":"                .map(tag -\u003e tag.tagName).collect(Collectors.toList());"},{"lineNumber":94,"author":{"gitID":"Sebry9"},"content":"        assertEquals(expectedTags, actualCard.getTags());"},{"lineNumber":95,"author":{"gitID":"Sebry9"},"content":"        expectedTags.forEach(tag -\u003e"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE,"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                getTagColorStyleFor(tag)),"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"                    actualCard.getTagStyleClasses(tag)));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sebry9":59,"-":75}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"Sebry9"},"content":"import seedu.address.storage.XmlAdaptedInsurance;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":43,"author":{"gitID":"Sebry9"},"content":"    private static final String VALID_BIRTHDATE \u003d \"09-12-1994\";"},{"lineNumber":44,"author":{"gitID":"Sebry9"},"content":"    private static final String VALID_APPOINTMENT \u003d \"09-12-1994\";"},{"lineNumber":45,"author":{"gitID":"Sebry9"},"content":"    private static final String VALID_GROUP \u003d \"PRIORITY\";"},{"lineNumber":46,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":47,"author":{"gitID":"Sebry9"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d"},{"lineNumber":48,"author":{"gitID":"Sebry9"},"content":"        Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":49,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":50,"author":{"gitID":"Sebry9"},"content":"    private static final List\u003cXmlAdaptedInsurance\u003e VALID_INSURANCE \u003d Collections.singletonList"},{"lineNumber":51,"author":{"gitID":"Sebry9"},"content":"        (new XmlAdaptedInsurance(\"Health\"));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getPersonList().size());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":90,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":92,"author":{"gitID":"Sebry9"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_BIRTHDATE, VALID_APPOINTMENT,"},{"lineNumber":93,"author":{"gitID":"Sebry9"},"content":"            VALID_GROUP, VALID_INSURANCE);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":100,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":102,"author":{"gitID":"Sebry9"},"content":"                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_BIRTHDATE, VALID_APPOINTMENT,"},{"lineNumber":103,"author":{"gitID":"Sebry9"},"content":"            VALID_GROUP, VALID_INSURANCE);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":110,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":112,"author":{"gitID":"Sebry9"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_BIRTHDATE, VALID_APPOINTMENT,"},{"lineNumber":113,"author":{"gitID":"Sebry9"},"content":"            VALID_GROUP, VALID_INSURANCE);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":145,"author":{"gitID":"-"},"content":"                builder.withPerson(new PersonBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":158,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sebry9":16,"-":142}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"Sebry9"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":53,"author":{"gitID":"Sebry9"},"content":"    public void parseCommandAlias_add() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":55,"author":{"gitID":"Sebry9"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommandWithAlias(person));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"Sebry9"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"Sebry9"},"content":"    public void parseCommandAlias_clear() throws Exception {"},{"lineNumber":67,"author":{"gitID":"Sebry9"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD_ALIAS) instanceof ClearCommand);"},{"lineNumber":68,"author":{"gitID":"Sebry9"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":69,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":70,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":75,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"Sebry9"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"Sebry9"},"content":"    public void parseCommandAlias_delete() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":82,"author":{"gitID":"Sebry9"},"content":"                DeleteCommand.COMMAND_WORD_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":91,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"Sebry9"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"Sebry9"},"content":"    public void parseCommandAlias_edit() throws Exception {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":99,"author":{"gitID":"Sebry9"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD_ALIAS + \" \""},{"lineNumber":100,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":115,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"Sebry9"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"Sebry9"},"content":"    public void parseCommandAlias_find() throws Exception {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":123,"author":{"gitID":"Sebry9"},"content":"                FindCommand.COMMAND_WORD_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"Sebry9"},"content":"    @Test"},{"lineNumber":135,"author":{"gitID":"Sebry9"},"content":"    public void parseCommandAlias_help() throws Exception {"},{"lineNumber":136,"author":{"gitID":"Sebry9"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD_ALIAS) instanceof HelpCommand);"},{"lineNumber":137,"author":{"gitID":"Sebry9"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof HelpCommand);"},{"lineNumber":138,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"Sebry9"},"content":"    @Test"},{"lineNumber":154,"author":{"gitID":"Sebry9"},"content":"    public void parseCommandAlias_history() throws Exception {"},{"lineNumber":155,"author":{"gitID":"Sebry9"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD_ALIAS) instanceof HistoryCommand);"},{"lineNumber":156,"author":{"gitID":"Sebry9"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof HistoryCommand);"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":175,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"Sebry9"},"content":"    @Test"},{"lineNumber":180,"author":{"gitID":"Sebry9"},"content":"    public void parseCommandAlias_select() throws Exception {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":182,"author":{"gitID":"Sebry9"},"content":"                SelectCommand.COMMAND_WORD_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"Sebry9"},"content":"    @Test"},{"lineNumber":193,"author":{"gitID":"Sebry9"},"content":"    public void parseCommandAlias_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":194,"author":{"gitID":"Sebry9"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD_ALIAS) instanceof RedoCommand);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"Sebry9"},"content":"    @Test"},{"lineNumber":206,"author":{"gitID":"Sebry9"},"content":"    public void parseCommandAlias_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":207,"author":{"gitID":"Sebry9"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD_ALIAS) instanceof UndoCommand);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sebry9":42,"-":182}},{"path":"src/test/java/seedu/address/logic/commands/ExportCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.export.ExportType;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"daviddalmaso"},"content":"//@@author daviddalmaso"},{"lineNumber":16,"author":{"gitID":"daviddalmaso"},"content":"public class ExportCommandTest {"},{"lineNumber":17,"author":{"gitID":"daviddalmaso"},"content":"    public final UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":18,"author":{"gitID":"daviddalmaso"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":19,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":20,"author":{"gitID":"daviddalmaso"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"daviddalmaso"},"content":"    public void execute_validExportPortfolioCommand_success() {"},{"lineNumber":22,"author":{"gitID":"daviddalmaso"},"content":"        ExportType exportType \u003d ExportType.PORTFOLIO;"},{"lineNumber":23,"author":{"gitID":"daviddalmaso"},"content":"        ExportCommand exportCommand \u003d prepareCommand(exportType);"},{"lineNumber":24,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":25,"author":{"gitID":"daviddalmaso"},"content":"        String expectedMessage \u003d String.format(ExportCommand.PORTFOLIO_MESSAGE_SUCCESS,"},{"lineNumber":26,"author":{"gitID":"daviddalmaso"},"content":"                userPrefs.getExportPortfolioFilePath());"},{"lineNumber":27,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":28,"author":{"gitID":"daviddalmaso"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"daviddalmaso"},"content":"        expectedModel.export(exportType);"},{"lineNumber":30,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":31,"author":{"gitID":"daviddalmaso"},"content":"        assertCommandSuccess(exportCommand, model, expectedMessage, expectedModel);"},{"lineNumber":32,"author":{"gitID":"daviddalmaso"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":34,"author":{"gitID":"daviddalmaso"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"daviddalmaso"},"content":"     * Returns a {@code ExportCommand} with the parameter {@code exportType}."},{"lineNumber":36,"author":{"gitID":"daviddalmaso"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"daviddalmaso"},"content":"    private ExportCommand prepareCommand(ExportType exportType) {"},{"lineNumber":38,"author":{"gitID":"daviddalmaso"},"content":"        ExportCommand exportCommand \u003d new ExportCommand(exportType);"},{"lineNumber":39,"author":{"gitID":"daviddalmaso"},"content":"        exportCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":40,"author":{"gitID":"daviddalmaso"},"content":"        return exportCommand;"},{"lineNumber":41,"author":{"gitID":"daviddalmaso"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":43,"author":{"gitID":"daviddalmaso"},"content":"}"}],"authorContributionMap":{"daviddalmaso":29,"-":14}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class XmlAdaptedPersonTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":31,"author":{"gitID":"Sebry9"},"content":"    private static final String VALID_BIRTHDAY \u003d BENSON.getBirthday().toString();"},{"lineNumber":32,"author":{"gitID":"Sebry9"},"content":"    private static final String VALID_APPOINTMENT \u003d BENSON.getAppointment().toString();"},{"lineNumber":33,"author":{"gitID":"Sebry9"},"content":"    private static final String VALID_GROUP \u003d BENSON.getGroup().toString();"},{"lineNumber":34,"author":{"gitID":"Sebry9"},"content":"    private static final List\u003cXmlAdaptedInsurance\u003e VALID_INSURANCE \u003d BENSON.getInsurance().stream()"},{"lineNumber":35,"author":{"gitID":"Sebry9"},"content":"            .map(XmlAdaptedInsurance::new).collect(Collectors.toList());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":49,"author":{"gitID":"Sebry9"},"content":"                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_BIRTHDAY,"},{"lineNumber":50,"author":{"gitID":"Sebry9"},"content":"                    VALID_APPOINTMENT, VALID_GROUP, VALID_INSURANCE);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":57,"author":{"gitID":"Sebry9"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"},{"lineNumber":58,"author":{"gitID":"Sebry9"},"content":"            VALID_BIRTHDAY, VALID_APPOINTMENT, VALID_GROUP, VALID_INSURANCE);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":66,"author":{"gitID":"Sebry9"},"content":"                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_BIRTHDAY,"},{"lineNumber":67,"author":{"gitID":"Sebry9"},"content":"                    VALID_APPOINTMENT, VALID_GROUP, VALID_INSURANCE);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":74,"author":{"gitID":"Sebry9"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"},{"lineNumber":75,"author":{"gitID":"Sebry9"},"content":"            VALID_BIRTHDAY, VALID_APPOINTMENT, VALID_GROUP, VALID_INSURANCE);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":83,"author":{"gitID":"Sebry9"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_BIRTHDAY,"},{"lineNumber":84,"author":{"gitID":"Sebry9"},"content":"                    VALID_APPOINTMENT, VALID_GROUP, VALID_INSURANCE);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":91,"author":{"gitID":"Sebry9"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS,"},{"lineNumber":92,"author":{"gitID":"Sebry9"},"content":"            VALID_BIRTHDAY, VALID_APPOINTMENT, VALID_GROUP, VALID_INSURANCE);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":100,"author":{"gitID":"Sebry9"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS, VALID_BIRTHDAY,"},{"lineNumber":101,"author":{"gitID":"Sebry9"},"content":"                    VALID_APPOINTMENT, VALID_GROUP, VALID_INSURANCE);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":108,"author":{"gitID":"Sebry9"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS,"},{"lineNumber":109,"author":{"gitID":"Sebry9"},"content":"            VALID_BIRTHDAY, VALID_APPOINTMENT, VALID_GROUP, VALID_INSURANCE);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":119,"author":{"gitID":"Sebry9"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags, VALID_BIRTHDAY,"},{"lineNumber":120,"author":{"gitID":"Sebry9"},"content":"                    VALID_APPOINTMENT, VALID_GROUP, VALID_INSURANCE);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sebry9":23,"-":101}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitID":"Sebry9"},"content":"import seedu.address.model.Insurance.Insurance;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Appointment;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        descriptor.setBirthday(person.getBirthday());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        descriptor.setAppointment(person.getAppointment());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        descriptor.setGroup(person.getGroup());"},{"lineNumber":45,"author":{"gitID":"Sebry9"},"content":"        descriptor.setCommission(person.getTotalCommission());"},{"lineNumber":46,"author":{"gitID":"Sebry9"},"content":"        descriptor.setInsurances(person.getInsurance());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withBirthday(String birthday) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        descriptor.setBirthday(new Birthday(birthday));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withAppointment(String appointment) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        descriptor.setAppointment(new Appointment(appointment));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"Sebry9"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"Sebry9"},"content":"     * Parses the {@code insurances} into a {@code Set\u003cInsurance\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":110,"author":{"gitID":"Sebry9"},"content":"     * that we are building."},{"lineNumber":111,"author":{"gitID":"Sebry9"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"Sebry9"},"content":"    public EditPersonDescriptorBuilder withInsurances(String... insurances) {"},{"lineNumber":113,"author":{"gitID":"Sebry9"},"content":"        Set\u003cInsurance\u003e insuranceSet \u003d Stream.of(insurances).map(Insurance::new).collect(Collectors.toSet());"},{"lineNumber":114,"author":{"gitID":"Sebry9"},"content":"        descriptor.setInsurances(insuranceSet);"},{"lineNumber":115,"author":{"gitID":"Sebry9"},"content":"        return this;"},{"lineNumber":116,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sebry9":13,"-":108}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"Sebry9"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":78,"author":{"gitID":"Sebry9"},"content":"        private final ObservableList\u003cGroup\u003e groups \u003d FXCollections.observableArrayList();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":94,"author":{"gitID":"Sebry9"},"content":"        @Override"},{"lineNumber":95,"author":{"gitID":"Sebry9"},"content":"        public ObservableList\u003cGroup\u003e getGroupList() {"},{"lineNumber":96,"author":{"gitID":"Sebry9"},"content":"            return groups;"},{"lineNumber":97,"author":{"gitID":"Sebry9"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sebry9":7,"-":93}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INSURANCE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A utility class for Person."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"Sebry9"},"content":"    public static String getAddCommandWithAlias(Person person) {"},{"lineNumber":30,"author":{"gitID":"Sebry9"},"content":"        return AddCommand.COMMAND_WORD_ALIAS + \" \" + getPersonDetails(person);"},{"lineNumber":31,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_BIRTHDAY + person.getBirthday().value + \" \");"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_APPOINTMENT + person.getAppointment().value + \" \");"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_GROUP + person.getGroup().groupName + \" \");"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":46,"author":{"gitID":"Sebry9"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"},{"lineNumber":47,"author":{"gitID":"Sebry9"},"content":"        person.getInsurance().stream().forEach("},{"lineNumber":48,"author":{"gitID":"Sebry9"},"content":"            s-\u003e sb.append(PREFIX_INSURANCE + s.insuranceName + \" \"));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sebry9":8,"-":43}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Sebry9"},"content":"import seedu.address.model.Insurance.Insurance;"},{"lineNumber":7,"author":{"gitID":"Sebry9"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Appointment;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_BIRTHDAY \u003d \"09-12-1994\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_APPOINTMENT \u003d \"12-05-2018\";"},{"lineNumber":30,"author":{"gitID":"Sebry9"},"content":"    public static final String DEFAULT_GROUP \u003d \"family\";"},{"lineNumber":31,"author":{"gitID":"Sebry9"},"content":"    public static final String DEFAULT_INSURANCE \u003d \"Health\";"},{"lineNumber":32,"author":{"gitID":"Sebry9"},"content":"    public static final String DEFAULT_COMMISSION \u003d \"0\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Birthday birthday;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Appointment appointment;"},{"lineNumber":41,"author":{"gitID":"Sebry9"},"content":"    private Group group;"},{"lineNumber":42,"author":{"gitID":"Sebry9"},"content":"    private Set\u003cInsurance\u003e insurance;"},{"lineNumber":43,"author":{"gitID":"Sebry9"},"content":"    private String totalCommission;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        birthday \u003d new Birthday(DEFAULT_BIRTHDAY);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        appointment \u003d new Appointment(DEFAULT_APPOINTMENT);"},{"lineNumber":53,"author":{"gitID":"Sebry9"},"content":"        group \u003d new Group(DEFAULT_GROUP);"},{"lineNumber":54,"author":{"gitID":"Sebry9"},"content":"        insurance \u003d SampleDataUtil.getInsuranceSet(DEFAULT_INSURANCE);"},{"lineNumber":55,"author":{"gitID":"Sebry9"},"content":"        totalCommission \u003d new String(DEFAULT_COMMISSION);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        birthday \u003d personToCopy.getBirthday();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        appointment \u003d personToCopy.getAppointment();"},{"lineNumber":69,"author":{"gitID":"Sebry9"},"content":"        group \u003d personToCopy.getGroup();"},{"lineNumber":70,"author":{"gitID":"Sebry9"},"content":"        insurance \u003d new HashSet\u003c\u003e(personToCopy.getInsurance());"},{"lineNumber":71,"author":{"gitID":"Sebry9"},"content":"        totalCommission \u003d personToCopy.getTotalCommission();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"Sebry9"},"content":"     * Sets the {@code Birthday} of the {@code Person} that we are building."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public PersonBuilder withBirthday(String birthday) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        this.birthday \u003d new Birthday(birthday);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"Sebry9"},"content":"     * Sets the {@code Appointment} of the {@code Person} that we are building."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public PersonBuilder withAppointment(String appointment) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        this.appointment \u003d new Appointment(appointment);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":130,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":131,"author":{"gitID":"Sebry9"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"Sebry9"},"content":"     * Sets the {@code Insurance} of the {@code Person} that we are building."},{"lineNumber":133,"author":{"gitID":"Sebry9"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"Sebry9"},"content":"    public PersonBuilder withInsurance(String insurance) {"},{"lineNumber":135,"author":{"gitID":"Sebry9"},"content":"        this.insurance \u003d SampleDataUtil.getInsuranceSet(insurance);"},{"lineNumber":136,"author":{"gitID":"Sebry9"},"content":"        return this;"},{"lineNumber":137,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":139,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":140,"author":{"gitID":"Sebry9"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"Sebry9"},"content":"     * Sets the {@code Group} of the {@code Person} that we are building."},{"lineNumber":142,"author":{"gitID":"Sebry9"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"Sebry9"},"content":"    public PersonBuilder withGroup(String group) {"},{"lineNumber":144,"author":{"gitID":"Sebry9"},"content":"        this.group \u003d new Group(group);"},{"lineNumber":145,"author":{"gitID":"Sebry9"},"content":"        return this;"},{"lineNumber":146,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":149,"author":{"gitID":"Sebry9"},"content":"        return new Person(name, phone, email, address, tags, birthday, appointment, group, insurance);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sebry9":36,"-":116}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\").withBirthday(\"01-12-1990\").withAppointment(\"09-12-2018\")"},{"lineNumber":34,"author":{"gitID":"Sebry9"},"content":"            .withGroup(\"PRIORITY\").withInsurance(\"General\").withTags(\"friends\").build();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":37,"author":{"gitID":"Sebry9"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withBirthday(\"02-01-1991\")"},{"lineNumber":38,"author":{"gitID":"Sebry9"},"content":"        .withAppointment(\"10-12-2018\")"},{"lineNumber":39,"author":{"gitID":"Sebry9"},"content":"            .withGroup(\"PRIORITY\").withInsurance(\"General\").withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":41,"author":{"gitID":"Sebry9"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withBirthday(\"03-02-1993\")"},{"lineNumber":42,"author":{"gitID":"Sebry9"},"content":"        .withAppointment(\"11-12-2018\")"},{"lineNumber":43,"author":{"gitID":"Sebry9"},"content":"            .withGroup(\"PRIORITY\").withInsurance(\"General\").build();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":45,"author":{"gitID":"Sebry9"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withBirthday(\"04-03-1994\")"},{"lineNumber":46,"author":{"gitID":"Sebry9"},"content":"        .withAppointment(\"09-10-2018\")"},{"lineNumber":47,"author":{"gitID":"Sebry9"},"content":"            .withGroup(\"PRIORITY\").withInsurance(\"General\").build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":49,"author":{"gitID":"Sebry9"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withBirthday(\"05-06-1995\")"},{"lineNumber":50,"author":{"gitID":"Sebry9"},"content":"        .withAppointment(\"09-09-2018\")"},{"lineNumber":51,"author":{"gitID":"Sebry9"},"content":"            .withGroup(\"PRIORITY\").build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":53,"author":{"gitID":"Sebry9"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withBirthday(\"11-12-1994\")"},{"lineNumber":54,"author":{"gitID":"Sebry9"},"content":"        .withAppointment(\"09-08-2018\")"},{"lineNumber":55,"author":{"gitID":"Sebry9"},"content":"            .withGroup(\"PRIORITY\").withInsurance(\"General\").build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":57,"author":{"gitID":"Sebry9"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withBirthday(\"10-11-1990\")"},{"lineNumber":58,"author":{"gitID":"Sebry9"},"content":"        .withAppointment(\"09-07-2018\")"},{"lineNumber":59,"author":{"gitID":"Sebry9"},"content":"            .withGroup(\"PRIORITY\").withInsurance(\"General\").build();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY)"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            .withGroup(VALID_GROUP_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withBirthday(VALID_BIRTHDAY_BOB)"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            .withGroup(VALID_GROUP_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sebry9":19,"-":79}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Label addressLabel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public String getAddress() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return addressLabel.getText();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":72,"author":{"gitID":"Sebry9"},"content":"    public List\u003cString\u003e getTagStyleClasses(String tag) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":75,"author":{"gitID":"Sebry9"},"content":"                .filter(label -\u003e label.getText().equals(tag))"},{"lineNumber":76,"author":{"gitID":"Sebry9"},"content":"                .map(Label::getStyleClass)"},{"lineNumber":77,"author":{"gitID":"Sebry9"},"content":"                .findFirst()"},{"lineNumber":78,"author":{"gitID":"Sebry9"},"content":"                .orElseThrow(() -\u003e new IllegalArgumentException(\"input tag unavailable \"));"},{"lineNumber":79,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sebry9":8,"-":73}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"Sebry9"},"content":"    private static final String[] TAG_COLOR_STYLES \u003d"},{"lineNumber":17,"author":{"gitID":"Sebry9"},"content":"        { \"yellow\", \"blue\", \"red\", \"green\", \"orange\", \"purple\", \"grey\"};"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Label birthday;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private Label appointment;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"Sebry9"},"content":"    private Label commission;"},{"lineNumber":46,"author":{"gitID":"Sebry9"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private Label group;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":50,"author":{"gitID":"Sebry9"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitID":"Sebry9"},"content":"    private FlowPane insurances;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        birthday.setText(person.getBirthday().value);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        if (person.getAppointment() \u003d\u003d null || person.getAppointment().equals(\"\")) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            appointment.setText(\"No Appointment Date\");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            appointment.setText(person.getAppointment().value);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"Sebry9"},"content":"        commission.setText(person.getTotalCommission());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        group.setText(person.getGroup().groupName);"},{"lineNumber":69,"author":{"gitID":"Sebry9"},"content":"        person.getInsurance().forEach(insurance -\u003e insurances.getChildren().add(new Label(insurance.insuranceName)));"},{"lineNumber":70,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":71,"author":{"gitID":"Sebry9"},"content":"        startTag(person);"},{"lineNumber":72,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":74,"author":{"gitID":"Sebry9"},"content":"    //@@author Sebry9"},{"lineNumber":75,"author":{"gitID":"Sebry9"},"content":"    private String getTagColorStyleFor(String tag) {"},{"lineNumber":76,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":77,"author":{"gitID":"Sebry9"},"content":"        switch(tag) {"},{"lineNumber":78,"author":{"gitID":"Sebry9"},"content":"        case \"friends\":"},{"lineNumber":79,"author":{"gitID":"Sebry9"},"content":"        case \"friend\":"},{"lineNumber":80,"author":{"gitID":"Sebry9"},"content":"            return TAG_COLOR_STYLES[0]; //yellow"},{"lineNumber":81,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":82,"author":{"gitID":"Sebry9"},"content":"        case \"teacher\":"},{"lineNumber":83,"author":{"gitID":"Sebry9"},"content":"        case \"classmates\":"},{"lineNumber":84,"author":{"gitID":"Sebry9"},"content":"            return TAG_COLOR_STYLES[1]; //blue"},{"lineNumber":85,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":86,"author":{"gitID":"Sebry9"},"content":"        case \"family\":"},{"lineNumber":87,"author":{"gitID":"Sebry9"},"content":"        case \"husband\":"},{"lineNumber":88,"author":{"gitID":"Sebry9"},"content":"            return TAG_COLOR_STYLES[3]; //green"},{"lineNumber":89,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":90,"author":{"gitID":"Sebry9"},"content":"        case \"enemy\":"},{"lineNumber":91,"author":{"gitID":"Sebry9"},"content":"        case \"owesMoney\":"},{"lineNumber":92,"author":{"gitID":"Sebry9"},"content":"            return TAG_COLOR_STYLES[2]; //red"},{"lineNumber":93,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":94,"author":{"gitID":"Sebry9"},"content":"        case \"boyfriend\":"},{"lineNumber":95,"author":{"gitID":"Sebry9"},"content":"        case \"girlfriend\":"},{"lineNumber":96,"author":{"gitID":"Sebry9"},"content":"            return TAG_COLOR_STYLES[5]; //purple"},{"lineNumber":97,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":98,"author":{"gitID":"Sebry9"},"content":"        case \"grandparent\":"},{"lineNumber":99,"author":{"gitID":"Sebry9"},"content":"        case \"neighbours\":"},{"lineNumber":100,"author":{"gitID":"Sebry9"},"content":"            return TAG_COLOR_STYLES[6]; //grey"},{"lineNumber":101,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":102,"author":{"gitID":"Sebry9"},"content":"        case \"colleagues\":"},{"lineNumber":103,"author":{"gitID":"Sebry9"},"content":"            return TAG_COLOR_STYLES[4]; //orange"},{"lineNumber":104,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":105,"author":{"gitID":"Sebry9"},"content":"        default:"},{"lineNumber":106,"author":{"gitID":"Sebry9"},"content":"            return \"\";"},{"lineNumber":107,"author":{"gitID":"Sebry9"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":110,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":111,"author":{"gitID":"Sebry9"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"Sebry9"},"content":"     * Creates the tag labels for {@code person}."},{"lineNumber":113,"author":{"gitID":"Sebry9"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"Sebry9"},"content":"    private void startTag(Person person) {"},{"lineNumber":115,"author":{"gitID":"Sebry9"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":116,"author":{"gitID":"Sebry9"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":117,"author":{"gitID":"Sebry9"},"content":"            tagLabel.getStyleClass().add(getTagColorStyleFor(tag.tagName));"},{"lineNumber":118,"author":{"gitID":"Sebry9"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":119,"author":{"gitID":"Sebry9"},"content":"        });"},{"lineNumber":120,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":122,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":123,"author":{"gitID":"Sebry9"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"Sebry9"},"content":"    public boolean equals(Object other) {"},{"lineNumber":125,"author":{"gitID":"Sebry9"},"content":"        // short circuit if same object"},{"lineNumber":126,"author":{"gitID":"Sebry9"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":127,"author":{"gitID":"Sebry9"},"content":"            return true;"},{"lineNumber":128,"author":{"gitID":"Sebry9"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":130,"author":{"gitID":"Sebry9"},"content":"        // instanceof handles nulls"},{"lineNumber":131,"author":{"gitID":"Sebry9"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":132,"author":{"gitID":"Sebry9"},"content":"            return false;"},{"lineNumber":133,"author":{"gitID":"Sebry9"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":135,"author":{"gitID":"Sebry9"},"content":"        // state check"},{"lineNumber":136,"author":{"gitID":"Sebry9"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":137,"author":{"gitID":"Sebry9"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":138,"author":{"gitID":"Sebry9"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":139,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"Sebry9"},"content":"}"}],"authorContributionMap":{"Sebry9":79,"-":61}},{"path":"src/main/java/seedu/address/commons/events/model/GoogleAuthentication.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.InputStream;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.InputStreamReader;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.api.client.auth.oauth2.Credential;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import com.google.api.client.http.HttpTransport;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import com.google.api.client.json.JsonFactory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import com.google.api.client.json.jackson2.JacksonFactory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import com.google.api.client.util.store.FileDataStoreFactory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import com.google.api.services.calendar.Calendar;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import com.google.api.services.calendar.CalendarScopes;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"cambioforma"},"content":"//@@author cambioforma"},{"lineNumber":23,"author":{"gitID":"cambioforma"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"cambioforma"},"content":" * Authenticates with oAuth Google API"},{"lineNumber":25,"author":{"gitID":"cambioforma"},"content":" */"},{"lineNumber":26,"author":{"gitID":"cambioforma"},"content":"public class GoogleAuthentication {"},{"lineNumber":27,"author":{"gitID":"cambioforma"},"content":"    /** Application name. */"},{"lineNumber":28,"author":{"gitID":"cambioforma"},"content":"    private static final String APPLICATION_NAME \u003d \"reInsurance\";"},{"lineNumber":29,"author":{"gitID":"cambioforma"},"content":""},{"lineNumber":30,"author":{"gitID":"cambioforma"},"content":"    /** Directory to store user credentials for this application. */"},{"lineNumber":31,"author":{"gitID":"cambioforma"},"content":"    private static final java.io.File DATA_STORE_DIR \u003d new java.io.File("},{"lineNumber":32,"author":{"gitID":"cambioforma"},"content":"            System.getProperty(\"user.home\"), \".credentials/calendar-java-quickstart\");"},{"lineNumber":33,"author":{"gitID":"cambioforma"},"content":""},{"lineNumber":34,"author":{"gitID":"cambioforma"},"content":"    /** Global instance of the {@link FileDataStoreFactory}. */"},{"lineNumber":35,"author":{"gitID":"cambioforma"},"content":"    private static FileDataStoreFactory dataStoreFactory;"},{"lineNumber":36,"author":{"gitID":"cambioforma"},"content":""},{"lineNumber":37,"author":{"gitID":"cambioforma"},"content":"    /** Global instance of the JSON factory. */"},{"lineNumber":38,"author":{"gitID":"cambioforma"},"content":"    private static final JsonFactory JSON_FACTORY \u003d"},{"lineNumber":39,"author":{"gitID":"cambioforma"},"content":"            JacksonFactory.getDefaultInstance();"},{"lineNumber":40,"author":{"gitID":"cambioforma"},"content":""},{"lineNumber":41,"author":{"gitID":"cambioforma"},"content":"    /** Global instance of the HTTP transport. */"},{"lineNumber":42,"author":{"gitID":"cambioforma"},"content":"    private static HttpTransport httpTransport;"},{"lineNumber":43,"author":{"gitID":"cambioforma"},"content":""},{"lineNumber":44,"author":{"gitID":"cambioforma"},"content":"    /** Global instance of the scopes required by this quickstart."},{"lineNumber":45,"author":{"gitID":"cambioforma"},"content":"     *"},{"lineNumber":46,"author":{"gitID":"cambioforma"},"content":"     * If modifying these scopes, delete your previously saved credentials"},{"lineNumber":47,"author":{"gitID":"cambioforma"},"content":"     * at ~/.credentials/calendar-java-quickstart"},{"lineNumber":48,"author":{"gitID":"cambioforma"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"cambioforma"},"content":"    private static final List\u003cString\u003e SCOPES \u003d Arrays.asList(CalendarScopes.CALENDAR);"},{"lineNumber":50,"author":{"gitID":"cambioforma"},"content":""},{"lineNumber":51,"author":{"gitID":"cambioforma"},"content":"    static {"},{"lineNumber":52,"author":{"gitID":"cambioforma"},"content":"        try {"},{"lineNumber":53,"author":{"gitID":"cambioforma"},"content":"            httpTransport \u003d GoogleNetHttpTransport.newTrustedTransport();"},{"lineNumber":54,"author":{"gitID":"cambioforma"},"content":"            dataStoreFactory \u003d new FileDataStoreFactory(DATA_STORE_DIR);"},{"lineNumber":55,"author":{"gitID":"cambioforma"},"content":"        } catch (Throwable t) {"},{"lineNumber":56,"author":{"gitID":"cambioforma"},"content":"            t.printStackTrace();"},{"lineNumber":57,"author":{"gitID":"cambioforma"},"content":"            System.exit(1);"},{"lineNumber":58,"author":{"gitID":"cambioforma"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"cambioforma"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"cambioforma"},"content":""},{"lineNumber":61,"author":{"gitID":"cambioforma"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"cambioforma"},"content":"     * Creates an authorized Credential object."},{"lineNumber":63,"author":{"gitID":"cambioforma"},"content":"     * @return an authorized Credential object."},{"lineNumber":64,"author":{"gitID":"cambioforma"},"content":"     * @throws IOException if error reading oAuth key client_secret.json"},{"lineNumber":65,"author":{"gitID":"cambioforma"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"cambioforma"},"content":"    public static Credential authorize() throws IOException {"},{"lineNumber":67,"author":{"gitID":"cambioforma"},"content":"        // Load client secrets."},{"lineNumber":68,"author":{"gitID":"cambioforma"},"content":"        InputStream in \u003d"},{"lineNumber":69,"author":{"gitID":"cambioforma"},"content":"                BirthdayChangedEvent.class.getResourceAsStream(\"/oAuth/client_secret.json\");"},{"lineNumber":70,"author":{"gitID":"cambioforma"},"content":"        GoogleClientSecrets clientSecrets \u003d"},{"lineNumber":71,"author":{"gitID":"cambioforma"},"content":"                GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(in));"},{"lineNumber":72,"author":{"gitID":"cambioforma"},"content":""},{"lineNumber":73,"author":{"gitID":"cambioforma"},"content":"        // Build flow and trigger user authorization request."},{"lineNumber":74,"author":{"gitID":"cambioforma"},"content":"        GoogleAuthorizationCodeFlow flow \u003d"},{"lineNumber":75,"author":{"gitID":"cambioforma"},"content":"                new GoogleAuthorizationCodeFlow.Builder("},{"lineNumber":76,"author":{"gitID":"cambioforma"},"content":"                        httpTransport, JSON_FACTORY, clientSecrets, SCOPES)"},{"lineNumber":77,"author":{"gitID":"cambioforma"},"content":"                        .setDataStoreFactory(dataStoreFactory)"},{"lineNumber":78,"author":{"gitID":"cambioforma"},"content":"                        .setAccessType(\"offline\")"},{"lineNumber":79,"author":{"gitID":"cambioforma"},"content":"                        .build();"},{"lineNumber":80,"author":{"gitID":"cambioforma"},"content":"        Credential credential \u003d new AuthorizationCodeInstalledApp("},{"lineNumber":81,"author":{"gitID":"cambioforma"},"content":"                flow, new LocalServerReceiver()).authorize(\"user\");"},{"lineNumber":82,"author":{"gitID":"cambioforma"},"content":"        System.out.println("},{"lineNumber":83,"author":{"gitID":"cambioforma"},"content":"                \"Credentials saved to \" + DATA_STORE_DIR.getAbsolutePath());"},{"lineNumber":84,"author":{"gitID":"cambioforma"},"content":"        return credential;"},{"lineNumber":85,"author":{"gitID":"cambioforma"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"cambioforma"},"content":""},{"lineNumber":87,"author":{"gitID":"cambioforma"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"cambioforma"},"content":"     * Build and return an authorized Calendar client service."},{"lineNumber":89,"author":{"gitID":"cambioforma"},"content":"     * @return an authorized Calendar client service"},{"lineNumber":90,"author":{"gitID":"cambioforma"},"content":"     * @throws IOException if error reading oAuth key client_secret.json"},{"lineNumber":91,"author":{"gitID":"cambioforma"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"cambioforma"},"content":"    public static Calendar getCalendarService() throws IOException {"},{"lineNumber":93,"author":{"gitID":"cambioforma"},"content":"        Credential credential \u003d authorize();"},{"lineNumber":94,"author":{"gitID":"cambioforma"},"content":"        return new com.google.api.services.calendar.Calendar.Builder("},{"lineNumber":95,"author":{"gitID":"cambioforma"},"content":"                httpTransport, JSON_FACTORY, credential)"},{"lineNumber":96,"author":{"gitID":"cambioforma"},"content":"                .setApplicationName(APPLICATION_NAME)"},{"lineNumber":97,"author":{"gitID":"cambioforma"},"content":"                .build();"},{"lineNumber":98,"author":{"gitID":"cambioforma"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"cambioforma"},"content":"}"}],"authorContributionMap":{"cambioforma":78,"-":21}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Sebry9"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"Sebry9"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT;"},{"lineNumber":6,"author":{"gitID":"Sebry9"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":7,"author":{"gitID":"Sebry9"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"Sebry9"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":9,"author":{"gitID":"Sebry9"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INSURANCE;"},{"lineNumber":10,"author":{"gitID":"Sebry9"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":11,"author":{"gitID":"Sebry9"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":12,"author":{"gitID":"Sebry9"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitID":"Sebry9"},"content":"import seedu.address.model.Insurance.Insurance;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Appointment;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_GROUP,"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                PREFIX_TAG, PREFIX_BIRTHDAY, PREFIX_APPOINTMENT, PREFIX_INSURANCE);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_BIRTHDAY,"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                PREFIX_GROUP) || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            Group group \u003d ParserUtil.parseGroup(argMultimap.getValue(PREFIX_GROUP)).get();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            Birthday birthday \u003d ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY)).get();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            Appointment appointment \u003d null;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            if (argMultimap.getValue(PREFIX_APPOINTMENT).isPresent()) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                appointment \u003d ParserUtil.parseAppointment(argMultimap.getValue(PREFIX_APPOINTMENT)).get();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":64,"author":{"gitID":"Sebry9"},"content":"            Set\u003cInsurance\u003e insuranceList \u003d ParserUtil.parseInsurance"},{"lineNumber":65,"author":{"gitID":"Sebry9"},"content":"                (argMultimap.getAllValues(PREFIX_INSURANCE));"},{"lineNumber":66,"author":{"gitID":"Sebry9"},"content":"            Person person \u003d new Person(name, phone, email, address,"},{"lineNumber":67,"author":{"gitID":"Sebry9"},"content":"                tagList, birthday, appointment, group, insuranceList);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sebry9":15,"-":68}},{"path":"src/main/java/seedu/address/commons/events/model/AppointmentChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.text.ParseException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.api.client.util.DateTime;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.api.services.calendar.Calendar;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import com.google.api.services.calendar.model.Event;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import com.google.api.services.calendar.model.EventDateTime;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import com.google.api.services.calendar.model.EventReminder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"cambioforma"},"content":"//@@author cambioforma"},{"lineNumber":18,"author":{"gitID":"cambioforma"},"content":""},{"lineNumber":19,"author":{"gitID":"cambioforma"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"cambioforma"},"content":" * Indicates when a person\u0027s birthday has been changed"},{"lineNumber":21,"author":{"gitID":"cambioforma"},"content":" */"},{"lineNumber":22,"author":{"gitID":"cambioforma"},"content":"public class AppointmentChangedEvent extends BaseEvent {"},{"lineNumber":23,"author":{"gitID":"cambioforma"},"content":""},{"lineNumber":24,"author":{"gitID":"cambioforma"},"content":""},{"lineNumber":25,"author":{"gitID":"cambioforma"},"content":"    public final Person data;"},{"lineNumber":26,"author":{"gitID":"cambioforma"},"content":""},{"lineNumber":27,"author":{"gitID":"cambioforma"},"content":"    public AppointmentChangedEvent(Person data, String command) {"},{"lineNumber":28,"author":{"gitID":"cambioforma"},"content":"        this.data \u003d data;"},{"lineNumber":29,"author":{"gitID":"cambioforma"},"content":"        try {"},{"lineNumber":30,"author":{"gitID":"cambioforma"},"content":"            if (command.equals(\"add\")) {"},{"lineNumber":31,"author":{"gitID":"cambioforma"},"content":"                addAppointmentToCalendar();"},{"lineNumber":32,"author":{"gitID":"cambioforma"},"content":"            }"},{"lineNumber":33,"author":{"gitID":"cambioforma"},"content":"        } catch (IOException e) {"},{"lineNumber":34,"author":{"gitID":"cambioforma"},"content":"            e.printStackTrace();"},{"lineNumber":35,"author":{"gitID":"cambioforma"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"cambioforma"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"cambioforma"},"content":""},{"lineNumber":38,"author":{"gitID":"cambioforma"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"cambioforma"},"content":"     * Add birthday event of person to the Google Calendar"},{"lineNumber":40,"author":{"gitID":"cambioforma"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"cambioforma"},"content":"    private void addAppointmentToCalendar() throws IOException {"},{"lineNumber":42,"author":{"gitID":"cambioforma"},"content":"        Calendar service \u003d GoogleAuthentication.getCalendarService();"},{"lineNumber":43,"author":{"gitID":"cambioforma"},"content":""},{"lineNumber":44,"author":{"gitID":"cambioforma"},"content":"        Event event \u003d new Event()"},{"lineNumber":45,"author":{"gitID":"cambioforma"},"content":"                .setSummary(data.getName().fullName)"},{"lineNumber":46,"author":{"gitID":"cambioforma"},"content":"                .setDescription(\"appointment\");"},{"lineNumber":47,"author":{"gitID":"cambioforma"},"content":""},{"lineNumber":48,"author":{"gitID":"cambioforma"},"content":""},{"lineNumber":49,"author":{"gitID":"cambioforma"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"cambioforma"},"content":"            String startDateString \u003d data.getBirthday().value;"},{"lineNumber":51,"author":{"gitID":"cambioforma"},"content":"            SimpleDateFormat originalFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"},{"lineNumber":52,"author":{"gitID":"cambioforma"},"content":"            SimpleDateFormat requiredFormat \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"},{"lineNumber":53,"author":{"gitID":"cambioforma"},"content":"            startDateString \u003d requiredFormat.format(originalFormat.parse(startDateString));"},{"lineNumber":54,"author":{"gitID":"cambioforma"},"content":"            DateTime startDateTime \u003d new DateTime(startDateString);"},{"lineNumber":55,"author":{"gitID":"cambioforma"},"content":"            EventDateTime start \u003d new EventDateTime()"},{"lineNumber":56,"author":{"gitID":"cambioforma"},"content":"                    .setDate(startDateTime);"},{"lineNumber":57,"author":{"gitID":"cambioforma"},"content":"            event.setStart(start);"},{"lineNumber":58,"author":{"gitID":"cambioforma"},"content":"            event.setEnd(start);"},{"lineNumber":59,"author":{"gitID":"cambioforma"},"content":""},{"lineNumber":60,"author":{"gitID":"cambioforma"},"content":"        } catch (ParseException e) {"},{"lineNumber":61,"author":{"gitID":"cambioforma"},"content":"            e.printStackTrace();"},{"lineNumber":62,"author":{"gitID":"cambioforma"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"cambioforma"},"content":""},{"lineNumber":64,"author":{"gitID":"cambioforma"},"content":"        EventReminder[] reminderOverrides \u003d new EventReminder[] {"},{"lineNumber":65,"author":{"gitID":"cambioforma"},"content":"                new EventReminder().setMethod(\"popup\").setMinutes(24 * 60)"},{"lineNumber":66,"author":{"gitID":"cambioforma"},"content":"        };"},{"lineNumber":67,"author":{"gitID":"cambioforma"},"content":"        Event.Reminders reminders \u003d new Event.Reminders()"},{"lineNumber":68,"author":{"gitID":"cambioforma"},"content":"                .setUseDefault(false)"},{"lineNumber":69,"author":{"gitID":"cambioforma"},"content":"                .setOverrides(Arrays.asList(reminderOverrides));"},{"lineNumber":70,"author":{"gitID":"cambioforma"},"content":"        event.setReminders(reminders);"},{"lineNumber":71,"author":{"gitID":"cambioforma"},"content":""},{"lineNumber":72,"author":{"gitID":"cambioforma"},"content":"        String calendarId \u003d \"primary\";"},{"lineNumber":73,"author":{"gitID":"cambioforma"},"content":"        event \u003d service.events().insert(calendarId, event).execute();"},{"lineNumber":74,"author":{"gitID":"cambioforma"},"content":"        System.out.printf(\"Event created: %s\\n\", event.getHtmlLink());"},{"lineNumber":75,"author":{"gitID":"cambioforma"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"cambioforma"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"cambioforma"},"content":"    public String toString() {"},{"lineNumber":78,"author":{"gitID":"cambioforma"},"content":"        return \"new birthday \" + data.getBirthday();"},{"lineNumber":79,"author":{"gitID":"cambioforma"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"cambioforma"},"content":"}"},{"lineNumber":81,"author":{"gitID":"cambioforma"},"content":""}],"authorContributionMap":{"cambioforma":65,"-":16}},{"path":"src/main/java/seedu/address/commons/events/model/BirthdayChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.text.ParseException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.api.client.util.DateTime;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.api.services.calendar.Calendar;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import com.google.api.services.calendar.model.Event;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import com.google.api.services.calendar.model.EventDateTime;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import com.google.api.services.calendar.model.EventReminder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"cambioforma"},"content":"//@@author cambioforma"},{"lineNumber":18,"author":{"gitID":"cambioforma"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"cambioforma"},"content":" * Indicates when a person\u0027s birthday has been changed"},{"lineNumber":20,"author":{"gitID":"cambioforma"},"content":" */"},{"lineNumber":21,"author":{"gitID":"cambioforma"},"content":"public class BirthdayChangedEvent extends BaseEvent {"},{"lineNumber":22,"author":{"gitID":"cambioforma"},"content":""},{"lineNumber":23,"author":{"gitID":"cambioforma"},"content":""},{"lineNumber":24,"author":{"gitID":"cambioforma"},"content":"    public final Person data;"},{"lineNumber":25,"author":{"gitID":"cambioforma"},"content":""},{"lineNumber":26,"author":{"gitID":"cambioforma"},"content":"    public BirthdayChangedEvent(Person data, String command) {"},{"lineNumber":27,"author":{"gitID":"cambioforma"},"content":"        this.data \u003d data;"},{"lineNumber":28,"author":{"gitID":"cambioforma"},"content":"        try {"},{"lineNumber":29,"author":{"gitID":"cambioforma"},"content":"            if (command.equals(\"add\")) {"},{"lineNumber":30,"author":{"gitID":"cambioforma"},"content":"                addBirthdayToCalendar();"},{"lineNumber":31,"author":{"gitID":"cambioforma"},"content":"            }"},{"lineNumber":32,"author":{"gitID":"cambioforma"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitID":"cambioforma"},"content":"            e.printStackTrace();"},{"lineNumber":34,"author":{"gitID":"cambioforma"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"cambioforma"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"cambioforma"},"content":""},{"lineNumber":37,"author":{"gitID":"cambioforma"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"cambioforma"},"content":"     * Add birthday event of person to the Google Calendar"},{"lineNumber":39,"author":{"gitID":"cambioforma"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"cambioforma"},"content":"    private void addBirthdayToCalendar() throws IOException {"},{"lineNumber":41,"author":{"gitID":"cambioforma"},"content":"        Calendar service \u003d GoogleAuthentication.getCalendarService();"},{"lineNumber":42,"author":{"gitID":"cambioforma"},"content":""},{"lineNumber":43,"author":{"gitID":"cambioforma"},"content":"        Event event \u003d new Event()"},{"lineNumber":44,"author":{"gitID":"cambioforma"},"content":"                .setSummary(data.getName().fullName)"},{"lineNumber":45,"author":{"gitID":"cambioforma"},"content":"                .setDescription(\"birthday\");"},{"lineNumber":46,"author":{"gitID":"cambioforma"},"content":""},{"lineNumber":47,"author":{"gitID":"cambioforma"},"content":""},{"lineNumber":48,"author":{"gitID":"cambioforma"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"cambioforma"},"content":"            String startDateString \u003d data.getBirthday().value;"},{"lineNumber":50,"author":{"gitID":"cambioforma"},"content":"            SimpleDateFormat originalFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"},{"lineNumber":51,"author":{"gitID":"cambioforma"},"content":"            SimpleDateFormat requiredFormat \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"},{"lineNumber":52,"author":{"gitID":"cambioforma"},"content":"            startDateString \u003d requiredFormat.format(originalFormat.parse(startDateString));"},{"lineNumber":53,"author":{"gitID":"cambioforma"},"content":"            DateTime startDateTime \u003d new DateTime(startDateString);"},{"lineNumber":54,"author":{"gitID":"cambioforma"},"content":"            EventDateTime start \u003d new EventDateTime()"},{"lineNumber":55,"author":{"gitID":"cambioforma"},"content":"                    .setDate(startDateTime);"},{"lineNumber":56,"author":{"gitID":"cambioforma"},"content":"            event.setStart(start);"},{"lineNumber":57,"author":{"gitID":"cambioforma"},"content":"            event.setEnd(start);"},{"lineNumber":58,"author":{"gitID":"cambioforma"},"content":""},{"lineNumber":59,"author":{"gitID":"cambioforma"},"content":"        } catch (ParseException e) {"},{"lineNumber":60,"author":{"gitID":"cambioforma"},"content":"            e.printStackTrace();"},{"lineNumber":61,"author":{"gitID":"cambioforma"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"cambioforma"},"content":""},{"lineNumber":63,"author":{"gitID":"cambioforma"},"content":"        EventReminder[] reminderOverrides \u003d new EventReminder[] {"},{"lineNumber":64,"author":{"gitID":"cambioforma"},"content":"                new EventReminder().setMethod(\"popup\").setMinutes(24 * 60)"},{"lineNumber":65,"author":{"gitID":"cambioforma"},"content":"        };"},{"lineNumber":66,"author":{"gitID":"cambioforma"},"content":"        Event.Reminders reminders \u003d new Event.Reminders()"},{"lineNumber":67,"author":{"gitID":"cambioforma"},"content":"                .setUseDefault(false)"},{"lineNumber":68,"author":{"gitID":"cambioforma"},"content":"                .setOverrides(Arrays.asList(reminderOverrides));"},{"lineNumber":69,"author":{"gitID":"cambioforma"},"content":"        event.setReminders(reminders);"},{"lineNumber":70,"author":{"gitID":"cambioforma"},"content":""},{"lineNumber":71,"author":{"gitID":"cambioforma"},"content":"        String[] recurrence \u003d new String[] {\"RRULE:FREQ\u003dYEARLY;\"};"},{"lineNumber":72,"author":{"gitID":"cambioforma"},"content":"        event.setRecurrence(Arrays.asList(recurrence));"},{"lineNumber":73,"author":{"gitID":"cambioforma"},"content":""},{"lineNumber":74,"author":{"gitID":"cambioforma"},"content":"        String calendarId \u003d \"primary\";"},{"lineNumber":75,"author":{"gitID":"cambioforma"},"content":"        event \u003d service.events().insert(calendarId, event).execute();"},{"lineNumber":76,"author":{"gitID":"cambioforma"},"content":"        System.out.printf(\"Event created: %s\\n\", event.getHtmlLink());"},{"lineNumber":77,"author":{"gitID":"cambioforma"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"cambioforma"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"cambioforma"},"content":"    public String toString() {"},{"lineNumber":80,"author":{"gitID":"cambioforma"},"content":"        return \"new birthday \" + data.getBirthday();"},{"lineNumber":81,"author":{"gitID":"cambioforma"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"cambioforma"},"content":"}"},{"lineNumber":83,"author":{"gitID":"cambioforma"},"content":""}],"authorContributionMap":{"cambioforma":67,"-":16}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CountCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExportCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindTagCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":56,"author":{"gitID":"Sebry9"},"content":"        case AddCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":60,"author":{"gitID":"Sebry9"},"content":"        case EditCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":64,"author":{"gitID":"Sebry9"},"content":"        case SelectCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":68,"author":{"gitID":"Sebry9"},"content":"        case DeleteCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":72,"author":{"gitID":"Sebry9"},"content":"        case ClearCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":73,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":77,"author":{"gitID":"Sebry9"},"content":"        case FindCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        case FindTagCommand.COMMAND_WORD:"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            return new FindTagCommandParser().parse(arguments);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":84,"author":{"gitID":"Sebry9"},"content":"        case ListCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        case CountCommand.COMMAND_WORD:"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return new CountCommand();"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":91,"author":{"gitID":"Sebry9"},"content":"        case HistoryCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":98,"author":{"gitID":"Sebry9"},"content":"        case HelpCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":102,"author":{"gitID":"Sebry9"},"content":"        case UndoCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":106,"author":{"gitID":"Sebry9"},"content":"        case RedoCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        case ExportCommand.COMMAND_WORD:"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            return new ExportCommandParser().parse(arguments);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        case SortCommand.COMMAND_WORD:"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return new SortCommand();"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sebry9":12,"-":108}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_BIRTHDAY \u003d new Prefix(\"b/\");"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_APPOINTMENT \u003d new Prefix(\"d/\");"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_GROUP \u003d new Prefix(\"g/\");"},{"lineNumber":17,"author":{"gitID":"Sebry9"},"content":"    public static final Prefix PREFIX_INSURANCE \u003d new Prefix(\"i/\");"},{"lineNumber":18,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sebry9":1,"-":17}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":14,"author":{"gitID":"Sebry9"},"content":"import seedu.address.model.Insurance.Insurance;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.export.ExportType;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.export.exceptions.IncorrectExportTypeException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Appointment;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":28,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e group} into an {@code Optional\u003cGroup\u003e} if {@code group} is present."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":177,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    public static Optional\u003cGroup\u003e parseGroup (Optional\u003cString\u003e group) throws IllegalValueException {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        requireNonNull(group);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        return group.isPresent() ? Optional.of(new Group (group.get())) : Optional.empty();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * Parses a {@code String birthday} into a {@code Birthday}."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":185,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code birthday} is invalid."},{"lineNumber":187,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    public static Birthday parseBirthday(String birthday) throws IllegalValueException {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        requireNonNull(birthday);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        String trimmedBirthday \u003d birthday.trim();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        if (!Birthday.isValidBirthday(trimmedBirthday)) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        return new Birthday(trimmedBirthday);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e birthday} into an {@code Optional\u003cBirthday\u003e} if {@code birthday} is present."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    public static Optional\u003cBirthday\u003e parseBirthday(Optional\u003cString\u003e birthday) throws IllegalValueException {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        requireNonNull(birthday);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        return birthday.isPresent() ? Optional.of(parseBirthday(birthday.get())) : Optional.empty();"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"Sebry9"},"content":"     * Parses a {@code String insurance} into a {@code Insurance}."},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":209,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":210,"author":{"gitID":"Sebry9"},"content":"     * @throws IllegalValueException if the given {@code insurance} is invalid."},{"lineNumber":211,"author":{"gitID":"Sebry9"},"content":"     */"},{"lineNumber":212,"author":{"gitID":"Sebry9"},"content":"    public static Insurance parseInsurance(String insurance) throws IllegalValueException {"},{"lineNumber":213,"author":{"gitID":"Sebry9"},"content":"        requireNonNull(insurance);"},{"lineNumber":214,"author":{"gitID":"Sebry9"},"content":"        String trimmedInsurance \u003d insurance.trim();"},{"lineNumber":215,"author":{"gitID":"Sebry9"},"content":"        if (!Insurance.isValidInsurance(trimmedInsurance)) {"},{"lineNumber":216,"author":{"gitID":"Sebry9"},"content":"            throw new IllegalValueException(Insurance.MESSAGE_INSURANCE_CONSTRAINTS);"},{"lineNumber":217,"author":{"gitID":"Sebry9"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"Sebry9"},"content":"        return new Insurance(trimmedInsurance);"},{"lineNumber":219,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":221,"author":{"gitID":"Sebry9"},"content":"    /**"},{"lineNumber":222,"author":{"gitID":"Sebry9"},"content":"     * Parses {@code Collection\u003cString\u003e insurances} into a {@code Set\u003cInsurance\u003e}."},{"lineNumber":223,"author":{"gitID":"Sebry9"},"content":"     */"},{"lineNumber":224,"author":{"gitID":"Sebry9"},"content":"    public static Set\u003cInsurance\u003e parseInsurance(Collection\u003cString\u003e insurances) throws IllegalValueException {"},{"lineNumber":225,"author":{"gitID":"Sebry9"},"content":"        requireNonNull(insurances);"},{"lineNumber":226,"author":{"gitID":"Sebry9"},"content":"        final Set\u003cInsurance\u003e insuranceSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":227,"author":{"gitID":"Sebry9"},"content":"        for (String insuranceName : insurances) {"},{"lineNumber":228,"author":{"gitID":"Sebry9"},"content":"            insuranceSet.add(parseInsurance(insuranceName));"},{"lineNumber":229,"author":{"gitID":"Sebry9"},"content":"        }"},{"lineNumber":230,"author":{"gitID":"Sebry9"},"content":"        return insuranceSet;"},{"lineNumber":231,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":233,"author":{"gitID":"Sebry9"},"content":"    /**"},{"lineNumber":234,"author":{"gitID":"Sebry9"},"content":"     * Parses a {@code Optional\u003cString\u003e appointment} into an {@code Optional\u003cAppointment\u003e} if {@code appointment}"},{"lineNumber":235,"author":{"gitID":"Sebry9"},"content":"     * is present."},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":237,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    public static Optional\u003cAppointment\u003e parseAppointment(Optional\u003cString\u003e appointment) throws IllegalValueException {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        requireNonNull(appointment);"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        return appointment.isPresent() ? Optional.of(parseAppointment(appointment.get())) : Optional.empty();"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * Parses a {@code String appointment} into a {@code Appointment}."},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":246,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code appointment} is invalid."},{"lineNumber":248,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    public static Appointment parseAppointment(String appointment) throws IllegalValueException {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        requireNonNull(appointment);"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        String trimmedAppointment \u003d appointment.trim();"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        if (!Appointment.isValidAppointment(trimmedAppointment)) {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Appointment.MESSAGE_APPOINTMENT_CONSTRAINTS);"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        return new Appointment(trimmedAppointment);"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * @param exportType"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * @return the corresponding ExportType"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * @throws IllegalArgumentException"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    public static ExportType parseExportType(String exportType) throws IllegalArgumentException {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        requireNonNull(exportType);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        String trimmedExportType \u003d exportType.trim().toUpperCase();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        if (!ExportType.isValidExportType(trimmedExportType)) {"},{"lineNumber":267,"author":{"gitID":"-"},"content":"            throw new IncorrectExportTypeException();"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        return ExportType.valueOf(trimmedExportType);"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sebry9":30,"-":242}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Deletes a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":20,"author":{"gitID":"Sebry9"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"d\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \": Deletes the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Person personToDelete;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        requireNonNull(personToDelete);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteCommand) other).personToDelete));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sebry9":1,"-":67}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":11,"author":{"gitID":"Sebry9"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"l\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sebry9":1,"-":20}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INSURANCE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":25,"author":{"gitID":"Sebry9"},"content":"import seedu.address.model.Insurance.Insurance;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG,"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                        PREFIX_BIRTHDAY, PREFIX_APPOINTMENT, PREFIX_GROUP, PREFIX_INSURANCE);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY))"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                    .ifPresent(editPersonDescriptor::setBirthday);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            if (argMultimap.getValue(PREFIX_APPOINTMENT).isPresent()) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                ParserUtil.parseAppointment(argMultimap.getValue(PREFIX_APPOINTMENT))"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                        .ifPresent(editPersonDescriptor::setAppointment);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            ParserUtil.parseGroup(argMultimap.getValue(PREFIX_GROUP)).ifPresent(editPersonDescriptor::setGroup);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":66,"author":{"gitID":"Sebry9"},"content":"            parseInsuranceForEdit(argMultimap.getAllValues(PREFIX_INSURANCE))"},{"lineNumber":67,"author":{"gitID":"Sebry9"},"content":"                .ifPresent(editPersonDescriptor::setInsurances);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"Sebry9"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"Sebry9"},"content":"     * Parses {@code Collection\u003cString\u003e insurances} into a {@code Set\u003cInsurance\u003e} if {@code insurances} is non-empty."},{"lineNumber":96,"author":{"gitID":"Sebry9"},"content":"     * If {@code insurances} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":97,"author":{"gitID":"Sebry9"},"content":"     * {@code Set\u003cInsurance\u003e} containing zero insurances."},{"lineNumber":98,"author":{"gitID":"Sebry9"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"Sebry9"},"content":"    private Optional\u003cSet\u003cInsurance\u003e\u003e parseInsuranceForEdit(Collection\u003cString\u003e insurances) throws IllegalValueException {"},{"lineNumber":100,"author":{"gitID":"Sebry9"},"content":"        assert insurances !\u003d null;"},{"lineNumber":101,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":102,"author":{"gitID":"Sebry9"},"content":"        if (insurances.isEmpty()) {"},{"lineNumber":103,"author":{"gitID":"Sebry9"},"content":"            return Optional.empty();"},{"lineNumber":104,"author":{"gitID":"Sebry9"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"Sebry9"},"content":"        Collection\u003cString\u003e insuranceSet \u003d insurances.size() \u003d\u003d 1"},{"lineNumber":106,"author":{"gitID":"Sebry9"},"content":"            \u0026\u0026 insurances.contains(\"\") ? Collections.emptySet() : insurances;"},{"lineNumber":107,"author":{"gitID":"Sebry9"},"content":"        return Optional.of(ParserUtil.parseInsurance(insuranceSet));"},{"lineNumber":108,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sebry9":19,"-":91}},{"path":"src/main/java/seedu/address/logic/commands/CountCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"daviddalmaso"},"content":"//@@author daviddalmaso"},{"lineNumber":6,"author":{"gitID":"daviddalmaso"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"daviddalmaso"},"content":" * Return a count of all persons in the ClientBook"},{"lineNumber":8,"author":{"gitID":"daviddalmaso"},"content":" */"},{"lineNumber":9,"author":{"gitID":"daviddalmaso"},"content":"public class CountCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":11,"author":{"gitID":"daviddalmaso"},"content":"    public static final String COMMAND_WORD \u003d \"count\";"},{"lineNumber":12,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":13,"author":{"gitID":"daviddalmaso"},"content":"    public static final String MESSAGE_SUCCESS \u003d \" persons in the address book\";"},{"lineNumber":14,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":15,"author":{"gitID":"daviddalmaso"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"daviddalmaso"},"content":"    public CommandResult execute() {"},{"lineNumber":17,"author":{"gitID":"daviddalmaso"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":18,"author":{"gitID":"daviddalmaso"},"content":"        return new CommandResult(Integer.toString(model.getAddressBook().getPersonList().size()) + MESSAGE_SUCCESS);"},{"lineNumber":19,"author":{"gitID":"daviddalmaso"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"daviddalmaso"},"content":"}"}],"authorContributionMap":{"daviddalmaso":16,"-":4}},{"path":"src/main/java/seedu/address/logic/commands/RedoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Redo the previously undone command."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class RedoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";"},{"lineNumber":16,"author":{"gitID":"Sebry9"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"r\";"},{"lineNumber":17,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canRedo()) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        undoRedoStack.popRedo().redo();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sebry9":2,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/SortCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Sorts all persons in the address book to the user."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"limzk1994"},"content":"//@@author limzk1994"},{"lineNumber":13,"author":{"gitID":"limzk1994"},"content":"public class SortCommand extends UndoableCommand {"},{"lineNumber":14,"author":{"gitID":"limzk1994"},"content":""},{"lineNumber":15,"author":{"gitID":"limzk1994"},"content":"    public static final String COMMAND_WORD \u003d \"sort\";"},{"lineNumber":16,"author":{"gitID":"limzk1994"},"content":""},{"lineNumber":17,"author":{"gitID":"limzk1994"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Sorted all clients!\";"},{"lineNumber":18,"author":{"gitID":"limzk1994"},"content":""},{"lineNumber":19,"author":{"gitID":"limzk1994"},"content":"    public SortCommand(){"},{"lineNumber":20,"author":{"gitID":"limzk1994"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"limzk1994"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"limzk1994"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":23,"author":{"gitID":"limzk1994"},"content":""},{"lineNumber":24,"author":{"gitID":"limzk1994"},"content":"        ObservableList\u003cPerson\u003e shownList \u003d model.getFilteredPersonList();"},{"lineNumber":25,"author":{"gitID":"limzk1994"},"content":"        if (shownList.isEmpty()) {"},{"lineNumber":26,"author":{"gitID":"limzk1994"},"content":"            throw new CommandException(Messages.MESSAGE_PERSON_LIST_EMPTY);"},{"lineNumber":27,"author":{"gitID":"limzk1994"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"limzk1994"},"content":"        model.sortFilteredPersonList(shownList);"},{"lineNumber":29,"author":{"gitID":"limzk1994"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"limzk1994"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"limzk1994"},"content":"}"}],"authorContributionMap":{"-":11,"limzk1994":20}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Clears the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":13,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":14,"author":{"gitID":"Sebry9"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"c\";"},{"lineNumber":15,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        model.resetData(new AddressBook());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sebry9":3,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Sebry9"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"Sebry9"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT;"},{"lineNumber":6,"author":{"gitID":"Sebry9"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":7,"author":{"gitID":"Sebry9"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"Sebry9"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":9,"author":{"gitID":"Sebry9"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INSURANCE;"},{"lineNumber":10,"author":{"gitID":"Sebry9"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":11,"author":{"gitID":"Sebry9"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":12,"author":{"gitID":"Sebry9"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":25,"author":{"gitID":"Sebry9"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"a\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + PREFIX_BIRTHDAY + \"BIRTHDAY \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + PREFIX_APPOINTMENT + \"APPOINTMENT \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + PREFIX_BIRTHDAY + \"09-12-1994 \""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + PREFIX_APPOINTMENT + \"05-05-2018 \""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + PREFIX_GROUP + \"PRIORITY \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":45,"author":{"gitID":"Sebry9"},"content":"            + PREFIX_TAG + \"owesMoney \""},{"lineNumber":46,"author":{"gitID":"Sebry9"},"content":"            + PREFIX_INSURANCE + \"Health\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sebry9":14,"-":65}},{"path":"src/main/java/seedu/address/logic/commands/HelpCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Format full help instructions for every command for display."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class HelpCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";"},{"lineNumber":12,"author":{"gitID":"Sebry9"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"h\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sebry9":1,"-":23}},{"path":"src/main/java/seedu/address/logic/commands/HistoryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Lists all the commands entered by user from the start of app launch."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class HistoryCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"history\";"},{"lineNumber":18,"author":{"gitID":"Sebry9"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"his\";"},{"lineNumber":19,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        List\u003cString\u003e previousCommands \u003d history.getHistory();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        if (previousCommands.isEmpty()) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_NO_HISTORY);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        Collections.reverse(previousCommands);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        requireNonNull(history);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.history \u003d history;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sebry9":2,"-":38}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"Sebry9"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"s\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sebry9":1,"-":52}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":12,"author":{"gitID":"Sebry9"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"f\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sebry9":1,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/ExportCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.export.ExportType;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"daviddalmaso"},"content":"//@@author daviddalmaso"},{"lineNumber":9,"author":{"gitID":"daviddalmaso"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"daviddalmaso"},"content":" * Export different types of data from the application to the user"},{"lineNumber":11,"author":{"gitID":"daviddalmaso"},"content":" */"},{"lineNumber":12,"author":{"gitID":"daviddalmaso"},"content":"public class ExportCommand extends UndoableCommand {"},{"lineNumber":13,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":14,"author":{"gitID":"daviddalmaso"},"content":"    public static final String COMMAND_WORD \u003d \"export\";"},{"lineNumber":15,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":16,"author":{"gitID":"daviddalmaso"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":17,"author":{"gitID":"daviddalmaso"},"content":"            + \": Exports the specified type of content.\\n\""},{"lineNumber":18,"author":{"gitID":"daviddalmaso"},"content":"            + \"Parameters: ExportType (must be one of the following - calendar, portfolio)\\n\""},{"lineNumber":19,"author":{"gitID":"daviddalmaso"},"content":"            + \"Example: \" + COMMAND_WORD + \" portfolio\";"},{"lineNumber":20,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":21,"author":{"gitID":"daviddalmaso"},"content":"    public static final String PORTFOLIO_MESSAGE_SUCCESS \u003d"},{"lineNumber":22,"author":{"gitID":"daviddalmaso"},"content":"            \"Successfully exported portfolio to %1$s\";"},{"lineNumber":23,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":24,"author":{"gitID":"daviddalmaso"},"content":"    public static final String CALENDAR_MESSAGE_SUCCESS \u003d"},{"lineNumber":25,"author":{"gitID":"daviddalmaso"},"content":"            \"Successfully exported birthdays and appointments to Google Calendar\";"},{"lineNumber":26,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":27,"author":{"gitID":"daviddalmaso"},"content":"    public final UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":28,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":29,"author":{"gitID":"daviddalmaso"},"content":"    private ExportType typeToExport;"},{"lineNumber":30,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":31,"author":{"gitID":"daviddalmaso"},"content":"    public ExportCommand(ExportType typeToExport) {"},{"lineNumber":32,"author":{"gitID":"daviddalmaso"},"content":"        this.typeToExport \u003d typeToExport;"},{"lineNumber":33,"author":{"gitID":"daviddalmaso"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":35,"author":{"gitID":"daviddalmaso"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"daviddalmaso"},"content":"    protected CommandResult executeUndoableCommand() {"},{"lineNumber":37,"author":{"gitID":"daviddalmaso"},"content":"        requireNonNull(model);"},{"lineNumber":38,"author":{"gitID":"daviddalmaso"},"content":"        model.export(typeToExport);"},{"lineNumber":39,"author":{"gitID":"daviddalmaso"},"content":"        if (typeToExport.equals(ExportType.PORTFOLIO)) {"},{"lineNumber":40,"author":{"gitID":"daviddalmaso"},"content":"            return new CommandResult(String.format(PORTFOLIO_MESSAGE_SUCCESS,"},{"lineNumber":41,"author":{"gitID":"daviddalmaso"},"content":"                    userPrefs.getExportPortfolioFilePath()));"},{"lineNumber":42,"author":{"gitID":"daviddalmaso"},"content":"        } else {"},{"lineNumber":43,"author":{"gitID":"daviddalmaso"},"content":"            return new CommandResult(CALENDAR_MESSAGE_SUCCESS);"},{"lineNumber":44,"author":{"gitID":"daviddalmaso"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"daviddalmaso"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"daviddalmaso"},"content":"}"}],"authorContributionMap":{"daviddalmaso":39,"-":7}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Undo the previous {@code UndoableCommand}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class UndoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";"},{"lineNumber":16,"author":{"gitID":"Sebry9"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"u\";"},{"lineNumber":17,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canUndo()) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        undoRedoStack.popUndo().undo();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sebry9":2,"-":36}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"Sebry9"},"content":"import seedu.address.model.Insurance.Insurance;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Appointment;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private String birthday;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private String appointment;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private String group;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":46,"author":{"gitID":"Sebry9"},"content":"    private List\u003cXmlAdaptedInsurance\u003e insurances \u003d new ArrayList\u003c\u003e();"},{"lineNumber":47,"author":{"gitID":"Sebry9"},"content":"    @XmlElement"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"Sebry9"},"content":"    public XmlAdaptedPerson() {"},{"lineNumber":55,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"Sebry9"},"content":"    public XmlAdaptedPerson(String name, String phone, String email, String address, List\u003cXmlAdaptedTag\u003e tagged,"},{"lineNumber":62,"author":{"gitID":"Sebry9"},"content":"                            String birthday, String appointment, String group, List\u003cXmlAdaptedInsurance\u003e insurances) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        this.birthday \u003d birthday;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (appointment !\u003d null) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            this.appointment \u003d appointment;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.group \u003d group;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"Sebry9"},"content":"        if (insurances !\u003d null) {"},{"lineNumber":77,"author":{"gitID":"Sebry9"},"content":"            this.insurances \u003d new ArrayList\u003c\u003e(insurances);"},{"lineNumber":78,"author":{"gitID":"Sebry9"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        birthday \u003d source.getBirthday().value;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        group \u003d source.getGroup().groupName;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        if (source.getAppointment() \u003d\u003d null || source.getAppointment().equals(\"\")) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            appointment \u003d null;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            appointment \u003d source.getAppointment().value;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"Sebry9"},"content":"        insurances \u003d new ArrayList\u003c\u003e();"},{"lineNumber":103,"author":{"gitID":"Sebry9"},"content":"        for (Insurance insurance : source.getInsurance()) {"},{"lineNumber":104,"author":{"gitID":"Sebry9"},"content":"            insurances.add(new XmlAdaptedInsurance(insurance));"},{"lineNumber":105,"author":{"gitID":"Sebry9"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"Sebry9"},"content":"        final List\u003cInsurance\u003e personInsurance \u003d new ArrayList\u003c\u003e();"},{"lineNumber":120,"author":{"gitID":"Sebry9"},"content":"        for (XmlAdaptedInsurance insurance : insurances) {"},{"lineNumber":121,"author":{"gitID":"Sebry9"},"content":"            personInsurance.add(insurance.toModelType());"},{"lineNumber":122,"author":{"gitID":"Sebry9"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        if (this.birthday \u003d\u003d null) {"},{"lineNumber":157,"author":{"gitID":"Sebry9"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":158,"author":{"gitID":"Sebry9"},"content":"                Birthday.class.getSimpleName()));"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        if (!Birthday.isValidBirthday(this.birthday)) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        final Birthday birthday \u003d new Birthday(this.birthday);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        if (!Appointment.isValidAppointment(this.appointment)) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Appointment.MESSAGE_APPOINTMENT_CONSTRAINTS);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        final Appointment appointment \u003d new Appointment(this.appointment);"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        if (this.group \u003d\u003d null) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Group.class.getSimpleName()));"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        if (!Group.isValidGroup(this.group)) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Group.MESSAGE_GROUP_CONSTRAINTS);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        final Group group \u003d new Group(this.group);"},{"lineNumber":177,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":178,"author":{"gitID":"Sebry9"},"content":"        final Set\u003cInsurance\u003e insurance \u003d new HashSet\u003c\u003e(personInsurance);"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":181,"author":{"gitID":"Sebry9"},"content":"        return new Person(name, phone, email, address, tags, birthday, appointment, group, insurance);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":196,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":197,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":198,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(address, otherPerson.address)"},{"lineNumber":199,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(birthday, otherPerson.birthday)"},{"lineNumber":200,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(appointment, otherPerson.appointment)"},{"lineNumber":201,"author":{"gitID":"Sebry9"},"content":"                \u0026\u0026 insurances.equals(otherPerson.insurances)"},{"lineNumber":202,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sebry9":25,"-":179}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INSURANCE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":26,"author":{"gitID":"Sebry9"},"content":"import seedu.address.model.Insurance.Insurance;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Appointment;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":40,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":41,"author":{"gitID":"-"},"content":" */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":45,"author":{"gitID":"Sebry9"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"e\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":54,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":55,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_BIRTHDAY + \"BIRTHDAY] \""},{"lineNumber":56,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_APPOINTMENT + \"APPOINTMENT] \""},{"lineNumber":57,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_GROUP + \"GROUP]\""},{"lineNumber":58,"author":{"gitID":"Sebry9"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]\""},{"lineNumber":59,"author":{"gitID":"Sebry9"},"content":"            + \"[\" + PREFIX_INSURANCE + \"INSURANCE]...\\n\""},{"lineNumber":60,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":61,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":62,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        Birthday updatedBirthday \u003d editPersonDescriptor.getBirthday().orElse(personToEdit.getBirthday());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        Appointment updatedAppointment \u003d editPersonDescriptor.getAppointment().orElse(personToEdit.getAppointment());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        Group updatedGroup \u003d editPersonDescriptor.getGroup().orElse(personToEdit.getGroup());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":126,"author":{"gitID":"Sebry9"},"content":"        Set\u003cInsurance\u003e updateInsurances \u003d editPersonDescriptor.getInsurances().orElse(personToEdit.getInsurance());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, updatedBirthday,"},{"lineNumber":128,"author":{"gitID":"Sebry9"},"content":"                updatedAppointment, updatedGroup, updateInsurances);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        private Birthday birthday;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        private Appointment appointment;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        private Group group;"},{"lineNumber":162,"author":{"gitID":"Sebry9"},"content":"        private String totalCommission;"},{"lineNumber":163,"author":{"gitID":"Sebry9"},"content":"        private Set\u003cInsurance\u003e insurances;"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":169,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":170,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":171,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            setBirthday(toCopy.birthday);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            setAppointment(toCopy.appointment);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            setGroup(toCopy.group);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":181,"author":{"gitID":"Sebry9"},"content":"            setInsurances(toCopy.insurances);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":185,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":186,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.tags,"},{"lineNumber":189,"author":{"gitID":"-"},"content":"                    this.birthday, this.appointment, this.insurances, this.group);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"        public void setBirthday(Birthday birthday) {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            this.birthday \u003d birthday;"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"        public Optional\u003cBirthday\u003e getBirthday() {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(birthday);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"        public void setAppointment(Appointment appointment) {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"            this.appointment \u003d appointment;"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"        public Optional\u003cAppointment\u003e getAppointment() {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(appointment);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"        public void setGroup(Group group) {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            this.group \u003d group;"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"        public Optional\u003cGroup\u003e getGroup() {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(group);"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"Sebry9"},"content":"        public void setCommission(String commission) {"},{"lineNumber":249,"author":{"gitID":"Sebry9"},"content":"            this.totalCommission \u003d commission;"},{"lineNumber":250,"author":{"gitID":"Sebry9"},"content":"        }"},{"lineNumber":251,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":252,"author":{"gitID":"Sebry9"},"content":"        public Optional\u003cString\u003e getCommission() {"},{"lineNumber":253,"author":{"gitID":"Sebry9"},"content":"            return Optional.ofNullable(totalCommission);"},{"lineNumber":254,"author":{"gitID":"Sebry9"},"content":"        }"},{"lineNumber":255,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":257,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":258,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":259,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":265,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":266,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":267,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":268,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"Sebry9"},"content":"        /**"},{"lineNumber":274,"author":{"gitID":"Sebry9"},"content":"         * Sets {@code insurances} to this object\u0027s {@code insurances}."},{"lineNumber":275,"author":{"gitID":"Sebry9"},"content":"         * A defensive copy of {@code insurances} is used internally."},{"lineNumber":276,"author":{"gitID":"Sebry9"},"content":"         */"},{"lineNumber":277,"author":{"gitID":"Sebry9"},"content":"        public void setInsurances(Set\u003cInsurance\u003e insurances) {"},{"lineNumber":278,"author":{"gitID":"Sebry9"},"content":"            this.insurances \u003d (insurances !\u003d null) ? new HashSet\u003c\u003e(insurances) : null;"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":282,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":283,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":284,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":285,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":286,"author":{"gitID":"Sebry9"},"content":"        public Optional\u003cSet\u003cInsurance\u003e\u003e getInsurances() {"},{"lineNumber":287,"author":{"gitID":"Sebry9"},"content":"            return (insurances !\u003d null) ? Optional.of(Collections.unmodifiableSet(insurances)) : Optional.empty();"},{"lineNumber":288,"author":{"gitID":"Sebry9"},"content":"        }"},{"lineNumber":289,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":292,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":293,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":294,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":295,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":298,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":299,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":300,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":303,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":306,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":307,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":308,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":309,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getBirthday().equals(e.getBirthday())"},{"lineNumber":310,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags())"},{"lineNumber":311,"author":{"gitID":"Sebry9"},"content":"                    \u0026\u0026 getGroup().equals(e.getGroup())"},{"lineNumber":312,"author":{"gitID":"Sebry9"},"content":"                    \u0026\u0026 getInsurances().equals(e.getInsurances());"},{"lineNumber":313,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":314,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":315,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sebry9":29,"-":286}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"Sebry9"},"content":"import seedu.address.model.Insurance.Insurance;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Appointment;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        return new Person[] {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":28,"author":{"gitID":"Sebry9"},"content":"                getTagSet(\"friends\"), new Birthday(\"11-12-1992\"), new Appointment(\"12-05-2018\"),"},{"lineNumber":29,"author":{"gitID":"Sebry9"},"content":"                new Group(\"Low Priority\"), getInsuranceSet(\"Health\")),"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":32,"author":{"gitID":"Sebry9"},"content":"                getTagSet(\"colleagues\", \"friends\"), new Birthday(\"05-05-1993\"), null,"},{"lineNumber":33,"author":{"gitID":"Sebry9"},"content":"                new Group(\"High Priority\"), getInsuranceSet(\"Health\")),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":36,"author":{"gitID":"Sebry9"},"content":"                getTagSet(\"neighbours\"), new Birthday(\"29-10-1992\"), null, new Group(\"Priority\"),"},{"lineNumber":37,"author":{"gitID":"Sebry9"},"content":"                getInsuranceSet(\"Life\")),"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"},{"lineNumber":40,"author":{"gitID":"Sebry9"},"content":"                getTagSet(\"family\"), new Birthday(\"01-01-1990\"), null, new Group(\"Low Priority\"),"},{"lineNumber":41,"author":{"gitID":"Sebry9"},"content":"                getInsuranceSet(\"Health\")),"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"},{"lineNumber":44,"author":{"gitID":"Sebry9"},"content":"                getTagSet(\"classmates\"), new Birthday(\"03-03-1980\"), null,"},{"lineNumber":45,"author":{"gitID":"Sebry9"},"content":"                new Group(\"Medium Priority\"), getInsuranceSet(\"Saving\")),"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":47,"author":{"gitID":"Sebry9"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), getTagSet(\"colleagues\"),"},{"lineNumber":48,"author":{"gitID":"Sebry9"},"content":"                new Birthday(\"05-04-1970\"), null , new Group(\"Priority\"), getInsuranceSet(\"General\"))"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"Sebry9"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"Sebry9"},"content":"     * Returns a insurance set containing the list of strings given."},{"lineNumber":78,"author":{"gitID":"Sebry9"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"Sebry9"},"content":"    public static Set\u003cInsurance\u003e getInsuranceSet(String... strings) {"},{"lineNumber":80,"author":{"gitID":"Sebry9"},"content":"        HashSet\u003cInsurance\u003e insurances \u003d new HashSet\u003c\u003e();"},{"lineNumber":81,"author":{"gitID":"Sebry9"},"content":"        for (String s : strings) {"},{"lineNumber":82,"author":{"gitID":"Sebry9"},"content":"            insurances.add(new Insurance(s));"},{"lineNumber":83,"author":{"gitID":"Sebry9"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":85,"author":{"gitID":"Sebry9"},"content":"        return insurances;"},{"lineNumber":86,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":88,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sebry9":26,"-":63}},{"path":"src/main/java/seedu/address/model/group/Group.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.group;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s group in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidGroup(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"limzk1994"},"content":"//@@author limzk1994"},{"lineNumber":11,"author":{"gitID":"limzk1994"},"content":"public class Group {"},{"lineNumber":12,"author":{"gitID":"limzk1994"},"content":""},{"lineNumber":13,"author":{"gitID":"limzk1994"},"content":"    public static final String MESSAGE_GROUP_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"limzk1994"},"content":"            \"Person group should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"limzk1994"},"content":""},{"lineNumber":16,"author":{"gitID":"limzk1994"},"content":"    public static final String GROUP_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":17,"author":{"gitID":"limzk1994"},"content":""},{"lineNumber":18,"author":{"gitID":"limzk1994"},"content":"    public final String groupName;"},{"lineNumber":19,"author":{"gitID":"limzk1994"},"content":""},{"lineNumber":20,"author":{"gitID":"limzk1994"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"limzk1994"},"content":"     * Constructs a {@code Name}."},{"lineNumber":22,"author":{"gitID":"limzk1994"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"limzk1994"},"content":"     * @param group A valid group."},{"lineNumber":24,"author":{"gitID":"limzk1994"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"limzk1994"},"content":"    public Group(String group) {"},{"lineNumber":26,"author":{"gitID":"limzk1994"},"content":"        requireNonNull(group);"},{"lineNumber":27,"author":{"gitID":"limzk1994"},"content":"        checkArgument(isValidGroup(group), MESSAGE_GROUP_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitID":"limzk1994"},"content":"        this.groupName \u003d group;"},{"lineNumber":29,"author":{"gitID":"limzk1994"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"limzk1994"},"content":""},{"lineNumber":31,"author":{"gitID":"limzk1994"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"limzk1994"},"content":"     * Returns true if a given string is a valid group."},{"lineNumber":33,"author":{"gitID":"limzk1994"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"limzk1994"},"content":"    public static boolean isValidGroup(String test) {"},{"lineNumber":35,"author":{"gitID":"limzk1994"},"content":"        return test.matches(GROUP_VALIDATION_REGEX);"},{"lineNumber":36,"author":{"gitID":"limzk1994"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"limzk1994"},"content":""},{"lineNumber":38,"author":{"gitID":"limzk1994"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"limzk1994"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitID":"limzk1994"},"content":"        return groupName;"},{"lineNumber":41,"author":{"gitID":"limzk1994"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"limzk1994"},"content":""},{"lineNumber":43,"author":{"gitID":"limzk1994"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"limzk1994"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitID":"limzk1994"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":46,"author":{"gitID":"limzk1994"},"content":"                || (other instanceof Group // instanceof handles nulls"},{"lineNumber":47,"author":{"gitID":"limzk1994"},"content":"                \u0026\u0026 this.groupName.equals(((Group) other).groupName)); // state check"},{"lineNumber":48,"author":{"gitID":"limzk1994"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"limzk1994"},"content":""},{"lineNumber":50,"author":{"gitID":"limzk1994"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"limzk1994"},"content":"    public int hashCode() {"},{"lineNumber":52,"author":{"gitID":"limzk1994"},"content":"        return groupName.hashCode();"},{"lineNumber":53,"author":{"gitID":"limzk1994"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"limzk1994"},"content":""},{"lineNumber":55,"author":{"gitID":"limzk1994"},"content":"}"}],"authorContributionMap":{"-":9,"limzk1994":46}},{"path":"src/main/java/seedu/address/model/person/ReadOnlyPersonComparator.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Comparator class for two Person objects"},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"limzk1994"},"content":"//@@author limzk1994"},{"lineNumber":9,"author":{"gitID":"limzk1994"},"content":"public class ReadOnlyPersonComparator implements Comparator\u003cPerson\u003e {"},{"lineNumber":10,"author":{"gitID":"limzk1994"},"content":""},{"lineNumber":11,"author":{"gitID":"limzk1994"},"content":"    @Override"},{"lineNumber":12,"author":{"gitID":"limzk1994"},"content":"    public int compare(Person personA, Person personB) {"},{"lineNumber":13,"author":{"gitID":"limzk1994"},"content":"        return personA.getName().compareTo(personB.getName());"},{"lineNumber":14,"author":{"gitID":"limzk1994"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"limzk1994"},"content":"}"}],"authorContributionMap":{"-":7,"limzk1994":8}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedInsurance.java","lines":[{"lineNumber":1,"author":{"gitID":"Sebry9"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":3,"author":{"gitID":"Sebry9"},"content":"import javax.xml.bind.annotation.XmlValue;"},{"lineNumber":4,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"Sebry9"},"content":"import seedu.address.model.Insurance.Insurance;"},{"lineNumber":7,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":8,"author":{"gitID":"Sebry9"},"content":"//@@author Sebry9"},{"lineNumber":9,"author":{"gitID":"Sebry9"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"Sebry9"},"content":" * JAXB-friendly version of the Insurance."},{"lineNumber":11,"author":{"gitID":"Sebry9"},"content":" */"},{"lineNumber":12,"author":{"gitID":"Sebry9"},"content":"public class XmlAdaptedInsurance {"},{"lineNumber":13,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":14,"author":{"gitID":"Sebry9"},"content":"    @XmlValue"},{"lineNumber":15,"author":{"gitID":"Sebry9"},"content":"    private String insuranceName;"},{"lineNumber":16,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":17,"author":{"gitID":"Sebry9"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"Sebry9"},"content":"     * Constructs an XmlAdaptedInsurance."},{"lineNumber":19,"author":{"gitID":"Sebry9"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":20,"author":{"gitID":"Sebry9"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"Sebry9"},"content":"    public XmlAdaptedInsurance() {}"},{"lineNumber":22,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":23,"author":{"gitID":"Sebry9"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"Sebry9"},"content":"     * Constructs a {@code XmlAdaptedInsurance} with the given {@code insuranceName}."},{"lineNumber":25,"author":{"gitID":"Sebry9"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"Sebry9"},"content":"    public XmlAdaptedInsurance(String insuranceName) {"},{"lineNumber":27,"author":{"gitID":"Sebry9"},"content":"        this.insuranceName \u003d insuranceName;"},{"lineNumber":28,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":30,"author":{"gitID":"Sebry9"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"Sebry9"},"content":"     * Converts a given Insurance into this class for JAXB use."},{"lineNumber":32,"author":{"gitID":"Sebry9"},"content":"     *"},{"lineNumber":33,"author":{"gitID":"Sebry9"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":34,"author":{"gitID":"Sebry9"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"Sebry9"},"content":"    public XmlAdaptedInsurance(Insurance source) {"},{"lineNumber":36,"author":{"gitID":"Sebry9"},"content":"        insuranceName \u003d source.insuranceName;"},{"lineNumber":37,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":39,"author":{"gitID":"Sebry9"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"Sebry9"},"content":"     * Converts this jaxb-friendly adapted insurance object into the model\u0027s Insurance object."},{"lineNumber":41,"author":{"gitID":"Sebry9"},"content":"     *"},{"lineNumber":42,"author":{"gitID":"Sebry9"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":43,"author":{"gitID":"Sebry9"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"Sebry9"},"content":"    public Insurance toModelType() throws IllegalValueException {"},{"lineNumber":45,"author":{"gitID":"Sebry9"},"content":"        if (!Insurance.isValidInsurance(insuranceName)) {"},{"lineNumber":46,"author":{"gitID":"Sebry9"},"content":"            throw new IllegalValueException(Insurance.MESSAGE_INSURANCE_CONSTRAINTS);"},{"lineNumber":47,"author":{"gitID":"Sebry9"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"Sebry9"},"content":"        return new Insurance(insuranceName);"},{"lineNumber":49,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":51,"author":{"gitID":"Sebry9"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"Sebry9"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitID":"Sebry9"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":54,"author":{"gitID":"Sebry9"},"content":"            return true;"},{"lineNumber":55,"author":{"gitID":"Sebry9"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":57,"author":{"gitID":"Sebry9"},"content":"        if (!(other instanceof XmlAdaptedInsurance)) {"},{"lineNumber":58,"author":{"gitID":"Sebry9"},"content":"            return false;"},{"lineNumber":59,"author":{"gitID":"Sebry9"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":61,"author":{"gitID":"Sebry9"},"content":"        return insuranceName.equals(((XmlAdaptedInsurance) other).insuranceName);"},{"lineNumber":62,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"Sebry9"},"content":"}"}],"authorContributionMap":{"Sebry9":62,"-":1}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Sebry9"},"content":"import static java.lang.Integer.parseInt;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"Sebry9"},"content":"import seedu.address.model.Insurance.Commission;"},{"lineNumber":11,"author":{"gitID":"Sebry9"},"content":"import seedu.address.model.Insurance.Insurance;"},{"lineNumber":12,"author":{"gitID":"Sebry9"},"content":"import seedu.address.model.Insurance.UniqueInsuranceList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.group.UniqueGroupList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"Sebry9"},"content":"//@@author Sebry9"},{"lineNumber":19,"author":{"gitID":"Sebry9"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"Sebry9"},"content":" * Represents a Person in the address book."},{"lineNumber":21,"author":{"gitID":"Sebry9"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":22,"author":{"gitID":"Sebry9"},"content":" */"},{"lineNumber":23,"author":{"gitID":"Sebry9"},"content":"public class Person {"},{"lineNumber":24,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":25,"author":{"gitID":"Sebry9"},"content":"    private final Name name;"},{"lineNumber":26,"author":{"gitID":"Sebry9"},"content":"    private final Phone phone;"},{"lineNumber":27,"author":{"gitID":"Sebry9"},"content":"    private final Email email;"},{"lineNumber":28,"author":{"gitID":"Sebry9"},"content":"    private final Address address;"},{"lineNumber":29,"author":{"gitID":"Sebry9"},"content":"    private final Birthday birthday;"},{"lineNumber":30,"author":{"gitID":"Sebry9"},"content":"    private final Appointment appointment;"},{"lineNumber":31,"author":{"gitID":"Sebry9"},"content":"    private final Group group;"},{"lineNumber":32,"author":{"gitID":"Sebry9"},"content":"    private final String totalCommission;"},{"lineNumber":33,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":34,"author":{"gitID":"Sebry9"},"content":"    private final UniqueInsuranceList insurance;"},{"lineNumber":35,"author":{"gitID":"Sebry9"},"content":"    private final UniqueTagList tags;"},{"lineNumber":36,"author":{"gitID":"Sebry9"},"content":"    private final UniqueGroupList groups;"},{"lineNumber":37,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":38,"author":{"gitID":"Sebry9"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"Sebry9"},"content":"     * Every field must be present and not null."},{"lineNumber":40,"author":{"gitID":"Sebry9"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"Sebry9"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, Birthday birthday,"},{"lineNumber":42,"author":{"gitID":"Sebry9"},"content":"            Appointment appointment, Group group, Set\u003cInsurance\u003e insurance) {"},{"lineNumber":43,"author":{"gitID":"Sebry9"},"content":"        requireAllNonNull(name, phone, email, address, tags, birthday);"},{"lineNumber":44,"author":{"gitID":"Sebry9"},"content":"        this.name \u003d name;"},{"lineNumber":45,"author":{"gitID":"Sebry9"},"content":"        this.phone \u003d phone;"},{"lineNumber":46,"author":{"gitID":"Sebry9"},"content":"        this.email \u003d email;"},{"lineNumber":47,"author":{"gitID":"Sebry9"},"content":"        this.address \u003d address;"},{"lineNumber":48,"author":{"gitID":"Sebry9"},"content":"        this.birthday \u003d birthday;"},{"lineNumber":49,"author":{"gitID":"Sebry9"},"content":"        this.appointment \u003d appointment;"},{"lineNumber":50,"author":{"gitID":"Sebry9"},"content":"        this.group \u003d group;"},{"lineNumber":51,"author":{"gitID":"Sebry9"},"content":"        this.insurance \u003d new UniqueInsuranceList(insurance);"},{"lineNumber":52,"author":{"gitID":"Sebry9"},"content":"        this.totalCommission \u003d calculateTotalCommission(insurance);"},{"lineNumber":53,"author":{"gitID":"Sebry9"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":54,"author":{"gitID":"Sebry9"},"content":"        this.groups \u003d new UniqueGroupList(group);"},{"lineNumber":55,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":56,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":58,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":59,"author":{"gitID":"Sebry9"},"content":"    public Name getName() {"},{"lineNumber":60,"author":{"gitID":"Sebry9"},"content":"        return name;"},{"lineNumber":61,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":63,"author":{"gitID":"Sebry9"},"content":"    public Phone getPhone() {"},{"lineNumber":64,"author":{"gitID":"Sebry9"},"content":"        return phone;"},{"lineNumber":65,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":67,"author":{"gitID":"Sebry9"},"content":"    public Email getEmail() {"},{"lineNumber":68,"author":{"gitID":"Sebry9"},"content":"        return email;"},{"lineNumber":69,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":71,"author":{"gitID":"Sebry9"},"content":"    public Address getAddress() {"},{"lineNumber":72,"author":{"gitID":"Sebry9"},"content":"        return address;"},{"lineNumber":73,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":75,"author":{"gitID":"Sebry9"},"content":"    public Birthday getBirthday() {"},{"lineNumber":76,"author":{"gitID":"Sebry9"},"content":"        return birthday;"},{"lineNumber":77,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":79,"author":{"gitID":"Sebry9"},"content":"    public Appointment getAppointment() {"},{"lineNumber":80,"author":{"gitID":"Sebry9"},"content":"        return appointment;"},{"lineNumber":81,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":83,"author":{"gitID":"Sebry9"},"content":"    public Group getGroup() {"},{"lineNumber":84,"author":{"gitID":"Sebry9"},"content":"        return group;"},{"lineNumber":85,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":87,"author":{"gitID":"Sebry9"},"content":"    public String getTotalCommission() {"},{"lineNumber":88,"author":{"gitID":"Sebry9"},"content":"        return totalCommission;"},{"lineNumber":89,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":91,"author":{"gitID":"Sebry9"},"content":"    //@@author Sebry9"},{"lineNumber":92,"author":{"gitID":"Sebry9"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"Sebry9"},"content":"     * Calculate the total commission based on the number of plan this person/client have."},{"lineNumber":94,"author":{"gitID":"Sebry9"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"Sebry9"},"content":"    public String calculateTotalCommission(Set\u003cInsurance\u003e insurances) {"},{"lineNumber":96,"author":{"gitID":"Sebry9"},"content":"        int commission \u003d 0;"},{"lineNumber":97,"author":{"gitID":"Sebry9"},"content":"        Insurance[] insuranceList \u003d insurances.toArray(new Insurance[insurances.size()]);"},{"lineNumber":98,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":99,"author":{"gitID":"Sebry9"},"content":"        for (int i \u003d 0; i \u003c insurances.size(); i++) {"},{"lineNumber":100,"author":{"gitID":"Sebry9"},"content":"            Commission plans \u003d new Commission(insuranceList[i]);"},{"lineNumber":101,"author":{"gitID":"Sebry9"},"content":"            commission +\u003d parseInt(plans.getCommission());"},{"lineNumber":102,"author":{"gitID":"Sebry9"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"Sebry9"},"content":"        return Integer.toString(commission);"},{"lineNumber":104,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":106,"author":{"gitID":"Sebry9"},"content":"    public Set\u003cInsurance\u003e getInsurance() {"},{"lineNumber":107,"author":{"gitID":"Sebry9"},"content":"        return Collections.unmodifiableSet(insurance.toSet());"},{"lineNumber":108,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":110,"author":{"gitID":"Sebry9"},"content":"    /* public String getCommission() {"},{"lineNumber":111,"author":{"gitID":"Sebry9"},"content":"        return commission;"},{"lineNumber":112,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"Sebry9"},"content":"    */"},{"lineNumber":114,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":115,"author":{"gitID":"Sebry9"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"Sebry9"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":117,"author":{"gitID":"Sebry9"},"content":"     * if modification is attempted."},{"lineNumber":118,"author":{"gitID":"Sebry9"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"Sebry9"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":120,"author":{"gitID":"Sebry9"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":121,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":123,"author":{"gitID":"Sebry9"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"Sebry9"},"content":"    public boolean equals(Object other) {"},{"lineNumber":125,"author":{"gitID":"Sebry9"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":126,"author":{"gitID":"Sebry9"},"content":"            return true;"},{"lineNumber":127,"author":{"gitID":"Sebry9"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":129,"author":{"gitID":"Sebry9"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":130,"author":{"gitID":"Sebry9"},"content":"            return false;"},{"lineNumber":131,"author":{"gitID":"Sebry9"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":133,"author":{"gitID":"Sebry9"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":134,"author":{"gitID":"Sebry9"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":135,"author":{"gitID":"Sebry9"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":136,"author":{"gitID":"Sebry9"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":137,"author":{"gitID":"Sebry9"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress())"},{"lineNumber":138,"author":{"gitID":"Sebry9"},"content":"                \u0026\u0026 otherPerson.getBirthday().equals(this.getBirthday())"},{"lineNumber":139,"author":{"gitID":"Sebry9"},"content":"                \u0026\u0026 otherPerson.getGroup().equals(this.getGroup());"},{"lineNumber":140,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":142,"author":{"gitID":"Sebry9"},"content":"    @Override"},{"lineNumber":143,"author":{"gitID":"Sebry9"},"content":"    public int hashCode() {"},{"lineNumber":144,"author":{"gitID":"Sebry9"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":145,"author":{"gitID":"Sebry9"},"content":"        return Objects.hash(name, phone, email, address, tags, birthday, appointment, group, insurance/*, commission*/);"},{"lineNumber":146,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":148,"author":{"gitID":"Sebry9"},"content":"    @Override"},{"lineNumber":149,"author":{"gitID":"Sebry9"},"content":"    public String toString() {"},{"lineNumber":150,"author":{"gitID":"Sebry9"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":151,"author":{"gitID":"Sebry9"},"content":"        builder.append(getName())"},{"lineNumber":152,"author":{"gitID":"Sebry9"},"content":"                .append(\" Phone: \")"},{"lineNumber":153,"author":{"gitID":"Sebry9"},"content":"                .append(getPhone())"},{"lineNumber":154,"author":{"gitID":"Sebry9"},"content":"                .append(\" Email: \")"},{"lineNumber":155,"author":{"gitID":"Sebry9"},"content":"                .append(getEmail())"},{"lineNumber":156,"author":{"gitID":"Sebry9"},"content":"                .append(\" Address: \")"},{"lineNumber":157,"author":{"gitID":"Sebry9"},"content":"                .append(getAddress())"},{"lineNumber":158,"author":{"gitID":"Sebry9"},"content":"                .append(\" Tags: \");"},{"lineNumber":159,"author":{"gitID":"Sebry9"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":160,"author":{"gitID":"Sebry9"},"content":"        return builder.toString();"},{"lineNumber":161,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"Sebry9"},"content":"}"}],"authorContributionMap":{"Sebry9":149,"-":13}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.PrintWriter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.group.UniqueGroupList;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Appointment;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.util.GoogleCalendarClient;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final UniqueGroupList groups;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private final UserPrefs userPrefs;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        userPrefs \u003d new UserPrefs();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        groups \u003d new UniqueGroupList();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Sebry9"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"Sebry9"},"content":"     * empty constructor"},{"lineNumber":57,"author":{"gitID":"Sebry9"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"Sebry9"},"content":"    public AddressBook() {"},{"lineNumber":59,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":60,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public int getAddressBookSize() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return this.persons.asObservableList().size();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"Sebry9"},"content":"    public void setGroups(List\u003cGroup\u003e persons) {"},{"lineNumber":85,"author":{"gitID":"Sebry9"},"content":"        this.groups.setGroups(groups);"},{"lineNumber":86,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":119,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":140,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":158,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":161,"author":{"gitID":"Sebry9"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(), correctTagReferences,"},{"lineNumber":162,"author":{"gitID":"Sebry9"},"content":"                person.getBirthday(), person.getAppointment(), person.getGroup(), person.getInsurance());"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    //// export-level operations"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"daviddalmaso"},"content":"    //@@author daviddalmaso"},{"lineNumber":186,"author":{"gitID":"daviddalmaso"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"daviddalmaso"},"content":"     * Exports the current address book to data/portfolio.csv"},{"lineNumber":188,"author":{"gitID":"daviddalmaso"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"daviddalmaso"},"content":"    public void exportPortfolio() {"},{"lineNumber":190,"author":{"gitID":"daviddalmaso"},"content":"        try {"},{"lineNumber":191,"author":{"gitID":"daviddalmaso"},"content":"            PrintWriter pw \u003d new PrintWriter(new File(userPrefs.getExportPortfolioFilePath()));"},{"lineNumber":192,"author":{"gitID":"daviddalmaso"},"content":"            StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":193,"author":{"gitID":"daviddalmaso"},"content":"            sb.append(\"Name,Phone,Email,Address,Tags\\n\");"},{"lineNumber":194,"author":{"gitID":"daviddalmaso"},"content":"            for (Person person : persons) {"},{"lineNumber":195,"author":{"gitID":"daviddalmaso"},"content":"                sb.append(\"\\\"\" + person.getName().toString() + \"\\\"\");"},{"lineNumber":196,"author":{"gitID":"daviddalmaso"},"content":"                sb.append(\",\");"},{"lineNumber":197,"author":{"gitID":"daviddalmaso"},"content":"                sb.append(\"\\\"\" + person.getPhone().toString() + \"\\\"\");"},{"lineNumber":198,"author":{"gitID":"daviddalmaso"},"content":"                sb.append(\",\");"},{"lineNumber":199,"author":{"gitID":"daviddalmaso"},"content":"                sb.append(\"\\\"\" + person.getEmail().toString() + \"\\\"\");"},{"lineNumber":200,"author":{"gitID":"daviddalmaso"},"content":"                sb.append(\",\");"},{"lineNumber":201,"author":{"gitID":"daviddalmaso"},"content":"                sb.append(\"\\\"\" + person.getAddress().toString() + \"\\\"\");"},{"lineNumber":202,"author":{"gitID":"daviddalmaso"},"content":"                sb.append(\",\");"},{"lineNumber":203,"author":{"gitID":"daviddalmaso"},"content":"                sb.append(\"\\\"\" + person.getTags().toString() + \"\\\"\");"},{"lineNumber":204,"author":{"gitID":"daviddalmaso"},"content":"                sb.append(\"\\n\");"},{"lineNumber":205,"author":{"gitID":"daviddalmaso"},"content":"            }"},{"lineNumber":206,"author":{"gitID":"daviddalmaso"},"content":"            pw.write(sb.toString());"},{"lineNumber":207,"author":{"gitID":"daviddalmaso"},"content":"            pw.close();"},{"lineNumber":208,"author":{"gitID":"daviddalmaso"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":209,"author":{"gitID":"daviddalmaso"},"content":"            System.out.println(\"File was not found\");"},{"lineNumber":210,"author":{"gitID":"daviddalmaso"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"daviddalmaso"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":213,"author":{"gitID":"daviddalmaso"},"content":"    /**"},{"lineNumber":214,"author":{"gitID":"daviddalmaso"},"content":"     * Exports the calendar events to the user\u0027s Google Calendar"},{"lineNumber":215,"author":{"gitID":"daviddalmaso"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"daviddalmaso"},"content":"    public void exportCalendar() {"},{"lineNumber":217,"author":{"gitID":"daviddalmaso"},"content":"        List\u003cBirthday\u003e birthdays \u003d new ArrayList\u003c\u003e();"},{"lineNumber":218,"author":{"gitID":"daviddalmaso"},"content":"        List\u003cAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();"},{"lineNumber":219,"author":{"gitID":"daviddalmaso"},"content":"        for (Person person : persons) {"},{"lineNumber":220,"author":{"gitID":"daviddalmaso"},"content":"            birthdays.add(person.getBirthday());"},{"lineNumber":221,"author":{"gitID":"daviddalmaso"},"content":"            appointments.add(person.getAppointment());"},{"lineNumber":222,"author":{"gitID":"daviddalmaso"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"daviddalmaso"},"content":"        try {"},{"lineNumber":224,"author":{"gitID":"daviddalmaso"},"content":"            GoogleCalendarClient.insertCalendar(persons);"},{"lineNumber":225,"author":{"gitID":"daviddalmaso"},"content":"        } catch (Exception e) {"},{"lineNumber":226,"author":{"gitID":"daviddalmaso"},"content":"            System.out.println(e);"},{"lineNumber":227,"author":{"gitID":"daviddalmaso"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"daviddalmaso"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"daviddalmaso"},"content":"    //@@author"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    public ObservableList\u003cGroup\u003e getGroupList() {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        return groups.asObservableList();"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":257,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":258,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":259,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * Sorts all persons from the address book."},{"lineNumber":270,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    public void sortedPersonsList() {"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        persons.sortPersons();"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sebry9":11,"daviddalmaso":45,"-":218}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AppointmentChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.BirthdayChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.export.ExportType;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":24,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        raise(new BirthdayChangedEvent(person, \"add\"));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        raise(new AppointmentChangedEvent(person, \"add\"));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"daviddalmaso"},"content":"    //@@author daviddalmaso"},{"lineNumber":90,"author":{"gitID":"daviddalmaso"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"daviddalmaso"},"content":"    public void export(ExportType typeToExport) {"},{"lineNumber":92,"author":{"gitID":"daviddalmaso"},"content":"        requireAllNonNull(typeToExport);"},{"lineNumber":93,"author":{"gitID":"daviddalmaso"},"content":"        if (typeToExport.equals(ExportType.PORTFOLIO)) {"},{"lineNumber":94,"author":{"gitID":"daviddalmaso"},"content":"            addressBook.exportPortfolio();"},{"lineNumber":95,"author":{"gitID":"daviddalmaso"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"daviddalmaso"},"content":"        if (typeToExport.equals(ExportType.CALENDAR)) {"},{"lineNumber":97,"author":{"gitID":"daviddalmaso"},"content":"            addressBook.exportCalendar();"},{"lineNumber":98,"author":{"gitID":"daviddalmaso"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"daviddalmaso"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"daviddalmaso"},"content":"    //@@author"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e sortFilteredPersonList(ObservableList\u003cPerson\u003e personsList) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        addressBook.sortedPersonsList();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        return personsList;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"daviddalmaso":12,"-":134}},{"path":"src/main/java/seedu/address/model/export/ExportType.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.export;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"daviddalmaso"},"content":"//@@author daviddalmaso"},{"lineNumber":4,"author":{"gitID":"daviddalmaso"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"daviddalmaso"},"content":" * Types of valid exports that the user can use"},{"lineNumber":6,"author":{"gitID":"daviddalmaso"},"content":" */"},{"lineNumber":7,"author":{"gitID":"daviddalmaso"},"content":"public enum ExportType {"},{"lineNumber":8,"author":{"gitID":"daviddalmaso"},"content":"    CALENDAR, PORTFOLIO;"},{"lineNumber":9,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":10,"author":{"gitID":"daviddalmaso"},"content":"    /**"},{"lineNumber":11,"author":{"gitID":"daviddalmaso"},"content":"     * @param exportType user\u0027s inputted ExportType"},{"lineNumber":12,"author":{"gitID":"daviddalmaso"},"content":"     * @return whether it is a valid ExportType"},{"lineNumber":13,"author":{"gitID":"daviddalmaso"},"content":"     */"},{"lineNumber":14,"author":{"gitID":"daviddalmaso"},"content":"    public static boolean isValidExportType(String exportType) {"},{"lineNumber":15,"author":{"gitID":"daviddalmaso"},"content":"        try {"},{"lineNumber":16,"author":{"gitID":"daviddalmaso"},"content":"            ExportType.valueOf(exportType);"},{"lineNumber":17,"author":{"gitID":"daviddalmaso"},"content":"            return true;"},{"lineNumber":18,"author":{"gitID":"daviddalmaso"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":19,"author":{"gitID":"daviddalmaso"},"content":"            return false;"},{"lineNumber":20,"author":{"gitID":"daviddalmaso"},"content":"        }"},{"lineNumber":21,"author":{"gitID":"daviddalmaso"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"daviddalmaso"},"content":"}"}],"authorContributionMap":{"daviddalmaso":20,"-":2}},{"path":"src/main/java/seedu/address/model/util/GoogleCalendarClient.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.InputStream;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.InputStreamReader;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.api.client.auth.oauth2.Credential;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import com.google.api.client.http.HttpTransport;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import com.google.api.client.json.JsonFactory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import com.google.api.client.json.jackson2.JacksonFactory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import com.google.api.client.util.DateTime;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import com.google.api.client.util.store.FileDataStoreFactory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import com.google.api.services.calendar.Calendar;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import com.google.api.services.calendar.CalendarScopes;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import com.google.api.services.calendar.model.CalendarListEntry;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import com.google.api.services.calendar.model.Event;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import com.google.api.services.calendar.model.EventDateTime;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"daviddalmaso"},"content":"//@@author daviddalmaso"},{"lineNumber":30,"author":{"gitID":"daviddalmaso"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"daviddalmaso"},"content":" * Client for the Google Calendar API"},{"lineNumber":32,"author":{"gitID":"daviddalmaso"},"content":" */"},{"lineNumber":33,"author":{"gitID":"daviddalmaso"},"content":"public class GoogleCalendarClient {"},{"lineNumber":34,"author":{"gitID":"daviddalmaso"},"content":"    /** Application name. */"},{"lineNumber":35,"author":{"gitID":"daviddalmaso"},"content":"    private static final String applicationName \u003d"},{"lineNumber":36,"author":{"gitID":"daviddalmaso"},"content":"            \"reInsurance Events\";"},{"lineNumber":37,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":38,"author":{"gitID":"daviddalmaso"},"content":"    /** Directory to store user credentials for this application. */"},{"lineNumber":39,"author":{"gitID":"daviddalmaso"},"content":"    private static final java.io.File dataStoreDir \u003d new java.io.File("},{"lineNumber":40,"author":{"gitID":"daviddalmaso"},"content":"            System.getProperty(\"user.home\"), \".credentials/calendar-java-quickstart\");"},{"lineNumber":41,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":42,"author":{"gitID":"daviddalmaso"},"content":"    /** Global instance of the {@link FileDataStoreFactory}. */"},{"lineNumber":43,"author":{"gitID":"daviddalmaso"},"content":"    private static FileDataStoreFactory dataStoreFactory;"},{"lineNumber":44,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":45,"author":{"gitID":"daviddalmaso"},"content":"    /** Global instance of the JSON factory. */"},{"lineNumber":46,"author":{"gitID":"daviddalmaso"},"content":"    private static final JsonFactory jsonFactory \u003d"},{"lineNumber":47,"author":{"gitID":"daviddalmaso"},"content":"            JacksonFactory.getDefaultInstance();"},{"lineNumber":48,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":49,"author":{"gitID":"daviddalmaso"},"content":"    /** Global instance of the HTTP transport. */"},{"lineNumber":50,"author":{"gitID":"daviddalmaso"},"content":"    private static HttpTransport httpTransport;"},{"lineNumber":51,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":52,"author":{"gitID":"daviddalmaso"},"content":"    /** Global instance of the scopes required by this quickstart."},{"lineNumber":53,"author":{"gitID":"daviddalmaso"},"content":"     *"},{"lineNumber":54,"author":{"gitID":"daviddalmaso"},"content":"     * If modifying these scopes, delete your previously saved credentials"},{"lineNumber":55,"author":{"gitID":"daviddalmaso"},"content":"     * at ~/.credentials/calendar-java-quickstart"},{"lineNumber":56,"author":{"gitID":"daviddalmaso"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"daviddalmaso"},"content":"    private static final List\u003cString\u003e SCOPES \u003d"},{"lineNumber":58,"author":{"gitID":"daviddalmaso"},"content":"            Arrays.asList(CalendarScopes.CALENDAR);"},{"lineNumber":59,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":60,"author":{"gitID":"daviddalmaso"},"content":"    static {"},{"lineNumber":61,"author":{"gitID":"daviddalmaso"},"content":"        try {"},{"lineNumber":62,"author":{"gitID":"daviddalmaso"},"content":"            httpTransport \u003d GoogleNetHttpTransport.newTrustedTransport();"},{"lineNumber":63,"author":{"gitID":"daviddalmaso"},"content":"            dataStoreFactory \u003d new FileDataStoreFactory(dataStoreDir);"},{"lineNumber":64,"author":{"gitID":"daviddalmaso"},"content":"        } catch (Throwable t) {"},{"lineNumber":65,"author":{"gitID":"daviddalmaso"},"content":"            t.printStackTrace();"},{"lineNumber":66,"author":{"gitID":"daviddalmaso"},"content":"            System.exit(1);"},{"lineNumber":67,"author":{"gitID":"daviddalmaso"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"daviddalmaso"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":70,"author":{"gitID":"daviddalmaso"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"daviddalmaso"},"content":"     *"},{"lineNumber":72,"author":{"gitID":"daviddalmaso"},"content":"     * @return a Credential object"},{"lineNumber":73,"author":{"gitID":"daviddalmaso"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"daviddalmaso"},"content":"    public static Credential authorize() {"},{"lineNumber":75,"author":{"gitID":"daviddalmaso"},"content":"        try {"},{"lineNumber":76,"author":{"gitID":"daviddalmaso"},"content":"            InputStream in \u003d GoogleCalendarClient.class.getResourceAsStream(\"/client_secret.json\");"},{"lineNumber":77,"author":{"gitID":"daviddalmaso"},"content":"            InputStreamReader inputStreamReader \u003d new InputStreamReader(in);"},{"lineNumber":78,"author":{"gitID":"daviddalmaso"},"content":"            GoogleClientSecrets clientSecrets \u003d GoogleClientSecrets.load(jsonFactory,"},{"lineNumber":79,"author":{"gitID":"daviddalmaso"},"content":"                    inputStreamReader);"},{"lineNumber":80,"author":{"gitID":"daviddalmaso"},"content":"            GoogleAuthorizationCodeFlow flow \u003d new GoogleAuthorizationCodeFlow.Builder("},{"lineNumber":81,"author":{"gitID":"daviddalmaso"},"content":"                    httpTransport, jsonFactory, clientSecrets, SCOPES"},{"lineNumber":82,"author":{"gitID":"daviddalmaso"},"content":"            ).setDataStoreFactory(dataStoreFactory).build();"},{"lineNumber":83,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":84,"author":{"gitID":"daviddalmaso"},"content":"            return new AuthorizationCodeInstalledApp(flow, new LocalServerReceiver()).authorize(\"user\");"},{"lineNumber":85,"author":{"gitID":"daviddalmaso"},"content":"        } catch (Exception e) {"},{"lineNumber":86,"author":{"gitID":"daviddalmaso"},"content":"            System.out.println(e);"},{"lineNumber":87,"author":{"gitID":"daviddalmaso"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"daviddalmaso"},"content":"        return null;"},{"lineNumber":89,"author":{"gitID":"daviddalmaso"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":91,"author":{"gitID":"daviddalmaso"},"content":"    private static void setEventDates (Event event, String date) {"},{"lineNumber":92,"author":{"gitID":"daviddalmaso"},"content":"        String[] dates \u003d date.split(\"-\");"},{"lineNumber":93,"author":{"gitID":"daviddalmaso"},"content":"        String day \u003d dates[0];"},{"lineNumber":94,"author":{"gitID":"daviddalmaso"},"content":"        String month \u003d dates[1];"},{"lineNumber":95,"author":{"gitID":"daviddalmaso"},"content":"        String year \u003d dates[2];"},{"lineNumber":96,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":97,"author":{"gitID":"daviddalmaso"},"content":"        DateTime startDateTime \u003d new DateTime(year + \"-\" + month + \"-\" + day + \"T00:00:00+08:00\");"},{"lineNumber":98,"author":{"gitID":"daviddalmaso"},"content":"        EventDateTime startEventDateTime \u003d new EventDateTime().setDateTime(startDateTime).setTimeZone(\"Asia/Singapore\");"},{"lineNumber":99,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":100,"author":{"gitID":"daviddalmaso"},"content":"        DateTime endDateTime \u003d new DateTime(year + \"-\" + month + \"-\" + day + \"T23:59:59+08:00\");"},{"lineNumber":101,"author":{"gitID":"daviddalmaso"},"content":"        EventDateTime endEventDateTime \u003d new EventDateTime().setDateTime(endDateTime).setTimeZone(\"Asia/Singapore\");"},{"lineNumber":102,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":103,"author":{"gitID":"daviddalmaso"},"content":"        event.setStart(startEventDateTime).setEnd(endEventDateTime);"},{"lineNumber":104,"author":{"gitID":"daviddalmaso"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":106,"author":{"gitID":"daviddalmaso"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"daviddalmaso"},"content":"     *"},{"lineNumber":108,"author":{"gitID":"daviddalmaso"},"content":"     * @param persons UniquePersonList: all Person objects in the address book"},{"lineNumber":109,"author":{"gitID":"daviddalmaso"},"content":"     * @return returns a list of events, being the birthdays and appointments of each person"},{"lineNumber":110,"author":{"gitID":"daviddalmaso"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"daviddalmaso"},"content":"    private static List\u003cEvent\u003e createEvents(UniquePersonList persons) {"},{"lineNumber":112,"author":{"gitID":"daviddalmaso"},"content":"        List\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();"},{"lineNumber":113,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":114,"author":{"gitID":"daviddalmaso"},"content":"        // Iterate through persons to get their birthdays and appointments"},{"lineNumber":115,"author":{"gitID":"daviddalmaso"},"content":"        for (Person person : persons) {"},{"lineNumber":116,"author":{"gitID":"daviddalmaso"},"content":"            String name \u003d person.getName().fullName;"},{"lineNumber":117,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":118,"author":{"gitID":"daviddalmaso"},"content":"            // Create birthday event for current Person object"},{"lineNumber":119,"author":{"gitID":"daviddalmaso"},"content":"            Event birthday \u003d new Event()"},{"lineNumber":120,"author":{"gitID":"daviddalmaso"},"content":"                    .setSummary(name + \"\u0027s Birthday\");"},{"lineNumber":121,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":122,"author":{"gitID":"daviddalmaso"},"content":"            String birthdayDate \u003d person.getBirthday().value;"},{"lineNumber":123,"author":{"gitID":"daviddalmaso"},"content":"            setEventDates(birthday, birthdayDate);"},{"lineNumber":124,"author":{"gitID":"daviddalmaso"},"content":"            String[] recc \u003d new String[] {\"RRULE:FREQ\u003dYEARLY;COUNT\u003d100\"};"},{"lineNumber":125,"author":{"gitID":"daviddalmaso"},"content":"            birthday.setRecurrence(Arrays.asList(recc));"},{"lineNumber":126,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":127,"author":{"gitID":"daviddalmaso"},"content":"            // Create appointment event for current Person object"},{"lineNumber":128,"author":{"gitID":"daviddalmaso"},"content":"            Event appointment \u003d new Event()"},{"lineNumber":129,"author":{"gitID":"daviddalmaso"},"content":"                    .setSummary(\"Appointment with \" + name);"},{"lineNumber":130,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":131,"author":{"gitID":"daviddalmaso"},"content":"            String appointmentDate \u003d person.getAppointment().value;"},{"lineNumber":132,"author":{"gitID":"daviddalmaso"},"content":"            setEventDates(appointment, appointmentDate);"},{"lineNumber":133,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":134,"author":{"gitID":"daviddalmaso"},"content":"            events.add(birthday);"},{"lineNumber":135,"author":{"gitID":"daviddalmaso"},"content":"            events.add(appointment);"},{"lineNumber":136,"author":{"gitID":"daviddalmaso"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":138,"author":{"gitID":"daviddalmaso"},"content":"        return events;"},{"lineNumber":139,"author":{"gitID":"daviddalmaso"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":141,"author":{"gitID":"daviddalmaso"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"daviddalmaso"},"content":"     * @param persons UniquePersonList to make the Calendar out of"},{"lineNumber":143,"author":{"gitID":"daviddalmaso"},"content":"     * @throws Exception if the Google API Client fails"},{"lineNumber":144,"author":{"gitID":"daviddalmaso"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"daviddalmaso"},"content":"    public static void insertCalendar(UniquePersonList persons) throws Exception {"},{"lineNumber":146,"author":{"gitID":"daviddalmaso"},"content":"        Credential credentials \u003d GoogleCalendarClient.authorize();"},{"lineNumber":147,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":148,"author":{"gitID":"daviddalmaso"},"content":"        Calendar service \u003d new Calendar.Builder(httpTransport, jsonFactory, credentials)"},{"lineNumber":149,"author":{"gitID":"daviddalmaso"},"content":"                .setApplicationName(applicationName).build();"},{"lineNumber":150,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":151,"author":{"gitID":"daviddalmaso"},"content":"        String existingCalendarId \u003d getExistingCalendarId(service, \"reInsurance Events\");"},{"lineNumber":152,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":153,"author":{"gitID":"daviddalmaso"},"content":"        // If the reInsurance Events calendar already exists, delete it"},{"lineNumber":154,"author":{"gitID":"daviddalmaso"},"content":"        if (existingCalendarId !\u003d null) {"},{"lineNumber":155,"author":{"gitID":"daviddalmaso"},"content":"            service.calendars().delete(existingCalendarId).execute();"},{"lineNumber":156,"author":{"gitID":"daviddalmaso"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":158,"author":{"gitID":"daviddalmaso"},"content":"        // Create a new calendar"},{"lineNumber":159,"author":{"gitID":"daviddalmaso"},"content":"        com.google.api.services.calendar.model.Calendar calendar \u003d"},{"lineNumber":160,"author":{"gitID":"daviddalmaso"},"content":"                new com.google.api.services.calendar.model.Calendar();"},{"lineNumber":161,"author":{"gitID":"daviddalmaso"},"content":"        calendar.setSummary(\"reInsurance Events\");"},{"lineNumber":162,"author":{"gitID":"daviddalmaso"},"content":"        calendar.setTimeZone(\"Asia/Singapore\");"},{"lineNumber":163,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":164,"author":{"gitID":"daviddalmaso"},"content":"        // Insert the new calendar"},{"lineNumber":165,"author":{"gitID":"daviddalmaso"},"content":"        com.google.api.services.calendar.model.Calendar createdCalendar \u003d"},{"lineNumber":166,"author":{"gitID":"daviddalmaso"},"content":"                service.calendars().insert(calendar).execute();"},{"lineNumber":167,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":168,"author":{"gitID":"daviddalmaso"},"content":"        // Get created calendar Id"},{"lineNumber":169,"author":{"gitID":"daviddalmaso"},"content":"        String calendarId \u003d createdCalendar.getId();"},{"lineNumber":170,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":171,"author":{"gitID":"daviddalmaso"},"content":"        // Insert events into create calendar"},{"lineNumber":172,"author":{"gitID":"daviddalmaso"},"content":"        List\u003cEvent\u003e events \u003d createEvents(persons);"},{"lineNumber":173,"author":{"gitID":"daviddalmaso"},"content":"        for (Event event : events) {"},{"lineNumber":174,"author":{"gitID":"daviddalmaso"},"content":"            service.events().insert(calendarId, event).execute();"},{"lineNumber":175,"author":{"gitID":"daviddalmaso"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"daviddalmaso"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":178,"author":{"gitID":"daviddalmaso"},"content":"    public static String getExistingCalendarId(Calendar service, String calendarSummary) {"},{"lineNumber":179,"author":{"gitID":"daviddalmaso"},"content":"        try {"},{"lineNumber":180,"author":{"gitID":"daviddalmaso"},"content":"            // Get list of calendars that user has"},{"lineNumber":181,"author":{"gitID":"daviddalmaso"},"content":"            List\u003cCalendarListEntry\u003e calendarList \u003d service.calendarList().list().execute().getItems();"},{"lineNumber":182,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":183,"author":{"gitID":"daviddalmaso"},"content":"            // Iterate through the list of calendars to find the calendar id of the calendarSummary that matches"},{"lineNumber":184,"author":{"gitID":"daviddalmaso"},"content":"            for (CalendarListEntry calendarListEntry : calendarList) {"},{"lineNumber":185,"author":{"gitID":"daviddalmaso"},"content":"                if (calendarListEntry.getSummary().compareTo(calendarSummary) \u003d\u003d 0) {"},{"lineNumber":186,"author":{"gitID":"daviddalmaso"},"content":"                    return calendarListEntry.getId();"},{"lineNumber":187,"author":{"gitID":"daviddalmaso"},"content":"                }"},{"lineNumber":188,"author":{"gitID":"daviddalmaso"},"content":"            }"},{"lineNumber":189,"author":{"gitID":"daviddalmaso"},"content":"        } catch (Exception e) {"},{"lineNumber":190,"author":{"gitID":"daviddalmaso"},"content":"            System.out.println(\"Unable to get CalendarList from Google Calendar\");"},{"lineNumber":191,"author":{"gitID":"daviddalmaso"},"content":"            System.out.println(e);"},{"lineNumber":192,"author":{"gitID":"daviddalmaso"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":194,"author":{"gitID":"daviddalmaso"},"content":"        return null;"},{"lineNumber":195,"author":{"gitID":"daviddalmaso"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"daviddalmaso"},"content":"}"},{"lineNumber":197,"author":{"gitID":"daviddalmaso"},"content":""}],"authorContributionMap":{"daviddalmaso":169,"-":28}},{"path":"src/main/java/seedu/address/model/export/exceptions/IncorrectExportTypeException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.export.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"daviddalmaso"},"content":"//@@author daviddalmaso"},{"lineNumber":4,"author":{"gitID":"daviddalmaso"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"daviddalmaso"},"content":" * Exception to handle when the given export type is not valid"},{"lineNumber":6,"author":{"gitID":"daviddalmaso"},"content":" */"},{"lineNumber":7,"author":{"gitID":"daviddalmaso"},"content":"public class IncorrectExportTypeException extends IllegalArgumentException {"},{"lineNumber":8,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":9,"author":{"gitID":"daviddalmaso"},"content":"    public IncorrectExportTypeException() {"},{"lineNumber":10,"author":{"gitID":"daviddalmaso"},"content":"        super(\"Unable to map given argument to a valid Export Type\");"},{"lineNumber":11,"author":{"gitID":"daviddalmaso"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"daviddalmaso"},"content":""},{"lineNumber":13,"author":{"gitID":"daviddalmaso"},"content":"}"}],"authorContributionMap":{"daviddalmaso":11,"-":2}},{"path":"src/main/java/seedu/address/model/Insurance/Insurance.java","lines":[{"lineNumber":1,"author":{"gitID":"Sebry9"},"content":"package seedu.address.model.Insurance;"},{"lineNumber":2,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Sebry9"},"content":"//@@author Sebry9"},{"lineNumber":6,"author":{"gitID":"Sebry9"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Sebry9"},"content":" * Represents a Insurance plan in reInsurance."},{"lineNumber":8,"author":{"gitID":"Sebry9"},"content":" * Guarantees: immutable;"},{"lineNumber":9,"author":{"gitID":"Sebry9"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Sebry9"},"content":"public class Insurance {"},{"lineNumber":11,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":12,"author":{"gitID":"Sebry9"},"content":"    public static final String MESSAGE_INSURANCE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"Sebry9"},"content":"        \"Insurance should only contain alphanumeric characters\";"},{"lineNumber":14,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":15,"author":{"gitID":"Sebry9"},"content":"    private static final String SPECIAL_CHARACTERS \u003d \"\\\\[\\\\]{|}\";"},{"lineNumber":16,"author":{"gitID":"Sebry9"},"content":"    private static final String INSURANCE_NAME \u003d \"[\\\\p{Alnum} ]*\";"},{"lineNumber":17,"author":{"gitID":"Sebry9"},"content":"    private static final String COMMISSION_FORMAT \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"},{"lineNumber":18,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":19,"author":{"gitID":"Sebry9"},"content":"    /*"},{"lineNumber":20,"author":{"gitID":"Sebry9"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":21,"author":{"gitID":"Sebry9"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"Sebry9"},"content":"    public static final String INSURANCE_VALIDATION_REGEX \u003d  INSURANCE_NAME + COMMISSION_FORMAT;"},{"lineNumber":23,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":24,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":25,"author":{"gitID":"Sebry9"},"content":"    public final String insuranceName;"},{"lineNumber":26,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":27,"author":{"gitID":"Sebry9"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"Sebry9"},"content":"     * Constructs a {@code Name}."},{"lineNumber":29,"author":{"gitID":"Sebry9"},"content":"     *"},{"lineNumber":30,"author":{"gitID":"Sebry9"},"content":"     * @param insurance A valid insurance."},{"lineNumber":31,"author":{"gitID":"Sebry9"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"Sebry9"},"content":"    public Insurance(String insurance) {"},{"lineNumber":33,"author":{"gitID":"Sebry9"},"content":"        checkArgument(isValidInsurance(insurance), MESSAGE_INSURANCE_CONSTRAINTS);"},{"lineNumber":34,"author":{"gitID":"Sebry9"},"content":"        this.insuranceName \u003d insurance;"},{"lineNumber":35,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":37,"author":{"gitID":"Sebry9"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"Sebry9"},"content":"     * Returns true if a given string is a valid insurance."},{"lineNumber":39,"author":{"gitID":"Sebry9"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"Sebry9"},"content":"    public static boolean isValidInsurance(String test) {"},{"lineNumber":41,"author":{"gitID":"Sebry9"},"content":"        if (test \u003d\u003d null) {"},{"lineNumber":42,"author":{"gitID":"Sebry9"},"content":"            return true;"},{"lineNumber":43,"author":{"gitID":"Sebry9"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"Sebry9"},"content":"        return test.matches(INSURANCE_VALIDATION_REGEX);"},{"lineNumber":45,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":47,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":48,"author":{"gitID":"Sebry9"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"Sebry9"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitID":"Sebry9"},"content":"        return insuranceName;"},{"lineNumber":51,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":53,"author":{"gitID":"Sebry9"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"Sebry9"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitID":"Sebry9"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":56,"author":{"gitID":"Sebry9"},"content":"            || (other instanceof Insurance // instanceof handles nulls"},{"lineNumber":57,"author":{"gitID":"Sebry9"},"content":"            \u0026\u0026 this.insuranceName.equals(((Insurance) other).insuranceName)); // state check"},{"lineNumber":58,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":60,"author":{"gitID":"Sebry9"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"Sebry9"},"content":"    public int hashCode() {"},{"lineNumber":62,"author":{"gitID":"Sebry9"},"content":"        return insuranceName.hashCode();"},{"lineNumber":63,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":65,"author":{"gitID":"Sebry9"},"content":"}"}],"authorContributionMap":{"Sebry9":63,"-":2}},{"path":"src/main/java/seedu/address/model/group/UniqueGroupList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.group;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * A list of groups that enforces no nulls and uniqueness between its elements."},{"lineNumber":16,"author":{"gitID":"-"},"content":" *"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":18,"author":{"gitID":"-"},"content":" *"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * @see Group#equals(Object)"},{"lineNumber":20,"author":{"gitID":"-"},"content":" *"},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"limzk1994"},"content":"//@@author limzk1994"},{"lineNumber":23,"author":{"gitID":"limzk1994"},"content":"public class UniqueGroupList implements Iterable\u003cGroup\u003e {"},{"lineNumber":24,"author":{"gitID":"limzk1994"},"content":""},{"lineNumber":25,"author":{"gitID":"limzk1994"},"content":"    private final ObservableList\u003cGroup\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":26,"author":{"gitID":"limzk1994"},"content":""},{"lineNumber":27,"author":{"gitID":"limzk1994"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"limzk1994"},"content":"     * Constructs empty Group List."},{"lineNumber":29,"author":{"gitID":"limzk1994"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"limzk1994"},"content":"    public UniqueGroupList() {"},{"lineNumber":31,"author":{"gitID":"limzk1994"},"content":""},{"lineNumber":32,"author":{"gitID":"limzk1994"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"limzk1994"},"content":""},{"lineNumber":34,"author":{"gitID":"limzk1994"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"limzk1994"},"content":"     * Creates a UniqueGroupList using given tags."},{"lineNumber":36,"author":{"gitID":"limzk1994"},"content":"     * Enforces no nulls."},{"lineNumber":37,"author":{"gitID":"limzk1994"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"limzk1994"},"content":"    public UniqueGroupList(Group groups) {"},{"lineNumber":39,"author":{"gitID":"limzk1994"},"content":"        requireAllNonNull(groups);"},{"lineNumber":40,"author":{"gitID":"limzk1994"},"content":"        internalList.addAll(groups);"},{"lineNumber":41,"author":{"gitID":"limzk1994"},"content":""},{"lineNumber":42,"author":{"gitID":"limzk1994"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":43,"author":{"gitID":"limzk1994"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"limzk1994"},"content":""},{"lineNumber":45,"author":{"gitID":"limzk1994"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"limzk1994"},"content":"     * Replaces the Groups in this list with those in the argument group list."},{"lineNumber":47,"author":{"gitID":"limzk1994"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"limzk1994"},"content":"    public void setGroups(UniqueGroupList groups) {"},{"lineNumber":49,"author":{"gitID":"limzk1994"},"content":"        requireAllNonNull(groups);"},{"lineNumber":50,"author":{"gitID":"limzk1994"},"content":"        internalList.setAll(groups.internalList);"},{"lineNumber":51,"author":{"gitID":"limzk1994"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":52,"author":{"gitID":"limzk1994"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"limzk1994"},"content":""},{"lineNumber":54,"author":{"gitID":"limzk1994"},"content":"    public void setGroups(List\u003c? extends Group\u003e groups) throws DuplicateGroupException {"},{"lineNumber":55,"author":{"gitID":"limzk1994"},"content":"        final UniqueGroupList replacement \u003d new UniqueGroupList();"},{"lineNumber":56,"author":{"gitID":"limzk1994"},"content":"        for (final Group group : groups) {"},{"lineNumber":57,"author":{"gitID":"limzk1994"},"content":"            replacement.add(group);"},{"lineNumber":58,"author":{"gitID":"limzk1994"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"limzk1994"},"content":"        setGroups(replacement);"},{"lineNumber":60,"author":{"gitID":"limzk1994"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"limzk1994"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"limzk1994"},"content":"     * Ensures every tag in the argument list exists in this object."},{"lineNumber":63,"author":{"gitID":"limzk1994"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"limzk1994"},"content":"    public void mergeFrom(UniqueGroupList from) {"},{"lineNumber":65,"author":{"gitID":"limzk1994"},"content":"        final UniqueGroupList alreadyInside \u003d this;"},{"lineNumber":66,"author":{"gitID":"limzk1994"},"content":"        from.internalList.stream()"},{"lineNumber":67,"author":{"gitID":"limzk1994"},"content":"                .filter(group -\u003e !alreadyInside.contains(group))"},{"lineNumber":68,"author":{"gitID":"limzk1994"},"content":"                .forEach(internalList::add);"},{"lineNumber":69,"author":{"gitID":"limzk1994"},"content":""},{"lineNumber":70,"author":{"gitID":"limzk1994"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":71,"author":{"gitID":"limzk1994"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"limzk1994"},"content":""},{"lineNumber":73,"author":{"gitID":"limzk1994"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"limzk1994"},"content":"     * Returns true if the list contains an equivalent Group as the given argument."},{"lineNumber":75,"author":{"gitID":"limzk1994"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"limzk1994"},"content":"    public boolean contains(Group toCheck) {"},{"lineNumber":77,"author":{"gitID":"limzk1994"},"content":"        requireNonNull(toCheck);"},{"lineNumber":78,"author":{"gitID":"limzk1994"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":79,"author":{"gitID":"limzk1994"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"limzk1994"},"content":""},{"lineNumber":81,"author":{"gitID":"limzk1994"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"limzk1994"},"content":"     * Adds a Tag to the list."},{"lineNumber":83,"author":{"gitID":"limzk1994"},"content":"     *"},{"lineNumber":84,"author":{"gitID":"limzk1994"},"content":"     * @throws DuplicateGroupException if the Group to add is a duplicate of an existing Tag in the list."},{"lineNumber":85,"author":{"gitID":"limzk1994"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"limzk1994"},"content":"    public void add(Group toAdd) throws DuplicateGroupException {"},{"lineNumber":87,"author":{"gitID":"limzk1994"},"content":"        requireNonNull(toAdd);"},{"lineNumber":88,"author":{"gitID":"limzk1994"},"content":"        if (contains(toAdd)) {"},{"lineNumber":89,"author":{"gitID":"limzk1994"},"content":"            throw new DuplicateGroupException();"},{"lineNumber":90,"author":{"gitID":"limzk1994"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"limzk1994"},"content":"        internalList.add(toAdd);"},{"lineNumber":92,"author":{"gitID":"limzk1994"},"content":""},{"lineNumber":93,"author":{"gitID":"limzk1994"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":94,"author":{"gitID":"limzk1994"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"limzk1994"},"content":""},{"lineNumber":96,"author":{"gitID":"limzk1994"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"limzk1994"},"content":"    public Iterator\u003cGroup\u003e iterator() {"},{"lineNumber":98,"author":{"gitID":"limzk1994"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":99,"author":{"gitID":"limzk1994"},"content":"        return internalList.iterator();"},{"lineNumber":100,"author":{"gitID":"limzk1994"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"limzk1994"},"content":""},{"lineNumber":102,"author":{"gitID":"limzk1994"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"limzk1994"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":104,"author":{"gitID":"limzk1994"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"limzk1994"},"content":"    public ObservableList\u003cGroup\u003e asObservableList() {"},{"lineNumber":106,"author":{"gitID":"limzk1994"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":107,"author":{"gitID":"limzk1994"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":108,"author":{"gitID":"limzk1994"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"limzk1994"},"content":""},{"lineNumber":110,"author":{"gitID":"limzk1994"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"limzk1994"},"content":"    public boolean equals(Object other) {"},{"lineNumber":112,"author":{"gitID":"limzk1994"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":113,"author":{"gitID":"limzk1994"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":114,"author":{"gitID":"limzk1994"},"content":"                || (other instanceof UniqueGroupList // instanceof handles nulls"},{"lineNumber":115,"author":{"gitID":"limzk1994"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueGroupList) other).internalList));"},{"lineNumber":116,"author":{"gitID":"limzk1994"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"limzk1994"},"content":""},{"lineNumber":118,"author":{"gitID":"limzk1994"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"limzk1994"},"content":"    public int hashCode() {"},{"lineNumber":120,"author":{"gitID":"limzk1994"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":121,"author":{"gitID":"limzk1994"},"content":"        return internalList.hashCode();"},{"lineNumber":122,"author":{"gitID":"limzk1994"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"limzk1994"},"content":""},{"lineNumber":124,"author":{"gitID":"limzk1994"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"limzk1994"},"content":"     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":126,"author":{"gitID":"limzk1994"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"limzk1994"},"content":"    public static class DuplicateGroupException extends DuplicateDataException {"},{"lineNumber":128,"author":{"gitID":"limzk1994"},"content":"        protected DuplicateGroupException() {"},{"lineNumber":129,"author":{"gitID":"limzk1994"},"content":"        super(\"Operation would result in duplicate groups\");"},{"lineNumber":130,"author":{"gitID":"limzk1994"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"limzk1994"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"limzk1994"},"content":"}"}],"authorContributionMap":{"-":21,"limzk1994":111}},{"path":"src/main/java/seedu/address/model/Insurance/Commission.java","lines":[{"lineNumber":1,"author":{"gitID":"Sebry9"},"content":"package seedu.address.model.Insurance;"},{"lineNumber":2,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":5,"author":{"gitID":"Sebry9"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"Sebry9"},"content":"//@@author Sebry9"},{"lineNumber":10,"author":{"gitID":"Sebry9"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Sebry9"},"content":" * Represents the commission recieved from a insurance plan in reInsurance."},{"lineNumber":12,"author":{"gitID":"Sebry9"},"content":" * Guarantees: immutable;"},{"lineNumber":13,"author":{"gitID":"Sebry9"},"content":" */"},{"lineNumber":14,"author":{"gitID":"Sebry9"},"content":"public class Commission {"},{"lineNumber":15,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":16,"author":{"gitID":"Sebry9"},"content":"    private final String commission;"},{"lineNumber":17,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":18,"author":{"gitID":"Sebry9"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"Sebry9"},"content":"     * Every field must be present and not null."},{"lineNumber":20,"author":{"gitID":"Sebry9"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"Sebry9"},"content":"    public Commission(Insurance insurance) {"},{"lineNumber":22,"author":{"gitID":"Sebry9"},"content":"        requireNonNull(insurance);"},{"lineNumber":23,"author":{"gitID":"Sebry9"},"content":"        Insurance insurance1 \u003d insurance;"},{"lineNumber":24,"author":{"gitID":"Sebry9"},"content":"        String insuranceName \u003d insurance.toString();"},{"lineNumber":25,"author":{"gitID":"Sebry9"},"content":"        String commission \u003d new String(\"0\");"},{"lineNumber":26,"author":{"gitID":"Sebry9"},"content":"        Pattern p1 \u003d Pattern.compile(\"\\\\{(.*?)\\\\}\");"},{"lineNumber":27,"author":{"gitID":"Sebry9"},"content":"        Matcher m1 \u003d p1.matcher(insuranceName);"},{"lineNumber":28,"author":{"gitID":"Sebry9"},"content":"        Pattern p2 \u003d Pattern.compile(\"\\\\[(.*?)\\\\]\");"},{"lineNumber":29,"author":{"gitID":"Sebry9"},"content":"        Matcher m2 \u003d p2.matcher(insuranceName);"},{"lineNumber":30,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":31,"author":{"gitID":"Sebry9"},"content":"        while (m1.find()) {"},{"lineNumber":32,"author":{"gitID":"Sebry9"},"content":"            if (commission.equals(\"0\")) {"},{"lineNumber":33,"author":{"gitID":"Sebry9"},"content":"                commission \u003d m1.group().substring(1, m1.group().length() - 1);"},{"lineNumber":34,"author":{"gitID":"Sebry9"},"content":"            }"},{"lineNumber":35,"author":{"gitID":"Sebry9"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"Sebry9"},"content":"        while (m2.find()) {"},{"lineNumber":37,"author":{"gitID":"Sebry9"},"content":"            if (commission.equals(\"0\")) {"},{"lineNumber":38,"author":{"gitID":"Sebry9"},"content":"                commission \u003d m2.group().substring(1, m2.group().length() - 1);"},{"lineNumber":39,"author":{"gitID":"Sebry9"},"content":"            }"},{"lineNumber":40,"author":{"gitID":"Sebry9"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":42,"author":{"gitID":"Sebry9"},"content":"        this.commission \u003d commission;"},{"lineNumber":43,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":44,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":46,"author":{"gitID":"Sebry9"},"content":"    public String getCommission() {"},{"lineNumber":47,"author":{"gitID":"Sebry9"},"content":"        return commission;"},{"lineNumber":48,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":50,"author":{"gitID":"Sebry9"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"Sebry9"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"Sebry9"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":53,"author":{"gitID":"Sebry9"},"content":"            return true;"},{"lineNumber":54,"author":{"gitID":"Sebry9"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":56,"author":{"gitID":"Sebry9"},"content":"        if (!(other instanceof Commission)) {"},{"lineNumber":57,"author":{"gitID":"Sebry9"},"content":"            return false;"},{"lineNumber":58,"author":{"gitID":"Sebry9"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":60,"author":{"gitID":"Sebry9"},"content":"        Commission otherCommission \u003d (Commission) other;"},{"lineNumber":61,"author":{"gitID":"Sebry9"},"content":"        return otherCommission.getCommission().equals(this.getCommission());"},{"lineNumber":62,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":64,"author":{"gitID":"Sebry9"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"Sebry9"},"content":"    public int hashCode() {"},{"lineNumber":66,"author":{"gitID":"Sebry9"},"content":"        return Objects.hash(commission);"},{"lineNumber":67,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":69,"author":{"gitID":"Sebry9"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"Sebry9"},"content":"    public String toString() {"},{"lineNumber":71,"author":{"gitID":"Sebry9"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":72,"author":{"gitID":"Sebry9"},"content":"        builder.append(getCommission());"},{"lineNumber":73,"author":{"gitID":"Sebry9"},"content":"        return builder.toString();"},{"lineNumber":74,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"Sebry9"},"content":"}"}],"authorContributionMap":{"Sebry9":71,"-":4}},{"path":"src/main/java/seedu/address/model/Insurance/UniqueInsuranceList.java","lines":[{"lineNumber":1,"author":{"gitID":"Sebry9"},"content":"package seedu.address.model.Insurance;"},{"lineNumber":2,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":14,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":15,"author":{"gitID":"Sebry9"},"content":"//@@author Sebry9"},{"lineNumber":16,"author":{"gitID":"Sebry9"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"Sebry9"},"content":" * A list of insurance that enforces no nulls and uniqueness between its elements."},{"lineNumber":18,"author":{"gitID":"Sebry9"},"content":" *"},{"lineNumber":19,"author":{"gitID":"Sebry9"},"content":" * Supports minimal set of list operations for the reInsurance\u0027s features."},{"lineNumber":20,"author":{"gitID":"Sebry9"},"content":" *"},{"lineNumber":21,"author":{"gitID":"Sebry9"},"content":" * @see Insurance#equals(Object)"},{"lineNumber":22,"author":{"gitID":"Sebry9"},"content":" */"},{"lineNumber":23,"author":{"gitID":"Sebry9"},"content":"public class UniqueInsuranceList implements Iterable\u003cInsurance\u003e {"},{"lineNumber":24,"author":{"gitID":"Sebry9"},"content":"    private final ObservableList\u003cInsurance\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":25,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":26,"author":{"gitID":"Sebry9"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"Sebry9"},"content":"     * Constructs empty InsuranceList."},{"lineNumber":28,"author":{"gitID":"Sebry9"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"Sebry9"},"content":"    public UniqueInsuranceList() {}"},{"lineNumber":30,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":31,"author":{"gitID":"Sebry9"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"Sebry9"},"content":"     * Creates a UniqueInsuranceList using given insurances."},{"lineNumber":33,"author":{"gitID":"Sebry9"},"content":"     * Enforces no nulls."},{"lineNumber":34,"author":{"gitID":"Sebry9"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"Sebry9"},"content":"    public UniqueInsuranceList(Set\u003cInsurance\u003e insurance) {"},{"lineNumber":36,"author":{"gitID":"Sebry9"},"content":"        requireAllNonNull(insurance);"},{"lineNumber":37,"author":{"gitID":"Sebry9"},"content":"        internalList.addAll(insurance);"},{"lineNumber":38,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":39,"author":{"gitID":"Sebry9"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":40,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":42,"author":{"gitID":"Sebry9"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"Sebry9"},"content":"     * Returns all insurance in this list as a Set."},{"lineNumber":44,"author":{"gitID":"Sebry9"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":45,"author":{"gitID":"Sebry9"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"Sebry9"},"content":"    public Set\u003cInsurance\u003e toSet() {"},{"lineNumber":47,"author":{"gitID":"Sebry9"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":48,"author":{"gitID":"Sebry9"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":49,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":51,"author":{"gitID":"Sebry9"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"Sebry9"},"content":"     * Replaces the Insurance in this list with those in the argument insurance list."},{"lineNumber":53,"author":{"gitID":"Sebry9"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"Sebry9"},"content":"    public void setInsurances(Set\u003cInsurance\u003e insurance) {"},{"lineNumber":55,"author":{"gitID":"Sebry9"},"content":"        requireAllNonNull(insurance);"},{"lineNumber":56,"author":{"gitID":"Sebry9"},"content":"        internalList.setAll(insurance);"},{"lineNumber":57,"author":{"gitID":"Sebry9"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":58,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":60,"author":{"gitID":"Sebry9"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"Sebry9"},"content":"     * Ensures every insurance in the argument list exists in this object."},{"lineNumber":62,"author":{"gitID":"Sebry9"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"Sebry9"},"content":"    public void mergeFrom(UniqueInsuranceList from) {"},{"lineNumber":64,"author":{"gitID":"Sebry9"},"content":"        final Set\u003cInsurance\u003e alreadyInside \u003d this.toSet();"},{"lineNumber":65,"author":{"gitID":"Sebry9"},"content":"        from.internalList.stream()"},{"lineNumber":66,"author":{"gitID":"Sebry9"},"content":"            .filter(insurance -\u003e !alreadyInside.contains(insurance))"},{"lineNumber":67,"author":{"gitID":"Sebry9"},"content":"            .forEach(internalList::add);"},{"lineNumber":68,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":69,"author":{"gitID":"Sebry9"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":70,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":72,"author":{"gitID":"Sebry9"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"Sebry9"},"content":"     * Returns true if the list contains an equivalent Insurance as the given argument."},{"lineNumber":74,"author":{"gitID":"Sebry9"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"Sebry9"},"content":"    public boolean contains(Insurance toCheck) {"},{"lineNumber":76,"author":{"gitID":"Sebry9"},"content":"        requireNonNull(toCheck);"},{"lineNumber":77,"author":{"gitID":"Sebry9"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":78,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":80,"author":{"gitID":"Sebry9"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"Sebry9"},"content":"     * Adds a Insurance to the list."},{"lineNumber":82,"author":{"gitID":"Sebry9"},"content":"     *"},{"lineNumber":83,"author":{"gitID":"Sebry9"},"content":"     * @throws DuplicateInsuranceException if the Insuranceto add is a duplicate of an existing Tag in the list."},{"lineNumber":84,"author":{"gitID":"Sebry9"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"Sebry9"},"content":"    public void add(Insurance toAdd) throws DuplicateInsuranceException {"},{"lineNumber":86,"author":{"gitID":"Sebry9"},"content":"        requireNonNull(toAdd);"},{"lineNumber":87,"author":{"gitID":"Sebry9"},"content":"        if (contains(toAdd)) {"},{"lineNumber":88,"author":{"gitID":"Sebry9"},"content":"            throw new DuplicateInsuranceException();"},{"lineNumber":89,"author":{"gitID":"Sebry9"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"Sebry9"},"content":"        internalList.add(toAdd);"},{"lineNumber":91,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":92,"author":{"gitID":"Sebry9"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":93,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":95,"author":{"gitID":"Sebry9"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"Sebry9"},"content":"    public Iterator\u003cInsurance\u003e iterator() {"},{"lineNumber":97,"author":{"gitID":"Sebry9"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":98,"author":{"gitID":"Sebry9"},"content":"        return internalList.iterator();"},{"lineNumber":99,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":101,"author":{"gitID":"Sebry9"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"Sebry9"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":103,"author":{"gitID":"Sebry9"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"Sebry9"},"content":"    public ObservableList\u003cInsurance\u003e asObservableList() {"},{"lineNumber":105,"author":{"gitID":"Sebry9"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":106,"author":{"gitID":"Sebry9"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":107,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":109,"author":{"gitID":"Sebry9"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"Sebry9"},"content":"    public boolean equals(Object other) {"},{"lineNumber":111,"author":{"gitID":"Sebry9"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":112,"author":{"gitID":"Sebry9"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":113,"author":{"gitID":"Sebry9"},"content":"            || (other instanceof UniqueInsuranceList // instanceof handles nulls"},{"lineNumber":114,"author":{"gitID":"Sebry9"},"content":"            \u0026\u0026 this.internalList.equals(((UniqueInsuranceList) other).internalList));"},{"lineNumber":115,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":117,"author":{"gitID":"Sebry9"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"Sebry9"},"content":"     * Returns true if the element in this list is equal to the elements in {@code other}."},{"lineNumber":119,"author":{"gitID":"Sebry9"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":120,"author":{"gitID":"Sebry9"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"Sebry9"},"content":"    public boolean equalsOrderInsensitive(UniqueInsuranceList other) {"},{"lineNumber":122,"author":{"gitID":"Sebry9"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":123,"author":{"gitID":"Sebry9"},"content":"        assert CollectionUtil.elementsAreUnique(other.internalList);"},{"lineNumber":124,"author":{"gitID":"Sebry9"},"content":"        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":125,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":127,"author":{"gitID":"Sebry9"},"content":"    @Override"},{"lineNumber":128,"author":{"gitID":"Sebry9"},"content":"    public int hashCode() {"},{"lineNumber":129,"author":{"gitID":"Sebry9"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":130,"author":{"gitID":"Sebry9"},"content":"        return internalList.hashCode();"},{"lineNumber":131,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":133,"author":{"gitID":"Sebry9"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"Sebry9"},"content":"     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":135,"author":{"gitID":"Sebry9"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"Sebry9"},"content":"    public static class DuplicateInsuranceException extends DuplicateDataException {"},{"lineNumber":137,"author":{"gitID":"Sebry9"},"content":"        protected DuplicateInsuranceException() {"},{"lineNumber":138,"author":{"gitID":"Sebry9"},"content":"            super(\"Operation would result in duplicate insurances\");"},{"lineNumber":139,"author":{"gitID":"Sebry9"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"Sebry9"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":142,"author":{"gitID":"Sebry9"},"content":"}"},{"lineNumber":143,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":144,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":145,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":146,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":147,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":148,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":149,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":150,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":151,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":152,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":153,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":154,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":155,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":156,"author":{"gitID":"Sebry9"},"content":""},{"lineNumber":157,"author":{"gitID":"Sebry9"},"content":""}],"authorContributionMap":{"Sebry9":146,"-":11}}]
