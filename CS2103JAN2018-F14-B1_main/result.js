var resultJson = [{"path":"docs/team/jordanchong.adoc","lines":[{"lineNumber":1,"author":{"gitID":"jordancjq"},"content":"\u003d Jordan Chong - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"\u003d\u003d PROJECT: AddressBook - Level 4"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"---"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"jordancjq"},"content":"* *Major enhancement*: added *nothing at the moment*"},{"lineNumber":16,"author":{"gitID":"jordancjq"},"content":"** What it does:"},{"lineNumber":17,"author":{"gitID":"jordancjq"},"content":"** Justification:"},{"lineNumber":18,"author":{"gitID":"jordancjq"},"content":"** Highlights:"},{"lineNumber":19,"author":{"gitID":"-"},"content":"** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"jordancjq"},"content":"* *Minor enhancement*:"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"** Project management:"},{"lineNumber":28,"author":{"gitID":"jordancjq"},"content":"*** Managed releases"},{"lineNumber":29,"author":{"gitID":"jordancjq"},"content":"** Enhancements to existing features:"},{"lineNumber":30,"author":{"gitID":"jordancjq"},"content":"** Documentation:"},{"lineNumber":31,"author":{"gitID":"jordancjq"},"content":"** Community:"},{"lineNumber":32,"author":{"gitID":"jordancjq"},"content":"** Tools:"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"_{you can add/remove categories in the list above}_"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":40,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":41,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dundoredo]"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003ddataencryption]"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":50,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":51,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dundoredo]"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003ddataencryption]"}],"authorContributionMap":{"jordancjq":11,"-":44}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"jordancjq"},"content":"My Team Manager was developed by the https://github.com/CS2103JAN2018-F14-B1[F14-B1] team. +"},{"lineNumber":7,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d Codee Ong"},{"lineNumber":15,"author":{"gitID":"jordancjq"},"content":"image::codeeo.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":16,"author":{"gitID":"jordancjq"},"content":"{empty}[https://github.com/codeeong[github]] [\u003c\u003ccodeeong#, portfolio\u003e\u003e]"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"jordancjq"},"content":"Role: Developer +"},{"lineNumber":19,"author":{"gitID":"jordancjq"},"content":"Responsibilities: UI Component"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d Jordan Chong"},{"lineNumber":24,"author":{"gitID":"jordancjq"},"content":"image::jordanc.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":25,"author":{"gitID":"jordancjq"},"content":"{empty}[http://github.com/jordancjq[github]] [\u003c\u003cjordanchong#, portfolio\u003e\u003e]"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":28,"author":{"gitID":"jordancjq"},"content":"Responsibilities: Model Component"},{"lineNumber":29,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":30,"author":{"gitID":"jordancjq"},"content":"* RemarkCommand"},{"lineNumber":31,"author":{"gitID":"jordancjq"},"content":"* Enhance Add with Optional Parameters"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d Syafiq"},{"lineNumber":36,"author":{"gitID":"jordancjq"},"content":"image::syafiq.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":37,"author":{"gitID":"jordancjq"},"content":"{empty}[http://github.com/lithiumlkid[github]] [\u003c\u003csyafiq#, portfolio\u003e\u003e]"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"jordancjq"},"content":"Role: Head Developer +"},{"lineNumber":40,"author":{"gitID":"jordancjq"},"content":"Responsibilities: Storage Component"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d Loh Tian Wei"},{"lineNumber":45,"author":{"gitID":"jordancjq"},"content":"image::ltianwei.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":46,"author":{"gitID":"jordancjq"},"content":"{empty}[http://github.com/lohtianwei[github]] [\u003c\u003clohtianwei#, portfolio\u003e\u003e]"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":49,"author":{"gitID":"jordancjq"},"content":"Responsibilities: Logic Component"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"jordancjq":23,"-":28}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"jordancjq"},"content":"\u003d My Team Manager"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"lithiumlkid"},"content":"https://travis-ci.org/CS2103JAN2018-F14-B1/main[image:https://travis-ci.org/CS2103JAN2018-F14-B1/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"lithiumlkid"},"content":"https://ci.appveyor.com/project/lithiumlkid/main/branch/master[image:https://ci.appveyor.com/api/projects/status/2itvfqp2b8xnaqqn/branch/master?svg\u003dtrue[Build status]]"},{"lineNumber":6,"author":{"gitID":"lithiumlkid"},"content":"https://coveralls.io/github/CS2103JAN2018-F14-B1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-F14-B1/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":7,"author":{"gitID":"-"},"content":"https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":11,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":15,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"My Team Manager (MTM) is a desktop based team managing application for football team managers. +"},{"lineNumber":18,"author":{"gitID":"-"},"content":"It uses a Command Line Interface (CLI)."},{"lineNumber":19,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"MTM is equipped with multiple features in helping you efficiently"},{"lineNumber":21,"author":{"gitID":"-"},"content":"and effectively manage your players, while keeping track of the team\u0027s schedule. +"},{"lineNumber":22,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"With MTM\u0027s aesthetically pleasing graphical user interface, viewing critical information will be quick and painless."},{"lineNumber":24,"author":{"gitID":"-"},"content":"Never lose track of your training schedule again! +"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"Say goodbye to manual tracking of information on excel sheet after excel sheet!"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"\u003d\u003d What MTM Can Do - Key Features"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"* Set up Teams"},{"lineNumber":31,"author":{"gitID":"-"},"content":"* Add Players to Teams"},{"lineNumber":32,"author":{"gitID":"-"},"content":"* Add Player\u0027s personal details, position, season statistics, demerits, etc."},{"lineNumber":33,"author":{"gitID":"-"},"content":"* View, Edit and Delete Players"},{"lineNumber":34,"author":{"gitID":"-"},"content":"* Sort players by field of choice"},{"lineNumber":35,"author":{"gitID":"-"},"content":"* Manage Schedule of Teams"},{"lineNumber":36,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":37,"author":{"gitID":"jordancjq"},"content":"Come and take a look at our link:./UserGuide.adoc[User Guide] to get started with MTM now."},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":42,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":43,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":44,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":49,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":50,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"lithiumlkid":3,"jordancjq":5,"-":44}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"jordancjq"},"content":"\u003d My Team Manager - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"jordancjq"},"content":":important-caption: :white_check_mark:"},{"lineNumber":14,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":15,"author":{"gitID":"lithiumlkid"},"content":":repoURL: https://github.com/CS2103JAN2018-F14-B1/main"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"jordancjq"},"content":"By: `F14-B1`      Since: `Mar 2018`      Licence: `MIT`"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":20,"author":{"gitID":"jordancjq"},"content":"My Team Manager (MTM) is a link:https://en.wikipedia.org/wiki/Command-line_interface[Command-Line Interface] (CLI) based address book application for *football team managers*."},{"lineNumber":21,"author":{"gitID":"jordancjq"},"content":"It is a one-stop solution to help you manage your player\u0027s contact details in an efficient and convenient manner."},{"lineNumber":22,"author":{"gitID":"jordancjq"},"content":"Using MTM, you can organize players into teams, view player statistics, and, generate player line-ups."},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"Head to \u003c\u003cQuick Start\u003e\u003e to get started with My Team Manager!"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"jordancjq"},"content":"// My Team Manager (MTM) is for *football team managers* who prefer to conduct management of their teams on their computers."},{"lineNumber":27,"author":{"gitID":"jordancjq"},"content":"// This is a Command Line Interface (CLI) application where you will be able to enter and organise details"},{"lineNumber":28,"author":{"gitID":"jordancjq"},"content":"// of the players you are managing. The players will be organised into their respective teams, and you can include details such"},{"lineNumber":29,"author":{"gitID":"jordancjq"},"content":"// as their positions and demerits, so that you can easily pick the lineup for matches. +"},{"lineNumber":30,"author":{"gitID":"jordancjq"},"content":"// Head to \u003c\u003cQuick Start\u003e\u003e to get started with My Team Manager!"},{"lineNumber":31,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":35,"author":{"gitID":"jordancjq"},"content":".  You can download Java 8 link:http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html[here]."},{"lineNumber":36,"author":{"gitID":"-"},"content":"+"},{"lineNumber":37,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":38,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":39,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":40,"author":{"gitID":"-"},"content":"+"},{"lineNumber":41,"author":{"gitID":"-"},"content":".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."},{"lineNumber":42,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for your Address Book."},{"lineNumber":43,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":44,"author":{"gitID":"-"},"content":"+"},{"lineNumber":45,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":46,"author":{"gitID":"-"},"content":"+"},{"lineNumber":47,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":48,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":49,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"* *`list`* : lists all contacts"},{"lineNumber":52,"author":{"gitID":"-"},"content":"* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."},{"lineNumber":53,"author":{"gitID":"-"},"content":"* **`delete`**`3` : deletes the 3rd contact shown in the current list"},{"lineNumber":54,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":59,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":62,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"* Some commands have an alias that you can use to execute the command e.g to add player to address book, you can type either `add n/John Doe` or `a n/John Doe`"},{"lineNumber":65,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":66,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":67,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":68,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d Tab Autocomplete"},{"lineNumber":72,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":73,"author":{"gitID":"jordancjq"},"content":"After typing in the first few characters of a command, pressing kbd:[tab] will fill in the rest of the item."},{"lineNumber":74,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":75,"author":{"gitID":"jordancjq"},"content":"To view the parameters for a command, press tab after the whole command is typed in. Pressing tab again will remove the parameters."},{"lineNumber":76,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":77,"author":{"gitID":"jordancjq"},"content":"[TIP]"},{"lineNumber":78,"author":{"gitID":"jordancjq"},"content":"You can use the autocompleted parameters as a template after viewing them."},{"lineNumber":79,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":80,"author":{"gitID":"lithiumlkid"},"content":"Text will turn red if the input has no parameters or if no matching command exists."},{"lineNumber":81,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":82,"author":{"gitID":"jordancjq"},"content":"If there are multiple possible commands for a given input, i.e. \u0027e\u0027 could be \u0027edit\u0027, \u0027exit\u0027, or \u0027export\u0027,"},{"lineNumber":83,"author":{"gitID":"jordancjq"},"content":"then a dropdown box will appear with the possible commands. These can be navigated using mouse or arrow keys. Press enter to select the desired command."},{"lineNumber":84,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d Adding a player: `add`"},{"lineNumber":90,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":91,"author":{"gitID":"jordancjq"},"content":"Adds a player to the address book."},{"lineNumber":92,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":93,"author":{"gitID":"jordancjq"},"content":"Format: `add n/NAME e/EMAIL [tm/TEAM] [a/ADDRESS] [p/PHONE_NUMBER] [j/JERSEY_NUMBER] [ra/RATING] [po/POSITION] [r/REMARKS] [t/TAG]...` +"},{"lineNumber":94,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":95,"author":{"gitID":"jordancjq"},"content":"The table below explains the correct inputs for the parameters."},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"jordancjq"},"content":"[width\u003d\"80%\",cols\u003d\"1,2,2\",options\u003d\"header\"]"},{"lineNumber":98,"author":{"gitID":"jordancjq"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":99,"author":{"gitID":"jordancjq"},"content":"|Parameter |Input type |Example"},{"lineNumber":100,"author":{"gitID":"jordancjq"},"content":"|n/NAME |Player name | n/Ronaldo"},{"lineNumber":101,"author":{"gitID":"jordancjq"},"content":"|e/EMAIL |Player\u0027s email address | a/ronaldo@soccer.com"},{"lineNumber":102,"author":{"gitID":"jordancjq"},"content":"|tm/TEAM |Player\u0027s Team | tm/Real Madrid"},{"lineNumber":103,"author":{"gitID":"jordancjq"},"content":"|a/ADDRESS |Player\u0027s address| a/Blk 123 Bukit Batok St 21"},{"lineNumber":104,"author":{"gitID":"jordancjq"},"content":"|p/PHONE_NUMBER| Player\u0027s phone number| p/92343433"},{"lineNumber":105,"author":{"gitID":"jordancjq"},"content":"|j/JERSEY_NUMBER| Player\u0027s jersey number| j/17"},{"lineNumber":106,"author":{"gitID":"jordancjq"},"content":"|ra/RATING| Player\u0027s performance rating (Any integer from 1 to 5)| ra/5"},{"lineNumber":107,"author":{"gitID":"jordancjq"},"content":"|po/POSITION| Player\u0027s postion (1 for Striker, 2 for Midfiled, 3 for Defender, 4 for Goalkeeper)| po/1"},{"lineNumber":108,"author":{"gitID":"jordancjq"},"content":"|r/REMARK| Your remark for the player| r/My best player"},{"lineNumber":109,"author":{"gitID":"jordancjq"},"content":"|t/TAG| Your tag for the player| t/Injured"},{"lineNumber":110,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":111,"author":{"gitID":"jordancjq"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":112,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":113,"author":{"gitID":"jordancjq"},"content":"[NOTE]"},{"lineNumber":114,"author":{"gitID":"jordancjq"},"content":"A player can only be added to an existing team."},{"lineNumber":115,"author":{"gitID":"jordancjq"},"content":"If you have not created the team yet, you can create one first using the \u003c\u003cCreating a team: `create` `[Since v1.2]`, `create`\u003e\u003e command."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":118,"author":{"gitID":"jordancjq"},"content":"A player can have any number of tags (including 0)."},{"lineNumber":119,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":120,"author":{"gitID":"jordancjq"},"content":"Alias: `a`"},{"lineNumber":121,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":122,"author":{"gitID":"jordancjq"},"content":"Output: The added player should appear in the player list panel."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"jordancjq"},"content":"* `add n/Mo Salah e/mo@soccer.com` +"},{"lineNumber":127,"author":{"gitID":"jordancjq"},"content":"Adds a player named `Mo Salah` with email `mo@soccer.com`."},{"lineNumber":128,"author":{"gitID":"jordancjq"},"content":"* `add n/Ronaldo p/92331322 e/ronaldo@soccer.com a/Portugal tm/Real Madrid j/17 ra/5 po/1 r/Always play him` +"},{"lineNumber":129,"author":{"gitID":"jordancjq"},"content":"Adds a player named Ronaldo with phone number `92331322`, email `ronaldo@soccer.com`, address `Portugal`,"},{"lineNumber":130,"author":{"gitID":"jordancjq"},"content":"team `Real Madrid`, jersey number `17`, rating `5`, position Striker, with remark `\"Always play him\"`."},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d Listing all players : `list`"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"jordancjq"},"content":"Shows a list of all players in the address book."},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"jordancjq"},"content":"Format: `list` +"},{"lineNumber":137,"author":{"gitID":"jordancjq"},"content":"Alias: `l`"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d Editing a player : `edit`"},{"lineNumber":140,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":141,"author":{"gitID":"jordancjq"},"content":"You may edit an existing player in the address book with the \u0027edit\u0027 command."},{"lineNumber":142,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":143,"author":{"gitID":"jordancjq"},"content":"Format: `edit INDEX [n/NAME] [e/EMAIL] [tm/TEAM] [a/ADDRESS] [p/PHONE_NUMBER] [j/JERSEY_NUMBER] [ra/RATING] [po/POSITION] [r/REMARKS] [t/TAG]...` +"},{"lineNumber":144,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":145,"author":{"gitID":"jordancjq"},"content":"Alias: `e`"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"****"},{"lineNumber":148,"author":{"gitID":"jordancjq"},"content":"* Edits the player at the specified `INDEX`. The index refers to the index number shown in the last player listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":149,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":150,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":151,"author":{"gitID":"jordancjq"},"content":"* When you edit tags, the existing tags of the player will be removed i.e adding of tags is not cumulative."},{"lineNumber":152,"author":{"gitID":"jordancjq"},"content":"* You can remove all the player\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":153,"author":{"gitID":"-"},"content":"****"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":158,"author":{"gitID":"jordancjq"},"content":"Edits the phone number and email address of the 1st player to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":159,"author":{"gitID":"-"},"content":"* `edit 2 n/Betsy Crower t/` +"},{"lineNumber":160,"author":{"gitID":"jordancjq"},"content":"Edits the name of the 2nd player to be `Betsy Crower` and clears all existing tags."},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d Locating players by name: `find`"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"jordancjq"},"content":"You can find a player whose names contain any of the given keywords with this command."},{"lineNumber":165,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":166,"author":{"gitID":"jordancjq"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":167,"author":{"gitID":"jordancjq"},"content":"Alias: `f`"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"****"},{"lineNumber":170,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":171,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":172,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":173,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":174,"author":{"gitID":"jordancjq"},"content":"* Players matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":175,"author":{"gitID":"-"},"content":"****"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"* `find John` +"},{"lineNumber":180,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":181,"author":{"gitID":"-"},"content":"* `find Betsy Tim John` +"},{"lineNumber":182,"author":{"gitID":"jordancjq"},"content":"Returns any player having names `Betsy`, `Tim`, or `John`"},{"lineNumber":183,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":184,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d Deleting a player : `delete`"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"jordancjq"},"content":"Should you want to delete a player from the address book, you may use this command."},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"jordancjq"},"content":"Format: `delete INDEX` +"},{"lineNumber":189,"author":{"gitID":"jordancjq"},"content":"Alias: `d`"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"****"},{"lineNumber":192,"author":{"gitID":"-"},"content":"* Deletes the player at the specified `INDEX`."},{"lineNumber":193,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":194,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":195,"author":{"gitID":"-"},"content":"****"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":200,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":201,"author":{"gitID":"-"},"content":"Deletes the 2nd player in the address book."},{"lineNumber":202,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":203,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":204,"author":{"gitID":"-"},"content":"Deletes the 1st player in the results of the `find` command."},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d Selecting a player : `select`"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"jordancjq"},"content":"Identified the player you\u0027re looking for and want to see more details about the player?"},{"lineNumber":209,"author":{"gitID":"jordancjq"},"content":"MTM offers you the ability to view details of your specified player via an index shown in the current listing of players."},{"lineNumber":210,"author":{"gitID":"jordancjq"},"content":"Alternatively, you can just scroll to the player you want, click their card,"},{"lineNumber":211,"author":{"gitID":"jordancjq"},"content":"and their details will be displayed on the right hand side of the screen."},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"jordancjq"},"content":"Format: `select INDEX` +"},{"lineNumber":214,"author":{"gitID":"jordancjq"},"content":"Alias: `s`"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"jordancjq"},"content":"[NOTE]"},{"lineNumber":217,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":218,"author":{"gitID":"jordancjq"},"content":"The index refers to the index number shown in the most recent listing. +"},{"lineNumber":219,"author":{"gitID":"jordancjq"},"content":"The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":220,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"jordancjq"},"content":"[IMPORTANT]"},{"lineNumber":223,"author":{"gitID":"jordancjq"},"content":".*What to expect*"},{"lineNumber":224,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":225,"author":{"gitID":"jordancjq"},"content":"Your selected player will have their details displayed on the details pane on MTM."},{"lineNumber":226,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"jordancjq"},"content":"Here are a few valid examples on how you can use the `select` command:"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":231,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":232,"author":{"gitID":"jordancjq"},"content":"Displays the list of all players and selects the 2nd player in that list."},{"lineNumber":233,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":234,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":235,"author":{"gitID":"jordancjq"},"content":"Finds a player named Betsy and selects the 1st player in the results of the `find` command."},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"jordancjq"},"content":"Have you been extensively using MTM and in the midst of entering more commands, you could not remember what commands you have entered? MTM allows you to look at all your past commands that you have entered in reverse chronological order."},{"lineNumber":240,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":241,"author":{"gitID":"jordancjq"},"content":"Format: `history` +"},{"lineNumber":242,"author":{"gitID":"jordancjq"},"content":"Alias: `h`"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":245,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":246,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":247,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"jordancjq"},"content":"[IMPORTANT]"},{"lineNumber":250,"author":{"gitID":"jordancjq"},"content":".*What to expect*"},{"lineNumber":251,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":252,"author":{"gitID":"jordancjq"},"content":"A list of your previously entered command will be shown to you."},{"lineNumber":253,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":254,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":256,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"jordancjq"},"content":"Have you entered a wrong command or might have accidentally entered the wrong values to the specified fields to a command? +"},{"lineNumber":259,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":260,"author":{"gitID":"jordancjq"},"content":"You don\u0027t have to worry, as MTM provides you with the command to undo most mistakes that you might have made. MTM will restore herself to the state before the previous _undoAble_ command was executed."},{"lineNumber":261,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":262,"author":{"gitID":"jordancjq"},"content":"Format: `undo` +"},{"lineNumber":263,"author":{"gitID":"jordancjq"},"content":"Alias: `u`"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":266,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":267,"author":{"gitID":"jordancjq"},"content":"_undoAble_ commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":268,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"jordancjq"},"content":"[IMPORTANT]"},{"lineNumber":271,"author":{"gitID":"jordancjq"},"content":".*What to expect*"},{"lineNumber":272,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":273,"author":{"gitID":"jordancjq"},"content":"Commands that are _undoAble_ will be reversed and MTM will be in the state before the command was executed."},{"lineNumber":274,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":275,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":276,"author":{"gitID":"jordancjq"},"content":"Here are a few valid examples on how you can use the `undo` command:"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":279,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":280,"author":{"gitID":"jordancjq"},"content":"`undo` +"},{"lineNumber":281,"author":{"gitID":"jordancjq"},"content":"Calling the `undo` command will reverse the `delete 1` command."},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":284,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":285,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":286,"author":{"gitID":"jordancjq"},"content":"The `undo` command fails as there are no _undoAble_ commands executed previously."},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":289,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":290,"author":{"gitID":"jordancjq"},"content":"`undo` +"},{"lineNumber":291,"author":{"gitID":"jordancjq"},"content":"`undo` +"},{"lineNumber":292,"author":{"gitID":"jordancjq"},"content":"Calling the first `undo` command will reverse the `clear` command, and the subsequent `undo` command will reverse the `delete 1` command."},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"jordancjq"},"content":"You accidentally called the `undo` command too many times and need a way to quickly reverse that? MTM allows you to redo the most recent `undo` command."},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"jordancjq"},"content":"Format: `redo` +"},{"lineNumber":299,"author":{"gitID":"jordancjq"},"content":"Alias: `r`"},{"lineNumber":300,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":301,"author":{"gitID":"jordancjq"},"content":"[IMPORTANT]"},{"lineNumber":302,"author":{"gitID":"jordancjq"},"content":".*What to expect*"},{"lineNumber":303,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":304,"author":{"gitID":"jordancjq"},"content":"Previously executed `undo` command will be reversed and MTM will be in its previous state."},{"lineNumber":305,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":306,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":307,"author":{"gitID":"jordancjq"},"content":"Here are a few valid examples on how you can use the `redo` command:"},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":310,"author":{"gitID":"jordancjq"},"content":"`undo` +"},{"lineNumber":311,"author":{"gitID":"jordancjq"},"content":"`redo` +"},{"lineNumber":312,"author":{"gitID":"jordancjq"},"content":"Calling the `undo` command will reverse the `delete 1` command and the subsequent `redo` command will reapply the `delete 1` command."},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":315,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":316,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":319,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":320,"author":{"gitID":"jordancjq"},"content":"`undo` +"},{"lineNumber":321,"author":{"gitID":"jordancjq"},"content":"`undo` +"},{"lineNumber":322,"author":{"gitID":"jordancjq"},"content":"`redo` +"},{"lineNumber":323,"author":{"gitID":"jordancjq"},"content":"`redo` +"},{"lineNumber":324,"author":{"gitID":"jordancjq"},"content":"Calling the first `undo` command will reverse the `clear` command, and the subsequent `undo` command will reverse the `delete 1` command. +"},{"lineNumber":325,"author":{"gitID":"jordancjq"},"content":"Calling the first `redo` command will reapply the `delete 1` command, and the subsequent `redo` command will reapply the `clear` command."},{"lineNumber":326,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"jordancjq"},"content":"You can clear all entries from the address book with the \u0027clear\u0027 command."},{"lineNumber":331,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":332,"author":{"gitID":"jordancjq"},"content":"Format: `clear` +"},{"lineNumber":333,"author":{"gitID":"jordancjq"},"content":"Alias: `c`"},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d Setting colour of tags : `setTagColour`"},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"jordancjq"},"content":"You can set the tags to a colour of your choice with the \u0027setColourTag\u0027 command."},{"lineNumber":338,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":339,"author":{"gitID":"jordancjq"},"content":"Format: `setTagColour` +"},{"lineNumber":340,"author":{"gitID":"jordancjq"},"content":"Alias: `stc`"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Sorting players by field: `sort`"},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"jordancjq"},"content":"You can sort the players by fields with the \u0027sort\u0027 command. Players can be sorted in both ascending or descending order."},{"lineNumber":345,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":346,"author":{"gitID":"jordancjq"},"content":"Format: `sort` FIELD ORDER +"},{"lineNumber":347,"author":{"gitID":"jordancjq"},"content":"Alias: `so`"},{"lineNumber":348,"author":{"gitID":"-"},"content":""},{"lineNumber":349,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":350,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":351,"author":{"gitID":"-"},"content":"Current version of `sort` supports the following fields: Name, Phone, Email \u0026 Address."},{"lineNumber":352,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":353,"author":{"gitID":"-"},"content":""},{"lineNumber":354,"author":{"gitID":"-"},"content":"Here are a few valid examples on how you can use the `sort` command:"},{"lineNumber":355,"author":{"gitID":"-"},"content":""},{"lineNumber":356,"author":{"gitID":"-"},"content":"* `sort` name asc +"},{"lineNumber":357,"author":{"gitID":"-"},"content":"This will sort the address book by names, in alphabetical order."},{"lineNumber":358,"author":{"gitID":"-"},"content":""},{"lineNumber":359,"author":{"gitID":"-"},"content":"* `sort` name dsc +"},{"lineNumber":360,"author":{"gitID":"-"},"content":"This will sort the address book by names, in reverse alphabetical order."},{"lineNumber":361,"author":{"gitID":"-"},"content":""},{"lineNumber":362,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":363,"author":{"gitID":"-"},"content":""},{"lineNumber":364,"author":{"gitID":"jordancjq"},"content":"You can exit the program by entering the \u0027exit\u0027 command."},{"lineNumber":365,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":366,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":367,"author":{"gitID":"-"},"content":""},{"lineNumber":368,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":369,"author":{"gitID":"-"},"content":""},{"lineNumber":370,"author":{"gitID":"-"},"content":"There is no need to save anything manually as My Team Manager will save"},{"lineNumber":371,"author":{"gitID":"-"},"content":"any data entered directly to the hard drive."},{"lineNumber":372,"author":{"gitID":"-"},"content":""},{"lineNumber":373,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d Noting down a remark for player: `remark` `[Since v1.1]`"},{"lineNumber":374,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":375,"author":{"gitID":"jordancjq"},"content":"When you need to drop yourself a self-note with regards to a specific player you\u0027re managing, you can make a self-note"},{"lineNumber":376,"author":{"gitID":"jordancjq"},"content":"of a specific player easily by giving the player a remark for you to remember by."},{"lineNumber":377,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":378,"author":{"gitID":"jordancjq"},"content":"Format: `remark INDEX [r/REMARK]` +"},{"lineNumber":379,"author":{"gitID":"jordancjq"},"content":"Alias: `rm`"},{"lineNumber":380,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":381,"author":{"gitID":"jordancjq"},"content":"[NOTE]"},{"lineNumber":382,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":383,"author":{"gitID":"jordancjq"},"content":"By leaving out `r/REMARK`, the command acts as a remark removal."},{"lineNumber":384,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":385,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":386,"author":{"gitID":"jordancjq"},"content":"[IMPORTANT]"},{"lineNumber":387,"author":{"gitID":"jordancjq"},"content":".*What to expect*"},{"lineNumber":388,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":389,"author":{"gitID":"jordancjq"},"content":"Your specified player will either be given a new remark or have its existing remark removed."},{"lineNumber":390,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":391,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":392,"author":{"gitID":"jordancjq"},"content":"Here are a few valid examples on how you can use the `remark` command:"},{"lineNumber":393,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":394,"author":{"gitID":"jordancjq"},"content":"* `remark 1` +"},{"lineNumber":395,"author":{"gitID":"jordancjq"},"content":"Removes the remark from the specified player at index 1."},{"lineNumber":396,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":397,"author":{"gitID":"jordancjq"},"content":"* `remark 5 r/MVP Player` +"},{"lineNumber":398,"author":{"gitID":"jordancjq"},"content":"Give a remark to the specified player at index 5 with the remark \"MVP Player\"."},{"lineNumber":399,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":400,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d Creating a team: `create` `[Since v1.2]`"},{"lineNumber":401,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":402,"author":{"gitID":"jordancjq"},"content":"What is a team management application without the functionality of creating a team? This command allows you to create a team that can be assigned to players."},{"lineNumber":403,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":404,"author":{"gitID":"jordancjq"},"content":"Format: `create TEAM_NAME` +"},{"lineNumber":405,"author":{"gitID":"jordancjq"},"content":"Alias: `ct`"},{"lineNumber":406,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":407,"author":{"gitID":"jordancjq"},"content":"[IMPORTANT]"},{"lineNumber":408,"author":{"gitID":"jordancjq"},"content":".*What to expect*"},{"lineNumber":409,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":410,"author":{"gitID":"jordancjq"},"content":"Your newly specified team will be created with the name you have given without any players in it, and your team name will appear in the team bar below."},{"lineNumber":411,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":412,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":413,"author":{"gitID":"jordancjq"},"content":"Here are a few valid examples on how you can use the `create` command:"},{"lineNumber":414,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":415,"author":{"gitID":"jordancjq"},"content":"* `create Arsenal` +"},{"lineNumber":416,"author":{"gitID":"jordancjq"},"content":"Creates a new team with the name \"Arsenal\"."},{"lineNumber":417,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":418,"author":{"gitID":"jordancjq"},"content":"* `create Liverpool` +"},{"lineNumber":419,"author":{"gitID":"jordancjq"},"content":"Creates another new team with the name \"Liverpool\""},{"lineNumber":420,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":421,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d Viewing a team: `view` `[Since v1.3]`"},{"lineNumber":422,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":423,"author":{"gitID":"jordancjq"},"content":"With the ability to manage different teams, you will be able to list all players currently in a team easily with this command."},{"lineNumber":424,"author":{"gitID":"jordancjq"},"content":"Format: `view TEAM_NAME`"},{"lineNumber":425,"author":{"gitID":"jordancjq"},"content":"Alias: `v`"},{"lineNumber":426,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":427,"author":{"gitID":"jordancjq"},"content":"[IMPORTANT]"},{"lineNumber":428,"author":{"gitID":"jordancjq"},"content":".*What to expect*"},{"lineNumber":429,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":430,"author":{"gitID":"jordancjq"},"content":"Displays the list of players will that are in the team specified on the left panel."},{"lineNumber":431,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":432,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":433,"author":{"gitID":"jordancjq"},"content":"Here are a few valid examples on how you can use the `view` command:"},{"lineNumber":434,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":435,"author":{"gitID":"jordancjq"},"content":"* `view Arsenal` +"},{"lineNumber":436,"author":{"gitID":"jordancjq"},"content":"List all players in the team \"Arsenal\"."},{"lineNumber":437,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":438,"author":{"gitID":"jordancjq"},"content":"* `view Liverpool` +"},{"lineNumber":439,"author":{"gitID":"jordancjq"},"content":"List all players in the team \"Liverpool\"."},{"lineNumber":440,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":441,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d Assigning player to teams: `assign` `[Since v1.3]`"},{"lineNumber":442,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":443,"author":{"gitID":"jordancjq"},"content":"Have a player without a team, or have yet to assigned one during the addition of player into MTM, you can call this command to assign that player to a particular team of your choice."},{"lineNumber":444,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":445,"author":{"gitID":"jordancjq"},"content":"Format: `assign INDEX TEAM_NAME`"},{"lineNumber":446,"author":{"gitID":"jordancjq"},"content":"Alias: `ap`"},{"lineNumber":447,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":448,"author":{"gitID":"jordancjq"},"content":"[IMPORTANT]"},{"lineNumber":449,"author":{"gitID":"jordancjq"},"content":".*What to expect*"},{"lineNumber":450,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":451,"author":{"gitID":"jordancjq"},"content":"Your specified player via index will be assigned to the specified team."},{"lineNumber":452,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":453,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":454,"author":{"gitID":"jordancjq"},"content":"Here are a few valid examples on how you can use the `create` command:"},{"lineNumber":455,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":456,"author":{"gitID":"jordancjq"},"content":"* `list`"},{"lineNumber":457,"author":{"gitID":"jordancjq"},"content":"* `assign 3 Arsenal` +"},{"lineNumber":458,"author":{"gitID":"jordancjq"},"content":"View the full list of players in MTM and assign the player with index 3 to team \"Arsenal\"."},{"lineNumber":459,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":460,"author":{"gitID":"jordancjq"},"content":"* `find John`"},{"lineNumber":461,"author":{"gitID":"jordancjq"},"content":"* `assign 1 Liverpool` +"},{"lineNumber":462,"author":{"gitID":"jordancjq"},"content":"Find a player by the name of \"John\" and assign the player with index 1 to team \"Liverpool\"."},{"lineNumber":463,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":464,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d Set an upcoming match with an opposing team: `setmatch` `[Coming in v2.0]`"},{"lineNumber":465,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":466,"author":{"gitID":"jordancjq"},"content":"With this command, it gives you a convenient way to keep track of the upcoming match of a team."},{"lineNumber":467,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":468,"author":{"gitID":"jordancjq"},"content":"Format: `setmatch TEAM_NAME OPPONENT_TEAM_NAME DATE` +"},{"lineNumber":469,"author":{"gitID":"jordancjq"},"content":"Alias: `sm`"},{"lineNumber":470,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":471,"author":{"gitID":"jordancjq"},"content":"[NOTE]"},{"lineNumber":472,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":473,"author":{"gitID":"jordancjq"},"content":"Date format to be entered is in `DD/MM/YYYY`."},{"lineNumber":474,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":475,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":476,"author":{"gitID":"jordancjq"},"content":"[IMPORTANT]"},{"lineNumber":477,"author":{"gitID":"jordancjq"},"content":".*What to expect*"},{"lineNumber":478,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":479,"author":{"gitID":"jordancjq"},"content":"The upcoming match of the team will be captured and displayed to you."},{"lineNumber":480,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":481,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":482,"author":{"gitID":"jordancjq"},"content":"Here are a few valid examples on how you can use the `create` command:"},{"lineNumber":483,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":484,"author":{"gitID":"jordancjq"},"content":"* `view Arsenal`"},{"lineNumber":485,"author":{"gitID":"jordancjq"},"content":"* `setmatch Arsenal Liverpool 14/03/2018` +"},{"lineNumber":486,"author":{"gitID":"jordancjq"},"content":"Display the list of players in team \"Arsenal\" and set an upcoming match for Arsenal with Liverpool on 14/03/2018."},{"lineNumber":487,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":488,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d View the team\u0027s next upcoming match: `nextmatch` `[Coming in v2.0]`"},{"lineNumber":489,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":490,"author":{"gitID":"jordancjq"},"content":"Easily determine the up and coming match with the team so that you never miss an important date."},{"lineNumber":491,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":492,"author":{"gitID":"jordancjq"},"content":"Format: `nextmatch TEAM_NAME`"},{"lineNumber":493,"author":{"gitID":"jordancjq"},"content":"Alias: `nm`"},{"lineNumber":494,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":495,"author":{"gitID":"jordancjq"},"content":"[IMPORTANT]"},{"lineNumber":496,"author":{"gitID":"jordancjq"},"content":".*What to expect*"},{"lineNumber":497,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":498,"author":{"gitID":"jordancjq"},"content":"Displays the date and opponent for the upcoming match of the team specified."},{"lineNumber":499,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":500,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":501,"author":{"gitID":"jordancjq"},"content":"Here are a few valid examples on how you can use the `create` command:"},{"lineNumber":502,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":503,"author":{"gitID":"jordancjq"},"content":"* `view Arsenal`"},{"lineNumber":504,"author":{"gitID":"jordancjq"},"content":"* `nextmatch Arsenal` +"},{"lineNumber":505,"author":{"gitID":"jordancjq"},"content":"Displays the list of players in team \"Arsenal\" and view the next upcoming match for \"Arsenal\"."},{"lineNumber":506,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":507,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d Removing a team: `remove` `[Coming in v1.4]`"},{"lineNumber":508,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":509,"author":{"gitID":"jordancjq"},"content":"No longer managing the team or the team has been disbanded, you can easily remove the team from MTM."},{"lineNumber":510,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":511,"author":{"gitID":"jordancjq"},"content":"Format: `remove TEAM_NAME` +"},{"lineNumber":512,"author":{"gitID":"jordancjq"},"content":"Alias: `rt`"},{"lineNumber":513,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":514,"author":{"gitID":"jordancjq"},"content":"[NOTE]"},{"lineNumber":515,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":516,"author":{"gitID":"jordancjq"},"content":"Removing a team will automatically update all affected players\u0027 `Team` field. +"},{"lineNumber":517,"author":{"gitID":"jordancjq"},"content":"Players without a team will need to be re-assigned."},{"lineNumber":518,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":519,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":520,"author":{"gitID":"jordancjq"},"content":"[IMPORTANT]"},{"lineNumber":521,"author":{"gitID":"jordancjq"},"content":".*What to expect*"},{"lineNumber":522,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":523,"author":{"gitID":"jordancjq"},"content":"Remove the specified team and update all affected players."},{"lineNumber":524,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":525,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":526,"author":{"gitID":"jordancjq"},"content":"Here are a few valid examples of how you can use the `remove` command:"},{"lineNumber":527,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":528,"author":{"gitID":"jordancjq"},"content":"* `view Arsenal`"},{"lineNumber":529,"author":{"gitID":"jordancjq"},"content":"* `remove Arsenal` +"},{"lineNumber":530,"author":{"gitID":"jordancjq"},"content":"Display the list of players in team \"Arsenal\" and remove the team."},{"lineNumber":531,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":532,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Show Best XI players: `showBest` [Coming in v2.0]"},{"lineNumber":533,"author":{"gitID":"-"},"content":""},{"lineNumber":534,"author":{"gitID":"-"},"content":"If you went to see your current best 11 players in your team based on their respective stats, this command"},{"lineNumber":535,"author":{"gitID":"-"},"content":"is for you."},{"lineNumber":536,"author":{"gitID":"-"},"content":""},{"lineNumber":537,"author":{"gitID":"-"},"content":"Alias: `sb` +"},{"lineNumber":538,"author":{"gitID":"-"},"content":"Format: `showBest`"},{"lineNumber":539,"author":{"gitID":"-"},"content":""},{"lineNumber":540,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Set various fields to private: [Coming in v2.0]"},{"lineNumber":541,"author":{"gitID":"-"},"content":"{explain how fields of players can be set private}"},{"lineNumber":542,"author":{"gitID":"-"},"content":""},{"lineNumber":543,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d Scheduling trainings for team `schedule` `[Coming in v2.0]`"},{"lineNumber":544,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":545,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d Sending reminder emails to players: `send` `[Coming in v2.0]`"},{"lineNumber":546,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":547,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d Viewing other teams being managed: `view` `[Coming in v2.0]`"},{"lineNumber":548,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":549,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d Giving feedback to developers: `feedback` `[Coming in v2.0]`"},{"lineNumber":550,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":551,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d Giving demerit to players based on performance: `demerit` `[Coming in v2.0]`"},{"lineNumber":552,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":553,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":554,"author":{"gitID":"-"},"content":""},{"lineNumber":555,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":556,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."},{"lineNumber":557,"author":{"gitID":"-"},"content":""},{"lineNumber":558,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":559,"author":{"gitID":"-"},"content":""},{"lineNumber":560,"author":{"gitID":"jordancjq"},"content":"[cols\u003d\"^1s, ^1s, \u003c2m, \u003c2m\", options\u003d\"header\"]"},{"lineNumber":561,"author":{"gitID":"jordancjq"},"content":"|\u003d\u003d\u003d"},{"lineNumber":562,"author":{"gitID":"jordancjq"},"content":"^|Command"},{"lineNumber":563,"author":{"gitID":"jordancjq"},"content":"^|Alias"},{"lineNumber":564,"author":{"gitID":"jordancjq"},"content":"^|Parameter"},{"lineNumber":565,"author":{"gitID":"jordancjq"},"content":"^|Example"},{"lineNumber":566,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":567,"author":{"gitID":"jordancjq"},"content":"4.1+^|General Commands"},{"lineNumber":568,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":569,"author":{"gitID":"jordancjq"},"content":"|`help`"},{"lineNumber":570,"author":{"gitID":"jordancjq"},"content":"|`NONE`"},{"lineNumber":571,"author":{"gitID":"jordancjq"},"content":"|help"},{"lineNumber":572,"author":{"gitID":"jordancjq"},"content":"d|Shows the user guide"},{"lineNumber":573,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":574,"author":{"gitID":"jordancjq"},"content":"|`exit`"},{"lineNumber":575,"author":{"gitID":"jordancjq"},"content":"|`NONE`"},{"lineNumber":576,"author":{"gitID":"jordancjq"},"content":"|exit"},{"lineNumber":577,"author":{"gitID":"jordancjq"},"content":"d|Exits the application"},{"lineNumber":578,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":579,"author":{"gitID":"jordancjq"},"content":"|`history`"},{"lineNumber":580,"author":{"gitID":"jordancjq"},"content":"|`h`"},{"lineNumber":581,"author":{"gitID":"jordancjq"},"content":"|history"},{"lineNumber":582,"author":{"gitID":"jordancjq"},"content":"d|Display the list of commands entered previously"},{"lineNumber":583,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":584,"author":{"gitID":"jordancjq"},"content":"|`undo`"},{"lineNumber":585,"author":{"gitID":"jordancjq"},"content":"|`u`"},{"lineNumber":586,"author":{"gitID":"jordancjq"},"content":"|undo"},{"lineNumber":587,"author":{"gitID":"jordancjq"},"content":"d|Undo the previous command"},{"lineNumber":588,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":589,"author":{"gitID":"jordancjq"},"content":"|`redo`"},{"lineNumber":590,"author":{"gitID":"jordancjq"},"content":"|`r`"},{"lineNumber":591,"author":{"gitID":"jordancjq"},"content":"|redo"},{"lineNumber":592,"author":{"gitID":"jordancjq"},"content":"d|Redo the previous command"},{"lineNumber":593,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":594,"author":{"gitID":"jordancjq"},"content":"|`clear`"},{"lineNumber":595,"author":{"gitID":"jordancjq"},"content":"|`c`"},{"lineNumber":596,"author":{"gitID":"jordancjq"},"content":"|clear"},{"lineNumber":597,"author":{"gitID":"jordancjq"},"content":"d|Removes all information in the application"},{"lineNumber":598,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":599,"author":{"gitID":"jordancjq"},"content":"4.1+^|Player\u0027s Related Commands"},{"lineNumber":600,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":601,"author":{"gitID":"jordancjq"},"content":"|`add`"},{"lineNumber":602,"author":{"gitID":"jordancjq"},"content":"|`a`"},{"lineNumber":603,"author":{"gitID":"jordancjq"},"content":"|add n/NAME e/EMAIL tm/TEAM [p/PHONE_NUMBER] [a/ADDRESS] [j/JERSEY_NUMBER] [s/SCORE] [po/POSITION] [r/REMARKS] [t/TAG]..."},{"lineNumber":604,"author":{"gitID":"jordancjq"},"content":"|add n/Ronaldo e/ronaldo@soccer.com tm/Real Madrid p/92331322 a/Portugal j/17 s/999 po/Striker r/Always play him /tfamous"},{"lineNumber":605,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":606,"author":{"gitID":"jordancjq"},"content":"|`remark`"},{"lineNumber":607,"author":{"gitID":"jordancjq"},"content":"|`rm`"},{"lineNumber":608,"author":{"gitID":"jordancjq"},"content":"|remark INDEX [r/REMARK]"},{"lineNumber":609,"author":{"gitID":"jordancjq"},"content":"|remark 4 r/Gotta go faster"},{"lineNumber":610,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":611,"author":{"gitID":"jordancjq"},"content":"|`edit`"},{"lineNumber":612,"author":{"gitID":"jordancjq"},"content":"|`e`"},{"lineNumber":613,"author":{"gitID":"jordancjq"},"content":"|edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]..."},{"lineNumber":614,"author":{"gitID":"jordancjq"},"content":"|edit 2 n/James Lee e/jameslee@example.com"},{"lineNumber":615,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":616,"author":{"gitID":"jordancjq"},"content":"|`delete`"},{"lineNumber":617,"author":{"gitID":"jordancjq"},"content":"|`d`"},{"lineNumber":618,"author":{"gitID":"jordancjq"},"content":"|delete INDEX"},{"lineNumber":619,"author":{"gitID":"jordancjq"},"content":"|delete 3"},{"lineNumber":620,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":621,"author":{"gitID":"jordancjq"},"content":"|`list`"},{"lineNumber":622,"author":{"gitID":"jordancjq"},"content":"|`l`"},{"lineNumber":623,"author":{"gitID":"jordancjq"},"content":"|list"},{"lineNumber":624,"author":{"gitID":"jordancjq"},"content":"d|List all the players"},{"lineNumber":625,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":626,"author":{"gitID":"jordancjq"},"content":"|`sort`"},{"lineNumber":627,"author":{"gitID":"jordancjq"},"content":"|`so`"},{"lineNumber":628,"author":{"gitID":"jordancjq"},"content":"|sort FIELD ORDER"},{"lineNumber":629,"author":{"gitID":"jordancjq"},"content":"|sort name asc"},{"lineNumber":630,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":631,"author":{"gitID":"jordancjq"},"content":"|`find`"},{"lineNumber":632,"author":{"gitID":"jordancjq"},"content":"|`f`"},{"lineNumber":633,"author":{"gitID":"jordancjq"},"content":"|find KEYWORD [MORE_KEYWORDS]"},{"lineNumber":634,"author":{"gitID":"jordancjq"},"content":"|find James Jake"},{"lineNumber":635,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":636,"author":{"gitID":"jordancjq"},"content":"|`select`"},{"lineNumber":637,"author":{"gitID":"jordancjq"},"content":"|`s`"},{"lineNumber":638,"author":{"gitID":"jordancjq"},"content":"|select INDEX"},{"lineNumber":639,"author":{"gitID":"jordancjq"},"content":"|select 2"},{"lineNumber":640,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":641,"author":{"gitID":"jordancjq"},"content":"4.1+^|Team\u0027s Related Commands"},{"lineNumber":642,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":643,"author":{"gitID":"jordancjq"},"content":"|`create`"},{"lineNumber":644,"author":{"gitID":"jordancjq"},"content":"|`ct`"},{"lineNumber":645,"author":{"gitID":"jordancjq"},"content":"|create TEAM_NAME"},{"lineNumber":646,"author":{"gitID":"jordancjq"},"content":"|create Arsenal"},{"lineNumber":647,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":648,"author":{"gitID":"jordancjq"},"content":"|`assign`"},{"lineNumber":649,"author":{"gitID":"jordancjq"},"content":"|`ap`"},{"lineNumber":650,"author":{"gitID":"jordancjq"},"content":"|assign TEAM_NAME INDEX [INDEX]..."},{"lineNumber":651,"author":{"gitID":"jordancjq"},"content":"|assign Barcelona 1 2 3"},{"lineNumber":652,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":653,"author":{"gitID":"jordancjq"},"content":"|`view`"},{"lineNumber":654,"author":{"gitID":"jordancjq"},"content":"|`vt`"},{"lineNumber":655,"author":{"gitID":"jordancjq"},"content":"|view TEAM_NAME"},{"lineNumber":656,"author":{"gitID":"jordancjq"},"content":"|view Liverpool"},{"lineNumber":657,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":658,"author":{"gitID":"jordancjq"},"content":"|`remove`"},{"lineNumber":659,"author":{"gitID":"jordancjq"},"content":"|`rt`"},{"lineNumber":660,"author":{"gitID":"jordancjq"},"content":"|remove TEAM_NAME"},{"lineNumber":661,"author":{"gitID":"jordancjq"},"content":"|remove Real Madrid"},{"lineNumber":662,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":663,"author":{"gitID":"jordancjq"},"content":"|`setmatch`"},{"lineNumber":664,"author":{"gitID":"jordancjq"},"content":"|`sm`"},{"lineNumber":665,"author":{"gitID":"jordancjq"},"content":"|setmatch TEAM_NAME OPPONENT_TEAM_NAME DATE"},{"lineNumber":666,"author":{"gitID":"jordancjq"},"content":"|setmatch Arsenal Barcelona 23/05/2018"},{"lineNumber":667,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":668,"author":{"gitID":"jordancjq"},"content":"|`nextmatch`"},{"lineNumber":669,"author":{"gitID":"jordancjq"},"content":"|`nm`"},{"lineNumber":670,"author":{"gitID":"jordancjq"},"content":"|nextmatch TEAM_NAME"},{"lineNumber":671,"author":{"gitID":"jordancjq"},"content":"|nextmatch Arsenal"},{"lineNumber":672,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":673,"author":{"gitID":"jordancjq"},"content":"4.1+^|Useful Commands"},{"lineNumber":674,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":675,"author":{"gitID":"jordancjq"},"content":"|`setTagColour`"},{"lineNumber":676,"author":{"gitID":"jordancjq"},"content":"|`stc`"},{"lineNumber":677,"author":{"gitID":"jordancjq"},"content":"|setTagColour TAG COLOUR"},{"lineNumber":678,"author":{"gitID":"jordancjq"},"content":"|setTagColour friends yellow"},{"lineNumber":679,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":680,"author":{"gitID":"jordancjq"},"content":"|\u003d\u003d\u003d"}],"authorContributionMap":{"lithiumlkid":7,"jordancjq":460,"-":213}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_JERSEY_NUMBER_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":13,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_POSITION_DESC;"},{"lineNumber":14,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_RATING_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":16,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.JERSEY_NUMBER_DESC_2;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":21,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.POSITION_DESC_STRIKER;"},{"lineNumber":22,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_0;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":29,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_JERSEY_NUMBER_2;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":34,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_POSITION_STRIKER;"},{"lineNumber":35,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_0;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":38,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.parser.ParserUtil.UNSPECIFIED_FIELD;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":57,"author":{"gitID":"lithiumlkid"},"content":"import seedu.address.model.person.JerseyNumber;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":61,"author":{"gitID":"lithiumlkid"},"content":"import seedu.address.model.person.Position;"},{"lineNumber":62,"author":{"gitID":"lithiumlkid"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":77,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":78,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Person toAdd \u003d AMY;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":81,"author":{"gitID":"lithiumlkid"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \" + RATING_DESC_0"},{"lineNumber":82,"author":{"gitID":"lithiumlkid"},"content":"                + \"   \" + POSITION_DESC_STRIKER + \"   \" + JERSEY_NUMBER_DESC_2;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":98,"author":{"gitID":"lithiumlkid"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).withRating(VALID_RATING_0)"},{"lineNumber":99,"author":{"gitID":"lithiumlkid"},"content":"                .withPosition(VALID_POSITION_STRIKER).withJerseyNumber(VALID_JERSEY_NUMBER_2).build();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":101,"author":{"gitID":"lithiumlkid"},"content":"                + TAG_DESC_FRIEND  + \" \" + RATING_DESC_0 + \"   \" + POSITION_DESC_STRIKER + \"   \""},{"lineNumber":102,"author":{"gitID":"lithiumlkid"},"content":"                + JERSEY_NUMBER_DESC_2;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":107,"author":{"gitID":"lithiumlkid"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).withRating(VALID_RATING_0)"},{"lineNumber":108,"author":{"gitID":"lithiumlkid"},"content":"                .withPosition(VALID_POSITION_STRIKER).withJerseyNumber(VALID_JERSEY_NUMBER_2).build();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":115,"author":{"gitID":"lithiumlkid"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).withRating(VALID_RATING_0)"},{"lineNumber":116,"author":{"gitID":"lithiumlkid"},"content":"                .withPosition(VALID_POSITION_STRIKER).withJerseyNumber(VALID_JERSEY_NUMBER_2).build();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":118,"author":{"gitID":"lithiumlkid"},"content":"                + TAG_DESC_FRIEND  + \" \" + RATING_DESC_0 + \"   \" + POSITION_DESC_STRIKER + \"   \""},{"lineNumber":119,"author":{"gitID":"lithiumlkid"},"content":"                + JERSEY_NUMBER_DESC_2;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":124,"author":{"gitID":"lithiumlkid"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND).withRating(VALID_RATING_0)"},{"lineNumber":125,"author":{"gitID":"lithiumlkid"},"content":"                .withPosition(VALID_POSITION_STRIKER).withJerseyNumber(VALID_JERSEY_NUMBER_2).build();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":127,"author":{"gitID":"lithiumlkid"},"content":"                + TAG_DESC_FRIEND  + \" \" + RATING_DESC_0 + \"   \" + POSITION_DESC_STRIKER + \"   \""},{"lineNumber":128,"author":{"gitID":"lithiumlkid"},"content":"                + JERSEY_NUMBER_DESC_2;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":138,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"jordancjq"},"content":"        /* Case: missing phone -\u003e added */"},{"lineNumber":145,"author":{"gitID":"jordancjq"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":146,"author":{"gitID":"lithiumlkid"},"content":"                .withPhone(UNSPECIFIED_FIELD).withTags().withRating(VALID_RATING_0)"},{"lineNumber":147,"author":{"gitID":"lithiumlkid"},"content":"                .withPosition(VALID_POSITION_STRIKER).withJerseyNumber(VALID_JERSEY_NUMBER_2).build();"},{"lineNumber":148,"author":{"gitID":"lithiumlkid"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + RATING_DESC_0"},{"lineNumber":149,"author":{"gitID":"lithiumlkid"},"content":"                + POSITION_DESC_STRIKER + JERSEY_NUMBER_DESC_2;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"jordancjq"},"content":"        /* Case: missing address -\u003e added */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":154,"author":{"gitID":"lithiumlkid"},"content":"                .withAddress(UNSPECIFIED_FIELD).withTags().withRating(VALID_RATING_0)"},{"lineNumber":155,"author":{"gitID":"lithiumlkid"},"content":"                .withPosition(VALID_POSITION_STRIKER).withJerseyNumber(VALID_JERSEY_NUMBER_2).build();"},{"lineNumber":156,"author":{"gitID":"lithiumlkid"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + RATING_DESC_0"},{"lineNumber":157,"author":{"gitID":"lithiumlkid"},"content":"                + POSITION_DESC_STRIKER + JERSEY_NUMBER_DESC_2;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"lithiumlkid"},"content":"        /* Case: missing rating -\u003e added */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":162,"author":{"gitID":"lithiumlkid"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags().withRating(UNSPECIFIED_FIELD)"},{"lineNumber":163,"author":{"gitID":"lithiumlkid"},"content":"                .withPosition(VALID_POSITION_STRIKER).withJerseyNumber(VALID_JERSEY_NUMBER_2).build();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":165,"author":{"gitID":"lithiumlkid"},"content":"                + POSITION_DESC_STRIKER + JERSEY_NUMBER_DESC_2;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":195,"author":{"gitID":"lithiumlkid"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + RATING_DESC_0"},{"lineNumber":196,"author":{"gitID":"lithiumlkid"},"content":"                + POSITION_DESC_STRIKER + JERSEY_NUMBER_DESC_2;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":200,"author":{"gitID":"lithiumlkid"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY + RATING_DESC_0"},{"lineNumber":201,"author":{"gitID":"lithiumlkid"},"content":"                + POSITION_DESC_STRIKER + JERSEY_NUMBER_DESC_2;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":209,"author":{"gitID":"lithiumlkid"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":210,"author":{"gitID":"lithiumlkid"},"content":"                + RATING_DESC_0 + POSITION_DESC_STRIKER + JERSEY_NUMBER_DESC_2;"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":214,"author":{"gitID":"lithiumlkid"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":215,"author":{"gitID":"lithiumlkid"},"content":"                + RATING_DESC_0 + POSITION_DESC_STRIKER + JERSEY_NUMBER_DESC_2;"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":219,"author":{"gitID":"lithiumlkid"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY"},{"lineNumber":220,"author":{"gitID":"lithiumlkid"},"content":"                + RATING_DESC_0 + POSITION_DESC_STRIKER + JERSEY_NUMBER_DESC_2;"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":224,"author":{"gitID":"lithiumlkid"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC"},{"lineNumber":225,"author":{"gitID":"lithiumlkid"},"content":"                + RATING_DESC_0 + POSITION_DESC_STRIKER + JERSEY_NUMBER_DESC_2;"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":230,"author":{"gitID":"lithiumlkid"},"content":"                + INVALID_TAG_DESC + RATING_DESC_0 + POSITION_DESC_STRIKER + JERSEY_NUMBER_DESC_2;"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":232,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":233,"author":{"gitID":"lithiumlkid"},"content":"        /* Case: invalid rating -\u003e rejected */"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":235,"author":{"gitID":"lithiumlkid"},"content":"                 + INVALID_RATING_DESC + POSITION_DESC_STRIKER + JERSEY_NUMBER_DESC_2;"},{"lineNumber":236,"author":{"gitID":"lithiumlkid"},"content":"        assertCommandFailure(command, Rating.MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":237,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":238,"author":{"gitID":"lithiumlkid"},"content":"        /* Case: invalid position -\u003e rejected */"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":240,"author":{"gitID":"lithiumlkid"},"content":"                 + RATING_DESC_0 + INVALID_POSITION_DESC + JERSEY_NUMBER_DESC_2;"},{"lineNumber":241,"author":{"gitID":"lithiumlkid"},"content":"        assertCommandFailure(command, Position.MESSAGE_POSITION_CONSTRAINTS);"},{"lineNumber":242,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":243,"author":{"gitID":"lithiumlkid"},"content":"        /* Case: invalid jersey number -\u003e rejected */"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":245,"author":{"gitID":"lithiumlkid"},"content":"                 + RATING_DESC_0 + POSITION_DESC_STRIKER + INVALID_JERSEY_NUMBER_DESC;"},{"lineNumber":246,"author":{"gitID":"lithiumlkid"},"content":"        assertCommandFailure(command, JerseyNumber.MESSAGE_JERSEY_NUMBER_CONSTRAINTS);"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Person toAdd) {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) {"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":277,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":279,"author":{"gitID":"jordancjq"},"content":"        // TODO: place holder for success message, change to proper assert method"},{"lineNumber":280,"author":{"gitID":"jordancjq"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":286,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":287,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":288,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":289,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":290,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":291,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":292,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":293,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":295,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":299,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":302,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":303,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":304,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":305,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":306,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":307,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":308,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":309,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":310,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":311,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":312,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":313,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":316,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":317,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":318,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":319,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":320,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":321,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"lithiumlkid":66,"jordancjq":6,"-":249}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.TeamDisplayHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.ui.PersonCard;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.ui.TeamDisplay;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedCard.getTags().forEach(tag -\u003e"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                assertEquals(expectedCard.getTagStyleClasses(tag), actualCard.getTagStyleClasses(tag)));"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualTeamDisplay} displays the details of {@code expectedTeamDisplay}."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static void assertTeamDisplayEquals(TeamDisplay expectedTeamDisplay, TeamDisplayHandle actualTeamDisplay) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        expectedTeamDisplay.getTeams().forEach(team -\u003e"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                assertEquals(expectedTeamDisplay.getTeams().toString(), actualTeamDisplay.getTeams().toString()));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"},{"lineNumber":55,"author":{"gitID":"jordancjq"},"content":"        assertEquals(expectedPerson.getRemark().value, actualCard.getRemark());"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertTagsEqual(expectedPerson, actualCard);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Returns the color style for {@code tagName}\u0027s label. The tag\u0027s color is determined by looking up the color"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * of {@tagColour}"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * @see PersonCard getTagColorStyleFor(String)"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private static String getTagColorStyleFor(String tagName) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        switch (tagName) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        case \"classmates\":"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        case \"owesMoney\":"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return \"teal\";"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        case \"colleagues\":"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        case \"neighbours\":"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            return \"teal\";"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        case \"family\":"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        case \"friend\":"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return \"teal\";"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        case \"friends\":"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            return \"teal\";"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        case \"husband\":"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return \"teal\";"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            fail(tagName + \" does not have a color assigned.\");"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return \"\";"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPerson} with the correct"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * color."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    private static void assertTagsEqual(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        List\u003cString\u003e expectedTags \u003d expectedPerson.getTags().stream()"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                .map(tag -\u003e tag.tagName).collect(Collectors.toList());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertEquals(expectedTags, actualCard.getTags());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        expectedTags.forEach(tag -\u003e"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getTagColorStyleFor(tag)),"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                        actualCard.getTagStyleClasses(tag)));"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jordancjq":1,"-":136}},{"path":"src/test/java/seedu/address/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":14,"author":{"gitID":"lithiumlkid"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":15,"author":{"gitID":"lithiumlkid"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":73,"author":{"gitID":"lithiumlkid"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":74,"author":{"gitID":"lithiumlkid"},"content":"        assertEquals(AddCommand.COMMAND_WORD, commandBoxHandle.getInput());"},{"lineNumber":75,"author":{"gitID":"lithiumlkid"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":76,"author":{"gitID":"lithiumlkid"},"content":"        assertEquals(AddCommand.COMMAND_WORD + \" \" + AddCommand.MESSAGE_PARAMETERS, commandBoxHandle.getInput());"},{"lineNumber":77,"author":{"gitID":"lithiumlkid"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":78,"author":{"gitID":"lithiumlkid"},"content":"        assertEquals(AddCommand.COMMAND_WORD, commandBoxHandle.getInput());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":80,"author":{"gitID":"lithiumlkid"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":82,"author":{"gitID":"lithiumlkid"},"content":"        commandBoxHandle.run(\"e\");"},{"lineNumber":83,"author":{"gitID":"lithiumlkid"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":84,"author":{"gitID":"lithiumlkid"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":85,"author":{"gitID":"lithiumlkid"},"content":"        guiRobot.push(KeyCode.ENTER);"},{"lineNumber":86,"author":{"gitID":"lithiumlkid"},"content":"        assertEquals(ExitCommand.COMMAND_WORD, commandBoxHandle.getInput());"},{"lineNumber":87,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":88,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":171,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"lithiumlkid":16,"-":160}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"jordancjq"},"content":"\u003d My Team Manager - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"jordancjq"},"content":":toclevels: 3"},{"lineNumber":5,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":6,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":7,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":8,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":9,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"lithiumlkid"},"content":":repoURL: https://github.com/CS2103JAN2018-F14-B1/main/tree/master"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"By: `F14-B1`      Since: `Mar 2018`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d Overview"},{"lineNumber":19,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":20,"author":{"gitID":"jordancjq"},"content":"My Team Manager (MTM) is a team managing application for football coaches. MTM is designed to be quick and easy for you to manage a team of players without the need of a mouse."},{"lineNumber":21,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":22,"author":{"gitID":"jordancjq"},"content":"This developer\u0027s guide provides information that will not only show the design principles of the project, but allow you to understand the different implementations, and give you the opportunity to get started with being a contributor or as a reference for experienced developer."},{"lineNumber":23,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":24,"author":{"gitID":"jordancjq"},"content":"This developer\u0027s guide consist of the following sections:"},{"lineNumber":25,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":26,"author":{"gitID":"jordancjq"},"content":"* \u003c\u003cSetting up, Setting up\u003e\u003e"},{"lineNumber":27,"author":{"gitID":"jordancjq"},"content":"* \u003c\u003cDesign, Design\u003e\u003e"},{"lineNumber":28,"author":{"gitID":"jordancjq"},"content":"* \u003c\u003cImplementation, Implementation\u003e\u003e"},{"lineNumber":29,"author":{"gitID":"jordancjq"},"content":"* \u003c\u003cDocumentation, Documentation\u003e\u003e"},{"lineNumber":30,"author":{"gitID":"jordancjq"},"content":"* \u003c\u003cTesting, Testing\u003e\u003e"},{"lineNumber":31,"author":{"gitID":"jordancjq"},"content":"* \u003c\u003cDev Ops, Dev Ops\u003e\u003e"},{"lineNumber":32,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"jordancjq"},"content":"The following pointers teach you how to get started with developing on our application. You’ll learn how to prepare yourself with the project on IntelliJ and run it. Then, you’ll update configurations in IntelliJ to easily match the coding standards and you’ll be ready to start coding."},{"lineNumber":36,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":37,"author":{"gitID":"jordancjq"},"content":"But before you start, there are two fundamental prerequisites you should know about MTM:"},{"lineNumber":38,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"jordancjq"},"content":"MTM is written in Java 8 and with the use of an integrated development environment (IDE) such as IntelliJ, it provides you as a developer with a better environment suited for developing MTM to maintain coding standards and provide continuous integration."},{"lineNumber":42,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":43,"author":{"gitID":"jordancjq"},"content":". You are required to have *JDK `1.8.0_60`* or later,"},{"lineNumber":44,"author":{"gitID":"-"},"content":"+"},{"lineNumber":45,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":46,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":47,"author":{"gitID":"jordancjq"},"content":"This app will not work with earlier versions of Java 8. +"},{"lineNumber":48,"author":{"gitID":"jordancjq"},"content":"You can download Java 8 from link:http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151[here]."},{"lineNumber":49,"author":{"gitID":"-"},"content":"+"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"jordancjq"},"content":". and *IntelliJ* IDE."},{"lineNumber":52,"author":{"gitID":"-"},"content":"+"},{"lineNumber":53,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":54,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":55,"author":{"gitID":"jordancjq"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them. +"},{"lineNumber":56,"author":{"gitID":"jordancjq"},"content":"You can download IntelliJ from link:https://www.jetbrains.com/idea/download/#section\u003dwindows[here]."},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d Setting up the project on your computer"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"jordancjq"},"content":"Before you begin setting up the project, please ensure that you’ve done the following on our GitHub repository (repo)."},{"lineNumber":62,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":64,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":65,"author":{"gitID":"jordancjq"},"content":"Upon completion of forking from our GitHub repo, you can proceed to set up your project on IntelliJ."},{"lineNumber":66,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":68,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":69,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":70,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":71,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":72,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":73,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":74,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":75,"author":{"gitID":"jordancjq"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message which will generate all resources required by the application and tests."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"jordancjq"},"content":"Now that you’ve properly setup your project, you can verify that you have done everything properly."},{"lineNumber":80,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":82,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"jordancjq"},"content":"You have verified the setup and you’re all ready to dive into the code, but before you do, check out the following configurations that will help you make your coding more integrated and accurate."},{"lineNumber":87,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":93,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":94,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":97,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":112,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":117,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d Getting started with coding"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":124,"author":{"gitID":"jordancjq"},"content":"2. Dive right in and get started with programming."},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":129,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":132,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":137,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":142,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":147,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":152,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":153,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":154,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":159,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":164,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":167,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":172,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":175,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":180,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":183,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":188,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":191,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"jordancjq"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `PlayerDetails` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":202,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":203,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":206,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":209,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":210,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":213,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":216,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":219,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":220,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":221,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":226,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":229,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":232,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":239,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":240,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":241,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":244,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":247,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":254,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":257,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d Pre-existing"},{"lineNumber":266,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":267,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d Configuration"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"jordancjq"},"content":"// tag::logging[]"},{"lineNumber":272,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d Logging"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":277,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":278,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":283,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":284,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":285,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":288,"author":{"gitID":"jordancjq"},"content":"// end::logging[]"},{"lineNumber":289,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":291,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":292,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":303,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":304,"author":{"gitID":"-"},"content":"----"},{"lineNumber":305,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":306,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":307,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":309,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":310,"author":{"gitID":"-"},"content":"}"},{"lineNumber":311,"author":{"gitID":"-"},"content":"----"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":314,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":315,"author":{"gitID":"-"},"content":"----"},{"lineNumber":316,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":317,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":318,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":319,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":322,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":323,"author":{"gitID":"-"},"content":"}"},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":326,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":327,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":328,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":329,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":330,"author":{"gitID":"-"},"content":"}"},{"lineNumber":331,"author":{"gitID":"-"},"content":"----"},{"lineNumber":332,"author":{"gitID":"-"},"content":""},{"lineNumber":333,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":340,"author":{"gitID":"-"},"content":""},{"lineNumber":341,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":342,"author":{"gitID":"-"},"content":""},{"lineNumber":343,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":344,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":345,"author":{"gitID":"-"},"content":""},{"lineNumber":346,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":347,"author":{"gitID":"-"},"content":""},{"lineNumber":348,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":353,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":354,"author":{"gitID":"-"},"content":""},{"lineNumber":355,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":356,"author":{"gitID":"-"},"content":""},{"lineNumber":357,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":358,"author":{"gitID":"-"},"content":""},{"lineNumber":359,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":362,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":363,"author":{"gitID":"-"},"content":""},{"lineNumber":364,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":365,"author":{"gitID":"-"},"content":""},{"lineNumber":366,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":367,"author":{"gitID":"-"},"content":""},{"lineNumber":368,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":369,"author":{"gitID":"-"},"content":""},{"lineNumber":370,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":371,"author":{"gitID":"-"},"content":""},{"lineNumber":372,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":373,"author":{"gitID":"-"},"content":""},{"lineNumber":374,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":377,"author":{"gitID":"-"},"content":""},{"lineNumber":378,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":379,"author":{"gitID":"-"},"content":""},{"lineNumber":380,"author":{"gitID":"jordancjq"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`."},{"lineNumber":381,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":382,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":383,"author":{"gitID":"jordancjq"},"content":"* **Alternative 2:** Just override `execute()`."},{"lineNumber":384,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":385,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":386,"author":{"gitID":"-"},"content":""},{"lineNumber":387,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":388,"author":{"gitID":"-"},"content":""},{"lineNumber":389,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":390,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":391,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":392,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":393,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":394,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":395,"author":{"gitID":"-"},"content":""},{"lineNumber":396,"author":{"gitID":"-"},"content":""},{"lineNumber":397,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":398,"author":{"gitID":"-"},"content":""},{"lineNumber":399,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":400,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":401,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":402,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":403,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":404,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":405,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":406,"author":{"gitID":"-"},"content":""},{"lineNumber":407,"author":{"gitID":"-"},"content":""},{"lineNumber":408,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":409,"author":{"gitID":"-"},"content":""},{"lineNumber":410,"author":{"gitID":"jordancjq"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo."},{"lineNumber":411,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":412,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":413,"author":{"gitID":"jordancjq"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo."},{"lineNumber":414,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":415,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":416,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":417,"author":{"gitID":"-"},"content":""},{"lineNumber":418,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d Additional Functions Enhancements"},{"lineNumber":419,"author":{"gitID":"-"},"content":""},{"lineNumber":420,"author":{"gitID":"jordancjq"},"content":"// tag::remark[]"},{"lineNumber":421,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d Remark Mechanism"},{"lineNumber":422,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":423,"author":{"gitID":"jordancjq"},"content":"The remark mechanism is facilitated by `RemarkCommand`. The mechanism allows user to perform the adding, editing, and deleting of a single remark to a specified `Person` via the `INDEX` from the list shown in the `UI`. The field `remark` is similar to the other fields of `Person`, hence some of its logic in `AddCommand.java` and `EditCommand.java` are updated."},{"lineNumber":424,"author":{"gitID":"-"},"content":""},{"lineNumber":425,"author":{"gitID":"jordancjq"},"content":"The mechanism uses the command `remark` and a `r/` prefix to add, edit, and delete a single remark of a `Person`. When the user leaves the remark as empty after the `r/` prefix, it is an indication to delete the remark, and when it is valid, it either create a new remark for that `Person` or overwrites the current existing remark."},{"lineNumber":426,"author":{"gitID":"-"},"content":""},{"lineNumber":427,"author":{"gitID":"jordancjq"},"content":"The following sequence diagram illustrates the operation of the `remark` command:"},{"lineNumber":428,"author":{"gitID":"-"},"content":""},{"lineNumber":429,"author":{"gitID":"jordancjq"},"content":"//\u003cinsert sequence diagram\u003e"},{"lineNumber":430,"author":{"gitID":"-"},"content":""},{"lineNumber":431,"author":{"gitID":"jordancjq"},"content":"_Figure : Sequence Diagram of `remark` Command_"},{"lineNumber":432,"author":{"gitID":"-"},"content":""},{"lineNumber":433,"author":{"gitID":"jordancjq"},"content":"The `remark` field is not required when adding or editing a `Person`, however it will be initialized to an empty string or retrieved to fit the implementation of the other fields."},{"lineNumber":434,"author":{"gitID":"-"},"content":""},{"lineNumber":435,"author":{"gitID":"jordancjq"},"content":"Code snippet from `AddCommandParser.java` that shows that remark is initialized as empty."},{"lineNumber":436,"author":{"gitID":"-"},"content":""},{"lineNumber":437,"author":{"gitID":"jordancjq"},"content":"[source, java]"},{"lineNumber":438,"author":{"gitID":"jordancjq"},"content":"----"},{"lineNumber":439,"author":{"gitID":"jordancjq"},"content":"public AddCommand parse(String args) throws ParseException {"},{"lineNumber":440,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":441,"author":{"gitID":"jordancjq"},"content":"    // ... logic code ..."},{"lineNumber":442,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":443,"author":{"gitID":"jordancjq"},"content":"    try {"},{"lineNumber":444,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":445,"author":{"gitID":"jordancjq"},"content":"        // ... logic code ..."},{"lineNumber":446,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":447,"author":{"gitID":"jordancjq"},"content":"        Remark remark \u003d new Remark(\"\");"},{"lineNumber":448,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":449,"author":{"gitID":"jordancjq"},"content":"        Person person \u003d new Person(name, phone, email, address, remark, tagList);"},{"lineNumber":450,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":451,"author":{"gitID":"jordancjq"},"content":"        return new AddCommand(person);"},{"lineNumber":452,"author":{"gitID":"jordancjq"},"content":"    } catch (IllegalValueException ive) {"},{"lineNumber":453,"author":{"gitID":"jordancjq"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":454,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":455,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":456,"author":{"gitID":"jordancjq"},"content":"    // ... logic code ..."},{"lineNumber":457,"author":{"gitID":"lithiumlkid"},"content":"}"},{"lineNumber":458,"author":{"gitID":"lithiumlkid"},"content":"----"},{"lineNumber":459,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":460,"author":{"gitID":"jordancjq"},"content":"Code snippet from `EditCommand.java` that shows that remark is being retrieved."},{"lineNumber":461,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":462,"author":{"gitID":"jordancjq"},"content":"[source, java]"},{"lineNumber":463,"author":{"gitID":"lithiumlkid"},"content":"----"},{"lineNumber":464,"author":{"gitID":"jordancjq"},"content":"private static Person createEditedPerson(Person personToEdit,"},{"lineNumber":465,"author":{"gitID":"jordancjq"},"content":"    EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":466,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":467,"author":{"gitID":"jordancjq"},"content":"    // ... logic code ..."},{"lineNumber":468,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":469,"author":{"gitID":"jordancjq"},"content":"    Remark updatedRemark \u003d personToEdit.getRemark();"},{"lineNumber":470,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":471,"author":{"gitID":"jordancjq"},"content":"    return new Person(updatedName, updatedPhone, updatedEmail,"},{"lineNumber":472,"author":{"gitID":"jordancjq"},"content":"        updatedAddress, updatedRemark, updatedTags);"},{"lineNumber":473,"author":{"gitID":"jordancjq"},"content":"}"},{"lineNumber":474,"author":{"gitID":"lithiumlkid"},"content":"----"},{"lineNumber":475,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":476,"author":{"gitID":"jordancjq"},"content":"[TIP]"},{"lineNumber":477,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":478,"author":{"gitID":"jordancjq"},"content":"The field `remark` is found in `Person`, however it cannot be modified via `add` or `edit` commands. +"},{"lineNumber":479,"author":{"gitID":"jordancjq"},"content":"All functions related to `remark` is done strictly via the `remark` command."},{"lineNumber":480,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":481,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":482,"author":{"gitID":"jordancjq"},"content":"[TIP]"},{"lineNumber":483,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":484,"author":{"gitID":"jordancjq"},"content":"Only one `remark` is saved at a time. If the user `remark` on the same person, it will be overwritten."},{"lineNumber":485,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":486,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":487,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":488,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `Remark` command"},{"lineNumber":489,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":490,"author":{"gitID":"jordancjq"},"content":"* **Alternative 1 (current choice):** Creates an additional `remark` field in `Person`."},{"lineNumber":491,"author":{"gitID":"jordancjq"},"content":"** Pros: Follows the existing style of similar fields, making implementation easier."},{"lineNumber":492,"author":{"gitID":"jordancjq"},"content":"** Cons: Could only have 1 remark per person, unless `remark` mechanism follows the `tag` mechanism to have multiple remarks."},{"lineNumber":493,"author":{"gitID":"jordancjq"},"content":"* **Alternative 2:** Have a list of remarks that associates with the specified `Person`."},{"lineNumber":494,"author":{"gitID":"jordancjq"},"content":"** Pros: Can have multiple remarks associating with a specific `Person`."},{"lineNumber":495,"author":{"gitID":"jordancjq"},"content":"** Cons: Harder to maintain, more complicated."},{"lineNumber":496,"author":{"gitID":"jordancjq"},"content":"// end::remark[]"},{"lineNumber":497,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":498,"author":{"gitID":"jordancjq"},"content":"// tag::privatefield[]"},{"lineNumber":499,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d Setting various player fields to private `[coming in v1.5]`"},{"lineNumber":500,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":501,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":502,"author":{"gitID":"-"},"content":"There is currently no implementation for this feature. Coming soon!"},{"lineNumber":503,"author":{"gitID":"-"},"content":""},{"lineNumber":504,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d\u003d Design Consideration"},{"lineNumber":505,"author":{"gitID":"jordancjq"},"content":"// end::privatefield[]"},{"lineNumber":506,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":507,"author":{"gitID":"jordancjq"},"content":"// tag:sorting[]"},{"lineNumber":508,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d Sorting players by fields"},{"lineNumber":509,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":510,"author":{"gitID":"-"},"content":""},{"lineNumber":511,"author":{"gitID":"-"},"content":"The `sort` command is currently able to sort players by name, phone, email or address, in either ascending or descending order. Support for more fields will be added in subsequent updates."},{"lineNumber":512,"author":{"gitID":"-"},"content":""},{"lineNumber":513,"author":{"gitID":"-"},"content":"* The `sort` command is parsed through `SortCommandParser` which hands control to the `SortCommand` class."},{"lineNumber":514,"author":{"gitID":"-"},"content":""},{"lineNumber":515,"author":{"gitID":"-"},"content":"* Java Collections Sort API is used together with a custom `Comparator` in this implementation"},{"lineNumber":516,"author":{"gitID":"-"},"content":""},{"lineNumber":517,"author":{"gitID":"-"},"content":"Sorting is facilitated by the `SortCommand` which uses method `sortPlayers` to ultimately call method `sortBy` in UniquePersonList for the actual sorting as shown in this code snippet:"},{"lineNumber":518,"author":{"gitID":"-"},"content":"[source, java]"},{"lineNumber":519,"author":{"gitID":"-"},"content":"----"},{"lineNumber":520,"author":{"gitID":"-"},"content":"        switch (field) {"},{"lineNumber":521,"author":{"gitID":"-"},"content":"        case \"name\":"},{"lineNumber":522,"author":{"gitID":"-"},"content":"            comparator \u003d nameComparator;"},{"lineNumber":523,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":524,"author":{"gitID":"-"},"content":""},{"lineNumber":525,"author":{"gitID":"-"},"content":"        case \"phone\":"},{"lineNumber":526,"author":{"gitID":"-"},"content":"            comparator \u003d phoneComparator;"},{"lineNumber":527,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":528,"author":{"gitID":"-"},"content":""},{"lineNumber":529,"author":{"gitID":"-"},"content":"        case \"email\":"},{"lineNumber":530,"author":{"gitID":"-"},"content":"            comparator \u003d emailComparator;"},{"lineNumber":531,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":532,"author":{"gitID":"-"},"content":""},{"lineNumber":533,"author":{"gitID":"-"},"content":"        case \"address\":"},{"lineNumber":534,"author":{"gitID":"-"},"content":"            comparator \u003d addressComparator;"},{"lineNumber":535,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":536,"author":{"gitID":"-"},"content":""},{"lineNumber":537,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":538,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Invalid field parameter entered...\\n\");"},{"lineNumber":539,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":540,"author":{"gitID":"-"},"content":""},{"lineNumber":541,"author":{"gitID":"-"},"content":"        switch (order) {"},{"lineNumber":542,"author":{"gitID":"-"},"content":"        case \"asc\":"},{"lineNumber":543,"author":{"gitID":"-"},"content":"            Collections.sort(internalList, comparator);"},{"lineNumber":544,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":545,"author":{"gitID":"-"},"content":""},{"lineNumber":546,"author":{"gitID":"-"},"content":"        case \"desc\":"},{"lineNumber":547,"author":{"gitID":"-"},"content":"            Collections.sort(internalList, Collections.reverseOrder(comparator));"},{"lineNumber":548,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":549,"author":{"gitID":"-"},"content":""},{"lineNumber":550,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":551,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Invalid field parameter entered...\\n\");"},{"lineNumber":552,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":553,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":554,"author":{"gitID":"-"},"content":"----"},{"lineNumber":555,"author":{"gitID":"-"},"content":""},{"lineNumber":556,"author":{"gitID":"-"},"content":"The code above utilises a custom `Comparator` defined in the code below:"},{"lineNumber":557,"author":{"gitID":"-"},"content":"[source, java]"},{"lineNumber":558,"author":{"gitID":"-"},"content":"----"},{"lineNumber":559,"author":{"gitID":"-"},"content":"Comparator\u003cPerson\u003e nameComparator \u003d new Comparator\u003cPerson\u003e() {"},{"lineNumber":560,"author":{"gitID":"-"},"content":"            @Override"},{"lineNumber":561,"author":{"gitID":"-"},"content":"            public int compare(Person p1, Person p2) {"},{"lineNumber":562,"author":{"gitID":"-"},"content":"                return p1.getName().fullName.compareTo(p2.getName().fullName);"},{"lineNumber":563,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":564,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":565,"author":{"gitID":"-"},"content":""},{"lineNumber":566,"author":{"gitID":"-"},"content":"        Comparator\u003cPerson\u003e phoneComparator \u003d new Comparator\u003cPerson\u003e() {"},{"lineNumber":567,"author":{"gitID":"-"},"content":"            @Override"},{"lineNumber":568,"author":{"gitID":"-"},"content":"            public int compare(Person p1, Person p2) {"},{"lineNumber":569,"author":{"gitID":"-"},"content":"                return p1.getPhone().value.compareTo(p2.getPhone().value);"},{"lineNumber":570,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":571,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":572,"author":{"gitID":"-"},"content":""},{"lineNumber":573,"author":{"gitID":"-"},"content":"        Comparator\u003cPerson\u003e emailComparator \u003d new Comparator\u003cPerson\u003e() {"},{"lineNumber":574,"author":{"gitID":"-"},"content":"            @Override"},{"lineNumber":575,"author":{"gitID":"-"},"content":"            public int compare(Person p1, Person p2) {"},{"lineNumber":576,"author":{"gitID":"-"},"content":"                return p1.getEmail().value.compareTo(p2.getEmail().value);"},{"lineNumber":577,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":578,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":579,"author":{"gitID":"-"},"content":""},{"lineNumber":580,"author":{"gitID":"-"},"content":"        Comparator\u003cPerson\u003e addressComparator \u003d new Comparator\u003cPerson\u003e() {"},{"lineNumber":581,"author":{"gitID":"-"},"content":"            @Override"},{"lineNumber":582,"author":{"gitID":"-"},"content":"            public int compare(Person p1, Person p2) {"},{"lineNumber":583,"author":{"gitID":"-"},"content":"                return p1.getAddress().value.compareTo(p2.getAddress().value);"},{"lineNumber":584,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":585,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":586,"author":{"gitID":"-"},"content":"----"},{"lineNumber":587,"author":{"gitID":"-"},"content":""},{"lineNumber":588,"author":{"gitID":"-"},"content":"The following sequence diagram shows the program flow when `sort` is used: \u003cimage\u003e"},{"lineNumber":589,"author":{"gitID":"-"},"content":""},{"lineNumber":590,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":591,"author":{"gitID":"-"},"content":"If address book is empty, a `NoPlayerException` will be thrown by `sortBy` method in UniquePlayerList."},{"lineNumber":592,"author":{"gitID":"-"},"content":""},{"lineNumber":593,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d\u003d Design Consideration"},{"lineNumber":594,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `sort`"},{"lineNumber":595,"author":{"gitID":"-"},"content":""},{"lineNumber":596,"author":{"gitID":"jordancjq"},"content":"* **Alternative 1 (current choice):** Sorting is done in `UniquePersonList`."},{"lineNumber":597,"author":{"gitID":"-"},"content":"** Pros: Sorting methods resides in class that handles most operations done to list. Future changes to implementation would be easier."},{"lineNumber":598,"author":{"gitID":"jordancjq"},"content":"** Cons: Complicated flow of control passed between classes."},{"lineNumber":599,"author":{"gitID":"jordancjq"},"content":"* **Alternative 2:** Sorting is done in `SortCommand`."},{"lineNumber":600,"author":{"gitID":"jordancjq"},"content":"** Pros: Easier to trace flow of control as lesser passing between classes."},{"lineNumber":601,"author":{"gitID":"jordancjq"},"content":"** Cons: Unnecessary coupling if `UniquePersonList` has to rely on `SortCommand`."},{"lineNumber":602,"author":{"gitID":"-"},"content":""},{"lineNumber":603,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Sort by multiple fields"},{"lineNumber":604,"author":{"gitID":"-"},"content":""},{"lineNumber":605,"author":{"gitID":"jordancjq"},"content":"* **Alternative 1 (current choice):** Sort can only be done by 1 field."},{"lineNumber":606,"author":{"gitID":"jordancjq"},"content":"** Pros: Easy to implement and input is straightforward."},{"lineNumber":607,"author":{"gitID":"jordancjq"},"content":"** Cons: Unable to fine tune to great detail how teams are sorted and displayed."},{"lineNumber":608,"author":{"gitID":"jordancjq"},"content":"* **Alternative 2:** Sort can be done by multiple fields."},{"lineNumber":609,"author":{"gitID":"jordancjq"},"content":"** Pros:  Able to fine tune to great detail how teams are sorted and displayed."},{"lineNumber":610,"author":{"gitID":"jordancjq"},"content":"** Cons: Unnecessary as team managers would not need to sort players by multiple fields."},{"lineNumber":611,"author":{"gitID":"-"},"content":""},{"lineNumber":612,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Sort Persistence"},{"lineNumber":613,"author":{"gitID":"-"},"content":""},{"lineNumber":614,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Address book is saved after sorting."},{"lineNumber":615,"author":{"gitID":"-"},"content":"** Pros: Easy to implement. Allows team managers to use preferred sort pattern in every session."},{"lineNumber":616,"author":{"gitID":"-"},"content":"** Cons: Previous order of players will be lost."},{"lineNumber":617,"author":{"gitID":"-"},"content":"* **Alternative 2:** Address book is not saved after sorting."},{"lineNumber":618,"author":{"gitID":"jordancjq"},"content":"** Pros: Good if team manager wants to sort players for current session only."},{"lineNumber":619,"author":{"gitID":"-"},"content":"** Cons: Sort order is lost when program exits. More memory is used to sort a list and reverse it after."},{"lineNumber":620,"author":{"gitID":"jordancjq"},"content":"// end::sorting[]"},{"lineNumber":621,"author":{"gitID":"-"},"content":""},{"lineNumber":622,"author":{"gitID":"jordancjq"},"content":"// tag::team[]"},{"lineNumber":623,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d Team Mechanism"},{"lineNumber":624,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":625,"author":{"gitID":"-"},"content":""},{"lineNumber":626,"author":{"gitID":"jordancjq"},"content":"The team mechanism is created to provide better organizational methods to the user for organizing their players. We achieved it by introducing a `UniqueTeamList` into the application which consists of a list of `Team` objects."},{"lineNumber":627,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":628,"author":{"gitID":"jordancjq"},"content":"`Team` objects consist of `TeamName` object, which is used to uniquely identify the team, and `UniquePersonList` object which stores the information of `Person` objects which should be identical to those found in `UniquePersonList` in `addressbook`."},{"lineNumber":629,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":630,"author":{"gitID":"jordancjq"},"content":"Code snippet from `Team.java` that shows the attributes of `Team`."},{"lineNumber":631,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":632,"author":{"gitID":"jordancjq"},"content":"[source, java]"},{"lineNumber":633,"author":{"gitID":"jordancjq"},"content":"----"},{"lineNumber":634,"author":{"gitID":"jordancjq"},"content":"public class Team {"},{"lineNumber":635,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":636,"author":{"gitID":"jordancjq"},"content":"    private final TeamName teamName;"},{"lineNumber":637,"author":{"gitID":"jordancjq"},"content":"    private final UniquePersonList players \u003d new UniquePersonList();"},{"lineNumber":638,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":639,"author":{"gitID":"jordancjq"},"content":"    // ... model method ..."},{"lineNumber":640,"author":{"gitID":"jordancjq"},"content":"}"},{"lineNumber":641,"author":{"gitID":"jordancjq"},"content":"----"},{"lineNumber":642,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":643,"author":{"gitID":"jordancjq"},"content":"Since `Person` stored in `Team` is referencing to the `Person` in `addressbook`, changes made to `Person` needs to be ensured that is properly propagated to the `Person` objects found in `Team`. An additional `TeamName` field is also added to `Person` so that the user can quickly determine the team the player is in."},{"lineNumber":644,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":645,"author":{"gitID":"jordancjq"},"content":"Code snippet from `\u003csomefile\u003e.java` that shows the propagation of details updated in `Person` from `addressbook` to the `Person` objects in `Team`."},{"lineNumber":646,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":647,"author":{"gitID":"jordancjq"},"content":"[source, java]"},{"lineNumber":648,"author":{"gitID":"jordancjq"},"content":"----"},{"lineNumber":649,"author":{"gitID":"jordancjq"},"content":"    // placeholder"},{"lineNumber":650,"author":{"gitID":"jordancjq"},"content":"----"},{"lineNumber":651,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":652,"author":{"gitID":"jordancjq"},"content":"Currently, with the `Team` mechanism, additional commands such as `create`, `remove`, and `editteam` gives the user basic functionality for team management. Additionally, commands like `assign`, `view`, `setmatch`, and `viewmatch` gives the user more practical uses in managing multiple teams."},{"lineNumber":653,"author":{"gitID":"-"},"content":""},{"lineNumber":654,"author":{"gitID":"jordancjq"},"content":"The following sequence diagram illustrates the operation of the `Team` mechanism and some of its respective commands:"},{"lineNumber":655,"author":{"gitID":"-"},"content":""},{"lineNumber":656,"author":{"gitID":"jordancjq"},"content":"_Figure : Sequence Diagram of `Team` mechanism_"},{"lineNumber":657,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":658,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":659,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `Team`"},{"lineNumber":660,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":661,"author":{"gitID":"jordancjq"},"content":"* **Alternative 1 (current choice):** `Team` object stores the reference to `Person` objects that is also in `UniquePersonList` and `TeamName` is also an attribute of `Person`."},{"lineNumber":662,"author":{"gitID":"jordancjq"},"content":"** Pros: Provides an easier lookup of person belonging in which team without the need of iterating through the `UniqueTeamList` for a specific `Person`, and efficient way of listing all `Persons` in a `Team`."},{"lineNumber":663,"author":{"gitID":"jordancjq"},"content":"** Cons: Checks need to be done thoroughly to ensure that code does not break when changes are made, especially the synchronisation of `Person` details in `Team` and in `addressbook`."},{"lineNumber":664,"author":{"gitID":"jordancjq"},"content":"* **Alternative 2:** `Team` object is stored in `Person` object as an attribute."},{"lineNumber":665,"author":{"gitID":"jordancjq"},"content":"** Pros: Logical thought process to include `Team` as an attribute."},{"lineNumber":666,"author":{"gitID":"jordancjq"},"content":"** Cons: Excess storage wasted due to duplicated data of `Team` in every `Person`."},{"lineNumber":667,"author":{"gitID":"jordancjq"},"content":"// end::team[]"},{"lineNumber":668,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":669,"author":{"gitID":"jordancjq"},"content":"// tag::showbestxi[]"},{"lineNumber":670,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d Show Best XI `[coming in v1.5]`"},{"lineNumber":671,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":672,"author":{"gitID":"-"},"content":""},{"lineNumber":673,"author":{"gitID":"-"},"content":"The `showBest` command is able to show the current team\u0027s best 11 players. There is however functional implementation for this feature yet. Coming soon!"},{"lineNumber":674,"author":{"gitID":"-"},"content":""},{"lineNumber":675,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d\u003d Design Consideration"},{"lineNumber":676,"author":{"gitID":"jordancjq"},"content":"// end::showbestxi[]"},{"lineNumber":677,"author":{"gitID":"-"},"content":""},{"lineNumber":678,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d Usability Enhancements"},{"lineNumber":679,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":680,"author":{"gitID":"jordancjq"},"content":"// tag::autocomplete[]"},{"lineNumber":681,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d Tab Autocomplete"},{"lineNumber":682,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":683,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":684,"author":{"gitID":"jordancjq"},"content":"The tab autocomplete feature works by handling the Tab key pressed event, searching for any commands with matching prefix and returns one if found."},{"lineNumber":685,"author":{"gitID":"jordancjq"},"content":"The command strings are stored in a Trie data structure, named `CommandTrie`, for optimal search."},{"lineNumber":686,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":687,"author":{"gitID":"jordancjq"},"content":"[source, java]"},{"lineNumber":688,"author":{"gitID":"lithiumlkid"},"content":"----"},{"lineNumber":689,"author":{"gitID":"lithiumlkid"},"content":"public class CommandTrie {"},{"lineNumber":690,"author":{"gitID":"lithiumlkid"},"content":"    String attemptAutoComplete (String input);"},{"lineNumber":691,"author":{"gitID":"lithiumlkid"},"content":"    void insert (String input);"},{"lineNumber":692,"author":{"gitID":"lithiumlkid"},"content":"    Set\u003cString\u003e getCommandSet();"},{"lineNumber":693,"author":{"gitID":"lithiumlkid"},"content":"}"},{"lineNumber":694,"author":{"gitID":"lithiumlkid"},"content":"----"},{"lineNumber":695,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":696,"author":{"gitID":"jordancjq"},"content":"The trie is made up of `TrieNode` objects which contains three objects. The `TrieNode sibling` represents a character on the same level as the current one. The `TrieNode child` represents a next possible letter."},{"lineNumber":697,"author":{"gitID":"jordancjq"},"content":"For example in the words `edit` and `exit`, the node for `d` would have a child `i` and a sibling `x`. `x` would have a child `i`."},{"lineNumber":698,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":699,"author":{"gitID":"jordancjq"},"content":"[source, java]"},{"lineNumber":700,"author":{"gitID":"jordancjq"},"content":"----"},{"lineNumber":701,"author":{"gitID":"jordancjq"},"content":"public class TrieNode {"},{"lineNumber":702,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":703,"author":{"gitID":"jordancjq"},"content":"    private TrieNode sibling;"},{"lineNumber":704,"author":{"gitID":"jordancjq"},"content":"    private TrieNode child;"},{"lineNumber":705,"author":{"gitID":"jordancjq"},"content":"    private char key;"},{"lineNumber":706,"author":{"gitID":"jordancjq"},"content":"    ..."},{"lineNumber":707,"author":{"gitID":"jordancjq"},"content":"}"},{"lineNumber":708,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":709,"author":{"gitID":"jordancjq"},"content":"----"},{"lineNumber":710,"author":{"gitID":"jordancjq"},"content":"Upon the pressing of the tab key, the command box calls `attemptAutoComplete`, in the `commandTrie` class. With the content of the command box as the query, attemptAutoComplete searches for the query using the standard Trie search algortihm."},{"lineNumber":711,"author":{"gitID":"jordancjq"},"content":"If the query prefix itself is not present in the trie, then the attempt fails. If the query reaches a `TrieNode` with a `sibling` or `child` `TrieNode`,"},{"lineNumber":712,"author":{"gitID":"jordancjq"},"content":"it will provide the user with possible commands for a given input. In this case, a dropdown box will appear in the UI that lists the possible commands for the user."},{"lineNumber":713,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":714,"author":{"gitID":"jordancjq"},"content":"Upon finding a matching command, `attemptAutoComplete` returns it and replaces the text in the Command Line. If the no matching command is found, the text is turned red."},{"lineNumber":715,"author":{"gitID":"jordancjq"},"content":"// end::autocomplete[]"},{"lineNumber":716,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":717,"author":{"gitID":"jordancjq"},"content":"// tag::enhancedadd[]"},{"lineNumber":718,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d Optional Fields for Add Mechanism"},{"lineNumber":719,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":720,"author":{"gitID":"jordancjq"},"content":"This mechanism enhances the original implementation of the `add` command. The required fields that are mandatory to be filled by the user are `n/NAME` and `e/EMAIL`. This implementation of making fields optional for `AddCommand` allows user to add players without their full information, and can be updated accordingly when the user retrieves their full information."},{"lineNumber":721,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":722,"author":{"gitID":"jordancjq"},"content":"The following sequence diagram illustrates the operation of the enhancement made to `add` command:"},{"lineNumber":723,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":724,"author":{"gitID":"jordancjq"},"content":"//\u003cinsert sequence diagram\u003e"},{"lineNumber":725,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":726,"author":{"gitID":"jordancjq"},"content":"_Figure : Sequence Diagram of Enhanced `add` Command_"},{"lineNumber":727,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":728,"author":{"gitID":"jordancjq"},"content":"Code snippet from `ParserUtil.java` that shows the implementation of when a field is left empty. \"\u003cUNSPECIFED\u003e\" string will be return when the value passed in is empty."},{"lineNumber":729,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":730,"author":{"gitID":"jordancjq"},"content":"[source, java]"},{"lineNumber":731,"author":{"gitID":"jordancjq"},"content":"----"},{"lineNumber":732,"author":{"gitID":"jordancjq"},"content":"public class ParserUtil {"},{"lineNumber":733,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":734,"author":{"gitID":"jordancjq"},"content":"    // ... model code ..."},{"lineNumber":735,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":736,"author":{"gitID":"jordancjq"},"content":"    public static final String UNSPECIFIED_FIELD \u003d \"\u003cUNSPECIFIED\u003e\";"},{"lineNumber":737,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":738,"author":{"gitID":"jordancjq"},"content":"    // ... model code ..."},{"lineNumber":739,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":740,"author":{"gitID":"jordancjq"},"content":"    public static Optional\u003cString\u003e parseValue(Optional\u003cString\u003e value) {"},{"lineNumber":741,"author":{"gitID":"jordancjq"},"content":"        return Optional.of(value.orElse(UNSPECIFIED_FIELD));"},{"lineNumber":742,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":743,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":744,"author":{"gitID":"jordancjq"},"content":"    // ... model code ..."},{"lineNumber":745,"author":{"gitID":"jordancjq"},"content":"}"},{"lineNumber":746,"author":{"gitID":"jordancjq"},"content":"----"},{"lineNumber":747,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":748,"author":{"gitID":"jordancjq"},"content":"Code snippet from `AddCommandParser.java` that shows the usage of parsing fields that are set as optional."},{"lineNumber":749,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":750,"author":{"gitID":"jordancjq"},"content":"[source,java]"},{"lineNumber":751,"author":{"gitID":"jordancjq"},"content":"----"},{"lineNumber":752,"author":{"gitID":"jordancjq"},"content":"public AddCommand parse(String args) throws ParseException {"},{"lineNumber":753,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":754,"author":{"gitID":"jordancjq"},"content":"    // ... logic code ..."},{"lineNumber":755,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":756,"author":{"gitID":"jordancjq"},"content":"    if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_EMAIL)"},{"lineNumber":757,"author":{"gitID":"jordancjq"},"content":"        || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":758,"author":{"gitID":"jordancjq"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":759,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":760,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":761,"author":{"gitID":"jordancjq"},"content":"    try {"},{"lineNumber":762,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":763,"author":{"gitID":"jordancjq"},"content":"    // ... logic code ..."},{"lineNumber":764,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":765,"author":{"gitID":"jordancjq"},"content":"        Phone phone \u003d ParserUtil.parsePhone("},{"lineNumber":766,"author":{"gitID":"jordancjq"},"content":"            ParserUtil.parseValue(argMultimap.getValue(PREFIX_PHONE)).get());"},{"lineNumber":767,"author":{"gitID":"jordancjq"},"content":"        Address address \u003d ParserUtil.parseAddress("},{"lineNumber":768,"author":{"gitID":"jordancjq"},"content":"            ParserUtil.parseValue(argMultimap.getValue(PREFIX_ADDRESS)).get());"},{"lineNumber":769,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":770,"author":{"gitID":"jordancjq"},"content":"        // ... logic code ..."},{"lineNumber":771,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":772,"author":{"gitID":"jordancjq"},"content":"        Person person \u003d new Person(name, phone, email, address, tagList);"},{"lineNumber":773,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":774,"author":{"gitID":"jordancjq"},"content":"        return new AddCommand(person);"},{"lineNumber":775,"author":{"gitID":"jordancjq"},"content":"    } catch (IllegalValueException ive) {"},{"lineNumber":776,"author":{"gitID":"jordancjq"},"content":"        throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":777,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":778,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":779,"author":{"gitID":"jordancjq"},"content":"    // ... logic code ..."},{"lineNumber":780,"author":{"gitID":"jordancjq"},"content":"}"},{"lineNumber":781,"author":{"gitID":"jordancjq"},"content":"----"},{"lineNumber":782,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":783,"author":{"gitID":"jordancjq"},"content":"Code snippet from `Address.java` that shows an example of an optional field being valid when not specified."},{"lineNumber":784,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":785,"author":{"gitID":"jordancjq"},"content":"[source, java]"},{"lineNumber":786,"author":{"gitID":"jordancjq"},"content":"----"},{"lineNumber":787,"author":{"gitID":"jordancjq"},"content":"public class Address {"},{"lineNumber":788,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":789,"author":{"gitID":"jordancjq"},"content":"    // ... model code ..."},{"lineNumber":790,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":791,"author":{"gitID":"jordancjq"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":792,"author":{"gitID":"jordancjq"},"content":"        return test.matches(ADDRESS_VALIDATION_REGEX) || test.equals(UNSPECIFIED_FIELD);"},{"lineNumber":793,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":794,"author":{"gitID":"jordancjq"},"content":"}"},{"lineNumber":795,"author":{"gitID":"jordancjq"},"content":"----"},{"lineNumber":796,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":797,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d\u003d Design Consideration"},{"lineNumber":798,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of Optional fields"},{"lineNumber":799,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":800,"author":{"gitID":"jordancjq"},"content":"* **Alternative 1 (current choice):** Set a default value for unspecified fields and parse fields that are mandatory."},{"lineNumber":801,"author":{"gitID":"jordancjq"},"content":"** Pros: Easy to implement as fields are still filled with information even though user did not specify."},{"lineNumber":802,"author":{"gitID":"jordancjq"},"content":"** Cons: Unattractive display of fields when it is unspecified."},{"lineNumber":803,"author":{"gitID":"jordancjq"},"content":"* **Alternative 2:** Require users to input all fields."},{"lineNumber":804,"author":{"gitID":"jordancjq"},"content":"** Pros: The current implementation is used, hence there is no additional code to ensure validity of unspecified input."},{"lineNumber":805,"author":{"gitID":"jordancjq"},"content":"** Cons: Less flexibility is given to the user when adding a player into the application."},{"lineNumber":806,"author":{"gitID":"jordancjq"},"content":"// end::enhancedadd[]"},{"lineNumber":807,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":808,"author":{"gitID":"jordancjq"},"content":"// tag::settagcolour[]"},{"lineNumber":809,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d Set Tag Colour feature"},{"lineNumber":810,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":811,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":812,"author":{"gitID":"-"},"content":"* The `Set` Command is an entirely new command that will allow the user to assign a colour to a specific tag."},{"lineNumber":813,"author":{"gitID":"-"},"content":"* This mechanism is facilitated by the `SetCommandParser`, which creates and returns a new `SetCommand`."},{"lineNumber":814,"author":{"gitID":"-"},"content":"* The following diagrams show the inheritance for the commands: \u003cimage\u003e"},{"lineNumber":815,"author":{"gitID":"jordancjq"},"content":"* In `SetCommandParser`, which implements the `Parser` interface, it parses the arguments inputted into the CLI, and checks whether the arguments are valid."},{"lineNumber":816,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":817,"author":{"gitID":"-"},"content":"`SetCommandParser` is implemented as such:"},{"lineNumber":818,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":819,"author":{"gitID":"jordancjq"},"content":"[source, java]"},{"lineNumber":820,"author":{"gitID":"jordancjq"},"content":"----"},{"lineNumber":821,"author":{"gitID":"-"},"content":"public class SetCommandParser implements Parser\u003cSetCommand\u003e {"},{"lineNumber":822,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":823,"author":{"gitID":"-"},"content":"    public SetCommand parse(String args) throws ParseException {"},{"lineNumber":824,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":825,"author":{"gitID":"-"},"content":"    // ...parse arguments and check for invalid arguments..."},{"lineNumber":826,"author":{"gitID":"jordancjq"},"content":"  }"},{"lineNumber":827,"author":{"gitID":"jordancjq"},"content":"}"},{"lineNumber":828,"author":{"gitID":"jordancjq"},"content":"----"},{"lineNumber":829,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":830,"author":{"gitID":"-"},"content":"* `SetCommand` inherits the abstract `Command` class. After `execute()` is called in `SetCommand`, the tag colour is set through the logic portions of `ModelManager` and `AddressBook`, then"},{"lineNumber":831,"author":{"gitID":"-"},"content":"lastly changes `tagColour` attribute within the `Tag` object itself. +"},{"lineNumber":832,"author":{"gitID":"-"},"content":""},{"lineNumber":833,"author":{"gitID":"-"},"content":"`SetCommand` is implemented in this way:"},{"lineNumber":834,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":835,"author":{"gitID":"jordancjq"},"content":"[source, java]"},{"lineNumber":836,"author":{"gitID":"jordancjq"},"content":"----"},{"lineNumber":837,"author":{"gitID":"-"},"content":"public class SetCommand extends Command {"},{"lineNumber":838,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":839,"author":{"gitID":"jordancjq"},"content":"    private final Tag tagToSet;"},{"lineNumber":840,"author":{"gitID":"jordancjq"},"content":"    private final String tagColour;"},{"lineNumber":841,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":842,"author":{"gitID":"jordancjq"},"content":"    public SetCommand(Tag tag, String colour) {"},{"lineNumber":843,"author":{"gitID":"jordancjq"},"content":"        requireNonNull(tag);"},{"lineNumber":844,"author":{"gitID":"jordancjq"},"content":"        tagToSet \u003d tag;"},{"lineNumber":845,"author":{"gitID":"jordancjq"},"content":"        tagColour \u003d colour;"},{"lineNumber":846,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":847,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":848,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":849,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":850,"author":{"gitID":"-"},"content":"    // ...set colour logic..."},{"lineNumber":851,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":852,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":853,"author":{"gitID":"jordancjq"},"content":"}"},{"lineNumber":854,"author":{"gitID":"jordancjq"},"content":"----"},{"lineNumber":855,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":856,"author":{"gitID":"-"},"content":"* The following sequence diagram shows how the set command operation works:"},{"lineNumber":857,"author":{"gitID":"-"},"content":"\u003cimage\u003e"},{"lineNumber":858,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":859,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":860,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":861,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":862,"author":{"gitID":"jordancjq"},"content":"* **Alternative 1 (current choice):** Inherit from `Command`."},{"lineNumber":863,"author":{"gitID":"-"},"content":"** Pros: Does not involve complicated undo/redo tests, simple and quicker implementation,"},{"lineNumber":864,"author":{"gitID":"-"},"content":"lessen chances of mistakes made in implementation."},{"lineNumber":865,"author":{"gitID":"-"},"content":"** Cons: User cannot use the `undo/redo` command."},{"lineNumber":866,"author":{"gitID":"jordancjq"},"content":"* **Alternative 2 :** Inherit from `UndoableCommand`."},{"lineNumber":867,"author":{"gitID":"-"},"content":"** Pros: User can utilise the `undo/redo` command."},{"lineNumber":868,"author":{"gitID":"-"},"content":"** Cons: Hard for developers to implement extra tests, not very necessary as users can just as easily type"},{"lineNumber":869,"author":{"gitID":"-"},"content":"out the colour they would like to change their tag to; it is a short command, especially with the `stc` alias."},{"lineNumber":870,"author":{"gitID":"jordancjq"},"content":"// end::settagcolour[]"},{"lineNumber":871,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":872,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d UI Enhancements"},{"lineNumber":873,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":874,"author":{"gitID":"jordancjq"},"content":"// tag::teamDisplay[]"},{"lineNumber":875,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d Team Display Bar"},{"lineNumber":876,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":877,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":878,"author":{"gitID":"jordancjq"},"content":"* The Team Display Bar is implemented as `TeamDisplay` in the UI Component and renders `TeamDisplay.fxml`."},{"lineNumber":879,"author":{"gitID":"jordancjq"},"content":"* It is called from `MainWindow` and will be highlighting"},{"lineNumber":880,"author":{"gitID":"jordancjq"},"content":"the current team that has been selected in the Command Line Interface by the user."},{"lineNumber":881,"author":{"gitID":"jordancjq"},"content":"* It calls the `Team` model and displays the `Person` cards associated with that `Team`."},{"lineNumber":882,"author":{"gitID":"-"},"content":""},{"lineNumber":883,"author":{"gitID":"jordancjq"},"content":"Code snippet from \u0027TeamDisplay\u0027 to show initialisation of UI component:"},{"lineNumber":884,"author":{"gitID":"-"},"content":""},{"lineNumber":885,"author":{"gitID":"jordancjq"},"content":"[source, java]"},{"lineNumber":886,"author":{"gitID":"jordancjq"},"content":"----"},{"lineNumber":887,"author":{"gitID":"jordancjq"},"content":"public class TeamDisplay extends UiPart\u003cRegion\u003e {"},{"lineNumber":888,"author":{"gitID":"-"},"content":""},{"lineNumber":889,"author":{"gitID":"jordancjq"},"content":"    private static final String FXML \u003d \"TeamDisplay.fxml\";"},{"lineNumber":890,"author":{"gitID":"-"},"content":""},{"lineNumber":891,"author":{"gitID":"jordancjq"},"content":"    public TeamDisplay() {"},{"lineNumber":892,"author":{"gitID":"jordancjq"},"content":"        super(FXML);"},{"lineNumber":893,"author":{"gitID":"jordancjq"},"content":"        // ...team display code..."},{"lineNumber":894,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":895,"author":{"gitID":"jordancjq"},"content":"}"},{"lineNumber":896,"author":{"gitID":"-"},"content":"----"},{"lineNumber":897,"author":{"gitID":"-"},"content":""},{"lineNumber":898,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":899,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: User Experience"},{"lineNumber":900,"author":{"gitID":"-"},"content":""},{"lineNumber":901,"author":{"gitID":"jordancjq"},"content":"* **Alternative 1 (current choice):** `TeamDisplay` is placed underneath the `ResultDisplay` and above the `PersonListPanel`."},{"lineNumber":902,"author":{"gitID":"jordancjq"},"content":"** Pros: Located at an obvious location for the user to view the team currently selected."},{"lineNumber":903,"author":{"gitID":"jordancjq"},"content":"** Cons: There will be less space for the `ResultDisplay` and `CommandBox`."},{"lineNumber":904,"author":{"gitID":"jordancjq"},"content":"* **Alternative 2:** `TeamDisplay` is placed on the left of the `PersonListPanel` as a vertical bar."},{"lineNumber":905,"author":{"gitID":"jordancjq"},"content":"** Pros: There will be more space for the `ResultDisplay` and `CommandBox`."},{"lineNumber":906,"author":{"gitID":"jordancjq"},"content":"** Cons: It is less obvious to the user as it is at the side."},{"lineNumber":907,"author":{"gitID":"jordancjq"},"content":"// end::teamDisplay[]"},{"lineNumber":908,"author":{"gitID":"-"},"content":""},{"lineNumber":909,"author":{"gitID":"jordancjq"},"content":"// tag::PlayerDetails[]"},{"lineNumber":910,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d Player Details Pane"},{"lineNumber":911,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":912,"author":{"gitID":"-"},"content":""},{"lineNumber":913,"author":{"gitID":"jordancjq"},"content":"* The `Player Details` pane is implemented as `PlayerDetails` in the UI Component. It is called from `PlayerListPanel`."},{"lineNumber":914,"author":{"gitID":"jordancjq"},"content":"* It renders `PlayerDetails.fxml` and displays the selected `PersonCard`."},{"lineNumber":915,"author":{"gitID":"jordancjq"},"content":"* It calls the `Person` model and displays the fields in the `Person` model that are not displayed in the left panel."},{"lineNumber":916,"author":{"gitID":"-"},"content":""},{"lineNumber":917,"author":{"gitID":"jordancjq"},"content":"Code snippet from \u0027PlayerDetails\u0027 to show initialisation of UI component:"},{"lineNumber":918,"author":{"gitID":"-"},"content":""},{"lineNumber":919,"author":{"gitID":"jordancjq"},"content":"[source, java]"},{"lineNumber":920,"author":{"gitID":"jordancjq"},"content":"----"},{"lineNumber":921,"author":{"gitID":"jordancjq"},"content":"public class PlayerDetails extends UiPart\u003cRegion\u003e {"},{"lineNumber":922,"author":{"gitID":"-"},"content":""},{"lineNumber":923,"author":{"gitID":"jordancjq"},"content":"    private static final String FXML \u003d \"PlayerDetails.fxml\";"},{"lineNumber":924,"author":{"gitID":"jordancjq"},"content":"    public final Person person;"},{"lineNumber":925,"author":{"gitID":"-"},"content":""},{"lineNumber":926,"author":{"gitID":"jordancjq"},"content":"    public PlayerDetails(Person person) {"},{"lineNumber":927,"author":{"gitID":"jordancjq"},"content":"        super(FXML);"},{"lineNumber":928,"author":{"gitID":"jordancjq"},"content":"        this.person \u003d person;"},{"lineNumber":929,"author":{"gitID":"jordancjq"},"content":"        //....player details code..."},{"lineNumber":930,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":931,"author":{"gitID":"-"},"content":""},{"lineNumber":932,"author":{"gitID":"jordancjq"},"content":"}"},{"lineNumber":933,"author":{"gitID":"jordancjq"},"content":"----"},{"lineNumber":934,"author":{"gitID":"-"},"content":""},{"lineNumber":935,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":936,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: User Experience"},{"lineNumber":937,"author":{"gitID":"-"},"content":""},{"lineNumber":938,"author":{"gitID":"jordancjq"},"content":"* **Alternative 1 (current choice):** `PlayerDetails` is placed on the right of `Person List Panel`, replacing the `BrowserPanel`."},{"lineNumber":939,"author":{"gitID":"jordancjq"},"content":"** Pros: It is the only large unused space in the software left and is right beside the `Person List Panel`, thus is the logical"},{"lineNumber":940,"author":{"gitID":"jordancjq"},"content":"place to look at after selection of a person card."},{"lineNumber":941,"author":{"gitID":"jordancjq"},"content":"** Cons: This is a lot of whitespace in the pane as are not many fields."},{"lineNumber":942,"author":{"gitID":"jordancjq"},"content":"* **Alternative 2:** `PlayerDetails` pane size is reduced and the extra space is repurposed."},{"lineNumber":943,"author":{"gitID":"jordancjq"},"content":"** Pros: There will be more space for another new feature e.g. calendar."},{"lineNumber":944,"author":{"gitID":"jordancjq"},"content":"** Cons: It can only be implemented in v2.0 due to time constraints in development."},{"lineNumber":945,"author":{"gitID":"jordancjq"},"content":"// end::playerDetails[]"},{"lineNumber":946,"author":{"gitID":"-"},"content":""},{"lineNumber":947,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":948,"author":{"gitID":"-"},"content":""},{"lineNumber":949,"author":{"gitID":"jordancjq"},"content":"We use https://asciidoctor.org[asciidoc] for writing documentation."},{"lineNumber":950,"author":{"gitID":"-"},"content":""},{"lineNumber":951,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":952,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":953,"author":{"gitID":"-"},"content":""},{"lineNumber":954,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":955,"author":{"gitID":"-"},"content":""},{"lineNumber":956,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":957,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":958,"author":{"gitID":"-"},"content":""},{"lineNumber":959,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":960,"author":{"gitID":"-"},"content":""},{"lineNumber":961,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":962,"author":{"gitID":"-"},"content":""},{"lineNumber":963,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":964,"author":{"gitID":"-"},"content":""},{"lineNumber":965,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":966,"author":{"gitID":"-"},"content":""},{"lineNumber":967,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":968,"author":{"gitID":"-"},"content":""},{"lineNumber":969,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":970,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":971,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":972,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":973,"author":{"gitID":"-"},"content":""},{"lineNumber":974,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":975,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":976,"author":{"gitID":"-"},"content":""},{"lineNumber":977,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":978,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":979,"author":{"gitID":"-"},"content":""},{"lineNumber":980,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":981,"author":{"gitID":"-"},"content":""},{"lineNumber":982,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":983,"author":{"gitID":"-"},"content":""},{"lineNumber":984,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":985,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":986,"author":{"gitID":"-"},"content":""},{"lineNumber":987,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":988,"author":{"gitID":"-"},"content":""},{"lineNumber":989,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":990,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":991,"author":{"gitID":"-"},"content":""},{"lineNumber":992,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":993,"author":{"gitID":"-"},"content":""},{"lineNumber":994,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":995,"author":{"gitID":"-"},"content":""},{"lineNumber":996,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":997,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":998,"author":{"gitID":"-"},"content":""},{"lineNumber":999,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":1000,"author":{"gitID":"-"},"content":""},{"lineNumber":1001,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":1002,"author":{"gitID":"-"},"content":""},{"lineNumber":1003,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":1004,"author":{"gitID":"-"},"content":""},{"lineNumber":1005,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":1006,"author":{"gitID":"-"},"content":""},{"lineNumber":1007,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":1008,"author":{"gitID":"-"},"content":""},{"lineNumber":1009,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":1010,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":1011,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":1012,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":1013,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":1014,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":1015,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":1016,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":1017,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":1018,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":1019,"author":{"gitID":"-"},"content":""},{"lineNumber":1020,"author":{"gitID":"-"},"content":""},{"lineNumber":1021,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":1022,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":1023,"author":{"gitID":"-"},"content":""},{"lineNumber":1024,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":1025,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":1026,"author":{"gitID":"-"},"content":""},{"lineNumber":1027,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":1028,"author":{"gitID":"-"},"content":""},{"lineNumber":1029,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":1030,"author":{"gitID":"-"},"content":""},{"lineNumber":1031,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":1032,"author":{"gitID":"-"},"content":""},{"lineNumber":1033,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":1034,"author":{"gitID":"-"},"content":""},{"lineNumber":1035,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":1036,"author":{"gitID":"-"},"content":""},{"lineNumber":1037,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":1038,"author":{"gitID":"-"},"content":""},{"lineNumber":1039,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":1040,"author":{"gitID":"-"},"content":""},{"lineNumber":1041,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":1042,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":1043,"author":{"gitID":"-"},"content":""},{"lineNumber":1044,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":1045,"author":{"gitID":"-"},"content":""},{"lineNumber":1046,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":1047,"author":{"gitID":"-"},"content":""},{"lineNumber":1048,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":1049,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":1050,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":1051,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":1052,"author":{"gitID":"-"},"content":""},{"lineNumber":1053,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":1054,"author":{"gitID":"-"},"content":""},{"lineNumber":1055,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":1056,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":1057,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":1058,"author":{"gitID":"-"},"content":""},{"lineNumber":1059,"author":{"gitID":"jordancjq"},"content":"// [[GetStartedProgramming]]"},{"lineNumber":1060,"author":{"gitID":"jordancjq"},"content":"// [appendix]"},{"lineNumber":1061,"author":{"gitID":"jordancjq"},"content":"// \u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":1062,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1063,"author":{"gitID":"jordancjq"},"content":"// Suggested path for new programmers:"},{"lineNumber":1064,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1065,"author":{"gitID":"jordancjq"},"content":"// 1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":1066,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1067,"author":{"gitID":"jordancjq"},"content":"// 2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":1068,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1069,"author":{"gitID":"jordancjq"},"content":"// [[GetStartedProgramming-EachComponent]]"},{"lineNumber":1070,"author":{"gitID":"jordancjq"},"content":"// \u003d\u003d\u003d Improving each component"},{"lineNumber":1071,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1072,"author":{"gitID":"jordancjq"},"content":"// Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":1073,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1074,"author":{"gitID":"jordancjq"},"content":"// [discrete]"},{"lineNumber":1075,"author":{"gitID":"jordancjq"},"content":"// \u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":1076,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1077,"author":{"gitID":"jordancjq"},"content":"// *Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":1078,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1079,"author":{"gitID":"jordancjq"},"content":"// [TIP]"},{"lineNumber":1080,"author":{"gitID":"jordancjq"},"content":"// Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":1081,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1082,"author":{"gitID":"jordancjq"},"content":"// . Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."},{"lineNumber":1083,"author":{"gitID":"jordancjq"},"content":"// +"},{"lineNumber":1084,"author":{"gitID":"jordancjq"},"content":"// ****"},{"lineNumber":1085,"author":{"gitID":"jordancjq"},"content":"// * Hints"},{"lineNumber":1086,"author":{"gitID":"jordancjq"},"content":"// ** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":1087,"author":{"gitID":"jordancjq"},"content":"// ** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":1088,"author":{"gitID":"jordancjq"},"content":"// * Solution"},{"lineNumber":1089,"author":{"gitID":"jordancjq"},"content":"// ** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":1090,"author":{"gitID":"jordancjq"},"content":"// ** Add new tests for each of the aliases that you have added."},{"lineNumber":1091,"author":{"gitID":"jordancjq"},"content":"// ** Update the user guide to document the new aliases."},{"lineNumber":1092,"author":{"gitID":"jordancjq"},"content":"// ** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":1093,"author":{"gitID":"jordancjq"},"content":"// ****"},{"lineNumber":1094,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1095,"author":{"gitID":"jordancjq"},"content":"// [discrete]"},{"lineNumber":1096,"author":{"gitID":"jordancjq"},"content":"// \u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":1097,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1098,"author":{"gitID":"jordancjq"},"content":"// *Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":1099,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1100,"author":{"gitID":"jordancjq"},"content":"// [TIP]"},{"lineNumber":1101,"author":{"gitID":"jordancjq"},"content":"// Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":1102,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1103,"author":{"gitID":"jordancjq"},"content":"// . Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."},{"lineNumber":1104,"author":{"gitID":"jordancjq"},"content":"// +"},{"lineNumber":1105,"author":{"gitID":"jordancjq"},"content":"// ****"},{"lineNumber":1106,"author":{"gitID":"jordancjq"},"content":"// * Hints"},{"lineNumber":1107,"author":{"gitID":"jordancjq"},"content":"// ** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":1108,"author":{"gitID":"jordancjq"},"content":"// ** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":1109,"author":{"gitID":"jordancjq"},"content":"// **  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":1110,"author":{"gitID":"jordancjq"},"content":"// * Solution"},{"lineNumber":1111,"author":{"gitID":"jordancjq"},"content":"// ** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."},{"lineNumber":1112,"author":{"gitID":"jordancjq"},"content":"// ** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":1113,"author":{"gitID":"jordancjq"},"content":"// ** Add new tests for each of the new public methods that you have added."},{"lineNumber":1114,"author":{"gitID":"jordancjq"},"content":"// ** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":1115,"author":{"gitID":"jordancjq"},"content":"// *** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":1116,"author":{"gitID":"jordancjq"},"content":"// *** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":1117,"author":{"gitID":"jordancjq"},"content":"// ****"},{"lineNumber":1118,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1119,"author":{"gitID":"jordancjq"},"content":"// [discrete]"},{"lineNumber":1120,"author":{"gitID":"jordancjq"},"content":"// \u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":1121,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1122,"author":{"gitID":"jordancjq"},"content":"// *Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":1123,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1124,"author":{"gitID":"jordancjq"},"content":"// [TIP]"},{"lineNumber":1125,"author":{"gitID":"jordancjq"},"content":"// Do take a look at \u003c\u003cDesign-`Ui`\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":1126,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1127,"author":{"gitID":"jordancjq"},"content":"// . Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":1128,"author":{"gitID":"jordancjq"},"content":"// +"},{"lineNumber":1129,"author":{"gitID":"jordancjq"},"content":"// **Before**"},{"lineNumber":1130,"author":{"gitID":"jordancjq"},"content":"// +"},{"lineNumber":1131,"author":{"gitID":"jordancjq"},"content":"// image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":1132,"author":{"gitID":"jordancjq"},"content":"// +"},{"lineNumber":1133,"author":{"gitID":"jordancjq"},"content":"// **After**"},{"lineNumber":1134,"author":{"gitID":"jordancjq"},"content":"// +"},{"lineNumber":1135,"author":{"gitID":"jordancjq"},"content":"// image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":1136,"author":{"gitID":"jordancjq"},"content":"// +"},{"lineNumber":1137,"author":{"gitID":"jordancjq"},"content":"// ****"},{"lineNumber":1138,"author":{"gitID":"jordancjq"},"content":"// * Hints"},{"lineNumber":1139,"author":{"gitID":"jordancjq"},"content":"// ** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":1140,"author":{"gitID":"jordancjq"},"content":"// ** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":1141,"author":{"gitID":"jordancjq"},"content":"// ** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":1142,"author":{"gitID":"jordancjq"},"content":"// * Solution"},{"lineNumber":1143,"author":{"gitID":"jordancjq"},"content":"// ** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":1144,"author":{"gitID":"jordancjq"},"content":"// ** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":1145,"author":{"gitID":"jordancjq"},"content":"// *** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":1146,"author":{"gitID":"jordancjq"},"content":"// ****"},{"lineNumber":1147,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1148,"author":{"gitID":"jordancjq"},"content":"// . Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":1149,"author":{"gitID":"jordancjq"},"content":"// +"},{"lineNumber":1150,"author":{"gitID":"jordancjq"},"content":"// **Before**"},{"lineNumber":1151,"author":{"gitID":"jordancjq"},"content":"// +"},{"lineNumber":1152,"author":{"gitID":"jordancjq"},"content":"// image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":1153,"author":{"gitID":"jordancjq"},"content":"// +"},{"lineNumber":1154,"author":{"gitID":"jordancjq"},"content":"// **After**"},{"lineNumber":1155,"author":{"gitID":"jordancjq"},"content":"// +"},{"lineNumber":1156,"author":{"gitID":"jordancjq"},"content":"// image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":1157,"author":{"gitID":"jordancjq"},"content":"// +"},{"lineNumber":1158,"author":{"gitID":"jordancjq"},"content":"// ****"},{"lineNumber":1159,"author":{"gitID":"jordancjq"},"content":"// * Hints"},{"lineNumber":1160,"author":{"gitID":"jordancjq"},"content":"// ** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":1161,"author":{"gitID":"jordancjq"},"content":"// ** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":1162,"author":{"gitID":"jordancjq"},"content":"// * Solution"},{"lineNumber":1163,"author":{"gitID":"jordancjq"},"content":"// ** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":1164,"author":{"gitID":"jordancjq"},"content":"// ** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":1165,"author":{"gitID":"jordancjq"},"content":"// ** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":1166,"author":{"gitID":"jordancjq"},"content":"// *** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":1167,"author":{"gitID":"jordancjq"},"content":"// *** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":1168,"author":{"gitID":"jordancjq"},"content":"// ** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":1169,"author":{"gitID":"jordancjq"},"content":"// *** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":1170,"author":{"gitID":"jordancjq"},"content":"// ****"},{"lineNumber":1171,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1172,"author":{"gitID":"jordancjq"},"content":"// . Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."},{"lineNumber":1173,"author":{"gitID":"jordancjq"},"content":"// +"},{"lineNumber":1174,"author":{"gitID":"jordancjq"},"content":"// **Before**"},{"lineNumber":1175,"author":{"gitID":"jordancjq"},"content":"// +"},{"lineNumber":1176,"author":{"gitID":"jordancjq"},"content":"// image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":1177,"author":{"gitID":"jordancjq"},"content":"// +"},{"lineNumber":1178,"author":{"gitID":"jordancjq"},"content":"// **After**"},{"lineNumber":1179,"author":{"gitID":"jordancjq"},"content":"// +"},{"lineNumber":1180,"author":{"gitID":"jordancjq"},"content":"// image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":1181,"author":{"gitID":"jordancjq"},"content":"// +"},{"lineNumber":1182,"author":{"gitID":"jordancjq"},"content":"// ****"},{"lineNumber":1183,"author":{"gitID":"jordancjq"},"content":"// * Hints"},{"lineNumber":1184,"author":{"gitID":"jordancjq"},"content":"// ** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":1185,"author":{"gitID":"jordancjq"},"content":"// ** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."},{"lineNumber":1186,"author":{"gitID":"jordancjq"},"content":"// * Solution"},{"lineNumber":1187,"author":{"gitID":"jordancjq"},"content":"// ** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."},{"lineNumber":1188,"author":{"gitID":"jordancjq"},"content":"// ** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."},{"lineNumber":1189,"author":{"gitID":"jordancjq"},"content":"// ** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":1190,"author":{"gitID":"jordancjq"},"content":"// ** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."},{"lineNumber":1191,"author":{"gitID":"jordancjq"},"content":"// ** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":1192,"author":{"gitID":"jordancjq"},"content":"// ****"},{"lineNumber":1193,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1194,"author":{"gitID":"jordancjq"},"content":"// [discrete]"},{"lineNumber":1195,"author":{"gitID":"jordancjq"},"content":"// \u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":1196,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1197,"author":{"gitID":"jordancjq"},"content":"// *Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."},{"lineNumber":1198,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1199,"author":{"gitID":"jordancjq"},"content":"// [TIP]"},{"lineNumber":1200,"author":{"gitID":"jordancjq"},"content":"// Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":1201,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1202,"author":{"gitID":"jordancjq"},"content":"// . Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."},{"lineNumber":1203,"author":{"gitID":"jordancjq"},"content":"// +"},{"lineNumber":1204,"author":{"gitID":"jordancjq"},"content":"// ****"},{"lineNumber":1205,"author":{"gitID":"jordancjq"},"content":"// * Hint"},{"lineNumber":1206,"author":{"gitID":"jordancjq"},"content":"// ** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":1207,"author":{"gitID":"jordancjq"},"content":"// ** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":1208,"author":{"gitID":"jordancjq"},"content":"// * Solution"},{"lineNumber":1209,"author":{"gitID":"jordancjq"},"content":"// ** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":1210,"author":{"gitID":"jordancjq"},"content":"// ****"},{"lineNumber":1211,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1212,"author":{"gitID":"jordancjq"},"content":"// [[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":1213,"author":{"gitID":"jordancjq"},"content":"// \u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":1214,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1215,"author":{"gitID":"jordancjq"},"content":"// By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":1216,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1217,"author":{"gitID":"jordancjq"},"content":"// *Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":1218,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1219,"author":{"gitID":"jordancjq"},"content":"// \u003d\u003d\u003d\u003d Description"},{"lineNumber":1220,"author":{"gitID":"jordancjq"},"content":"// Edits the remark for a person specified in the `INDEX`. +"},{"lineNumber":1221,"author":{"gitID":"jordancjq"},"content":"// Format: `remark INDEX r/[REMARK]`"},{"lineNumber":1222,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1223,"author":{"gitID":"jordancjq"},"content":"// Examples:"},{"lineNumber":1224,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1225,"author":{"gitID":"jordancjq"},"content":"// * `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":1226,"author":{"gitID":"jordancjq"},"content":"// Edits the remark for the first person to `Likes to drink coffee.`"},{"lineNumber":1227,"author":{"gitID":"jordancjq"},"content":"// * `remark 1 r/` +"},{"lineNumber":1228,"author":{"gitID":"jordancjq"},"content":"// Removes the remark for the first person."},{"lineNumber":1229,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1230,"author":{"gitID":"jordancjq"},"content":"// \u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":1231,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1232,"author":{"gitID":"jordancjq"},"content":"// \u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":1233,"author":{"gitID":"jordancjq"},"content":"// Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":1234,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1235,"author":{"gitID":"jordancjq"},"content":"// **Main:**"},{"lineNumber":1236,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1237,"author":{"gitID":"jordancjq"},"content":"// . Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":1238,"author":{"gitID":"jordancjq"},"content":"// . Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":1239,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1240,"author":{"gitID":"jordancjq"},"content":"// **Tests:**"},{"lineNumber":1241,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1242,"author":{"gitID":"jordancjq"},"content":"// . Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":1243,"author":{"gitID":"jordancjq"},"content":"// . Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":1244,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1245,"author":{"gitID":"jordancjq"},"content":"// \u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":1246,"author":{"gitID":"jordancjq"},"content":"// Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":1247,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1248,"author":{"gitID":"jordancjq"},"content":"// **Main:**"},{"lineNumber":1249,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1250,"author":{"gitID":"jordancjq"},"content":"// . Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":1251,"author":{"gitID":"jordancjq"},"content":"// . Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":1252,"author":{"gitID":"jordancjq"},"content":"// . Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":1253,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1254,"author":{"gitID":"jordancjq"},"content":"// **Tests:**"},{"lineNumber":1255,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1256,"author":{"gitID":"jordancjq"},"content":"// . Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":1257,"author":{"gitID":"jordancjq"},"content":"// . Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":1258,"author":{"gitID":"jordancjq"},"content":"// for `RemarkCommandParser`."},{"lineNumber":1259,"author":{"gitID":"jordancjq"},"content":"// . Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":1260,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1261,"author":{"gitID":"jordancjq"},"content":"// \u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":1262,"author":{"gitID":"jordancjq"},"content":"// Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":1263,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1264,"author":{"gitID":"jordancjq"},"content":"// **Main:**"},{"lineNumber":1265,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1266,"author":{"gitID":"jordancjq"},"content":"// . Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":1267,"author":{"gitID":"jordancjq"},"content":"// . Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":1268,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1269,"author":{"gitID":"jordancjq"},"content":"// **Tests:**"},{"lineNumber":1270,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1271,"author":{"gitID":"jordancjq"},"content":"// . Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":1272,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1273,"author":{"gitID":"jordancjq"},"content":"// \u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":1274,"author":{"gitID":"jordancjq"},"content":"// We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":1275,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1276,"author":{"gitID":"jordancjq"},"content":"// **Main:**"},{"lineNumber":1277,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1278,"author":{"gitID":"jordancjq"},"content":"// . Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":1279,"author":{"gitID":"jordancjq"},"content":"// . Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":1280,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1281,"author":{"gitID":"jordancjq"},"content":"// **Tests:**"},{"lineNumber":1282,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1283,"author":{"gitID":"jordancjq"},"content":"// . Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":1284,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1285,"author":{"gitID":"jordancjq"},"content":"// \u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":1286,"author":{"gitID":"jordancjq"},"content":"// Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":1287,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1288,"author":{"gitID":"jordancjq"},"content":"// **Main:**"},{"lineNumber":1289,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1290,"author":{"gitID":"jordancjq"},"content":"// . Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":1291,"author":{"gitID":"jordancjq"},"content":"// . You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":1292,"author":{"gitID":"jordancjq"},"content":"// . Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":1293,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1294,"author":{"gitID":"jordancjq"},"content":"// \u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":1295,"author":{"gitID":"jordancjq"},"content":"// We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":1296,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1297,"author":{"gitID":"jordancjq"},"content":"// **Main:**"},{"lineNumber":1298,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1299,"author":{"gitID":"jordancjq"},"content":"// . Add a new Xml field for `Remark`."},{"lineNumber":1300,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1301,"author":{"gitID":"jordancjq"},"content":"// **Tests:**"},{"lineNumber":1302,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1303,"author":{"gitID":"jordancjq"},"content":"// . Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":1304,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1305,"author":{"gitID":"jordancjq"},"content":"// \u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":1306,"author":{"gitID":"jordancjq"},"content":"// Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":1307,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1308,"author":{"gitID":"jordancjq"},"content":"// **Tests:**"},{"lineNumber":1309,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1310,"author":{"gitID":"jordancjq"},"content":"// . Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":1311,"author":{"gitID":"jordancjq"},"content":"// . Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":1312,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1313,"author":{"gitID":"jordancjq"},"content":"// \u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":1314,"author":{"gitID":"jordancjq"},"content":"// Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":1315,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1316,"author":{"gitID":"jordancjq"},"content":"// **Main:**"},{"lineNumber":1317,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1318,"author":{"gitID":"jordancjq"},"content":"// . Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":1319,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1320,"author":{"gitID":"jordancjq"},"content":"// **Tests:**"},{"lineNumber":1321,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1322,"author":{"gitID":"jordancjq"},"content":"// . Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":1323,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1324,"author":{"gitID":"jordancjq"},"content":"// \u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":1325,"author":{"gitID":"jordancjq"},"content":"// We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":1326,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1327,"author":{"gitID":"jordancjq"},"content":"// **Main:**"},{"lineNumber":1328,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1329,"author":{"gitID":"jordancjq"},"content":"// . Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":1330,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1331,"author":{"gitID":"jordancjq"},"content":"// **Tests:**"},{"lineNumber":1332,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1333,"author":{"gitID":"jordancjq"},"content":"// . Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":1334,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1335,"author":{"gitID":"jordancjq"},"content":"// \u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":1336,"author":{"gitID":"jordancjq"},"content":"//"},{"lineNumber":1337,"author":{"gitID":"jordancjq"},"content":"// See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":1338,"author":{"gitID":"-"},"content":""},{"lineNumber":1339,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1340,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":1341,"author":{"gitID":"-"},"content":""},{"lineNumber":1342,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Target user profile:"},{"lineNumber":1343,"author":{"gitID":"-"},"content":""},{"lineNumber":1344,"author":{"gitID":"-"},"content":"* football team managers"},{"lineNumber":1345,"author":{"gitID":"-"},"content":"* has a need to manage a significant number of contacts"},{"lineNumber":1346,"author":{"gitID":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":1347,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":1348,"author":{"gitID":"-"},"content":"* prefers typing over mouse input"},{"lineNumber":1349,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":1350,"author":{"gitID":"-"},"content":""},{"lineNumber":1351,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Value proposition:"},{"lineNumber":1352,"author":{"gitID":"-"},"content":"Exclusive application for management of footballers and football teams that provides an enhanced listing of footballers and convenient lookup on updated information of players."},{"lineNumber":1353,"author":{"gitID":"-"},"content":""},{"lineNumber":1354,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Feature Contribution"},{"lineNumber":1355,"author":{"gitID":"-"},"content":"* Codee +"},{"lineNumber":1356,"author":{"gitID":"-"},"content":" ** Major - Revamp MTM’s whole GUI for ease of viewing teams and players’ details +"},{"lineNumber":1357,"author":{"gitID":"-"},"content":" e.g. remove browser panel, add player details panel, change person card +"},{"lineNumber":1358,"author":{"gitID":"-"},"content":" ** Minor - Command to set the colour of tags to colour of choice"},{"lineNumber":1359,"author":{"gitID":"-"},"content":""},{"lineNumber":1360,"author":{"gitID":"-"},"content":"* Jordan"},{"lineNumber":1361,"author":{"gitID":"-"},"content":" ** Major - Creation of Team and related functions +"},{"lineNumber":1362,"author":{"gitID":"-"},"content":"        e.g. assignment of players,"},{"lineNumber":1363,"author":{"gitID":"-"},"content":"        viewing of teams,"},{"lineNumber":1364,"author":{"gitID":"-"},"content":"        formation of team,"},{"lineNumber":1365,"author":{"gitID":"-"},"content":"        indicate and set upcoming match"},{"lineNumber":1366,"author":{"gitID":"-"},"content":""},{"lineNumber":1367,"author":{"gitID":"-"},"content":" ** Minor"},{"lineNumber":1368,"author":{"gitID":"-"},"content":"    *** Remark command"},{"lineNumber":1369,"author":{"gitID":"-"},"content":"    *** Enhanced add with optional field"},{"lineNumber":1370,"author":{"gitID":"-"},"content":""},{"lineNumber":1371,"author":{"gitID":"-"},"content":"* Syafiq"},{"lineNumber":1372,"author":{"gitID":"-"},"content":" ** Major"},{"lineNumber":1373,"author":{"gitID":"-"},"content":"    *** Create a new player class that contains more information about the players +"},{"lineNumber":1374,"author":{"gitID":"-"},"content":" e.g. Position, Rating (0 - 5 Star),  Remarks +"},{"lineNumber":1375,"author":{"gitID":"-"},"content":"    *** Update add, edit ,list, sort to include these fields accordingly. +"},{"lineNumber":1376,"author":{"gitID":"-"},"content":" ** Minor - Autocomplete command"},{"lineNumber":1377,"author":{"gitID":"-"},"content":""},{"lineNumber":1378,"author":{"gitID":"-"},"content":"* Tianwei"},{"lineNumber":1379,"author":{"gitID":"-"},"content":" ** Major - privacy"},{"lineNumber":1380,"author":{"gitID":"-"},"content":"    *** Set private field and passwords"},{"lineNumber":1381,"author":{"gitID":"-"},"content":"    *** Make accounts"},{"lineNumber":1382,"author":{"gitID":"-"},"content":" ** Minor - Sorting players by different fields"},{"lineNumber":1383,"author":{"gitID":"-"},"content":""},{"lineNumber":1384,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1385,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1386,"author":{"gitID":"-"},"content":""},{"lineNumber":1387,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1388,"author":{"gitID":"-"},"content":""},{"lineNumber":1389,"author":{"gitID":"jordancjq"},"content":"[width\u003d\"75%\",cols\u003d\"^8%,^23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1390,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1391,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1392,"author":{"gitID":"-"},"content":""},{"lineNumber":1393,"author":{"gitID":"jordancjq"},"content":"4.1+^s|First Time User Stories"},{"lineNumber":1394,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":1395,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":1396,"author":{"gitID":"-"},"content":""},{"lineNumber":1397,"author":{"gitID":"lithiumlkid"},"content":"|`* * *` |new user |access the user guide |find out how to use fancy features of the application"},{"lineNumber":1398,"author":{"gitID":"-"},"content":""},{"lineNumber":1399,"author":{"gitID":"jordancjq"},"content":"|`* * *` |new user |see a list of instructions available |navigate and use the application easily"},{"lineNumber":1400,"author":{"gitID":"-"},"content":""},{"lineNumber":1401,"author":{"gitID":"jordancjq"},"content":"4.1+^s|Player Related User Stories"},{"lineNumber":1402,"author":{"gitID":"-"},"content":""},{"lineNumber":1403,"author":{"gitID":"jordancjq"},"content":"|`* * *` |team manager |add a new player|"},{"lineNumber":1404,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":1405,"author":{"gitID":"jordancjq"},"content":"|`* * *` |team manager |add player’s address |mail him important documents"},{"lineNumber":1406,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":1407,"author":{"gitID":"jordancjq"},"content":"|`* * *` |team manager |add player’s contact number |contact him when needed"},{"lineNumber":1408,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":1409,"author":{"gitID":"jordancjq"},"content":"|`* * *` |team manager |add player’s email |email him when needed"},{"lineNumber":1410,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":1411,"author":{"gitID":"jordancjq"},"content":"|`* * *` |team manager |add player’s jersey number |easily identify them during the game"},{"lineNumber":1412,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":1413,"author":{"gitID":"jordancjq"},"content":"|`* * *` |team manager |add player’s position |easily pick my lineup for match"},{"lineNumber":1414,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":1415,"author":{"gitID":"jordancjq"},"content":"|`* * *` |team manager |add player\u0027s ratings |easily identify the better players"},{"lineNumber":1416,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":1417,"author":{"gitID":"jordancjq"},"content":"|`* * *` |team manager |delete a player |remove him if I kick him out from the team or he quits"},{"lineNumber":1418,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":1419,"author":{"gitID":"jordancjq"},"content":"|`* * *` |team manager |find a player by name |locate details of players without having to go through the entire list"},{"lineNumber":1420,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":1421,"author":{"gitID":"jordancjq"},"content":"|`* * *` |team manager |edit player’s contact number |"},{"lineNumber":1422,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":1423,"author":{"gitID":"jordancjq"},"content":"|`* * *` |team manager |edit player’s email |"},{"lineNumber":1424,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":1425,"author":{"gitID":"jordancjq"},"content":"|`* * *` |team manager |edit player’s jersey number |"},{"lineNumber":1426,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":1427,"author":{"gitID":"jordancjq"},"content":"|`* *` |team manager |add player’s match stats (e.g. goals scored) |decide the lineup, give award"},{"lineNumber":1428,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":1429,"author":{"gitID":"jordancjq"},"content":"|`* *` |team manager |add player remarks |for self note"},{"lineNumber":1430,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":1431,"author":{"gitID":"jordancjq"},"content":"|`* *` |team manager |add player’s avatar |for facial recognition"},{"lineNumber":1432,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":1433,"author":{"gitID":"jordancjq"},"content":"|`* *` |team manager |edit player’s position |easily pick my lineup for match"},{"lineNumber":1434,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":1435,"author":{"gitID":"jordancjq"},"content":"|`* *` |team manager |edit player’s address |"},{"lineNumber":1436,"author":{"gitID":"-"},"content":""},{"lineNumber":1437,"author":{"gitID":"jordancjq"},"content":"|`* *` |team manager |edit player’s avatar |"},{"lineNumber":1438,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":1439,"author":{"gitID":"jordancjq"},"content":"|`* *` |team manager |edit player remarks |for self note"},{"lineNumber":1440,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":1441,"author":{"gitID":"jordancjq"},"content":"|`* *` |team manager |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"},{"lineNumber":1442,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":1443,"author":{"gitID":"jordancjq"},"content":"|`*` |team manager |edit player’s name |"},{"lineNumber":1444,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":1445,"author":{"gitID":"jordancjq"},"content":"|`*` |team manager with many players in the team managing application |sort by player name |locate a person easily"},{"lineNumber":1446,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":1447,"author":{"gitID":"jordancjq"},"content":"4.1+^s|Team Related User Stories"},{"lineNumber":1448,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":1449,"author":{"gitID":"jordancjq"},"content":"|`* * *` |team manager |create teams |organize and manage my players through their respective team"},{"lineNumber":1450,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":1451,"author":{"gitID":"jordancjq"},"content":"|`* * *` |team manager |assign player to teams |identify the team that the player is playing for"},{"lineNumber":1452,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":1453,"author":{"gitID":"jordancjq"},"content":"|`* * *` |team manager |view players in specified team |identify the lineup of the team and which player belongs to which team"},{"lineNumber":1454,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":1455,"author":{"gitID":"jordancjq"},"content":"|`* * *` |team manager |remove teams |remove teams that I no longer managed"},{"lineNumber":1456,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":1457,"author":{"gitID":"jordancjq"},"content":"|`* *` |team manager |set match with competing team |acknowledge and plan training session for the team"},{"lineNumber":1458,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":1459,"author":{"gitID":"jordancjq"},"content":"|`* *` |team manager |view upcoming match |keep track of the upcoming matches with opponent teams"},{"lineNumber":1460,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":1461,"author":{"gitID":"jordancjq"},"content":"|`* *` |team manager |edit player’s allocated team |move players between teams"},{"lineNumber":1462,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":1463,"author":{"gitID":"jordancjq"},"content":"|`* *` |team manager |schedule training programs for team |I do not have any conflicting schedule between different teams"},{"lineNumber":1464,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":1465,"author":{"gitID":"jordancjq"},"content":"|`* *` |team manager |send reminder to team of schedule |my players does not forget about training session"},{"lineNumber":1466,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":1467,"author":{"gitID":"jordancjq"},"content":"|`*` |team manager |sort by team name |identify group lineup easily"},{"lineNumber":1468,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":1469,"author":{"gitID":"jordancjq"},"content":"4.1+^s|Additional User Stories"},{"lineNumber":1470,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":1471,"author":{"gitID":"jordancjq"},"content":"|`* *` |team manager who remembers better with visual |set colours to tags |easily identify the tag that I have set to players"},{"lineNumber":1472,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":1473,"author":{"gitID":"jordancjq"},"content":"|`* *` |team manager |autofill command |perform task quickly"},{"lineNumber":1474,"author":{"gitID":"-"},"content":""},{"lineNumber":1475,"author":{"gitID":"jordancjq"},"content":"|`* *` |team manager |password login |if team manager wants to protect certain information"},{"lineNumber":1476,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":1477,"author":{"gitID":"jordancjq"},"content":"|`* *` |team manager |submit feedback to developers |developers can improve the application constantly"},{"lineNumber":1478,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":1479,"author":{"gitID":"jordancjq"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1480,"author":{"gitID":"-"},"content":""},{"lineNumber":1481,"author":{"gitID":"jordancjq"},"content":"// TODO: fix and add more use cases"},{"lineNumber":1482,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1483,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1484,"author":{"gitID":"-"},"content":""},{"lineNumber":1485,"author":{"gitID":"jordancjq"},"content":"(For all use cases below, the *System* is the `MTM` and the *Team Manager* is the `user`, unless specified otherwise)"},{"lineNumber":1486,"author":{"gitID":"-"},"content":""},{"lineNumber":1487,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1488,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d Use case: Add player"},{"lineNumber":1489,"author":{"gitID":"-"},"content":""},{"lineNumber":1490,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1491,"author":{"gitID":"-"},"content":""},{"lineNumber":1492,"author":{"gitID":"jordancjq"},"content":"1.  User enter command to add"},{"lineNumber":1493,"author":{"gitID":"jordancjq"},"content":"2.  MTM prompt user of format to enter player\u0027s name and details"},{"lineNumber":1494,"author":{"gitID":"jordancjq"},"content":"3.  User enter player\u0027s name and details in required format"},{"lineNumber":1495,"author":{"gitID":"jordancjq"},"content":"4.  User press enter to insert person into storage"},{"lineNumber":1496,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1497,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1498,"author":{"gitID":"-"},"content":""},{"lineNumber":1499,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1500,"author":{"gitID":"-"},"content":""},{"lineNumber":1501,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1502,"author":{"gitID":"jordancjq"},"content":"* 4a. User did not enter any details."},{"lineNumber":1503,"author":{"gitID":"jordancjq"},"content":"+"},{"lineNumber":1504,"author":{"gitID":"jordancjq"},"content":"[none]"},{"lineNumber":1505,"author":{"gitID":"jordancjq"},"content":"** 4a1. MTM inform user that it is an invalid add command."},{"lineNumber":1506,"author":{"gitID":"jordancjq"},"content":"+"},{"lineNumber":1507,"author":{"gitID":"jordancjq"},"content":"Use case ends."},{"lineNumber":1508,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":1509,"author":{"gitID":"jordancjq"},"content":"[discrete]"},{"lineNumber":1510,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d Use case: Edit player\u0027s team"},{"lineNumber":1511,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":1512,"author":{"gitID":"jordancjq"},"content":"*MSS*"},{"lineNumber":1513,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":1514,"author":{"gitID":"jordancjq"},"content":"1.  User enter command to find"},{"lineNumber":1515,"author":{"gitID":"jordancjq"},"content":"2.  User enter player\u0027s name"},{"lineNumber":1516,"author":{"gitID":"jordancjq"},"content":"3.  MTM display list of players found"},{"lineNumber":1517,"author":{"gitID":"jordancjq"},"content":"4.  User enter command to edit player\u0027s team using index of displayed list"},{"lineNumber":1518,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1519,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1520,"author":{"gitID":"-"},"content":""},{"lineNumber":1521,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1522,"author":{"gitID":"-"},"content":""},{"lineNumber":1523,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1524,"author":{"gitID":"jordancjq"},"content":"* 2a. Player name does not exist."},{"lineNumber":1525,"author":{"gitID":"jordancjq"},"content":"+"},{"lineNumber":1526,"author":{"gitID":"jordancjq"},"content":"[none]"},{"lineNumber":1527,"author":{"gitID":"jordancjq"},"content":"** 2a1. MTM inform user that player does not exist."},{"lineNumber":1528,"author":{"gitID":"jordancjq"},"content":"+"},{"lineNumber":1529,"author":{"gitID":"jordancjq"},"content":"Use case ends."},{"lineNumber":1530,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":1531,"author":{"gitID":"jordancjq"},"content":"[discrete]"},{"lineNumber":1532,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d Use case: Find player by team name"},{"lineNumber":1533,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":1534,"author":{"gitID":"jordancjq"},"content":"*MSS*"},{"lineNumber":1535,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":1536,"author":{"gitID":"jordancjq"},"content":"1.  User enter command to find team"},{"lineNumber":1537,"author":{"gitID":"jordancjq"},"content":"2.  User enter team name"},{"lineNumber":1538,"author":{"gitID":"jordancjq"},"content":"3.  MTM display list of players in team"},{"lineNumber":1539,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1540,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1541,"author":{"gitID":"-"},"content":""},{"lineNumber":1542,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1543,"author":{"gitID":"-"},"content":""},{"lineNumber":1544,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1545,"author":{"gitID":"jordancjq"},"content":"* 2a. Team name does not exist."},{"lineNumber":1546,"author":{"gitID":"jordancjq"},"content":"+"},{"lineNumber":1547,"author":{"gitID":"jordancjq"},"content":"[none]"},{"lineNumber":1548,"author":{"gitID":"jordancjq"},"content":"** 2a1. MTM informs user that team name does not exist"},{"lineNumber":1549,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1550,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1551,"author":{"gitID":"-"},"content":""},{"lineNumber":1552,"author":{"gitID":"jordancjq"},"content":"[discrete]"},{"lineNumber":1553,"author":{"gitID":"jordancjq"},"content":"\u003d\u003d\u003d Use case: Remove player from team"},{"lineNumber":1554,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":1555,"author":{"gitID":"jordancjq"},"content":"*MSS*"},{"lineNumber":1556,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":1557,"author":{"gitID":"jordancjq"},"content":"1.  User enter command to find"},{"lineNumber":1558,"author":{"gitID":"jordancjq"},"content":"2.  User enter player\u0027s name"},{"lineNumber":1559,"author":{"gitID":"jordancjq"},"content":"3.  MTM display list of players found"},{"lineNumber":1560,"author":{"gitID":"jordancjq"},"content":"4.  User enter remove command and index associated with player"},{"lineNumber":1561,"author":{"gitID":"jordancjq"},"content":"5.  MTM displays player that is removed and updated list of players"},{"lineNumber":1562,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1563,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1564,"author":{"gitID":"-"},"content":""},{"lineNumber":1565,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1566,"author":{"gitID":"-"},"content":""},{"lineNumber":1567,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1568,"author":{"gitID":"jordancjq"},"content":"* 4a. Invalid index entered."},{"lineNumber":1569,"author":{"gitID":"jordancjq"},"content":"+"},{"lineNumber":1570,"author":{"gitID":"jordancjq"},"content":"[none]"},{"lineNumber":1571,"author":{"gitID":"jordancjq"},"content":"** 4a1. MTM informs user that index is invalid."},{"lineNumber":1572,"author":{"gitID":"jordancjq"},"content":"** 4a2. User enters valid index."},{"lineNumber":1573,"author":{"gitID":"jordancjq"},"content":"+"},{"lineNumber":1574,"author":{"gitID":"jordancjq"},"content":"Use case resumes at step 5."},{"lineNumber":1575,"author":{"gitID":"jordancjq"},"content":"+"},{"lineNumber":1576,"author":{"gitID":"jordancjq"},"content":"* 4b. User removes wrong index unintentionally."},{"lineNumber":1577,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1578,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1579,"author":{"gitID":"jordancjq"},"content":"** 4b1. User undo remove by entering command to undo."},{"lineNumber":1580,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1581,"author":{"gitID":"jordancjq"},"content":"Use case ends."},{"lineNumber":1582,"author":{"gitID":"-"},"content":""},{"lineNumber":1583,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1584,"author":{"gitID":"-"},"content":""},{"lineNumber":1585,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1586,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1587,"author":{"gitID":"-"},"content":""},{"lineNumber":1588,"author":{"gitID":"-"},"content":".  Should work on any mainstream OS as long as it has Java 1.8.0_60 or higher installed."},{"lineNumber":1589,"author":{"gitID":"jordancjq"},"content":".  Should be able to hold up to 150 players without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1590,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1591,"author":{"gitID":"-"},"content":".  Works on both 32-bit and 64-bit machines"},{"lineNumber":1592,"author":{"gitID":"-"},"content":".  Should respond within 1 second of query"},{"lineNumber":1593,"author":{"gitID":"-"},"content":".  Should be intuitive and easy to use for a first-time user."},{"lineNumber":1594,"author":{"gitID":"-"},"content":".  Should be able to handle any sort of input, i.e. should recover from invalid input."},{"lineNumber":1595,"author":{"gitID":"-"},"content":".  Should have audience-focused user guides and developer guides."},{"lineNumber":1596,"author":{"gitID":"-"},"content":".  Should have command names that concisely describe their function."},{"lineNumber":1597,"author":{"gitID":"-"},"content":".  Should be an open-source project."},{"lineNumber":1598,"author":{"gitID":"-"},"content":".  Development be cost effective or free."},{"lineNumber":1599,"author":{"gitID":"-"},"content":".  App should be able to work offline."},{"lineNumber":1600,"author":{"gitID":"jordancjq"},"content":".  Should save and backup the state of the team managing application regularly."},{"lineNumber":1601,"author":{"gitID":"-"},"content":".  Current versions must be backward compatible with older versions to support undo."},{"lineNumber":1602,"author":{"gitID":"-"},"content":".  The user interface should be simple and minimise distractions so that user can continue with their work in a focused manner."},{"lineNumber":1603,"author":{"gitID":"-"},"content":""},{"lineNumber":1604,"author":{"gitID":"-"},"content":""},{"lineNumber":1605,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1606,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1607,"author":{"gitID":"-"},"content":""},{"lineNumber":1608,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1609,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1610,"author":{"gitID":"-"},"content":""},{"lineNumber":1611,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1612,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1613,"author":{"gitID":"-"},"content":""},{"lineNumber":1614,"author":{"gitID":"jordancjq"},"content":"[[lineuo]] Lineup::"},{"lineNumber":1615,"author":{"gitID":"jordancjq"},"content":"A list of players that are playing for a match, with their positions specified"},{"lineNumber":1616,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":1617,"author":{"gitID":"jordancjq"},"content":"[[user-guide]] User Guide::"},{"lineNumber":1618,"author":{"gitID":"jordancjq"},"content":"A documentation on the functionality and usability of MTM"},{"lineNumber":1619,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":1620,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1621,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1622,"author":{"gitID":"-"},"content":""},{"lineNumber":1623,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1624,"author":{"gitID":"-"},"content":""},{"lineNumber":1625,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1626,"author":{"gitID":"-"},"content":""},{"lineNumber":1627,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1628,"author":{"gitID":"-"},"content":""},{"lineNumber":1629,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1630,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1631,"author":{"gitID":"-"},"content":""},{"lineNumber":1632,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1633,"author":{"gitID":"-"},"content":""},{"lineNumber":1634,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1635,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1636,"author":{"gitID":"-"},"content":""},{"lineNumber":1637,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1638,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1639,"author":{"gitID":"-"},"content":""},{"lineNumber":1640,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1641,"author":{"gitID":"-"},"content":""},{"lineNumber":1642,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1643,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1644,"author":{"gitID":"-"},"content":""},{"lineNumber":1645,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1646,"author":{"gitID":"-"},"content":""},{"lineNumber":1647,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1648,"author":{"gitID":"-"},"content":""},{"lineNumber":1649,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1650,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1651,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1652,"author":{"gitID":"-"},"content":""},{"lineNumber":1653,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1654,"author":{"gitID":"-"},"content":""},{"lineNumber":1655,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1656,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1657,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1658,"author":{"gitID":"-"},"content":""},{"lineNumber":1659,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1660,"author":{"gitID":"-"},"content":""},{"lineNumber":1661,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":1662,"author":{"gitID":"-"},"content":""},{"lineNumber":1663,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":1664,"author":{"gitID":"-"},"content":""},{"lineNumber":1665,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":1666,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1667,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1668,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1669,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1670,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1671,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1672,"author":{"gitID":"-"},"content":""},{"lineNumber":1673,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1674,"author":{"gitID":"-"},"content":""},{"lineNumber":1675,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1676,"author":{"gitID":"-"},"content":""},{"lineNumber":1677,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1678,"author":{"gitID":"-"},"content":""},{"lineNumber":1679,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1680,"author":{"gitID":"-"},"content":""},{"lineNumber":1681,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"lithiumlkid":59,"jordancjq":811,"-":811}},{"path":"src/test/java/seedu/address/logic/AutocompleteTest.java","lines":[{"lineNumber":1,"author":{"gitID":"lithiumlkid"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":3,"author":{"gitID":"lithiumlkid"},"content":"import org.junit.Before;"},{"lineNumber":4,"author":{"gitID":"lithiumlkid"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":6,"author":{"gitID":"lithiumlkid"},"content":"import seedu.address.logic.commands.CommandTrie;"},{"lineNumber":7,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":8,"author":{"gitID":"lithiumlkid"},"content":"public class AutocompleteTest {"},{"lineNumber":9,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":10,"author":{"gitID":"lithiumlkid"},"content":"    private CommandTrie commandTrie;"},{"lineNumber":11,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":12,"author":{"gitID":"lithiumlkid"},"content":"    @Before"},{"lineNumber":13,"author":{"gitID":"lithiumlkid"},"content":"    public void setup() {"},{"lineNumber":14,"author":{"gitID":"lithiumlkid"},"content":"        commandTrie \u003d new CommandTrie();"},{"lineNumber":15,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":17,"author":{"gitID":"lithiumlkid"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"lithiumlkid"},"content":"    public void autocomplete_unique_prefix() {"},{"lineNumber":19,"author":{"gitID":"lithiumlkid"},"content":"        assert commandTrie.attemptAutoComplete(\"a\").equals(\"add\");"},{"lineNumber":20,"author":{"gitID":"lithiumlkid"},"content":"        assert commandTrie.attemptAutoComplete(\"he\").equals(\"help\");"},{"lineNumber":21,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":23,"author":{"gitID":"lithiumlkid"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"lithiumlkid"},"content":"    public void autocomplete_multiple_prefix() {"},{"lineNumber":25,"author":{"gitID":"lithiumlkid"},"content":"        assert commandTrie.attemptAutoComplete(\"e\").equals(\"e\");"},{"lineNumber":26,"author":{"gitID":"lithiumlkid"},"content":"        assert commandTrie.attemptAutoComplete(\"H\").equals(\"H\");"},{"lineNumber":27,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":28,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"lithiumlkid"},"content":"}"}],"authorContributionMap":{"lithiumlkid":29}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TEAM_ARSENAL;"},{"lineNumber":9,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":22,"author":{"gitID":"jordancjq"},"content":"import seedu.address.logic.commands.CreateCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":32,"author":{"gitID":"jordancjq"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":38,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":39,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.Team;"},{"lineNumber":40,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void parseCommand_addAlias() throws Exception {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":61,"author":{"gitID":"jordancjq"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_ALIAS + \" \""},{"lineNumber":62,"author":{"gitID":"jordancjq"},"content":"                + PersonUtil.getPersonDetails(person));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void parseCommand_clearAlias() throws Exception {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":81,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void parseCommand_deleteAlias() throws Exception {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":88,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":97,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void parseCommand_editAlias() throws Exception {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""},{"lineNumber":106,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"jordancjq"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"jordancjq"},"content":"    public void parseCommand_remark() throws Exception {"},{"lineNumber":118,"author":{"gitID":"jordancjq"},"content":"        final Remark remark \u003d new Remark(\"foobar\");"},{"lineNumber":119,"author":{"gitID":"jordancjq"},"content":"        RemarkCommand command \u003d (RemarkCommand) parser.parseCommand(RemarkCommand.COMMAND_WORD + \" \""},{"lineNumber":120,"author":{"gitID":"jordancjq"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_REMARK + remark);"},{"lineNumber":121,"author":{"gitID":"jordancjq"},"content":"        assertEquals(new RemarkCommand(INDEX_FIRST_PERSON, remark), command);"},{"lineNumber":122,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":124,"author":{"gitID":"jordancjq"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"jordancjq"},"content":"    public void parseCommand_remarkAlias() throws Exception {"},{"lineNumber":126,"author":{"gitID":"jordancjq"},"content":"        final Remark remark \u003d new Remark(\"foobar\");"},{"lineNumber":127,"author":{"gitID":"jordancjq"},"content":"        RemarkCommand command \u003d (RemarkCommand) parser.parseCommand(RemarkCommand.COMMAND_ALIAS + \" \""},{"lineNumber":128,"author":{"gitID":"jordancjq"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_REMARK + remark);"},{"lineNumber":129,"author":{"gitID":"jordancjq"},"content":"        assertEquals(new RemarkCommand(INDEX_FIRST_PERSON, remark), command);"},{"lineNumber":130,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":136,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public void parseCommand_findAlias() throws Exception {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":144,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    public void parseCommand_historyAlias() throws Exception {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"jordancjq"},"content":"    @Test"},{"lineNumber":174,"author":{"gitID":"jordancjq"},"content":"    public void parseCommand_create() throws Exception {"},{"lineNumber":175,"author":{"gitID":"jordancjq"},"content":"        Team team \u003d new Team(new TeamName(VALID_TEAM_ARSENAL));"},{"lineNumber":176,"author":{"gitID":"jordancjq"},"content":"        CreateCommand command \u003d (CreateCommand) parser.parseCommand(CreateCommand.COMMAND_WORD + \" \""},{"lineNumber":177,"author":{"gitID":"jordancjq"},"content":"            + VALID_TEAM_ARSENAL);"},{"lineNumber":178,"author":{"gitID":"jordancjq"},"content":"        assertEquals(new CreateCommand(team), command);"},{"lineNumber":179,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":181,"author":{"gitID":"jordancjq"},"content":"    @Test"},{"lineNumber":182,"author":{"gitID":"jordancjq"},"content":"    public void parseCommand_createAlias() throws Exception {"},{"lineNumber":183,"author":{"gitID":"jordancjq"},"content":"        Team team \u003d new Team(new TeamName(VALID_TEAM_ARSENAL));"},{"lineNumber":184,"author":{"gitID":"jordancjq"},"content":"        CreateCommand command \u003d (CreateCommand) parser.parseCommand(CreateCommand.COMMAND_ALIAS + \" \""},{"lineNumber":185,"author":{"gitID":"jordancjq"},"content":"                + VALID_TEAM_ARSENAL);"},{"lineNumber":186,"author":{"gitID":"jordancjq"},"content":"        assertEquals(new CreateCommand(team), command);"},{"lineNumber":187,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    public void parseCommand_listAlias() throws Exception {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":204,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public void parseCommand_selectAlias() throws Exception {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":211,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandAlias_returnsRedoCommand() throws Exception {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS + \" 1\") instanceof RedoCommand);"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandAlias_returnsUndoCommand() throws Exception {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS + \" 3\") instanceof UndoCommand);"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jordancjq":41,"-":211}},{"path":"src/test/java/seedu/address/logic/parser/RemarkCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jordancjq"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":3,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":5,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":9,"author":{"gitID":"jordancjq"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":11,"author":{"gitID":"jordancjq"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":12,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":13,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":14,"author":{"gitID":"jordancjq"},"content":"public class RemarkCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":16,"author":{"gitID":"jordancjq"},"content":"    private static final String REMARK_EMPTY \u003d \"\";"},{"lineNumber":17,"author":{"gitID":"jordancjq"},"content":"    private static final String REMARK_NONEMPTY \u003d \"Some remark to test.\";"},{"lineNumber":18,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":19,"author":{"gitID":"jordancjq"},"content":"    private RemarkCommandParser parser \u003d new RemarkCommandParser();"},{"lineNumber":20,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":21,"author":{"gitID":"jordancjq"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"jordancjq"},"content":"    public void parse_indexSpecified_success() throws Exception {"},{"lineNumber":23,"author":{"gitID":"jordancjq"},"content":"        // with remark"},{"lineNumber":24,"author":{"gitID":"jordancjq"},"content":"        RemarkCommand expectedCommand \u003d new RemarkCommand(INDEX_FIRST_PERSON, new Remark(REMARK_NONEMPTY));"},{"lineNumber":25,"author":{"gitID":"jordancjq"},"content":"        String userInput \u003d INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_REMARK + \" \" + REMARK_NONEMPTY;"},{"lineNumber":26,"author":{"gitID":"jordancjq"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":27,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":28,"author":{"gitID":"jordancjq"},"content":"        // without remark"},{"lineNumber":29,"author":{"gitID":"jordancjq"},"content":"        expectedCommand \u003d new RemarkCommand(INDEX_FIRST_PERSON, new Remark(REMARK_EMPTY));"},{"lineNumber":30,"author":{"gitID":"jordancjq"},"content":"        userInput \u003d INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_REMARK + REMARK_EMPTY;"},{"lineNumber":31,"author":{"gitID":"jordancjq"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":32,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":34,"author":{"gitID":"jordancjq"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"jordancjq"},"content":"    public void parse_compulsoryFieldMissing_failure() throws Exception {"},{"lineNumber":36,"author":{"gitID":"jordancjq"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE);"},{"lineNumber":37,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":38,"author":{"gitID":"jordancjq"},"content":"        // missing parameters"},{"lineNumber":39,"author":{"gitID":"jordancjq"},"content":"        assertParseFailure(parser, RemarkCommand.COMMAND_WORD, expectedMessage);"},{"lineNumber":40,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":41,"author":{"gitID":"jordancjq"},"content":"        // missing index"},{"lineNumber":42,"author":{"gitID":"jordancjq"},"content":"        assertParseFailure(parser, RemarkCommand.COMMAND_WORD + \" \" + REMARK_NONEMPTY, expectedMessage);"},{"lineNumber":43,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":45,"author":{"gitID":"jordancjq"},"content":"}"}],"authorContributionMap":{"jordancjq":45}},{"path":"src/test/java/seedu/address/logic/parser/CreateCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TEAM_ARSENAL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"jordancjq"},"content":"import seedu.address.logic.commands.CreateCommand;"},{"lineNumber":11,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.Team;"},{"lineNumber":12,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":13,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":14,"author":{"gitID":"jordancjq"},"content":"public class CreateCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":16,"author":{"gitID":"jordancjq"},"content":"    private static final String TEAM_NAME_EMPTY \u003d \"\";"},{"lineNumber":17,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":18,"author":{"gitID":"jordancjq"},"content":"    private CreateCommandParser parser \u003d new CreateCommandParser();"},{"lineNumber":19,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":20,"author":{"gitID":"jordancjq"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"jordancjq"},"content":"    public void parse_fieldPresent_success() {"},{"lineNumber":22,"author":{"gitID":"jordancjq"},"content":"        // with team name"},{"lineNumber":23,"author":{"gitID":"jordancjq"},"content":"        CreateCommand expectedCommand \u003d new CreateCommand(new Team(new TeamName(VALID_TEAM_ARSENAL)));"},{"lineNumber":24,"author":{"gitID":"jordancjq"},"content":"        String userInput \u003d VALID_TEAM_ARSENAL;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":30,"author":{"gitID":"jordancjq"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateCommand.MESSAGE_USAGE);"},{"lineNumber":31,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":32,"author":{"gitID":"jordancjq"},"content":"        // missing team name"},{"lineNumber":33,"author":{"gitID":"jordancjq"},"content":"        assertParseFailure(parser, TEAM_NAME_EMPTY, expectedMessage);"},{"lineNumber":34,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"jordancjq"},"content":"}"}],"authorContributionMap":{"jordancjq":22,"-":13}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_JERSEY_NUMBER_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":13,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_POSITION_DESC;"},{"lineNumber":14,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_RATING_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":16,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.JERSEY_NUMBER_DESC_17;"},{"lineNumber":17,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.JERSEY_NUMBER_DESC_2;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.POSITION_DESC_MIDFILED;"},{"lineNumber":23,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.POSITION_DESC_STRIKER;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":26,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_0;"},{"lineNumber":27,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_1;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":34,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_JERSEY_NUMBER_17;"},{"lineNumber":35,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_JERSEY_NUMBER_2;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":40,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_POSITION_MIDFIELD;"},{"lineNumber":41,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_POSITION_STRIKER;"},{"lineNumber":42,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_0;"},{"lineNumber":43,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_1;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":48,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.parser.ParserUtil.UNSPECIFIED_FIELD;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":55,"author":{"gitID":"lithiumlkid"},"content":"import seedu.address.model.person.JerseyNumber;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":59,"author":{"gitID":"lithiumlkid"},"content":"import seedu.address.model.person.Position;"},{"lineNumber":60,"author":{"gitID":"lithiumlkid"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":70,"author":{"gitID":"lithiumlkid"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND)"},{"lineNumber":71,"author":{"gitID":"lithiumlkid"},"content":"                .withRating(VALID_RATING_0).withPosition(VALID_POSITION_STRIKER)"},{"lineNumber":72,"author":{"gitID":"lithiumlkid"},"content":"                .withJerseyNumber(VALID_JERSEY_NUMBER_2).build();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":76,"author":{"gitID":"lithiumlkid"},"content":"                + ADDRESS_DESC_BOB + RATING_DESC_0 + POSITION_DESC_STRIKER + JERSEY_NUMBER_DESC_2"},{"lineNumber":77,"author":{"gitID":"lithiumlkid"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":81,"author":{"gitID":"lithiumlkid"},"content":"                + ADDRESS_DESC_BOB + RATING_DESC_0 + POSITION_DESC_STRIKER + JERSEY_NUMBER_DESC_2"},{"lineNumber":82,"author":{"gitID":"lithiumlkid"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":86,"author":{"gitID":"lithiumlkid"},"content":"                + ADDRESS_DESC_BOB + RATING_DESC_0 + POSITION_DESC_STRIKER + JERSEY_NUMBER_DESC_2"},{"lineNumber":87,"author":{"gitID":"lithiumlkid"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":91,"author":{"gitID":"lithiumlkid"},"content":"                + ADDRESS_DESC_BOB + RATING_DESC_0 + POSITION_DESC_STRIKER + JERSEY_NUMBER_DESC_2"},{"lineNumber":92,"author":{"gitID":"lithiumlkid"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":96,"author":{"gitID":"lithiumlkid"},"content":"                + ADDRESS_DESC_BOB + RATING_DESC_0 + POSITION_DESC_STRIKER + JERSEY_NUMBER_DESC_2"},{"lineNumber":97,"author":{"gitID":"lithiumlkid"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":98,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":99,"author":{"gitID":"lithiumlkid"},"content":"        //multiple rating - last rating accepted"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":101,"author":{"gitID":"lithiumlkid"},"content":"                + RATING_DESC_1 + RATING_DESC_0 + POSITION_DESC_STRIKER + JERSEY_NUMBER_DESC_2"},{"lineNumber":102,"author":{"gitID":"lithiumlkid"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":103,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":104,"author":{"gitID":"lithiumlkid"},"content":"        //multiple position - last position accepted"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":106,"author":{"gitID":"lithiumlkid"},"content":"                + RATING_DESC_0 + POSITION_DESC_MIDFILED + POSITION_DESC_STRIKER + JERSEY_NUMBER_DESC_2"},{"lineNumber":107,"author":{"gitID":"lithiumlkid"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":108,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":109,"author":{"gitID":"lithiumlkid"},"content":"        //multiple jersey number - last jersey number accepted"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":111,"author":{"gitID":"lithiumlkid"},"content":"                + RATING_DESC_0 + POSITION_DESC_STRIKER + JERSEY_NUMBER_DESC_17 + JERSEY_NUMBER_DESC_2"},{"lineNumber":112,"author":{"gitID":"lithiumlkid"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":117,"author":{"gitID":"lithiumlkid"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":118,"author":{"gitID":"lithiumlkid"},"content":"                .withRating(VALID_RATING_0).withPosition(VALID_POSITION_STRIKER)"},{"lineNumber":119,"author":{"gitID":"lithiumlkid"},"content":"                .withJerseyNumber(VALID_JERSEY_NUMBER_2).build();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":121,"author":{"gitID":"lithiumlkid"},"content":"                + RATING_DESC_0 + POSITION_DESC_MIDFILED + JERSEY_NUMBER_DESC_2"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":129,"author":{"gitID":"lithiumlkid"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags()"},{"lineNumber":130,"author":{"gitID":"lithiumlkid"},"content":"                .withRating(VALID_RATING_1).withPosition(VALID_POSITION_MIDFIELD)"},{"lineNumber":131,"author":{"gitID":"lithiumlkid"},"content":"                .withJerseyNumber(VALID_JERSEY_NUMBER_17).build();"},{"lineNumber":132,"author":{"gitID":"lithiumlkid"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":133,"author":{"gitID":"lithiumlkid"},"content":"                + RATING_DESC_1 + POSITION_DESC_MIDFILED + JERSEY_NUMBER_DESC_17,"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":135,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":136,"author":{"gitID":"jordancjq"},"content":"        // missing all optional fields"},{"lineNumber":137,"author":{"gitID":"jordancjq"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(UNSPECIFIED_FIELD)"},{"lineNumber":138,"author":{"gitID":"jordancjq"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(UNSPECIFIED_FIELD).withTags().build();"},{"lineNumber":139,"author":{"gitID":"jordancjq"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + EMAIL_DESC_AMY,"},{"lineNumber":140,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":141,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":142,"author":{"gitID":"jordancjq"},"content":"        // missing address"},{"lineNumber":143,"author":{"gitID":"jordancjq"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":144,"author":{"gitID":"lithiumlkid"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(UNSPECIFIED_FIELD).withRating(VALID_RATING_1)"},{"lineNumber":145,"author":{"gitID":"lithiumlkid"},"content":"                .withPosition(VALID_POSITION_MIDFIELD)"},{"lineNumber":146,"author":{"gitID":"lithiumlkid"},"content":"                .withJerseyNumber(VALID_JERSEY_NUMBER_17).withTags().build();"},{"lineNumber":147,"author":{"gitID":"lithiumlkid"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + EMAIL_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":148,"author":{"gitID":"lithiumlkid"},"content":"                        + RATING_DESC_1 + POSITION_DESC_MIDFILED + JERSEY_NUMBER_DESC_17,"},{"lineNumber":149,"author":{"gitID":"jordancjq"},"content":"                new AddCommand((expectedPerson)));"},{"lineNumber":150,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":151,"author":{"gitID":"jordancjq"},"content":"        // missing phone"},{"lineNumber":152,"author":{"gitID":"jordancjq"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(UNSPECIFIED_FIELD)"},{"lineNumber":153,"author":{"gitID":"lithiumlkid"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":154,"author":{"gitID":"lithiumlkid"},"content":"                .withRating(VALID_RATING_1).withPosition(VALID_POSITION_MIDFIELD)"},{"lineNumber":155,"author":{"gitID":"lithiumlkid"},"content":"                .withJerseyNumber(VALID_JERSEY_NUMBER_17).withTags().build();"},{"lineNumber":156,"author":{"gitID":"lithiumlkid"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":157,"author":{"gitID":"lithiumlkid"},"content":"                        + RATING_DESC_1 + POSITION_DESC_MIDFILED + JERSEY_NUMBER_DESC_17,"},{"lineNumber":158,"author":{"gitID":"jordancjq"},"content":"                new AddCommand((expectedPerson)));"},{"lineNumber":159,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":160,"author":{"gitID":"lithiumlkid"},"content":"        // missing rating"},{"lineNumber":161,"author":{"gitID":"jordancjq"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(UNSPECIFIED_FIELD)"},{"lineNumber":162,"author":{"gitID":"lithiumlkid"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":163,"author":{"gitID":"lithiumlkid"},"content":"                .withPosition(VALID_POSITION_MIDFIELD)"},{"lineNumber":164,"author":{"gitID":"lithiumlkid"},"content":"                .withJerseyNumber(VALID_JERSEY_NUMBER_17).withTags().build();"},{"lineNumber":165,"author":{"gitID":"lithiumlkid"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":166,"author":{"gitID":"lithiumlkid"},"content":"                        + POSITION_DESC_MIDFILED + JERSEY_NUMBER_DESC_17,"},{"lineNumber":167,"author":{"gitID":"jordancjq"},"content":"                new AddCommand((expectedPerson)));"},{"lineNumber":168,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":169,"author":{"gitID":"lithiumlkid"},"content":"        // missing position"},{"lineNumber":170,"author":{"gitID":"jordancjq"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(UNSPECIFIED_FIELD)"},{"lineNumber":171,"author":{"gitID":"lithiumlkid"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":172,"author":{"gitID":"lithiumlkid"},"content":"                .withRating(VALID_RATING_1)"},{"lineNumber":173,"author":{"gitID":"lithiumlkid"},"content":"                .withJerseyNumber(VALID_JERSEY_NUMBER_17).withTags().build();"},{"lineNumber":174,"author":{"gitID":"lithiumlkid"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":175,"author":{"gitID":"lithiumlkid"},"content":"                        + RATING_DESC_1 + JERSEY_NUMBER_DESC_17,"},{"lineNumber":176,"author":{"gitID":"jordancjq"},"content":"                new AddCommand((expectedPerson)));"},{"lineNumber":177,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":178,"author":{"gitID":"lithiumlkid"},"content":"        // missing jersey number"},{"lineNumber":179,"author":{"gitID":"jordancjq"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(UNSPECIFIED_FIELD)"},{"lineNumber":180,"author":{"gitID":"lithiumlkid"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":181,"author":{"gitID":"lithiumlkid"},"content":"                .withRating(VALID_RATING_1).withPosition(VALID_POSITION_MIDFIELD)"},{"lineNumber":182,"author":{"gitID":"lithiumlkid"},"content":"                .withTags().build();"},{"lineNumber":183,"author":{"gitID":"lithiumlkid"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":184,"author":{"gitID":"lithiumlkid"},"content":"                        + RATING_DESC_1 + POSITION_DESC_MIDFILED,"},{"lineNumber":185,"author":{"gitID":"jordancjq"},"content":"                new AddCommand((expectedPerson)));"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":194,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":198,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":202,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":209,"author":{"gitID":"lithiumlkid"},"content":"                + RATING_DESC_1 + POSITION_DESC_MIDFILED + JERSEY_NUMBER_DESC_17"},{"lineNumber":210,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":214,"author":{"gitID":"lithiumlkid"},"content":"                + RATING_DESC_1 + POSITION_DESC_MIDFILED + JERSEY_NUMBER_DESC_17"},{"lineNumber":215,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":219,"author":{"gitID":"lithiumlkid"},"content":"                + RATING_DESC_1 + POSITION_DESC_MIDFILED + JERSEY_NUMBER_DESC_17"},{"lineNumber":220,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":224,"author":{"gitID":"lithiumlkid"},"content":"                + RATING_DESC_1 + POSITION_DESC_MIDFILED + JERSEY_NUMBER_DESC_17"},{"lineNumber":225,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":229,"author":{"gitID":"lithiumlkid"},"content":"                + RATING_DESC_1 + POSITION_DESC_MIDFILED + JERSEY_NUMBER_DESC_17"},{"lineNumber":230,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"lithiumlkid"},"content":"        // invalid rating"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":234,"author":{"gitID":"lithiumlkid"},"content":"                + INVALID_RATING_DESC + POSITION_DESC_MIDFILED + JERSEY_NUMBER_DESC_17"},{"lineNumber":235,"author":{"gitID":"lithiumlkid"},"content":"                 + VALID_TAG_FRIEND, Rating.MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":236,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":237,"author":{"gitID":"lithiumlkid"},"content":"        // invalid position"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":239,"author":{"gitID":"lithiumlkid"},"content":"                + RATING_DESC_1 + INVALID_POSITION_DESC + JERSEY_NUMBER_DESC_17"},{"lineNumber":240,"author":{"gitID":"lithiumlkid"},"content":"                + VALID_TAG_FRIEND, Position.MESSAGE_POSITION_CONSTRAINTS);"},{"lineNumber":241,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":242,"author":{"gitID":"lithiumlkid"},"content":"        // invalid jersey number"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":244,"author":{"gitID":"lithiumlkid"},"content":"                + RATING_DESC_1 + POSITION_DESC_MIDFILED + INVALID_JERSEY_NUMBER_DESC"},{"lineNumber":245,"author":{"gitID":"lithiumlkid"},"content":"                + VALID_TAG_FRIEND, JerseyNumber.MESSAGE_JERSEY_NUMBER_CONSTRAINTS);"},{"lineNumber":246,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":248,"author":{"gitID":"lithiumlkid"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":249,"author":{"gitID":"lithiumlkid"},"content":"                + RATING_DESC_1 + POSITION_DESC_MIDFILED + JERSEY_NUMBER_DESC_17 + INVALID_ADDRESS_DESC,"},{"lineNumber":250,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":254,"author":{"gitID":"lithiumlkid"},"content":"                + RATING_DESC_1 + POSITION_DESC_MIDFILED + JERSEY_NUMBER_DESC_17"},{"lineNumber":255,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":256,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"lithiumlkid":103,"jordancjq":20,"-":135}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_JERSEY_NUMBER_2;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_POSITION_STRIKER;"},{"lineNumber":12,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_0;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class EditCommandTest {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":66,"author":{"gitID":"lithiumlkid"},"content":"                .withRating(VALID_RATING_0).withPosition(VALID_POSITION_STRIKER)"},{"lineNumber":67,"author":{"gitID":"lithiumlkid"},"content":"                .withJerseyNumber(VALID_JERSEY_NUMBER_2).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":70,"author":{"gitID":"lithiumlkid"},"content":"                .withPhone(VALID_PHONE_BOB).withRating(VALID_RATING_0).withPosition(VALID_POSITION_STRIKER)"},{"lineNumber":71,"author":{"gitID":"lithiumlkid"},"content":"                .withJerseyNumber(VALID_JERSEY_NUMBER_2).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(lastPerson, editedPerson);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":153,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        // edit -\u003e first person edited"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person edited again"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        // execution failed -\u003e editCommand not pushed into undoRedoStack"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * 1. Edits a {@code Person} from a filtered list."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * 2. Undo the edit."},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."},{"lineNumber":204,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        // redo -\u003e edits same second person in unfiltered person list"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        final EditCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        EditCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    private EditCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, descriptor);"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        return editCommand;"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"lithiumlkid":7,"-":260}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_JERSEY_NUMBER_17;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":12,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_POSITION_MIDFIELD;"},{"lineNumber":13,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_1;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":60,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":61,"author":{"gitID":"lithiumlkid"},"content":"        // different rating -\u003e returns false"},{"lineNumber":62,"author":{"gitID":"lithiumlkid"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withRating(VALID_RATING_1).build();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"lithiumlkid"},"content":"        // different position -\u003e returns false"},{"lineNumber":66,"author":{"gitID":"lithiumlkid"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPosition(VALID_POSITION_MIDFIELD).build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"lithiumlkid"},"content":"        // different jersey number -\u003e returns false"},{"lineNumber":70,"author":{"gitID":"lithiumlkid"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withJerseyNumber(VALID_JERSEY_NUMBER_17).build();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"lithiumlkid":10,"-":63}},{"path":"src/test/java/seedu/address/logic/commands/RemarkCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jordancjq"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":3,"author":{"gitID":"jordancjq"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"jordancjq"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"jordancjq"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":7,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_AMY;"},{"lineNumber":8,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"},{"lineNumber":9,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_EMPTY;"},{"lineNumber":10,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":11,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":12,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":13,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":14,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":15,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":16,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":17,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":18,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":19,"author":{"gitID":"jordancjq"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":21,"author":{"gitID":"jordancjq"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"jordancjq"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"jordancjq"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":30,"author":{"gitID":"jordancjq"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":31,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":32,"author":{"gitID":"jordancjq"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"jordancjq"},"content":" * Contains integration tests (interaction with the Model) and unit tests for RemarkCommand."},{"lineNumber":34,"author":{"gitID":"jordancjq"},"content":" */"},{"lineNumber":35,"author":{"gitID":"jordancjq"},"content":"public class RemarkCommandTest {"},{"lineNumber":36,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":37,"author":{"gitID":"jordancjq"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":38,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":39,"author":{"gitID":"jordancjq"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"jordancjq"},"content":"    public void execute_addRemarkUnfilteredList_success() throws Exception {"},{"lineNumber":41,"author":{"gitID":"jordancjq"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":42,"author":{"gitID":"jordancjq"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":43,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":44,"author":{"gitID":"jordancjq"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":45,"author":{"gitID":"jordancjq"},"content":"        Person remarkedPerson \u003d personInList.withRemark(VALID_REMARK_AMY).build();"},{"lineNumber":46,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":47,"author":{"gitID":"jordancjq"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(indexLastPerson, remarkedPerson.getRemark().toString());"},{"lineNumber":48,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":49,"author":{"gitID":"jordancjq"},"content":"        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, remarkedPerson);"},{"lineNumber":50,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":51,"author":{"gitID":"jordancjq"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":52,"author":{"gitID":"jordancjq"},"content":"        expectedModel.updatePerson(lastPerson, remarkedPerson);"},{"lineNumber":53,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":54,"author":{"gitID":"jordancjq"},"content":"        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"},{"lineNumber":55,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":57,"author":{"gitID":"jordancjq"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"jordancjq"},"content":"    public void execute_deleteRemarkUnfilteredList_success() throws Exception {"},{"lineNumber":59,"author":{"gitID":"jordancjq"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":60,"author":{"gitID":"jordancjq"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":61,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":62,"author":{"gitID":"jordancjq"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":63,"author":{"gitID":"jordancjq"},"content":"        Person remarkedPerson \u003d personInList.withRemark(VALID_REMARK_EMPTY).build();"},{"lineNumber":64,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":65,"author":{"gitID":"jordancjq"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(indexLastPerson, remarkedPerson.getRemark().toString());"},{"lineNumber":66,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":67,"author":{"gitID":"jordancjq"},"content":"        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_DELETE_REMARK_SUCCESS, remarkedPerson);"},{"lineNumber":68,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":69,"author":{"gitID":"jordancjq"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":70,"author":{"gitID":"jordancjq"},"content":"        expectedModel.updatePerson(lastPerson, remarkedPerson);"},{"lineNumber":71,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":72,"author":{"gitID":"jordancjq"},"content":"        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"},{"lineNumber":73,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":75,"author":{"gitID":"jordancjq"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"jordancjq"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":77,"author":{"gitID":"jordancjq"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":78,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":79,"author":{"gitID":"jordancjq"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":80,"author":{"gitID":"jordancjq"},"content":"        Person remarkedPerson \u003d new PersonBuilder(personInFilteredList).withRemark(VALID_REMARK_BOB).build();"},{"lineNumber":81,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":82,"author":{"gitID":"jordancjq"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(INDEX_FIRST_PERSON, remarkedPerson.getRemark().toString());"},{"lineNumber":83,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":84,"author":{"gitID":"jordancjq"},"content":"        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, remarkedPerson);"},{"lineNumber":85,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":86,"author":{"gitID":"jordancjq"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":87,"author":{"gitID":"jordancjq"},"content":"        expectedModel.updatePerson(personInFilteredList, remarkedPerson);"},{"lineNumber":88,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":89,"author":{"gitID":"jordancjq"},"content":"        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"},{"lineNumber":90,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":92,"author":{"gitID":"jordancjq"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"jordancjq"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":94,"author":{"gitID":"jordancjq"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":95,"author":{"gitID":"jordancjq"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(outOfBoundIndex, VALID_REMARK_BOB);"},{"lineNumber":96,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":97,"author":{"gitID":"jordancjq"},"content":"        assertCommandFailure(remarkCommand, model, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":98,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":100,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"jordancjq"},"content":"     * Remark filtered list where index is larger than size of filtered list,"},{"lineNumber":102,"author":{"gitID":"jordancjq"},"content":"     * but smaller than size of address book"},{"lineNumber":103,"author":{"gitID":"jordancjq"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"jordancjq"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"jordancjq"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":106,"author":{"gitID":"jordancjq"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":107,"author":{"gitID":"jordancjq"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":108,"author":{"gitID":"jordancjq"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":109,"author":{"gitID":"jordancjq"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":110,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":111,"author":{"gitID":"jordancjq"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(outOfBoundIndex, VALID_REMARK_BOB);"},{"lineNumber":112,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":113,"author":{"gitID":"jordancjq"},"content":"        assertCommandFailure(remarkCommand, model, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":114,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":116,"author":{"gitID":"jordancjq"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"jordancjq"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":118,"author":{"gitID":"jordancjq"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":119,"author":{"gitID":"jordancjq"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":120,"author":{"gitID":"jordancjq"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":121,"author":{"gitID":"jordancjq"},"content":"        Person personToRemark \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":122,"author":{"gitID":"jordancjq"},"content":"        Person remarkedPerson \u003d new PersonBuilder(personToRemark).withRemark(VALID_REMARK_AMY).build();"},{"lineNumber":123,"author":{"gitID":"jordancjq"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(INDEX_FIRST_PERSON, VALID_REMARK_AMY);"},{"lineNumber":124,"author":{"gitID":"jordancjq"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":125,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":126,"author":{"gitID":"jordancjq"},"content":"        // remark -\u003e first person remarked"},{"lineNumber":127,"author":{"gitID":"jordancjq"},"content":"        remarkCommand.execute();"},{"lineNumber":128,"author":{"gitID":"jordancjq"},"content":"        undoRedoStack.push(remarkCommand);"},{"lineNumber":129,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":130,"author":{"gitID":"jordancjq"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":131,"author":{"gitID":"jordancjq"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":132,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":133,"author":{"gitID":"jordancjq"},"content":"        // redo -\u003e same first person remarked again"},{"lineNumber":134,"author":{"gitID":"jordancjq"},"content":"        expectedModel.updatePerson(personToRemark, remarkedPerson);"},{"lineNumber":135,"author":{"gitID":"jordancjq"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":136,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":138,"author":{"gitID":"jordancjq"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"jordancjq"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":140,"author":{"gitID":"jordancjq"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":141,"author":{"gitID":"jordancjq"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":142,"author":{"gitID":"jordancjq"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":143,"author":{"gitID":"jordancjq"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":144,"author":{"gitID":"jordancjq"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(outOfBoundIndex, VALID_REMARK_EMPTY);"},{"lineNumber":145,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":146,"author":{"gitID":"jordancjq"},"content":"        // execution failed -\u003e remarkCommand not pushed into undoRedoStack"},{"lineNumber":147,"author":{"gitID":"jordancjq"},"content":"        assertCommandFailure(remarkCommand, model, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":148,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":149,"author":{"gitID":"jordancjq"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":150,"author":{"gitID":"jordancjq"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":151,"author":{"gitID":"jordancjq"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":152,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":154,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"jordancjq"},"content":"     * 1. Updates {@code Person#remark} from a filtered list."},{"lineNumber":156,"author":{"gitID":"jordancjq"},"content":"     * 2. Undo the update."},{"lineNumber":157,"author":{"gitID":"jordancjq"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously updated person in the"},{"lineNumber":158,"author":{"gitID":"jordancjq"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":159,"author":{"gitID":"jordancjq"},"content":"     * 4. Redo the update. This ensures {@code RedoCommand} updates the person object regardless of indexing."},{"lineNumber":160,"author":{"gitID":"jordancjq"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"jordancjq"},"content":"    @Test"},{"lineNumber":162,"author":{"gitID":"jordancjq"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonRemarked() throws Exception {"},{"lineNumber":163,"author":{"gitID":"jordancjq"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":164,"author":{"gitID":"jordancjq"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":165,"author":{"gitID":"jordancjq"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":166,"author":{"gitID":"jordancjq"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(INDEX_FIRST_PERSON, VALID_REMARK_BOB);"},{"lineNumber":167,"author":{"gitID":"jordancjq"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":168,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":169,"author":{"gitID":"jordancjq"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":170,"author":{"gitID":"jordancjq"},"content":"        Person personToRemark \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":171,"author":{"gitID":"jordancjq"},"content":"        Person remarkedPerson \u003d new PersonBuilder(personToRemark).withRemark(VALID_REMARK_BOB).build();"},{"lineNumber":172,"author":{"gitID":"jordancjq"},"content":"        // remark -\u003e remarks second person in unfiltered person list / first person in filtered person list"},{"lineNumber":173,"author":{"gitID":"jordancjq"},"content":"        remarkCommand.execute();"},{"lineNumber":174,"author":{"gitID":"jordancjq"},"content":"        undoRedoStack.push(remarkCommand);"},{"lineNumber":175,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":176,"author":{"gitID":"jordancjq"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":177,"author":{"gitID":"jordancjq"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":178,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":179,"author":{"gitID":"jordancjq"},"content":"        expectedModel.updatePerson(personToRemark, remarkedPerson);"},{"lineNumber":180,"author":{"gitID":"jordancjq"},"content":"        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToRemark);"},{"lineNumber":181,"author":{"gitID":"jordancjq"},"content":"        // redo -\u003e remarks same second person in unfiltered person list"},{"lineNumber":182,"author":{"gitID":"jordancjq"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":183,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":185,"author":{"gitID":"jordancjq"},"content":"    @Test"},{"lineNumber":186,"author":{"gitID":"jordancjq"},"content":"    public void equals() {"},{"lineNumber":187,"author":{"gitID":"jordancjq"},"content":"        final RemarkCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, VALID_REMARK_AMY);"},{"lineNumber":188,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":189,"author":{"gitID":"jordancjq"},"content":"        // same values -\u003e returns true"},{"lineNumber":190,"author":{"gitID":"jordancjq"},"content":"        RemarkCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, VALID_REMARK_AMY);"},{"lineNumber":191,"author":{"gitID":"jordancjq"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":192,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":193,"author":{"gitID":"jordancjq"},"content":"        // same object -\u003e returns true"},{"lineNumber":194,"author":{"gitID":"jordancjq"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":195,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":196,"author":{"gitID":"jordancjq"},"content":"        // null -\u003e returns false"},{"lineNumber":197,"author":{"gitID":"jordancjq"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":198,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":199,"author":{"gitID":"jordancjq"},"content":"        // different types -\u003e returns false"},{"lineNumber":200,"author":{"gitID":"jordancjq"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":201,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":202,"author":{"gitID":"jordancjq"},"content":"        // different index -\u003e returns false"},{"lineNumber":203,"author":{"gitID":"jordancjq"},"content":"        assertFalse(standardCommand.equals(new RemarkCommand(INDEX_SECOND_PERSON, new Remark(VALID_REMARK_AMY))));"},{"lineNumber":204,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":205,"author":{"gitID":"jordancjq"},"content":"        // different remark -\u003e returns false"},{"lineNumber":206,"author":{"gitID":"jordancjq"},"content":"        assertFalse(standardCommand.equals(new RemarkCommand(INDEX_FIRST_PERSON, new Remark(VALID_REMARK_BOB))));"},{"lineNumber":207,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":209,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":210,"author":{"gitID":"jordancjq"},"content":"     * Returns an {@code RemarkCommand} with parameters {@code index} and {@code remark}."},{"lineNumber":211,"author":{"gitID":"jordancjq"},"content":"     */"},{"lineNumber":212,"author":{"gitID":"jordancjq"},"content":"    private RemarkCommand prepareCommand(Index index, String remark) {"},{"lineNumber":213,"author":{"gitID":"jordancjq"},"content":"        RemarkCommand remarkCommand \u003d new RemarkCommand(index, new Remark(remark));"},{"lineNumber":214,"author":{"gitID":"jordancjq"},"content":"        remarkCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":215,"author":{"gitID":"jordancjq"},"content":"        return remarkCommand;"},{"lineNumber":216,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"jordancjq"},"content":"}"}],"authorContributionMap":{"jordancjq":217}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void execute_newPerson_success() throws Exception {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedModel.addPerson(validPerson);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(validPerson, model), model,"},{"lineNumber":38,"author":{"gitID":"jordancjq"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validPerson),"},{"lineNumber":39,"author":{"gitID":"jordancjq"},"content":"                expectedModel);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandFailure(prepareCommand(personInList, model), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code person} into the {@code model}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private AddCommand prepareCommand(Person person, Model model) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jordancjq":2,"-":54}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_JERSEY_NUMBER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_POSITION;"},{"lineNumber":12,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":45,"author":{"gitID":"jordancjq"},"content":"    public static final String VALID_TAG_UNUSED \u003d \"unused\";"},{"lineNumber":46,"author":{"gitID":"jordancjq"},"content":"    public static final String VALID_REMARK_AMY \u003d \"MVP of all time\";"},{"lineNumber":47,"author":{"gitID":"jordancjq"},"content":"    public static final String VALID_REMARK_BOB \u003d \"Need 5 more training!\";"},{"lineNumber":48,"author":{"gitID":"jordancjq"},"content":"    public static final String VALID_REMARK_EMPTY \u003d \"\";"},{"lineNumber":49,"author":{"gitID":"jordancjq"},"content":"    public static final String VALID_TEAM_ARSENAL \u003d \"Arsenal\";"},{"lineNumber":50,"author":{"gitID":"jordancjq"},"content":"    public static final String VALID_TEAM_BARCELONA \u003d \"Barcelona\";"},{"lineNumber":51,"author":{"gitID":"lithiumlkid"},"content":"    public static final String VALID_RATING_0 \u003d \"0\";"},{"lineNumber":52,"author":{"gitID":"lithiumlkid"},"content":"    public static final String VALID_RATING_1 \u003d \"1\";"},{"lineNumber":53,"author":{"gitID":"lithiumlkid"},"content":"    public static final String VALID_POSITION_STRIKER \u003d \"1\";"},{"lineNumber":54,"author":{"gitID":"lithiumlkid"},"content":"    public static final String VALID_POSITION_MIDFIELD \u003d \"2\";"},{"lineNumber":55,"author":{"gitID":"lithiumlkid"},"content":"    public static final String VALID_JERSEY_NUMBER_2 \u003d \"2\";"},{"lineNumber":56,"author":{"gitID":"lithiumlkid"},"content":"    public static final String VALID_JERSEY_NUMBER_17 \u003d \"17\";"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":68,"author":{"gitID":"lithiumlkid"},"content":"    public static final String RATING_DESC_0 \u003d \" \" + PREFIX_RATING + VALID_RATING_0;"},{"lineNumber":69,"author":{"gitID":"lithiumlkid"},"content":"    public static final String RATING_DESC_1 \u003d \" \" + PREFIX_RATING + VALID_RATING_1;"},{"lineNumber":70,"author":{"gitID":"lithiumlkid"},"content":"    public static final String POSITION_DESC_STRIKER \u003d \" \" + PREFIX_POSITION + VALID_POSITION_STRIKER;"},{"lineNumber":71,"author":{"gitID":"lithiumlkid"},"content":"    public static final String POSITION_DESC_MIDFILED \u003d \" \" + PREFIX_POSITION + VALID_POSITION_MIDFIELD;"},{"lineNumber":72,"author":{"gitID":"lithiumlkid"},"content":"    public static final String JERSEY_NUMBER_DESC_2 \u003d \" \" + PREFIX_JERSEY_NUMBER + VALID_JERSEY_NUMBER_2;"},{"lineNumber":73,"author":{"gitID":"lithiumlkid"},"content":"    public static final String JERSEY_NUMBER_DESC_17 \u003d \" \" + PREFIX_JERSEY_NUMBER + VALID_JERSEY_NUMBER_17;"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":80,"author":{"gitID":"lithiumlkid"},"content":"    public static final String INVALID_RATING_DESC \u003d \" \" + PREFIX_RATING + \"06\"; // only integer 0 to 5 allowed"},{"lineNumber":81,"author":{"gitID":"lithiumlkid"},"content":"    public static final String INVALID_POSITION_DESC \u003d \" \" + PREFIX_POSITION + \"10\"; // only integer 1 to 4 allowed"},{"lineNumber":82,"author":{"gitID":"lithiumlkid"},"content":"    public static final String INVALID_JERSEY_NUMBER_DESC \u003d \" \""},{"lineNumber":83,"author":{"gitID":"lithiumlkid"},"content":"            + PREFIX_JERSEY_NUMBER + \"100\"; // only integer 0 to 99 not allowed"},{"lineNumber":84,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":95,"author":{"gitID":"lithiumlkid"},"content":"                .withTags(VALID_TAG_FRIEND).withRating(VALID_RATING_0)"},{"lineNumber":96,"author":{"gitID":"lithiumlkid"},"content":"                .withPosition(VALID_POSITION_STRIKER).withJerseyNumber(VALID_JERSEY_NUMBER_2).build();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":99,"author":{"gitID":"lithiumlkid"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withRating(VALID_RATING_1)"},{"lineNumber":100,"author":{"gitID":"lithiumlkid"},"content":"                .withPosition(VALID_POSITION_MIDFIELD).withJerseyNumber(VALID_JERSEY_NUMBER_17).build();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":128,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":169,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":178,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"lithiumlkid":24,"jordancjq":6,"-":154}},{"path":"src/test/java/seedu/address/logic/commands/CreateCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TEAM_ARSENAL;"},{"lineNumber":6,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TEAM_BARCELONA;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":11,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TEAM;"},{"lineNumber":12,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.testutil.TypicalTeams.CHELSEA;"},{"lineNumber":13,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.testutil.TypicalTeams.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.Team;"},{"lineNumber":26,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":27,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":28,"author":{"gitID":"jordancjq"},"content":"public class CreateCommandTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"jordancjq"},"content":"    public void constructor_nullTeam_throwsNullPointerException() {"},{"lineNumber":37,"author":{"gitID":"jordancjq"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":38,"author":{"gitID":"jordancjq"},"content":"        new CreateCommand(null);"},{"lineNumber":39,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":41,"author":{"gitID":"jordancjq"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"jordancjq"},"content":"    public void execute_createTeam_success() throws Exception {"},{"lineNumber":43,"author":{"gitID":"jordancjq"},"content":"        Team teamToAdd \u003d new Team(new TeamName(VALID_TEAM_ARSENAL));"},{"lineNumber":44,"author":{"gitID":"jordancjq"},"content":"        String expectedMessage \u003d String.format(CreateCommand.MESSAGE_SUCCESS, teamToAdd);"},{"lineNumber":45,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":46,"author":{"gitID":"jordancjq"},"content":"        CreateCommand createCommand \u003d prepareCommand(VALID_TEAM_ARSENAL);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":49,"author":{"gitID":"jordancjq"},"content":"        expectedModel.createTeam(teamToAdd);"},{"lineNumber":50,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":51,"author":{"gitID":"jordancjq"},"content":"        assertCommandSuccess(createCommand, model, expectedMessage, expectedModel);"},{"lineNumber":52,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":54,"author":{"gitID":"jordancjq"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"jordancjq"},"content":"    public void execute_createTeamDuplicateTeam_failure() throws Exception {"},{"lineNumber":56,"author":{"gitID":"jordancjq"},"content":"        Team firstTeam \u003d model.getAddressBook().getTeamList().get(INDEX_FIRST_TEAM.getZeroBased());"},{"lineNumber":57,"author":{"gitID":"jordancjq"},"content":"        CreateCommand createCommand \u003d prepareCommand(CHELSEA.getTeamName().toString());"},{"lineNumber":58,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":59,"author":{"gitID":"jordancjq"},"content":"        assertCommandFailure(createCommand, model, CreateCommand.MESSAGE_DUPLICATE_TEAM);"},{"lineNumber":60,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":62,"author":{"gitID":"jordancjq"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"jordancjq"},"content":"    public void executeUndoRedo_createTeam_success() throws Exception {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":67,"author":{"gitID":"jordancjq"},"content":"        CreateCommand createCommand \u003d prepareCommand(VALID_TEAM_ARSENAL);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":69,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":70,"author":{"gitID":"jordancjq"},"content":"        // edit -\u003e first team created"},{"lineNumber":71,"author":{"gitID":"jordancjq"},"content":"        createCommand.execute();"},{"lineNumber":72,"author":{"gitID":"jordancjq"},"content":"        undoRedoStack.push(createCommand);"},{"lineNumber":73,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":74,"author":{"gitID":"jordancjq"},"content":"        // undo -\u003e reverts addressbook back to previous state"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"jordancjq"},"content":"        // redo -\u003e same team created again"},{"lineNumber":78,"author":{"gitID":"jordancjq"},"content":"        expectedModel.createTeam(new Team(new TeamName(VALID_TEAM_ARSENAL)));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"jordancjq"},"content":"    public void equals() {"},{"lineNumber":84,"author":{"gitID":"jordancjq"},"content":"        final CreateCommand standardCommand \u003d prepareCommand(VALID_TEAM_ARSENAL);"},{"lineNumber":85,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":86,"author":{"gitID":"jordancjq"},"content":"        // same values -\u003e returns true"},{"lineNumber":87,"author":{"gitID":"jordancjq"},"content":"        CreateCommand commandWithSameValues \u003d prepareCommand(VALID_TEAM_ARSENAL);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"jordancjq"},"content":"        // different type -\u003e returns false"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"jordancjq"},"content":"        // different team name -\u003e returns false"},{"lineNumber":100,"author":{"gitID":"jordancjq"},"content":"        assertFalse(standardCommand.equals(new CreateCommand(new Team(new TeamName(VALID_TEAM_BARCELONA)))));"},{"lineNumber":101,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":103,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"jordancjq"},"content":"     * Returns an {@code CreateCommand} with parameters {@code team}."},{"lineNumber":105,"author":{"gitID":"jordancjq"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"jordancjq"},"content":"    private CreateCommand prepareCommand(String team) {"},{"lineNumber":107,"author":{"gitID":"jordancjq"},"content":"        CreateCommand createCommand \u003d new CreateCommand(new Team(new TeamName(team)));"},{"lineNumber":108,"author":{"gitID":"jordancjq"},"content":"        createCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":109,"author":{"gitID":"jordancjq"},"content":"        return createCommand;"},{"lineNumber":110,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"jordancjq"},"content":"}"}],"authorContributionMap":{"jordancjq":63,"-":48}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.NoPlayerException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":28,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":29,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.Team;"},{"lineNumber":30,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":31,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.exceptions.TeamNotFoundException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"jordancjq"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        public void sortPlayers(String field, String order) throws NoPlayerException {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTeam\u003e getInitTeamList() {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":151,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":153,"author":{"gitID":"jordancjq"},"content":"        @Override"},{"lineNumber":154,"author":{"gitID":"jordancjq"},"content":"        public void updateFilteredPersonList(TeamName targetTeam) throws TeamNotFoundException {"},{"lineNumber":155,"author":{"gitID":"jordancjq"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":156,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":158,"author":{"gitID":"jordancjq"},"content":"        @Override"},{"lineNumber":159,"author":{"gitID":"jordancjq"},"content":"        public void deleteTag(Tag tag) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"jordancjq"},"content":"        @Override"},{"lineNumber":164,"author":{"gitID":"jordancjq"},"content":"        public void createTeam(Team team) {"},{"lineNumber":165,"author":{"gitID":"jordancjq"},"content":"            fail(\"This method should not be be called.\");"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"jordancjq"},"content":"        @Override"},{"lineNumber":169,"author":{"gitID":"jordancjq"},"content":"        public void assignPersonToTeam(Person person, TeamName teamName) throws DuplicatePersonException {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":171,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":173,"author":{"gitID":"jordancjq"},"content":"        @Override"},{"lineNumber":174,"author":{"gitID":"jordancjq"},"content":"        public void removePersonFromTeam(Person person, TeamName teamName) throws PersonNotFoundException {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":179,"author":{"gitID":"jordancjq"},"content":"        public void removeTeam(TeamName teamName) throws TeamNotFoundException {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":181,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        public boolean setTagColour(Tag tag, String colour) {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":192,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":207,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"jordancjq"},"content":"        @Override"},{"lineNumber":218,"author":{"gitID":"jordancjq"},"content":"        public void assignPersonToTeam(Person person, TeamName teamName)"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":221,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jordancjq":30,"-":199}},{"path":"src/test/java/seedu/address/model/person/RemarkTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"jordancjq"},"content":"public class RemarkTest {"},{"lineNumber":9,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":10,"author":{"gitID":"jordancjq"},"content":"    @Test"},{"lineNumber":11,"author":{"gitID":"jordancjq"},"content":"    public void equals() {"},{"lineNumber":12,"author":{"gitID":"jordancjq"},"content":"        Remark remark \u003d new Remark(\"Test Remark\");"},{"lineNumber":13,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":14,"author":{"gitID":"jordancjq"},"content":"        // same object -\u003e returns true"},{"lineNumber":15,"author":{"gitID":"jordancjq"},"content":"        assertTrue(remark.equals(remark));"},{"lineNumber":16,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":17,"author":{"gitID":"jordancjq"},"content":"        // same values -\u003e returns true"},{"lineNumber":18,"author":{"gitID":"jordancjq"},"content":"        Remark sameRemark \u003d new Remark(remark.value);"},{"lineNumber":19,"author":{"gitID":"jordancjq"},"content":"        assertTrue(remark.equals(sameRemark));"},{"lineNumber":20,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":21,"author":{"gitID":"jordancjq"},"content":"        // different types -\u003e return false"},{"lineNumber":22,"author":{"gitID":"jordancjq"},"content":"        assertFalse(remark.equals(new Phone(\"999\")));"},{"lineNumber":23,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":24,"author":{"gitID":"jordancjq"},"content":"        // null -\u003e returns false"},{"lineNumber":25,"author":{"gitID":"jordancjq"},"content":"        assertFalse(remark.equals(null));"},{"lineNumber":26,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":27,"author":{"gitID":"jordancjq"},"content":"        // different remark -\u003e returns false"},{"lineNumber":28,"author":{"gitID":"jordancjq"},"content":"        Remark differentRemark \u003d new Remark(\"Another Remark\");"},{"lineNumber":29,"author":{"gitID":"jordancjq"},"content":"        assertFalse(remark.equals(differentRemark));"},{"lineNumber":30,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":31,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"jordancjq"},"content":"}"}],"authorContributionMap":{"jordancjq":25,"-":7}},{"path":"src/test/java/seedu/address/model/team/TeamNameTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jordancjq"},"content":"package seedu.address.model.team;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"jordancjq"},"content":"public class TeamNameTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"jordancjq"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TeamName(null));"},{"lineNumber":15,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":17,"author":{"gitID":"jordancjq"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"jordancjq"},"content":"    public void constructor_invalidTeamName_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"jordancjq"},"content":"        String invalidTeamName \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"jordancjq"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new TeamName(invalidTeamName));"},{"lineNumber":21,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":23,"author":{"gitID":"jordancjq"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"jordancjq"},"content":"    public void isValidName() {"},{"lineNumber":25,"author":{"gitID":"jordancjq"},"content":"        // null name"},{"lineNumber":26,"author":{"gitID":"jordancjq"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e TeamName.isValidName(null));"},{"lineNumber":27,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":28,"author":{"gitID":"jordancjq"},"content":"        // invalid name"},{"lineNumber":29,"author":{"gitID":"jordancjq"},"content":"        assertFalse(TeamName.isValidName(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"jordancjq"},"content":"        assertFalse(TeamName.isValidName(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"jordancjq"},"content":"        assertFalse(TeamName.isValidName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":32,"author":{"gitID":"jordancjq"},"content":"        assertFalse(TeamName.isValidName(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":34,"author":{"gitID":"jordancjq"},"content":"        // valid name"},{"lineNumber":35,"author":{"gitID":"jordancjq"},"content":"        assertTrue(TeamName.isValidName(\"new jersey\")); // alphabets only"},{"lineNumber":36,"author":{"gitID":"jordancjq"},"content":"        assertTrue(TeamName.isValidName(\"5566\")); // numbers only"},{"lineNumber":37,"author":{"gitID":"jordancjq"},"content":"        assertTrue(TeamName.isValidName(\"5th cycle\")); // alphanumeric characters"},{"lineNumber":38,"author":{"gitID":"jordancjq"},"content":"        assertTrue(TeamName.isValidName(\"Georgia Clint\")); // with capital letters"},{"lineNumber":39,"author":{"gitID":"jordancjq"},"content":"        assertTrue(TeamName.isValidName(\"The Longest Football Team Name You Know\")); // long names"},{"lineNumber":40,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"jordancjq"},"content":"}"}],"authorContributionMap":{"jordancjq":30,"-":11}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":5,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":6,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":9,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.testutil.TypicalTeams.CHELSEA;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":28,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.Team;"},{"lineNumber":29,"author":{"gitID":"jordancjq"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":30,"author":{"gitID":"jordancjq"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":38,"author":{"gitID":"jordancjq"},"content":"    private final AddressBook addressBookWithBobAndAmy \u003d new AddressBookBuilder().withPerson(BOB)"},{"lineNumber":39,"author":{"gitID":"jordancjq"},"content":"            .withPerson(AMY).build();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":65,"author":{"gitID":"jordancjq"},"content":"        List\u003cTeam\u003e newTeams \u003d Arrays.asList(CHELSEA);"},{"lineNumber":66,"author":{"gitID":"jordancjq"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags, newTeams);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"jordancjq"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"jordancjq"},"content":"    public void resetData_withDuplicateTeams_throwsAssertionError() {"},{"lineNumber":74,"author":{"gitID":"jordancjq"},"content":"        // Repeat CHELSEA twice"},{"lineNumber":75,"author":{"gitID":"jordancjq"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(BOB);"},{"lineNumber":76,"author":{"gitID":"jordancjq"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(BOB.getTags());"},{"lineNumber":77,"author":{"gitID":"jordancjq"},"content":"        List\u003cTeam\u003e newTeams \u003d Arrays.asList(CHELSEA, CHELSEA);"},{"lineNumber":78,"author":{"gitID":"jordancjq"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags, newTeams);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"jordancjq"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"jordancjq"},"content":"    public void updatePerson_detailsChanged_personsAndTagsListUpdated() throws Exception {"},{"lineNumber":98,"author":{"gitID":"jordancjq"},"content":"        AddressBook addressBookUpdatedToAmy \u003d new AddressBookBuilder().withPerson(BOB).build();"},{"lineNumber":99,"author":{"gitID":"jordancjq"},"content":"        addressBookUpdatedToAmy.updatePerson(BOB, AMY);"},{"lineNumber":100,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":101,"author":{"gitID":"jordancjq"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(AMY).build();"},{"lineNumber":102,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":103,"author":{"gitID":"jordancjq"},"content":"        assertEquals(expectedAddressBook, addressBookUpdatedToAmy);"},{"lineNumber":104,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":106,"author":{"gitID":"jordancjq"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"jordancjq"},"content":"    public void removePerson_nonExistentPerson_throwsPersonNotFoundException() throws Exception {"},{"lineNumber":108,"author":{"gitID":"jordancjq"},"content":"        thrown.expect(PersonNotFoundException.class);"},{"lineNumber":109,"author":{"gitID":"jordancjq"},"content":"        addressBookWithBobAndAmy.removePerson(ALICE);"},{"lineNumber":110,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":112,"author":{"gitID":"jordancjq"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"jordancjq"},"content":"    public void removeTag_nonExistentTag_addressBookUnchanged() throws Exception {"},{"lineNumber":114,"author":{"gitID":"jordancjq"},"content":"        addressBookWithBobAndAmy.removeTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":115,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":116,"author":{"gitID":"jordancjq"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(BOB).withPerson(AMY).build();"},{"lineNumber":117,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":118,"author":{"gitID":"jordancjq"},"content":"        assertEquals(expectedAddressBook, addressBookWithBobAndAmy);"},{"lineNumber":119,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":121,"author":{"gitID":"jordancjq"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"jordancjq"},"content":"    public void removeTag_tagUsedByMultiplePersons_tagRemoved() throws Exception {"},{"lineNumber":123,"author":{"gitID":"jordancjq"},"content":"        addressBookWithBobAndAmy.removeTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":124,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":125,"author":{"gitID":"jordancjq"},"content":"        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":126,"author":{"gitID":"jordancjq"},"content":"        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":127,"author":{"gitID":"jordancjq"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(bobWithoutFriendTag)"},{"lineNumber":128,"author":{"gitID":"jordancjq"},"content":"                .withPerson(amyWithoutFriendTag).build();"},{"lineNumber":129,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":130,"author":{"gitID":"jordancjq"},"content":"        assertEquals(expectedAddressBook, addressBookWithBobAndAmy);"},{"lineNumber":131,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":139,"author":{"gitID":"jordancjq"},"content":"        private final ObservableList\u003cTeam\u003e teams \u003d FXCollections.observableArrayList();"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"jordancjq"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags, Collection\u003cTeam\u003e teams) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":144,"author":{"gitID":"jordancjq"},"content":"            this.teams.setAll(teams);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":157,"author":{"gitID":"jordancjq"},"content":"        @Override"},{"lineNumber":158,"author":{"gitID":"jordancjq"},"content":"        public ObservableList\u003cTeam\u003e getTeamList() {"},{"lineNumber":159,"author":{"gitID":"jordancjq"},"content":"            return teams;"},{"lineNumber":160,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jordancjq":66,"-":97}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitID":"lithiumlkid"},"content":"import seedu.address.model.person.JerseyNumber;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitID":"lithiumlkid"},"content":"import seedu.address.model.person.Position;"},{"lineNumber":15,"author":{"gitID":"lithiumlkid"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":43,"author":{"gitID":"lithiumlkid"},"content":"        descriptor.setRating(person.getRating());"},{"lineNumber":44,"author":{"gitID":"lithiumlkid"},"content":"        descriptor.setPosition(person.getPosition());"},{"lineNumber":45,"author":{"gitID":"lithiumlkid"},"content":"        descriptor.setJerseyNumber(person.getJerseyNumber());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"lithiumlkid"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"lithiumlkid"},"content":"     * Sets the {@code Rating} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":92,"author":{"gitID":"lithiumlkid"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"lithiumlkid"},"content":"    public EditPersonDescriptorBuilder withRating(String rating) {"},{"lineNumber":94,"author":{"gitID":"lithiumlkid"},"content":"        descriptor.setRating(new Rating(rating));"},{"lineNumber":95,"author":{"gitID":"lithiumlkid"},"content":"        return this;"},{"lineNumber":96,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":98,"author":{"gitID":"lithiumlkid"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"lithiumlkid"},"content":"     * Sets the {@code Position} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":100,"author":{"gitID":"lithiumlkid"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"lithiumlkid"},"content":"    public EditPersonDescriptorBuilder withPosition(String position) {"},{"lineNumber":102,"author":{"gitID":"lithiumlkid"},"content":"        descriptor.setPosition(new Position(position));"},{"lineNumber":103,"author":{"gitID":"lithiumlkid"},"content":"        return this;"},{"lineNumber":104,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":106,"author":{"gitID":"lithiumlkid"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"lithiumlkid"},"content":"     * Sets the {@code JerseyNumber} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":108,"author":{"gitID":"lithiumlkid"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"lithiumlkid"},"content":"    public EditPersonDescriptorBuilder withJerseyNumber(String jerseyNumber) {"},{"lineNumber":110,"author":{"gitID":"lithiumlkid"},"content":"        descriptor.setJerseyNumber(new JerseyNumber(jerseyNumber));"},{"lineNumber":111,"author":{"gitID":"lithiumlkid"},"content":"        return this;"},{"lineNumber":112,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"lithiumlkid":30,"-":87}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"jordancjq"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":7,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":8,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":11,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":13,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":25,"author":{"gitID":"jordancjq"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        modelManager.getFilteredPersonList().remove(0);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"jordancjq"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"jordancjq"},"content":"    public void deleteTag_nonExistentTag_modelUnchanged() throws Exception {"},{"lineNumber":40,"author":{"gitID":"jordancjq"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":44,"author":{"gitID":"jordancjq"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":45,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":46,"author":{"gitID":"jordancjq"},"content":"        assertEquals(new ModelManager(addressBook, userPrefs), modelManager);"},{"lineNumber":47,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":49,"author":{"gitID":"jordancjq"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"jordancjq"},"content":"    public void deleteTag_tagUsedByMultiplePersons_tagRemoved() throws Exception {"},{"lineNumber":51,"author":{"gitID":"jordancjq"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":55,"author":{"gitID":"jordancjq"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":56,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":57,"author":{"gitID":"jordancjq"},"content":"        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":58,"author":{"gitID":"jordancjq"},"content":"        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":59,"author":{"gitID":"jordancjq"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(amyWithoutFriendTag)"},{"lineNumber":60,"author":{"gitID":"jordancjq"},"content":"            .withPerson(bobWithoutFriendTag).build();"},{"lineNumber":61,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":62,"author":{"gitID":"jordancjq"},"content":"        assertEquals(new ModelManager(expectedAddressBook, userPrefs), modelManager);"},{"lineNumber":63,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        differentUserPrefs.setAddressBookName(\"differentName\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jordancjq":30,"-":71}},{"path":"src/test/java/seedu/address/testutil/TeamBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":5,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.Team;"},{"lineNumber":6,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * A utility class to help with building a TeamList."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class TeamBuilder {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TEAMNAME_ONE \u003d \"Arsenal\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TEAMNAME_TWO \u003d \"Chelsea\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private ObservableList\u003cTeam\u003e teams;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private Team teamOne;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private Team teamTwo;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private TeamName teamNameOne;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private TeamName teamNameTwo;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public TeamBuilder() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        teams \u003d FXCollections.observableArrayList();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        teamNameOne \u003d new TeamName(DEFAULT_TEAMNAME_ONE);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        teamNameTwo \u003d new TeamName(DEFAULT_TEAMNAME_TWO);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        teamOne \u003d new Team(teamNameOne);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        teamTwo \u003d new Team(teamNameTwo);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        teams.add(teamOne);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        teams.add(teamTwo);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTeam\u003e build() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return teams;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jordancjq":2,"-":39}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_JERSEY_NUMBER;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_POSITION;"},{"lineNumber":9,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A utility class for Person."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":36,"author":{"gitID":"lithiumlkid"},"content":"        sb.append(PREFIX_RATING + person.getRating().value + \" \");"},{"lineNumber":37,"author":{"gitID":"lithiumlkid"},"content":"        sb.append(PREFIX_POSITION + person.getPosition().value + \" \");"},{"lineNumber":38,"author":{"gitID":"lithiumlkid"},"content":"        sb.append(PREFIX_JERSEY_NUMBER + person.getJerseyNumber().value + \" \");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":40,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"lithiumlkid":6,"-":38}},{"path":"src/test/java/seedu/address/model/UniqueTeamListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.UniqueTeamList;"},{"lineNumber":8,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":9,"author":{"gitID":"jordancjq"},"content":"public class UniqueTeamListTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":15,"author":{"gitID":"jordancjq"},"content":"        UniqueTeamList uniqueTagList \u003d new UniqueTeamList();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        uniqueTagList.asObservableList().remove(0);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jordancjq":4,"-":15}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":13,"author":{"gitID":"jordancjq"},"content":"    public static final Index INDEX_FIRST_TEAM \u003d Index.fromOneBased(1);"},{"lineNumber":14,"author":{"gitID":"jordancjq"},"content":"    public static final Index INDEX_SECOND_TEAM \u003d Index.fromOneBased(2);"},{"lineNumber":15,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jordancjq":3,"-":12}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":8,"author":{"gitID":"lithiumlkid"},"content":"import seedu.address.model.person.JerseyNumber;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":12,"author":{"gitID":"lithiumlkid"},"content":"import seedu.address.model.person.Position;"},{"lineNumber":13,"author":{"gitID":"lithiumlkid"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":14,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":28,"author":{"gitID":"jordancjq"},"content":"    public static final String DEFAULT_REMARK \u003d \"\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":30,"author":{"gitID":"jordancjq"},"content":"    public static final String DEFAULT_TEAMNAME \u003d \"\u003cUNSPECIFIED\u003e\";"},{"lineNumber":31,"author":{"gitID":"lithiumlkid"},"content":"    public static final String DEFAULT_RATING \u003d \"5\";"},{"lineNumber":32,"author":{"gitID":"lithiumlkid"},"content":"    public static final String DEFAULT_POSITION \u003d \"1\";"},{"lineNumber":33,"author":{"gitID":"lithiumlkid"},"content":"    public static final String DEFAULT_JERSEY_NUMBER \u003d \"17\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":39,"author":{"gitID":"jordancjq"},"content":"    private Remark remark;"},{"lineNumber":40,"author":{"gitID":"jordancjq"},"content":"    private TeamName teamName;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":42,"author":{"gitID":"lithiumlkid"},"content":"    private Rating rating;"},{"lineNumber":43,"author":{"gitID":"lithiumlkid"},"content":"    private Position position;"},{"lineNumber":44,"author":{"gitID":"lithiumlkid"},"content":"    private JerseyNumber jerseyNumber;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":51,"author":{"gitID":"jordancjq"},"content":"        remark \u003d new Remark(DEFAULT_REMARK);"},{"lineNumber":52,"author":{"gitID":"jordancjq"},"content":"        teamName \u003d new TeamName(DEFAULT_TEAMNAME);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":54,"author":{"gitID":"lithiumlkid"},"content":"        rating \u003d new Rating(DEFAULT_RATING);"},{"lineNumber":55,"author":{"gitID":"lithiumlkid"},"content":"        position \u003d new Position(DEFAULT_POSITION);"},{"lineNumber":56,"author":{"gitID":"lithiumlkid"},"content":"        jerseyNumber \u003d new JerseyNumber(DEFAULT_JERSEY_NUMBER);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":67,"author":{"gitID":"jordancjq"},"content":"        remark \u003d personToCopy.getRemark();"},{"lineNumber":68,"author":{"gitID":"jordancjq"},"content":"        teamName \u003d personToCopy.getTeamName();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":70,"author":{"gitID":"lithiumlkid"},"content":"        rating \u003d personToCopy.getRating();"},{"lineNumber":71,"author":{"gitID":"lithiumlkid"},"content":"        position \u003d personToCopy.getPosition();"},{"lineNumber":72,"author":{"gitID":"lithiumlkid"},"content":"        jerseyNumber \u003d personToCopy.getJerseyNumber();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"jordancjq"},"content":"     * Sets the {@code Remark} of the {@code Person} that we are building."},{"lineNumber":117,"author":{"gitID":"jordancjq"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"jordancjq"},"content":"    public PersonBuilder withRemark(String remark) {"},{"lineNumber":119,"author":{"gitID":"jordancjq"},"content":"        this.remark \u003d new Remark(remark);"},{"lineNumber":120,"author":{"gitID":"jordancjq"},"content":"        return this;"},{"lineNumber":121,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":123,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"jordancjq"},"content":"     * Sets the {@code TeamName} of the {@code Person} that we are building."},{"lineNumber":125,"author":{"gitID":"jordancjq"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"jordancjq"},"content":"    public PersonBuilder withTeamName(String teamName) {"},{"lineNumber":127,"author":{"gitID":"jordancjq"},"content":"        this.teamName \u003d new TeamName(teamName);"},{"lineNumber":128,"author":{"gitID":"jordancjq"},"content":"        return this;"},{"lineNumber":129,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":131,"author":{"gitID":"lithiumlkid"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"lithiumlkid"},"content":"     * Sets the {@code Rating} of the {@code Person} that we are building."},{"lineNumber":133,"author":{"gitID":"lithiumlkid"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"lithiumlkid"},"content":"    public PersonBuilder withRating(String rating) {"},{"lineNumber":135,"author":{"gitID":"lithiumlkid"},"content":"        this.rating \u003d new Rating(rating);"},{"lineNumber":136,"author":{"gitID":"lithiumlkid"},"content":"        return this;"},{"lineNumber":137,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":139,"author":{"gitID":"lithiumlkid"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"lithiumlkid"},"content":"     * Sets the {@code Position} of the {@code Person} that we are building."},{"lineNumber":141,"author":{"gitID":"lithiumlkid"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"lithiumlkid"},"content":"    public PersonBuilder withPosition(String position) {"},{"lineNumber":143,"author":{"gitID":"lithiumlkid"},"content":"        this.position \u003d new Position(position);"},{"lineNumber":144,"author":{"gitID":"lithiumlkid"},"content":"        return this;"},{"lineNumber":145,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":147,"author":{"gitID":"lithiumlkid"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"lithiumlkid"},"content":"     * Sets the {@code JerseyNumber} of the {@code Person} that we are building."},{"lineNumber":149,"author":{"gitID":"lithiumlkid"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"lithiumlkid"},"content":"    public PersonBuilder withJerseyNumber(String jerseyNumber) {"},{"lineNumber":151,"author":{"gitID":"lithiumlkid"},"content":"        this.jerseyNumber \u003d new JerseyNumber(jerseyNumber);"},{"lineNumber":152,"author":{"gitID":"lithiumlkid"},"content":"        return this;"},{"lineNumber":153,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":156,"author":{"gitID":"lithiumlkid"},"content":"        return new Person(name, phone, email, address, remark, teamName, tags, rating, position, jerseyNumber);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"lithiumlkid":40,"jordancjq":26,"-":93}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_JERSEY_NUMBER_17;"},{"lineNumber":8,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_JERSEY_NUMBER_2;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":13,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_POSITION_MIDFIELD;"},{"lineNumber":14,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_POSITION_STRIKER;"},{"lineNumber":15,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_0;"},{"lineNumber":16,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_1;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":36,"author":{"gitID":"lithiumlkid"},"content":"            .withPhone(\"85355255\").withTags(\"friends\").withRating(\"0\")"},{"lineNumber":37,"author":{"gitID":"lithiumlkid"},"content":"            .withPosition(\"1\").withJerseyNumber(\"1\").build();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":41,"author":{"gitID":"lithiumlkid"},"content":"            .withTags(\"owesMoney\", \"friends\").withRating(\"1\")"},{"lineNumber":42,"author":{"gitID":"lithiumlkid"},"content":"            .withPosition(\"2\").withJerseyNumber(\"2\").build();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":44,"author":{"gitID":"lithiumlkid"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withRating(\"2\")"},{"lineNumber":45,"author":{"gitID":"lithiumlkid"},"content":"            .withPosition(\"3\").withJerseyNumber(\"3\").build();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":47,"author":{"gitID":"lithiumlkid"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withRating(\"3\")"},{"lineNumber":48,"author":{"gitID":"lithiumlkid"},"content":"            .withPosition(\"4\").withJerseyNumber(\"4\").build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":50,"author":{"gitID":"lithiumlkid"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withRating(\"4\")"},{"lineNumber":51,"author":{"gitID":"lithiumlkid"},"content":"            .withPosition(\"1\").withJerseyNumber(\"5\").build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":53,"author":{"gitID":"lithiumlkid"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withRating(\"5\")"},{"lineNumber":54,"author":{"gitID":"lithiumlkid"},"content":"            .withPosition(\"2\").withJerseyNumber(\"6\").build();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":56,"author":{"gitID":"lithiumlkid"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withRemark(\"Could be famous\").withRating(\"0\")"},{"lineNumber":57,"author":{"gitID":"lithiumlkid"},"content":"            .withPosition(\"3\").withJerseyNumber(\"7\").build();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":67,"author":{"gitID":"lithiumlkid"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withRating(VALID_RATING_0)"},{"lineNumber":68,"author":{"gitID":"lithiumlkid"},"content":"            .withPosition(VALID_POSITION_STRIKER).withJerseyNumber(VALID_JERSEY_NUMBER_2)"},{"lineNumber":69,"author":{"gitID":"lithiumlkid"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":71,"author":{"gitID":"lithiumlkid"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withRating(VALID_RATING_1)"},{"lineNumber":72,"author":{"gitID":"lithiumlkid"},"content":"            .withPosition(VALID_POSITION_MIDFIELD).withJerseyNumber(VALID_JERSEY_NUMBER_17)"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersonsSortedByAddress() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(DANIEL, ALICE, BENSON, GEORGE, FIONA, ELLE, CARL));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersonsSortedByEmail() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, GEORGE, DANIEL, CARL, BENSON, FIONA, ELLE));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersonsSortedByPhone() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, DANIEL, ELLE, FIONA, GEORGE, CARL, BENSON));"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public static AddressBook getSortedAddressBook(String field, String order) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e personList;"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        switch(field) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        case \"name\":"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            personList \u003d getTypicalPersons();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        case \"phone\":"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            personList \u003d getTypicalPersonsSortedByPhone();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        case \"email\":"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            personList \u003d getTypicalPersonsSortedByEmail();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        case \"address\":"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            personList \u003d getTypicalPersonsSortedByAddress();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            personList \u003d getTypicalPersons();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        if (order.equals(\"desc\")) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            Collections.reverse(personList);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        for (Person person : personList) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                assert false : \"not possible\";"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public static AddressBook getEmptyAddressBook() {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"lithiumlkid":25,"-":125}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":19,"author":{"gitID":"jordancjq"},"content":"    private static final String REMARK_FIELD_ID \u003d \"#remark\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Label addressLabel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":27,"author":{"gitID":"jordancjq"},"content":"    private final Label remarkLabel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"jordancjq"},"content":"        this.remarkLabel \u003d getChildNode(REMARK_FIELD_ID);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public String getAddress() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return addressLabel.getText();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"jordancjq"},"content":"    public String getRemark() {"},{"lineNumber":69,"author":{"gitID":"jordancjq"},"content":"        return remarkLabel.getText();"},{"lineNumber":70,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTagStyleClasses(String tag) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                .filter(label -\u003e label.getText().equals(tag))"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                .map(Label::getStyleClass)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                .findFirst()"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag.\"));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jordancjq":7,"-":80}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"lithiumlkid"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"lithiumlkid"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"lithiumlkid"},"content":"import javafx.geometry.Side;"},{"lineNumber":10,"author":{"gitID":"lithiumlkid"},"content":"import javafx.scene.control.ContextMenu;"},{"lineNumber":11,"author":{"gitID":"lithiumlkid"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":20,"author":{"gitID":"lithiumlkid"},"content":"import seedu.address.logic.commands.CommandTrie;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"lithiumlkid"},"content":"    private CommandTrie commandTrie;"},{"lineNumber":33,"author":{"gitID":"lithiumlkid"},"content":"    private Set\u003cString\u003e commandSet;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":37,"author":{"gitID":"lithiumlkid"},"content":"    private final ContextMenu suggestions;"},{"lineNumber":38,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"lithiumlkid"},"content":"    CommandBox(Logic logic) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":46,"author":{"gitID":"lithiumlkid"},"content":"        commandTrie \u003d logic.getCommandTrie();"},{"lineNumber":47,"author":{"gitID":"lithiumlkid"},"content":"        commandSet \u003d commandTrie.getCommandSet();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":49,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":51,"author":{"gitID":"lithiumlkid"},"content":"        suggestions \u003d new ContextMenu();"},{"lineNumber":52,"author":{"gitID":"lithiumlkid"},"content":"        commandTextField.setContextMenu(suggestions);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":72,"author":{"gitID":"lithiumlkid"},"content":"        case TAB:"},{"lineNumber":73,"author":{"gitID":"lithiumlkid"},"content":"            keyEvent.consume();"},{"lineNumber":74,"author":{"gitID":"lithiumlkid"},"content":"            handleAutoComplete();"},{"lineNumber":75,"author":{"gitID":"lithiumlkid"},"content":"            break;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":77,"author":{"gitID":"lithiumlkid"},"content":"            if (suggestions.isShowing()) {"},{"lineNumber":78,"author":{"gitID":"lithiumlkid"},"content":"                suggestions.hide();"},{"lineNumber":79,"author":{"gitID":"lithiumlkid"},"content":"            }"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(e.getMessage()));"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":149,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"lithiumlkid"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"lithiumlkid"},"content":"     * Handles the Tab button pressed event. Attempts to autocomplete current input."},{"lineNumber":174,"author":{"gitID":"lithiumlkid"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"lithiumlkid"},"content":"    private void handleAutoComplete() {"},{"lineNumber":176,"author":{"gitID":"lithiumlkid"},"content":"        String input \u003d commandTextField.getText();"},{"lineNumber":177,"author":{"gitID":"lithiumlkid"},"content":"        try {"},{"lineNumber":178,"author":{"gitID":"lithiumlkid"},"content":"            String command \u003d commandTrie.attemptAutoComplete(input);"},{"lineNumber":179,"author":{"gitID":"lithiumlkid"},"content":"            if (input.equals(command)) {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                setStyleToIndicateCommandFailure();"},{"lineNumber":181,"author":{"gitID":"lithiumlkid"},"content":"                showSuggestions(commandTrie.getOptions(input));"},{"lineNumber":182,"author":{"gitID":"lithiumlkid"},"content":"            } else if (commandSet.contains(command)) {"},{"lineNumber":183,"author":{"gitID":"lithiumlkid"},"content":"                this.replaceText(command);"},{"lineNumber":184,"author":{"gitID":"lithiumlkid"},"content":"            } else if (commandSet.contains(input)) {"},{"lineNumber":185,"author":{"gitID":"lithiumlkid"},"content":"                this.replaceText(input + command);"},{"lineNumber":186,"author":{"gitID":"lithiumlkid"},"content":"            }"},{"lineNumber":187,"author":{"gitID":"lithiumlkid"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":189,"author":{"gitID":"lithiumlkid"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":192,"author":{"gitID":"lithiumlkid"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"lithiumlkid"},"content":"     * Populates ContextMenu and shows it to user"},{"lineNumber":194,"author":{"gitID":"lithiumlkid"},"content":"     * @param options the options with matching prefix found in Command Trie"},{"lineNumber":195,"author":{"gitID":"lithiumlkid"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"lithiumlkid"},"content":"    private void showSuggestions(List\u003cString\u003e options) {"},{"lineNumber":197,"author":{"gitID":"lithiumlkid"},"content":"        suggestions.getItems().clear();"},{"lineNumber":198,"author":{"gitID":"lithiumlkid"},"content":"        for (String option : options) {"},{"lineNumber":199,"author":{"gitID":"lithiumlkid"},"content":"            MenuItem item \u003d new MenuItem(option);"},{"lineNumber":200,"author":{"gitID":"lithiumlkid"},"content":"            item.setOnAction(event -\u003e replaceText(item.getText()));"},{"lineNumber":201,"author":{"gitID":"lithiumlkid"},"content":"            suggestions.getItems().add(item);"},{"lineNumber":202,"author":{"gitID":"lithiumlkid"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"lithiumlkid"},"content":"        suggestions.show(commandTextField, Side.BOTTOM, 0.0, 0.0);"},{"lineNumber":204,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"lithiumlkid":53,"-":152}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"jordancjq"},"content":"    private Label remark;"},{"lineNumber":41,"author":{"gitID":"jordancjq"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"jordancjq"},"content":"    private Label teamName;"},{"lineNumber":43,"author":{"gitID":"jordancjq"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":45,"author":{"gitID":"lithiumlkid"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"lithiumlkid"},"content":"    private Label rating;"},{"lineNumber":47,"author":{"gitID":"lithiumlkid"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"lithiumlkid"},"content":"    private Label position;"},{"lineNumber":49,"author":{"gitID":"lithiumlkid"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"lithiumlkid"},"content":"    private Label jerseyNumber;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":59,"author":{"gitID":"jordancjq"},"content":"        remark.setText(person.getRemark().value);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":61,"author":{"gitID":"jordancjq"},"content":"        teamName.setText(person.getTeamName().fullName);"},{"lineNumber":62,"author":{"gitID":"lithiumlkid"},"content":"        rating.setText(person.getRating().value);"},{"lineNumber":63,"author":{"gitID":"lithiumlkid"},"content":"        position.setText(person.getPosition().getPositionName());"},{"lineNumber":64,"author":{"gitID":"lithiumlkid"},"content":"        jerseyNumber.setText(person.getJerseyNumber().value);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        initTags(person);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Creates the tag labels for {@code person}."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private void initTags(Person person) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            Label tagLabel \u003d new Label(tag.getTagName());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            tagLabel.getStyleClass().add(tag.getTagColour());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"lithiumlkid":9,"jordancjq":6,"-":81}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":12,"author":{"gitID":"jordancjq"},"content":"    public static final String MESSAGE_TEAM_NOT_FOUND \u003d \"Team does not exist or is not specified!\";"},{"lineNumber":13,"author":{"gitID":"jordancjq"},"content":"    public static final String MESSAGE_INVALID_ALL_INDEX \u003d \"All person index provided is invalid\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jordancjq":2,"-":13}},{"path":"src/test/java/seedu/address/testutil/TypicalTeams.java","lines":[{"lineNumber":1,"author":{"gitID":"jordancjq"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":3,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TEAM_ARSENAL;"},{"lineNumber":4,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TEAM_BARCELONA;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":11,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.Team;"},{"lineNumber":12,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":13,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.exceptions.DuplicateTeamException;"},{"lineNumber":14,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":15,"author":{"gitID":"jordancjq"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"jordancjq"},"content":" * A utility class containing a list of {@code Team} objects to be used in tests."},{"lineNumber":17,"author":{"gitID":"jordancjq"},"content":" */"},{"lineNumber":18,"author":{"gitID":"jordancjq"},"content":"public class TypicalTeams {"},{"lineNumber":19,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":20,"author":{"gitID":"jordancjq"},"content":"    public static final Team CHELSEA \u003d new Team(new TeamName(\"Chelsea\"));"},{"lineNumber":21,"author":{"gitID":"jordancjq"},"content":"    public static final Team LIVERPOOL \u003d new Team(new TeamName(\"Liverpool\"));"},{"lineNumber":22,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":23,"author":{"gitID":"jordancjq"},"content":"    // Manually added - Team\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":24,"author":{"gitID":"jordancjq"},"content":"    public static final Team ARSENAL \u003d new Team(new TeamName(VALID_TEAM_ARSENAL));"},{"lineNumber":25,"author":{"gitID":"jordancjq"},"content":"    public static final Team BARCELONA \u003d new Team(new TeamName(VALID_TEAM_BARCELONA));"},{"lineNumber":26,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":27,"author":{"gitID":"jordancjq"},"content":"    private TypicalTeams() {} // prevents instantiation"},{"lineNumber":28,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":29,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"jordancjq"},"content":"     * Returns an {@code AddressBook} with all the typical teams."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":34,"author":{"gitID":"jordancjq"},"content":"        for (Team team : getTypicalTeams()) {"},{"lineNumber":35,"author":{"gitID":"jordancjq"},"content":"            try {"},{"lineNumber":36,"author":{"gitID":"jordancjq"},"content":"                ab.createTeam(team);"},{"lineNumber":37,"author":{"gitID":"jordancjq"},"content":"            } catch (DuplicateTeamException e) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"jordancjq"},"content":"    public static List\u003cTeam\u003e getTypicalTeams() {"},{"lineNumber":45,"author":{"gitID":"jordancjq"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(CHELSEA, LIVERPOOL));"},{"lineNumber":46,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"jordancjq"},"content":"}"}],"authorContributionMap":{"jordancjq":32,"-":15}},{"path":"src/main/java/seedu/address/commons/events/model/AddressBookChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/** Indicates the AddressBook in the model has changed*/"},{"lineNumber":7,"author":{"gitID":"-"},"content":"public class AddressBookChangedEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public final ReadOnlyAddressBook data;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public AddressBookChangedEvent(ReadOnlyAddressBook data) {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        this.data \u003d data;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"jordancjq"},"content":"        return \"number of persons \" + data.getPersonList().size()"},{"lineNumber":18,"author":{"gitID":"jordancjq"},"content":"                + \", number of tags \" + data.getTagList().size()"},{"lineNumber":19,"author":{"gitID":"jordancjq"},"content":"                + \", number of teams \" + data.getTeamList().size();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jordancjq":3,"-":18}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"lithiumlkid"},"content":"import seedu.address.logic.commands.CommandTrie;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.team.Team;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of list of teams */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    ObservableList\u003cTeam\u003e getInitTeamList();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":32,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":33,"author":{"gitID":"lithiumlkid"},"content":"    /** Returns the command trie. */"},{"lineNumber":34,"author":{"gitID":"lithiumlkid"},"content":"    CommandTrie getCommandTrie();"},{"lineNumber":35,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"lithiumlkid":5,"-":31}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_JERSEY_NUMBER;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_POSITION;"},{"lineNumber":10,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TEAMNAME;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":22,"author":{"gitID":"lithiumlkid"},"content":"import seedu.address.model.person.JerseyNumber;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":26,"author":{"gitID":"lithiumlkid"},"content":"import seedu.address.model.person.Position;"},{"lineNumber":27,"author":{"gitID":"lithiumlkid"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":28,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":44,"author":{"gitID":"jordancjq"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":45,"author":{"gitID":"lithiumlkid"},"content":"                        PREFIX_TEAMNAME, PREFIX_TAG, PREFIX_JERSEY_NUMBER, PREFIX_POSITION, PREFIX_RATING);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"jordancjq"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_EMAIL)"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":54,"author":{"gitID":"jordancjq"},"content":"            Phone phone \u003d ParserUtil.parsePhone(ParserUtil.parseValue(argMultimap.getValue(PREFIX_PHONE),"},{"lineNumber":55,"author":{"gitID":"jordancjq"},"content":"                    Phone.MESSAGE_PHONE_CONSTRAINTS)).get();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":57,"author":{"gitID":"jordancjq"},"content":"            Address address \u003d ParserUtil.parseAddress(ParserUtil.parseValue(argMultimap"},{"lineNumber":58,"author":{"gitID":"jordancjq"},"content":"                    .getValue(PREFIX_ADDRESS), Address.MESSAGE_ADDRESS_CONSTRAINTS)).get();"},{"lineNumber":59,"author":{"gitID":"jordancjq"},"content":"            Remark remark \u003d new Remark(\"\");"},{"lineNumber":60,"author":{"gitID":"jordancjq"},"content":"            TeamName teamName \u003d ParserUtil.parseTeamName(ParserUtil.parseValue(argMultimap.getValue(PREFIX_TEAMNAME),"},{"lineNumber":61,"author":{"gitID":"jordancjq"},"content":"                    TeamName.MESSAGE_TEAM_NAME_CONSTRAINTS)).get();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":63,"author":{"gitID":"jordancjq"},"content":"            Rating rating \u003d ParserUtil.parseRating(ParserUtil.parseValue(argMultimap.getValue(PREFIX_RATING),"},{"lineNumber":64,"author":{"gitID":"jordancjq"},"content":"                    Rating.MESSAGE_RATING_CONSTRAINTS)).get();"},{"lineNumber":65,"author":{"gitID":"lithiumlkid"},"content":"            Position position \u003d ParserUtil.parsePosition(ParserUtil.parseValue(argMultimap"},{"lineNumber":66,"author":{"gitID":"jordancjq"},"content":"                    .getValue(PREFIX_POSITION), Position.MESSAGE_POSITION_CONSTRAINTS)).get();"},{"lineNumber":67,"author":{"gitID":"lithiumlkid"},"content":"            JerseyNumber jerseyNumber \u003d ParserUtil.parseJerseyNumber(ParserUtil.parseValue(argMultimap"},{"lineNumber":68,"author":{"gitID":"jordancjq"},"content":"                    .getValue(PREFIX_JERSEY_NUMBER), JerseyNumber.MESSAGE_JERSEY_NUMBER_CONSTRAINTS)).get();"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"lithiumlkid"},"content":"            Person person \u003d new Person(name, phone, email, address, remark, teamName, tagList, rating, position,"},{"lineNumber":71,"author":{"gitID":"lithiumlkid"},"content":"                    jerseyNumber);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"lithiumlkid":11,"jordancjq":16,"-":60}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"jordancjq"},"content":"import seedu.address.logic.commands.AssignCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":13,"author":{"gitID":"jordancjq"},"content":"import seedu.address.logic.commands.CreateCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":22,"author":{"gitID":"jordancjq"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":23,"author":{"gitID":"jordancjq"},"content":"import seedu.address.logic.commands.RemoveCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SetCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":28,"author":{"gitID":"jordancjq"},"content":"import seedu.address.logic.commands.ViewCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_ALIAS:"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_ALIAS:"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_ALIAS:"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"jordancjq"},"content":"        case RemarkCommand.COMMAND_WORD:"},{"lineNumber":83,"author":{"gitID":"jordancjq"},"content":"        case RemarkCommand.COMMAND_ALIAS:"},{"lineNumber":84,"author":{"gitID":"jordancjq"},"content":"            return new RemarkCommandParser().parse(arguments);"},{"lineNumber":85,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_ALIAS:"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"jordancjq"},"content":"        case CreateCommand.COMMAND_WORD:"},{"lineNumber":95,"author":{"gitID":"jordancjq"},"content":"        case CreateCommand.COMMAND_ALIAS:"},{"lineNumber":96,"author":{"gitID":"jordancjq"},"content":"            return new CreateCommandParser().parse(arguments);"},{"lineNumber":97,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":98,"author":{"gitID":"jordancjq"},"content":"        case RemoveCommand.COMMAND_WORD:"},{"lineNumber":99,"author":{"gitID":"jordancjq"},"content":"        case RemoveCommand.COMMAND_ALIAS:"},{"lineNumber":100,"author":{"gitID":"jordancjq"},"content":"            return new RemoveCommandParser().parse(arguments);"},{"lineNumber":101,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":102,"author":{"gitID":"jordancjq"},"content":"        case AssignCommand.COMMAND_WORD:"},{"lineNumber":103,"author":{"gitID":"jordancjq"},"content":"        case AssignCommand.COMMAND_ALIAS:"},{"lineNumber":104,"author":{"gitID":"jordancjq"},"content":"            return new AssignCommandParser().parse(arguments);"},{"lineNumber":105,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":106,"author":{"gitID":"jordancjq"},"content":"        case ViewCommand.COMMAND_WORD:"},{"lineNumber":107,"author":{"gitID":"jordancjq"},"content":"        case ViewCommand.COMMAND_ALIAS:"},{"lineNumber":108,"author":{"gitID":"jordancjq"},"content":"            return new ViewCommandParser().parse(arguments);"},{"lineNumber":109,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_ALIAS:"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_ALIAS:"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        case SetCommand.COMMAND_WORD:"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        case SetCommand.COMMAND_ALIAS:"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            return new SetCommandParser().parse(arguments);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        case SortCommand.COMMAND_WORD:"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        case SortCommand.COMMAND_ALIAS:"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            return new SortCommandParser().parse(arguments);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jordancjq":25,"-":112}},{"path":"src/main/java/seedu/address/logic/parser/RemarkCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"jordancjq"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":3,"author":{"gitID":"jordancjq"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":6,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":7,"author":{"gitID":"jordancjq"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"jordancjq"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"jordancjq"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":12,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":13,"author":{"gitID":"jordancjq"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"jordancjq"},"content":" * Parses input arguments and creates a new RemarkCommand object"},{"lineNumber":15,"author":{"gitID":"jordancjq"},"content":" */"},{"lineNumber":16,"author":{"gitID":"jordancjq"},"content":"public class RemarkCommandParser implements Parser\u003cRemarkCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":18,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"jordancjq"},"content":"     * Parses the given {@code String} of arguments in the context of the RemarkCommand"},{"lineNumber":20,"author":{"gitID":"jordancjq"},"content":"     * and returns an RemarkCommand object for execution."},{"lineNumber":21,"author":{"gitID":"jordancjq"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitID":"jordancjq"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"jordancjq"},"content":"    public RemarkCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"jordancjq"},"content":"        requireNonNull(args);"},{"lineNumber":25,"author":{"gitID":"jordancjq"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_REMARK);"},{"lineNumber":26,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":27,"author":{"gitID":"jordancjq"},"content":"        Index index;"},{"lineNumber":28,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":29,"author":{"gitID":"jordancjq"},"content":"        try {"},{"lineNumber":30,"author":{"gitID":"jordancjq"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":31,"author":{"gitID":"jordancjq"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":32,"author":{"gitID":"jordancjq"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":35,"author":{"gitID":"jordancjq"},"content":"        String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"},{"lineNumber":36,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":37,"author":{"gitID":"jordancjq"},"content":"        return new RemarkCommand(index, new Remark(remark));"},{"lineNumber":38,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"jordancjq"},"content":"}"}],"authorContributionMap":{"jordancjq":38,"-":1}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"jordancjq"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"jordancjq"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":9,"author":{"gitID":"jordancjq"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitID":"lithiumlkid"},"content":"import seedu.address.model.person.JerseyNumber;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":21,"author":{"gitID":"lithiumlkid"},"content":"import seedu.address.model.person.Position;"},{"lineNumber":22,"author":{"gitID":"lithiumlkid"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":28,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":39,"author":{"gitID":"jordancjq"},"content":"    public static final String MESSAGE_INVALID_INPUT \u003d \"You have entered an invalid input.\";"},{"lineNumber":40,"author":{"gitID":"jordancjq"},"content":"    public static final String UNSPECIFIED_FIELD \u003d \"\u003cUNSPECIFIED\u003e\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"jordancjq"},"content":"     * Parses {@code String oneBasedIndexes} into a {@code List\u003cIndex\u003e} and returns it. Leading and trailing"},{"lineNumber":57,"author":{"gitID":"jordancjq"},"content":"     * whitespaces will be trimmed."},{"lineNumber":58,"author":{"gitID":"jordancjq"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"jordancjq"},"content":"    public static List\u003cIndex\u003e parseIndexes(String oneBasedIndexes) throws IllegalValueException {"},{"lineNumber":60,"author":{"gitID":"jordancjq"},"content":"        String trimmedIndexes \u003d oneBasedIndexes.trim();"},{"lineNumber":61,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":62,"author":{"gitID":"jordancjq"},"content":"        String[] splitOneBasedIndexes \u003d trimmedIndexes.split(\"\\\\s+\");"},{"lineNumber":63,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":64,"author":{"gitID":"jordancjq"},"content":"        Set\u003cString\u003e uniqueIndexes \u003d new HashSet\u003c\u003e(Arrays.asList(splitOneBasedIndexes));"},{"lineNumber":65,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":66,"author":{"gitID":"jordancjq"},"content":"        List\u003cIndex\u003e indexList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":67,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":68,"author":{"gitID":"jordancjq"},"content":"        for (String index : uniqueIndexes) {"},{"lineNumber":69,"author":{"gitID":"jordancjq"},"content":"            indexList.add(parseIndex(index));"},{"lineNumber":70,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":72,"author":{"gitID":"jordancjq"},"content":"        return indexList;"},{"lineNumber":73,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":174,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":198,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"jordancjq"},"content":"     * Parses {@code String teamName} into an {@code TeamName}."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":201,"author":{"gitID":"jordancjq"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"jordancjq"},"content":"    public static TeamName parseTeamName(String teamName) throws IllegalValueException {"},{"lineNumber":203,"author":{"gitID":"jordancjq"},"content":"        requireNonNull(teamName);"},{"lineNumber":204,"author":{"gitID":"jordancjq"},"content":"        String trimmedTeamName \u003d teamName.trim();"},{"lineNumber":205,"author":{"gitID":"jordancjq"},"content":"        if (!TeamName.isValidName(trimmedTeamName)) {"},{"lineNumber":206,"author":{"gitID":"jordancjq"},"content":"            throw new IllegalValueException(TeamName.MESSAGE_TEAM_NAME_CONSTRAINTS);"},{"lineNumber":207,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":209,"author":{"gitID":"jordancjq"},"content":"        return new TeamName(trimmedTeamName);"},{"lineNumber":210,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":212,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":213,"author":{"gitID":"jordancjq"},"content":"     * Parses a {@code Optional\u003cString\u003e teamName} into an {@code Optional\u003cTeamName\u003e} if {@code teamName} is present."},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":215,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"jordancjq"},"content":"    public static Optional\u003cTeamName\u003e parseTeamName(Optional\u003cString\u003e teamName) throws IllegalValueException {"},{"lineNumber":217,"author":{"gitID":"jordancjq"},"content":"        requireNonNull(teamName);"},{"lineNumber":218,"author":{"gitID":"jordancjq"},"content":"        return teamName.isPresent() ? Optional.of(parseTeamName(teamName.get())) : Optional.empty();"},{"lineNumber":219,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":221,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":222,"author":{"gitID":"jordancjq"},"content":"     * Parses a {@code Optional\u003cString\u003e value} into the specified value or {@code UNSPECIFIED_FIELD} if is empty"},{"lineNumber":223,"author":{"gitID":"jordancjq"},"content":"     */"},{"lineNumber":224,"author":{"gitID":"jordancjq"},"content":"    public static Optional\u003cString\u003e parseValue(Optional\u003cString\u003e value, String messageConstraints)"},{"lineNumber":225,"author":{"gitID":"jordancjq"},"content":"            throws IllegalValueException {"},{"lineNumber":226,"author":{"gitID":"jordancjq"},"content":"        if (value.isPresent() \u0026\u0026 value.get().equals(UNSPECIFIED_FIELD)) {"},{"lineNumber":227,"author":{"gitID":"jordancjq"},"content":"            throw new IllegalValueException(messageConstraints);"},{"lineNumber":228,"author":{"gitID":"jordancjq"},"content":"        } else {"},{"lineNumber":229,"author":{"gitID":"jordancjq"},"content":"            return Optional.of(value.orElse(UNSPECIFIED_FIELD));"},{"lineNumber":230,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * Parses a {@code String tagColour} into a {@code String ta}."},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":236,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":238,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    public static String parseTagColour(String tagColour) throws IllegalValueException {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        requireNonNull(tagColour);"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        String trimmedTagColour \u003d tagColour.trim();"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        if (!trimmedTagColour.getClass().equals(String.class) ||  (trimmedTagColour.contains(\" \"))) {"},{"lineNumber":243,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_COLOUR_CONSTRAINTS);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        return trimmedTagColour;"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":248,"author":{"gitID":"lithiumlkid"},"content":"    /**"},{"lineNumber":249,"author":{"gitID":"lithiumlkid"},"content":"     * Parses a {@code String rating} into a {@code Phone}."},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":251,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":252,"author":{"gitID":"lithiumlkid"},"content":"     * @throws IllegalValueException if the given {@code rating} is invalid."},{"lineNumber":253,"author":{"gitID":"lithiumlkid"},"content":"     */"},{"lineNumber":254,"author":{"gitID":"lithiumlkid"},"content":"    public static Rating parseRating(String rating) throws IllegalValueException {"},{"lineNumber":255,"author":{"gitID":"lithiumlkid"},"content":"        requireNonNull(rating);"},{"lineNumber":256,"author":{"gitID":"lithiumlkid"},"content":"        String trimmedRating \u003d rating.trim();"},{"lineNumber":257,"author":{"gitID":"lithiumlkid"},"content":"        if (!Rating.isValidRating(trimmedRating)) {"},{"lineNumber":258,"author":{"gitID":"lithiumlkid"},"content":"            throw new IllegalValueException(Rating.MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":259,"author":{"gitID":"lithiumlkid"},"content":"        }"},{"lineNumber":260,"author":{"gitID":"lithiumlkid"},"content":"        return new Rating(trimmedRating);"},{"lineNumber":261,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":263,"author":{"gitID":"lithiumlkid"},"content":"    /**"},{"lineNumber":264,"author":{"gitID":"lithiumlkid"},"content":"     * Parses a {@code Optional\u003cString\u003e rating} into an {@code Optional\u003cRating\u003e} if {@code rating} is present."},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":266,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":267,"author":{"gitID":"lithiumlkid"},"content":"    public static Optional\u003cRating\u003e parseRating(Optional\u003cString\u003e rating) throws IllegalValueException {"},{"lineNumber":268,"author":{"gitID":"lithiumlkid"},"content":"        requireNonNull(rating);"},{"lineNumber":269,"author":{"gitID":"lithiumlkid"},"content":"        return rating.isPresent() ? Optional.of(parseRating(rating.get())) : Optional.empty();"},{"lineNumber":270,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":272,"author":{"gitID":"lithiumlkid"},"content":"    /**"},{"lineNumber":273,"author":{"gitID":"lithiumlkid"},"content":"     * Parses a {@code String position} into a {@code Position}."},{"lineNumber":274,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":275,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":276,"author":{"gitID":"lithiumlkid"},"content":"     * @throws IllegalValueException if the given {@code position} is invalid."},{"lineNumber":277,"author":{"gitID":"lithiumlkid"},"content":"     */"},{"lineNumber":278,"author":{"gitID":"lithiumlkid"},"content":"    public static Position parsePosition(String position) throws IllegalValueException {"},{"lineNumber":279,"author":{"gitID":"lithiumlkid"},"content":"        requireNonNull(position);"},{"lineNumber":280,"author":{"gitID":"lithiumlkid"},"content":"        String trimmedPosition \u003d position.trim();"},{"lineNumber":281,"author":{"gitID":"lithiumlkid"},"content":"        if (!Position.isValidPosition(trimmedPosition)) {"},{"lineNumber":282,"author":{"gitID":"lithiumlkid"},"content":"            throw new IllegalValueException(Position.MESSAGE_POSITION_CONSTRAINTS);"},{"lineNumber":283,"author":{"gitID":"lithiumlkid"},"content":"        }"},{"lineNumber":284,"author":{"gitID":"lithiumlkid"},"content":"        return new Position(trimmedPosition);"},{"lineNumber":285,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":286,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":287,"author":{"gitID":"lithiumlkid"},"content":"    /**"},{"lineNumber":288,"author":{"gitID":"lithiumlkid"},"content":"     * Parses a {@code Optional\u003cString\u003e position} into an {@code Optional\u003cPosition\u003e} if {@code position} is present."},{"lineNumber":289,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":290,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":291,"author":{"gitID":"lithiumlkid"},"content":"    public static Optional\u003cPosition\u003e parsePosition(Optional\u003cString\u003e position) throws IllegalValueException {"},{"lineNumber":292,"author":{"gitID":"lithiumlkid"},"content":"        requireNonNull(position);"},{"lineNumber":293,"author":{"gitID":"lithiumlkid"},"content":"        return position.isPresent() ? Optional.of(parsePosition(position.get())) : Optional.empty();"},{"lineNumber":294,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":295,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":296,"author":{"gitID":"lithiumlkid"},"content":"    /**"},{"lineNumber":297,"author":{"gitID":"lithiumlkid"},"content":"     * Parses a {@code String jerseyNumber} into a {@code JerseyNumber}."},{"lineNumber":298,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":299,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":300,"author":{"gitID":"lithiumlkid"},"content":"     * @throws IllegalValueException if the given {@code jerseyNumber} is invalid."},{"lineNumber":301,"author":{"gitID":"lithiumlkid"},"content":"     */"},{"lineNumber":302,"author":{"gitID":"lithiumlkid"},"content":"    public static JerseyNumber parseJerseyNumber(String jerseyNumber) throws IllegalValueException {"},{"lineNumber":303,"author":{"gitID":"lithiumlkid"},"content":"        requireNonNull(jerseyNumber);"},{"lineNumber":304,"author":{"gitID":"lithiumlkid"},"content":"        String trimmedJerseyNumber \u003d jerseyNumber.trim();"},{"lineNumber":305,"author":{"gitID":"lithiumlkid"},"content":"        if (!JerseyNumber.isValidJerseyNumber(trimmedJerseyNumber)) {"},{"lineNumber":306,"author":{"gitID":"lithiumlkid"},"content":"            throw new IllegalValueException(JerseyNumber.MESSAGE_JERSEY_NUMBER_CONSTRAINTS);"},{"lineNumber":307,"author":{"gitID":"lithiumlkid"},"content":"        }"},{"lineNumber":308,"author":{"gitID":"lithiumlkid"},"content":"        return new JerseyNumber(trimmedJerseyNumber);"},{"lineNumber":309,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":310,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":311,"author":{"gitID":"lithiumlkid"},"content":"    /**"},{"lineNumber":312,"author":{"gitID":"lithiumlkid"},"content":"     * Parses a {@code Optional\u003cString\u003e jerseyNumber} into an {@code Optional\u003cJerseyNumber\u003e}"},{"lineNumber":313,"author":{"gitID":"lithiumlkid"},"content":"     * if {@code jerseyNumber} is present."},{"lineNumber":314,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":315,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":316,"author":{"gitID":"lithiumlkid"},"content":"    public static Optional\u003cJerseyNumber\u003e parseJerseyNumber(Optional\u003cString\u003e jerseyNumber) throws IllegalValueException {"},{"lineNumber":317,"author":{"gitID":"lithiumlkid"},"content":"        requireNonNull(jerseyNumber);"},{"lineNumber":318,"author":{"gitID":"lithiumlkid"},"content":"        return jerseyNumber.isPresent() ? Optional.of(parseJerseyNumber(jerseyNumber.get())) : Optional.empty();"},{"lineNumber":319,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":320,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"lithiumlkid":65,"jordancjq":58,"-":198}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":14,"author":{"gitID":"jordancjq"},"content":"    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG_COLOUR \u003d new Prefix(\"tc/\");"},{"lineNumber":16,"author":{"gitID":"jordancjq"},"content":"    public static final Prefix PREFIX_TEAMNAME \u003d new Prefix(\"at/\");"},{"lineNumber":17,"author":{"gitID":"jordancjq"},"content":"    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"},{"lineNumber":18,"author":{"gitID":"lithiumlkid"},"content":"    public static final Prefix PREFIX_RATING \u003d new Prefix(\"ra/\");"},{"lineNumber":19,"author":{"gitID":"lithiumlkid"},"content":"    public static final Prefix PREFIX_JERSEY_NUMBER \u003d new Prefix(\"j/\");"},{"lineNumber":20,"author":{"gitID":"lithiumlkid"},"content":"    public static final Prefix PREFIX_POSITION \u003d new Prefix(\"po/\");"},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"lithiumlkid":3,"jordancjq":3,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/RemoveCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"jordancjq"},"content":"import seedu.address.logic.commands.RemoveCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":9,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":10,"author":{"gitID":"jordancjq"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"jordancjq"},"content":" * Parses input arguments and creates a new RemoveCommand object"},{"lineNumber":12,"author":{"gitID":"jordancjq"},"content":" */"},{"lineNumber":13,"author":{"gitID":"jordancjq"},"content":"public class RemoveCommandParser implements Parser\u003cRemoveCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":15,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"jordancjq"},"content":"     * Parses the given {@code String} of arguments in the context of the RemoveComand"},{"lineNumber":17,"author":{"gitID":"jordancjq"},"content":"     * and returns a RemoveCommand object for execution."},{"lineNumber":18,"author":{"gitID":"jordancjq"},"content":"     * @throws ParseException if the user input des not conform to the expected format"},{"lineNumber":19,"author":{"gitID":"jordancjq"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"jordancjq"},"content":"    public RemoveCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"jordancjq"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"jordancjq"},"content":"            TeamName teamToRemove \u003d ParserUtil.parseTeamName(args);"},{"lineNumber":23,"author":{"gitID":"jordancjq"},"content":"            return new RemoveCommand(teamToRemove);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"jordancjq"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"jordancjq"},"content":"}"}],"authorContributionMap":{"jordancjq":21,"-":8}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_JERSEY_NUMBER;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_POSITION;"},{"lineNumber":11,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":39,"author":{"gitID":"lithiumlkid"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":40,"author":{"gitID":"lithiumlkid"},"content":"                        PREFIX_ADDRESS, PREFIX_TAG, PREFIX_RATING, PREFIX_POSITION, PREFIX_JERSEY_NUMBER);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":57,"author":{"gitID":"lithiumlkid"},"content":"            ParserUtil.parseRating(argMultimap.getValue(PREFIX_RATING)).ifPresent(editPersonDescriptor::setRating);"},{"lineNumber":58,"author":{"gitID":"lithiumlkid"},"content":"            ParserUtil.parsePosition(argMultimap.getValue(PREFIX_POSITION))"},{"lineNumber":59,"author":{"gitID":"lithiumlkid"},"content":"                    .ifPresent(editPersonDescriptor::setPosition);"},{"lineNumber":60,"author":{"gitID":"lithiumlkid"},"content":"            ParserUtil.parseJerseyNumber(argMultimap.getValue(PREFIX_JERSEY_NUMBER))"},{"lineNumber":61,"author":{"gitID":"lithiumlkid"},"content":"                    .ifPresent(editPersonDescriptor::setJerseyNumber);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"lithiumlkid":10,"-":78}},{"path":"src/main/java/seedu/address/logic/parser/AssignCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"jordancjq"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":3,"author":{"gitID":"jordancjq"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"},{"lineNumber":6,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TEAMNAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"jordancjq"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"jordancjq"},"content":"import java.util.stream.Stream;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"jordancjq"},"content":"import seedu.address.logic.commands.AssignCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":16,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":17,"author":{"gitID":"jordancjq"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"jordancjq"},"content":" * Parses input arguments and creates a new AssignCommand object"},{"lineNumber":19,"author":{"gitID":"jordancjq"},"content":" */"},{"lineNumber":20,"author":{"gitID":"jordancjq"},"content":"public class AssignCommandParser implements Parser\u003cAssignCommand\u003e {"},{"lineNumber":21,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":22,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"jordancjq"},"content":"     * Parses the given {@code String} of arguments in the context of the AssignCommand"},{"lineNumber":24,"author":{"gitID":"jordancjq"},"content":"     * and returns an AssignCommand object for execution."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"jordancjq"},"content":"    public AssignCommand parse(String args) throws ParseException {"},{"lineNumber":28,"author":{"gitID":"jordancjq"},"content":"        requireNonNull(args);"},{"lineNumber":29,"author":{"gitID":"jordancjq"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TEAMNAME, PREFIX_INDEX);"},{"lineNumber":30,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":31,"author":{"gitID":"jordancjq"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_TEAMNAME, PREFIX_INDEX)) {"},{"lineNumber":32,"author":{"gitID":"jordancjq"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":35,"author":{"gitID":"jordancjq"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"jordancjq"},"content":"            TeamName teamName \u003d ParserUtil.parseTeamName(argMultimap.getValue(PREFIX_TEAMNAME).get());"},{"lineNumber":37,"author":{"gitID":"jordancjq"},"content":"            List\u003cIndex\u003e indexList \u003d ParserUtil.parseIndexes(argMultimap.getValue(PREFIX_INDEX).get());"},{"lineNumber":38,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":39,"author":{"gitID":"jordancjq"},"content":"            return new AssignCommand(teamName, indexList);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"jordancjq"},"content":"}"}],"authorContributionMap":{"jordancjq":33,"-":19}},{"path":"src/main/java/seedu/address/logic/parser/CreateCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.parser.ParserUtil.UNSPECIFIED_FIELD;"},{"lineNumber":5,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.model.team.TeamName.MESSAGE_TEAM_NAME_CONSTRAINTS;"},{"lineNumber":6,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":7,"author":{"gitID":"jordancjq"},"content":"import seedu.address.logic.commands.CreateCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.Team;"},{"lineNumber":10,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":11,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":12,"author":{"gitID":"jordancjq"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"jordancjq"},"content":" * Parses input arguments and creates a new CreateCommand object"},{"lineNumber":14,"author":{"gitID":"jordancjq"},"content":" */"},{"lineNumber":15,"author":{"gitID":"jordancjq"},"content":"public class CreateCommandParser implements Parser\u003cCreateCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":17,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"jordancjq"},"content":"     * Parses the given {@code String} of arguments in the context of the CreateCommand"},{"lineNumber":19,"author":{"gitID":"jordancjq"},"content":"     * and returns an CreateCommand object for execution."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"jordancjq"},"content":"    public CreateCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"jordancjq"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"jordancjq"},"content":"        if (!TeamName.isValidName(trimmedArgs) || trimmedArgs.equals(UNSPECIFIED_FIELD)) {"},{"lineNumber":29,"author":{"gitID":"jordancjq"},"content":"            throw new ParseException(MESSAGE_TEAM_NAME_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":32,"author":{"gitID":"jordancjq"},"content":"        TeamName teamName \u003d new TeamName(trimmedArgs);"},{"lineNumber":33,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":34,"author":{"gitID":"jordancjq"},"content":"        return new CreateCommand(new Team(teamName));"},{"lineNumber":35,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"jordancjq"},"content":"}"}],"authorContributionMap":{"jordancjq":27,"-":9}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Deletes a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"d\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \": Deletes the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"lithiumlkid"},"content":"    public static final String MESSAGE_PARAMETERS \u003d \"INDEX\";"},{"lineNumber":28,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Person personToDelete;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        requireNonNull(personToDelete);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteCommand) other).personToDelete));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"lithiumlkid":2,"-":68}},{"path":"src/main/java/seedu/address/logic/commands/TrieNode.java","lines":[{"lineNumber":1,"author":{"gitID":"lithiumlkid"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":3,"author":{"gitID":"lithiumlkid"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"lithiumlkid"},"content":" * Represents a Trie Node object. Contains a character, a reference to sibling Trie Node and child Trie Node ."},{"lineNumber":5,"author":{"gitID":"lithiumlkid"},"content":" */"},{"lineNumber":6,"author":{"gitID":"lithiumlkid"},"content":"public class TrieNode {"},{"lineNumber":7,"author":{"gitID":"lithiumlkid"},"content":"    private TrieNode sibling;"},{"lineNumber":8,"author":{"gitID":"lithiumlkid"},"content":"    private TrieNode child;"},{"lineNumber":9,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":10,"author":{"gitID":"lithiumlkid"},"content":"    private char key;"},{"lineNumber":11,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":12,"author":{"gitID":"lithiumlkid"},"content":"    TrieNode(char key, TrieNode sibling, TrieNode child) {"},{"lineNumber":13,"author":{"gitID":"lithiumlkid"},"content":"        this.key \u003d key;"},{"lineNumber":14,"author":{"gitID":"lithiumlkid"},"content":"        this.sibling \u003d sibling;"},{"lineNumber":15,"author":{"gitID":"lithiumlkid"},"content":"        this.child \u003d child;"},{"lineNumber":16,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":18,"author":{"gitID":"lithiumlkid"},"content":"    public char getKey() {"},{"lineNumber":19,"author":{"gitID":"lithiumlkid"},"content":"        return key;"},{"lineNumber":20,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":22,"author":{"gitID":"lithiumlkid"},"content":"    public boolean hasSibling() {"},{"lineNumber":23,"author":{"gitID":"lithiumlkid"},"content":"        return sibling !\u003d null;"},{"lineNumber":24,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":26,"author":{"gitID":"lithiumlkid"},"content":"    public TrieNode getSibling() {"},{"lineNumber":27,"author":{"gitID":"lithiumlkid"},"content":"        return sibling;"},{"lineNumber":28,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":30,"author":{"gitID":"lithiumlkid"},"content":"    public void setSibling(TrieNode sibling) {"},{"lineNumber":31,"author":{"gitID":"lithiumlkid"},"content":"        this.sibling \u003d sibling;"},{"lineNumber":32,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":34,"author":{"gitID":"lithiumlkid"},"content":"    public boolean hasChild() {"},{"lineNumber":35,"author":{"gitID":"lithiumlkid"},"content":"        return child !\u003d null;"},{"lineNumber":36,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":38,"author":{"gitID":"lithiumlkid"},"content":"    public TrieNode getChild() {"},{"lineNumber":39,"author":{"gitID":"lithiumlkid"},"content":"        return child;"},{"lineNumber":40,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":42,"author":{"gitID":"lithiumlkid"},"content":"    public void setChild(TrieNode child) {"},{"lineNumber":43,"author":{"gitID":"lithiumlkid"},"content":"        this.child \u003d child;"},{"lineNumber":44,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"lithiumlkid"},"content":"}"}],"authorContributionMap":{"lithiumlkid":45}},{"path":"src/main/java/seedu/address/logic/parser/ViewCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":5,"author":{"gitID":"jordancjq"},"content":"import seedu.address.logic.commands.ViewCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":8,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":9,"author":{"gitID":"jordancjq"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"jordancjq"},"content":" * Parses input arguments and creates a new ViewCommandObject"},{"lineNumber":11,"author":{"gitID":"jordancjq"},"content":" */"},{"lineNumber":12,"author":{"gitID":"jordancjq"},"content":"public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"},{"lineNumber":13,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":14,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"jordancjq"},"content":"     * Parses the given {@code String} of arguments in the context of the ViewCommand"},{"lineNumber":16,"author":{"gitID":"jordancjq"},"content":"     * and returns a ViewCommand object for execution."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"jordancjq"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"jordancjq"},"content":"    public ViewCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":24,"author":{"gitID":"jordancjq"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":27,"author":{"gitID":"jordancjq"},"content":"        TeamName targetTeam \u003d new TeamName(trimmedArgs);"},{"lineNumber":28,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":29,"author":{"gitID":"jordancjq"},"content":"        return new ViewCommand(targetTeam);"},{"lineNumber":30,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"jordancjq"},"content":"}"}],"authorContributionMap":{"jordancjq":22,"-":9}},{"path":"src/main/java/seedu/address/logic/commands/CreateCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.Team;"},{"lineNumber":7,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.exceptions.DuplicateTeamException;"},{"lineNumber":8,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":9,"author":{"gitID":"jordancjq"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"jordancjq"},"content":" * Creates a team to the application"},{"lineNumber":11,"author":{"gitID":"jordancjq"},"content":" */"},{"lineNumber":12,"author":{"gitID":"jordancjq"},"content":"public class CreateCommand extends UndoableCommand {"},{"lineNumber":13,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":14,"author":{"gitID":"jordancjq"},"content":"    public static final String COMMAND_WORD \u003d \"create\";"},{"lineNumber":15,"author":{"gitID":"jordancjq"},"content":"    public static final String COMMAND_ALIAS \u003d \"ct\";"},{"lineNumber":16,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":17,"author":{"gitID":"jordancjq"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"Creates a team in MTM. \""},{"lineNumber":18,"author":{"gitID":"jordancjq"},"content":"            + \"Parameters: \""},{"lineNumber":19,"author":{"gitID":"jordancjq"},"content":"            + \"TEAM_NAME\\n\""},{"lineNumber":20,"author":{"gitID":"jordancjq"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":21,"author":{"gitID":"jordancjq"},"content":"            + \"Arsenal\";"},{"lineNumber":22,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":23,"author":{"gitID":"lithiumlkid"},"content":"    public static final String MESSAGE_PARAMETERS \u003d \"TEAM_NAME\";"},{"lineNumber":24,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":25,"author":{"gitID":"jordancjq"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New team created: %1$s\";"},{"lineNumber":26,"author":{"gitID":"jordancjq"},"content":"    public static final String MESSAGE_DUPLICATE_TEAM \u003d \"This team already exist in the manager\";"},{"lineNumber":27,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":28,"author":{"gitID":"jordancjq"},"content":"    private final Team toCreate;"},{"lineNumber":29,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":30,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"jordancjq"},"content":"     * Creates a CreateCommand to add the specified (@code Team)"},{"lineNumber":32,"author":{"gitID":"jordancjq"},"content":"     *"},{"lineNumber":33,"author":{"gitID":"jordancjq"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"jordancjq"},"content":"    public CreateCommand(Team team) {"},{"lineNumber":35,"author":{"gitID":"jordancjq"},"content":"        requireNonNull(team);"},{"lineNumber":36,"author":{"gitID":"jordancjq"},"content":"        this.toCreate \u003d team;"},{"lineNumber":37,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":39,"author":{"gitID":"jordancjq"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":41,"author":{"gitID":"jordancjq"},"content":"        requireNonNull(model);"},{"lineNumber":42,"author":{"gitID":"jordancjq"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"jordancjq"},"content":"            model.createTeam(toCreate);"},{"lineNumber":44,"author":{"gitID":"jordancjq"},"content":"        } catch (DuplicateTeamException e) {"},{"lineNumber":45,"author":{"gitID":"jordancjq"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TEAM);"},{"lineNumber":46,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":48,"author":{"gitID":"jordancjq"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toCreate));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":54,"author":{"gitID":"jordancjq"},"content":"                || (other instanceof CreateCommand // instanceof handles nulls"},{"lineNumber":55,"author":{"gitID":"jordancjq"},"content":"                \u0026\u0026 toCreate.equals(((CreateCommand) other).toCreate));"},{"lineNumber":56,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"jordancjq"},"content":"}"}],"authorContributionMap":{"lithiumlkid":2,"jordancjq":44,"-":11}},{"path":"src/main/java/seedu/address/logic/commands/SetCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_COLOUR;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Adds a colour to a tag in address book."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class SetCommand extends Command {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"setTagColour\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"stc\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets the colour of tags to the colour of choice \""},{"lineNumber":18,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":19,"author":{"gitID":"lithiumlkid"},"content":"            + PREFIX_TAG + \"TAG \""},{"lineNumber":20,"author":{"gitID":"lithiumlkid"},"content":"            + PREFIX_TAG_COLOUR + \"TAG_COLOUR\\n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + PREFIX_TAG_COLOUR + \"green\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Colours to choose from are : teal, red, yellow, blue, orange, brown, \\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"green, pink, black, grey\\n\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"lithiumlkid"},"content":"    public static final String MESSAGE_PARAMETERS \u003d PREFIX_TAG + \"TAG \" + PREFIX_TAG_COLOUR + \"TAG_COLOUR\";"},{"lineNumber":28,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_TAG \u003d \"tag is invalid! Please input a valid tag name!\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"tag %1$s colour changed to %2$s\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final Tag tagToSet;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final String tagColour;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public SetCommand(Tag tag, String colour) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        tagToSet \u003d tag;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        tagColour \u003d colour;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        boolean isTagValid \u003d model.setTagColour(tagToSet, tagColour);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (!tagToSet.isValidTagName(tagToSet.getTagName()) || !isTagValid) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_INVALID_TAG));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, tagToSet.toString(), tagColour));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // Check if"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // (a) Object is the same object"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // (b) Object is an instance of the object and that toSet, tag and color are the same"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                || (other instanceof SetCommand // instanceof handles nulls"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tagToSet.getTagName().equals(((SetCommand) other).tagToSet.getTagName()))"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tagColour.equals(((SetCommand) other).tagColour);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"},{"lineNumber":66,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"lithiumlkid":4,"-":62}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_JERSEY_NUMBER;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_POSITION;"},{"lineNumber":10,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TEAMNAME;"},{"lineNumber":13,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.parser.ParserUtil.UNSPECIFIED_FIELD;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"jordancjq"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":19,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"lithiumlkid"},"content":" * Adds a player to the address book."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"lithiumlkid"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a player to the address book. \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":33,"author":{"gitID":"jordancjq"},"content":"            + \"[\" + PREFIX_TEAMNAME + \"TEAMNAME] \""},{"lineNumber":34,"author":{"gitID":"jordancjq"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":35,"author":{"gitID":"jordancjq"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":36,"author":{"gitID":"lithiumlkid"},"content":"            + \"[\" + PREFIX_RATING + \"RATING] \""},{"lineNumber":37,"author":{"gitID":"lithiumlkid"},"content":"            + \"[\" + PREFIX_POSITION + \"POSITION] \""},{"lineNumber":38,"author":{"gitID":"lithiumlkid"},"content":"            + \"[\" + PREFIX_JERSEY_NUMBER + \"JERSEY_NUMBER] \""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":43,"author":{"gitID":"jordancjq"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":46,"author":{"gitID":"lithiumlkid"},"content":"            + PREFIX_RATING + \"0\""},{"lineNumber":47,"author":{"gitID":"lithiumlkid"},"content":"            + PREFIX_POSITION + \"1\""},{"lineNumber":48,"author":{"gitID":"lithiumlkid"},"content":"            + PREFIX_JERSEY_NUMBER + \"17\""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"lithiumlkid"},"content":"    public static final String MESSAGE_PARAMETERS \u003d PREFIX_NAME + \"NAME \""},{"lineNumber":52,"author":{"gitID":"lithiumlkid"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":53,"author":{"gitID":"jordancjq"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":54,"author":{"gitID":"jordancjq"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":55,"author":{"gitID":"lithiumlkid"},"content":"            + \"[\" + PREFIX_RATING + \"RATING] \""},{"lineNumber":56,"author":{"gitID":"lithiumlkid"},"content":"            + \"[\" + PREFIX_POSITION + \"POSITION] \""},{"lineNumber":57,"author":{"gitID":"lithiumlkid"},"content":"            + \"[\" + PREFIX_JERSEY_NUMBER + \"JERSEY_NUMBER] \""},{"lineNumber":58,"author":{"gitID":"lithiumlkid"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]\";"},{"lineNumber":59,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":60,"author":{"gitID":"lithiumlkid"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New player added: %1$s\";"},{"lineNumber":61,"author":{"gitID":"lithiumlkid"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This player already exists in the address book\";"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":78,"author":{"gitID":"jordancjq"},"content":"            if (!toAdd.getTeamName().toString().equals(UNSPECIFIED_FIELD)) {"},{"lineNumber":79,"author":{"gitID":"jordancjq"},"content":"                model.assignPersonToTeam(toAdd, toAdd.getTeamName());"},{"lineNumber":80,"author":{"gitID":"jordancjq"},"content":"            }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":84,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":87,"author":{"gitID":"jordancjq"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"jordancjq"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":89,"author":{"gitID":"jordancjq"},"content":"        TeamName teamName \u003d toAdd.getTeamName();"},{"lineNumber":90,"author":{"gitID":"jordancjq"},"content":"        if (!model.getAddressBook().getTeamList().contains(teamName)) {"},{"lineNumber":91,"author":{"gitID":"jordancjq"},"content":"            if (!teamName.toString().equals(UNSPECIFIED_FIELD)) {"},{"lineNumber":92,"author":{"gitID":"jordancjq"},"content":"                throw new CommandException((Messages.MESSAGE_TEAM_NOT_FOUND));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"lithiumlkid":20,"jordancjq":23,"-":60}},{"path":"src/main/java/seedu/address/logic/commands/ViewCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"jordancjq"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":3,"author":{"gitID":"jordancjq"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":5,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":6,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.exceptions.TeamNotFoundException;"},{"lineNumber":7,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":8,"author":{"gitID":"jordancjq"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"jordancjq"},"content":" * View a team identified using it\u0027s team name from the address book."},{"lineNumber":10,"author":{"gitID":"jordancjq"},"content":" */"},{"lineNumber":11,"author":{"gitID":"jordancjq"},"content":"public class ViewCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":13,"author":{"gitID":"jordancjq"},"content":"    public static final String COMMAND_WORD \u003d \"view\";"},{"lineNumber":14,"author":{"gitID":"jordancjq"},"content":"    public static final String COMMAND_ALIAS \u003d \"v\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":17,"author":{"gitID":"jordancjq"},"content":"            + \": Views the team identified by the team name.\\n\""},{"lineNumber":18,"author":{"gitID":"jordancjq"},"content":"            + \"Parameters: TEAM_NAME\\n\""},{"lineNumber":19,"author":{"gitID":"jordancjq"},"content":"            + \"Example: \" + COMMAND_WORD + \" Arsenal\";"},{"lineNumber":20,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":21,"author":{"gitID":"jordancjq"},"content":"    public static final String MESSAGE_PARAMETERS \u003d \"TEAM_NAME\";"},{"lineNumber":22,"author":{"gitID":"jordancjq"},"content":"    public static final String MESSAGE_VIEW_TEAM_SUCCESS \u003d \"Viewing Team: %1$s\";"},{"lineNumber":23,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":24,"author":{"gitID":"jordancjq"},"content":"    private final TeamName targetTeam;"},{"lineNumber":25,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":26,"author":{"gitID":"jordancjq"},"content":"    public ViewCommand(TeamName targetTeam) {"},{"lineNumber":27,"author":{"gitID":"jordancjq"},"content":"        this.targetTeam \u003d targetTeam;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":32,"author":{"gitID":"jordancjq"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"jordancjq"},"content":"            model.updateFilteredPersonList(targetTeam);"},{"lineNumber":34,"author":{"gitID":"jordancjq"},"content":"        } catch (TeamNotFoundException tnfe) {"},{"lineNumber":35,"author":{"gitID":"jordancjq"},"content":"            throw new CommandException(Messages.MESSAGE_TEAM_NOT_FOUND);"},{"lineNumber":36,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":38,"author":{"gitID":"jordancjq"},"content":"        // TODO: Jump to list of teams event"},{"lineNumber":39,"author":{"gitID":"jordancjq"},"content":"        return new CommandResult(String.format(MESSAGE_VIEW_TEAM_SUCCESS, targetTeam.toString()));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":45,"author":{"gitID":"jordancjq"},"content":"                || (other instanceof ViewCommand // instanceof handles nulls"},{"lineNumber":46,"author":{"gitID":"jordancjq"},"content":"                \u0026\u0026 this.targetTeam.equals(((ViewCommand) other).targetTeam)); // state check"},{"lineNumber":47,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"jordancjq"},"content":"}"}],"authorContributionMap":{"jordancjq":36,"-":12}},{"path":"src/main/java/seedu/address/logic/commands/SortCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.NoPlayerException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Sorts all players in address book by field. Can be done in asc or desc order."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class SortCommand extends UndoableCommand {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"sort\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"so\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String BY_ASCENDING \u003d \"asc\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String BY_DESCENDING \u003d \"desc\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts players in address book \""},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \"by fields in either ascending or descending order.\\n\""},{"lineNumber":21,"author":{"gitID":"lithiumlkid"},"content":"            + \"Parameters: FIELD ORDER\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \" name \" + BY_ASCENDING;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"lithiumlkid"},"content":"    public static final String MESSAGE_PARAMETERS \u003d \"FIELD ORDER\";"},{"lineNumber":26,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Players in address book have been sorted.\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EMPTY_BOOK \u003d \"No player(s) to sort.\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final String field;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final String order;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public SortCommand(String field, String order) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        requireNonNull(field);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        requireNonNull(order);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.field \u003d field;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.order \u003d order;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public String getField() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return this.field;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public String getOrder() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return this.order;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            model.sortPlayers(getField(), getOrder());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        } catch (NoPlayerException npe) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_EMPTY_BOOK);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"lithiumlkid":3,"-":56}},{"path":"src/main/java/seedu/address/logic/commands/RemarkCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"jordancjq"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":3,"author":{"gitID":"jordancjq"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":5,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":7,"author":{"gitID":"jordancjq"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":9,"author":{"gitID":"jordancjq"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"jordancjq"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"jordancjq"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":14,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":16,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":17,"author":{"gitID":"jordancjq"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"lithiumlkid"},"content":" * Updates the remark of an existing player in the address book."},{"lineNumber":19,"author":{"gitID":"jordancjq"},"content":" */"},{"lineNumber":20,"author":{"gitID":"jordancjq"},"content":"public class RemarkCommand extends UndoableCommand {"},{"lineNumber":21,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":22,"author":{"gitID":"jordancjq"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";"},{"lineNumber":23,"author":{"gitID":"jordancjq"},"content":"    public static final String COMMAND_ALIAS \u003d \"rm\";"},{"lineNumber":24,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":25,"author":{"gitID":"lithiumlkid"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Updates the remark of the player identified \""},{"lineNumber":26,"author":{"gitID":"lithiumlkid"},"content":"            + \"by the index number used in the last player listing. \""},{"lineNumber":27,"author":{"gitID":"jordancjq"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":28,"author":{"gitID":"jordancjq"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":29,"author":{"gitID":"jordancjq"},"content":"            + PREFIX_REMARK + \"[REMARK]\\n\""},{"lineNumber":30,"author":{"gitID":"jordancjq"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":31,"author":{"gitID":"jordancjq"},"content":"            + PREFIX_REMARK + \"Must put on field\";"},{"lineNumber":32,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":33,"author":{"gitID":"lithiumlkid"},"content":"    public static final String MESSAGE_PARAMETERS \u003d \"INDEX\";"},{"lineNumber":34,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":35,"author":{"gitID":"jordancjq"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Remark added to: %1$s\";"},{"lineNumber":36,"author":{"gitID":"jordancjq"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Remark removed from: %1$s\";"},{"lineNumber":37,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":38,"author":{"gitID":"jordancjq"},"content":"    private final Index index;"},{"lineNumber":39,"author":{"gitID":"jordancjq"},"content":"    private final Remark remark;"},{"lineNumber":40,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":41,"author":{"gitID":"jordancjq"},"content":"    private Person personToEdit;"},{"lineNumber":42,"author":{"gitID":"jordancjq"},"content":"    private Person editedPerson;"},{"lineNumber":43,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":44,"author":{"gitID":"jordancjq"},"content":"    public RemarkCommand(Index index, Remark remark) {"},{"lineNumber":45,"author":{"gitID":"jordancjq"},"content":"        requireNonNull(index);"},{"lineNumber":46,"author":{"gitID":"jordancjq"},"content":"        requireNonNull(remark);"},{"lineNumber":47,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":48,"author":{"gitID":"jordancjq"},"content":"        this.index \u003d index;"},{"lineNumber":49,"author":{"gitID":"jordancjq"},"content":"        this.remark \u003d remark;"},{"lineNumber":50,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":52,"author":{"gitID":"jordancjq"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"jordancjq"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":54,"author":{"gitID":"jordancjq"},"content":"        requireNonNull(personToEdit);"},{"lineNumber":55,"author":{"gitID":"jordancjq"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":56,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":57,"author":{"gitID":"jordancjq"},"content":"        try {"},{"lineNumber":58,"author":{"gitID":"jordancjq"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":59,"author":{"gitID":"jordancjq"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":60,"author":{"gitID":"jordancjq"},"content":"            throw new AssertionError(\"Updating remark should not result in duplicate\");"},{"lineNumber":61,"author":{"gitID":"jordancjq"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":62,"author":{"gitID":"lithiumlkid"},"content":"            throw new AssertionError(\"The target player cannot be missing\");"},{"lineNumber":63,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":65,"author":{"gitID":"jordancjq"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":66,"author":{"gitID":"jordancjq"},"content":"        return new CommandResult(getSuccessMessage(editedPerson));"},{"lineNumber":67,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":69,"author":{"gitID":"jordancjq"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"jordancjq"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":71,"author":{"gitID":"jordancjq"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":72,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":73,"author":{"gitID":"jordancjq"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":74,"author":{"gitID":"jordancjq"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":77,"author":{"gitID":"jordancjq"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":78,"author":{"gitID":"jordancjq"},"content":"        editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"},{"lineNumber":79,"author":{"gitID":"lithiumlkid"},"content":"                personToEdit.getAddress(), remark, personToEdit.getTeamName(), personToEdit.getTags(),"},{"lineNumber":80,"author":{"gitID":"lithiumlkid"},"content":"                personToEdit.getRating(), personToEdit.getPosition(), personToEdit.getJerseyNumber());"},{"lineNumber":81,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":83,"author":{"gitID":"jordancjq"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"jordancjq"},"content":"    public boolean equals(Object other) {"},{"lineNumber":85,"author":{"gitID":"jordancjq"},"content":"        // short circuit if same object"},{"lineNumber":86,"author":{"gitID":"jordancjq"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":87,"author":{"gitID":"jordancjq"},"content":"            return true;"},{"lineNumber":88,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":90,"author":{"gitID":"jordancjq"},"content":"        // instanceof handles nulls"},{"lineNumber":91,"author":{"gitID":"jordancjq"},"content":"        if (!(other instanceof RemarkCommand)) {"},{"lineNumber":92,"author":{"gitID":"jordancjq"},"content":"            return false;"},{"lineNumber":93,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":95,"author":{"gitID":"jordancjq"},"content":"        // state check"},{"lineNumber":96,"author":{"gitID":"jordancjq"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;"},{"lineNumber":97,"author":{"gitID":"jordancjq"},"content":"        return index.equals(e.index)"},{"lineNumber":98,"author":{"gitID":"jordancjq"},"content":"                \u0026\u0026 remark.equals(e.remark);"},{"lineNumber":99,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":101,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"jordancjq"},"content":"     * Gets the corresponding success message based on the remark field from {@code personToEdit} after editing."},{"lineNumber":103,"author":{"gitID":"jordancjq"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"jordancjq"},"content":"    private String getSuccessMessage(Person person) {"},{"lineNumber":105,"author":{"gitID":"jordancjq"},"content":"        String message \u003d remark.value.isEmpty() ? MESSAGE_DELETE_REMARK_SUCCESS : MESSAGE_ADD_REMARK_SUCCESS;"},{"lineNumber":106,"author":{"gitID":"jordancjq"},"content":"        return String.format(message, personToEdit);"},{"lineNumber":107,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"jordancjq"},"content":"}"}],"authorContributionMap":{"lithiumlkid":8,"jordancjq":100}},{"path":"src/main/java/seedu/address/logic/commands/RemoveCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"jordancjq"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":8,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.exceptions.TeamNotFoundException;"},{"lineNumber":9,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":10,"author":{"gitID":"jordancjq"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"jordancjq"},"content":" * Removes a team identified using the team name"},{"lineNumber":12,"author":{"gitID":"jordancjq"},"content":" */"},{"lineNumber":13,"author":{"gitID":"jordancjq"},"content":"public class RemoveCommand extends UndoableCommand {"},{"lineNumber":14,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":15,"author":{"gitID":"jordancjq"},"content":"    public static final String COMMAND_WORD \u003d \"remove\";"},{"lineNumber":16,"author":{"gitID":"jordancjq"},"content":"    public static final String COMMAND_ALIAS \u003d \"rt\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":19,"author":{"gitID":"jordancjq"},"content":"            + \": Removes the team specified by the team name.\\n\""},{"lineNumber":20,"author":{"gitID":"jordancjq"},"content":"            + \"Parameters: TEAM_NAME\\n\""},{"lineNumber":21,"author":{"gitID":"jordancjq"},"content":"            + \"Example: \" + COMMAND_WORD + \" Arsenal\";"},{"lineNumber":22,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":23,"author":{"gitID":"jordancjq"},"content":"    public static final String MESSAGE_PARAMETERS \u003d \"TEAM_NAME\";"},{"lineNumber":24,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":25,"author":{"gitID":"jordancjq"},"content":"    public static final String MESSAGE_REMOVE_TEAM_SUCCESS \u003d \"Removed Team: %1$s\";"},{"lineNumber":26,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":27,"author":{"gitID":"jordancjq"},"content":"    private TeamName targetTeamName;"},{"lineNumber":28,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":29,"author":{"gitID":"jordancjq"},"content":"    public RemoveCommand(TeamName targetTeamName) {"},{"lineNumber":30,"author":{"gitID":"jordancjq"},"content":"        this.targetTeamName \u003d targetTeamName;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"jordancjq"},"content":"        requireNonNull(targetTeamName);"},{"lineNumber":36,"author":{"gitID":"jordancjq"},"content":"        try {"},{"lineNumber":37,"author":{"gitID":"jordancjq"},"content":"            model.removeTeam(targetTeamName);"},{"lineNumber":38,"author":{"gitID":"jordancjq"},"content":"        } catch (TeamNotFoundException tnfe) {"},{"lineNumber":39,"author":{"gitID":"jordancjq"},"content":"            throw new CommandException(Messages.MESSAGE_TEAM_NOT_FOUND);"},{"lineNumber":40,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":42,"author":{"gitID":"jordancjq"},"content":"        return new CommandResult(String.format(MESSAGE_REMOVE_TEAM_SUCCESS, targetTeamName));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":48,"author":{"gitID":"jordancjq"},"content":"                || (other instanceof RemoveCommand // instanceof handles nulls"},{"lineNumber":49,"author":{"gitID":"jordancjq"},"content":"                \u0026\u0026 this.targetTeamName.equals(((RemoveCommand) other).targetTeamName)); // state check"},{"lineNumber":50,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"jordancjq"},"content":"}"}],"authorContributionMap":{"jordancjq":35,"-":16}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"s\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"lithiumlkid"},"content":"    public static final String MESSAGE_PARAMETERS \u003d \"INDEX\";"},{"lineNumber":26,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"lithiumlkid":2,"-":53}},{"path":"src/main/java/seedu/address/logic/commands/CommandTrie.java","lines":[{"lineNumber":1,"author":{"gitID":"lithiumlkid"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":3,"author":{"gitID":"lithiumlkid"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"lithiumlkid"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitID":"lithiumlkid"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"lithiumlkid"},"content":"import java.util.Map;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"lithiumlkid"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"lithiumlkid"},"content":" * Trie of possible commands. Stores all possible commands for the addressbook."},{"lineNumber":13,"author":{"gitID":"lithiumlkid"},"content":" * Used for autocomplete functionality by returning a possible command via the attemptAutoComplete function."},{"lineNumber":14,"author":{"gitID":"lithiumlkid"},"content":" */"},{"lineNumber":15,"author":{"gitID":"lithiumlkid"},"content":"public class CommandTrie {"},{"lineNumber":16,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":17,"author":{"gitID":"lithiumlkid"},"content":"    private TrieNode root \u003d null;"},{"lineNumber":18,"author":{"gitID":"lithiumlkid"},"content":"    private Set\u003cString\u003e commandSet;"},{"lineNumber":19,"author":{"gitID":"lithiumlkid"},"content":"    private Map\u003cString, String\u003e commandMap;"},{"lineNumber":20,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":21,"author":{"gitID":"lithiumlkid"},"content":"    public CommandTrie() {"},{"lineNumber":22,"author":{"gitID":"lithiumlkid"},"content":"        commandSet \u003d Stream.of("},{"lineNumber":23,"author":{"gitID":"lithiumlkid"},"content":"                EditCommand.COMMAND_WORD, ExitCommand.COMMAND_WORD, FindCommand.COMMAND_WORD,"},{"lineNumber":24,"author":{"gitID":"lithiumlkid"},"content":"                AddCommand.COMMAND_WORD, ClearCommand.COMMAND_WORD, DeleteCommand.COMMAND_WORD,"},{"lineNumber":25,"author":{"gitID":"lithiumlkid"},"content":"                HelpCommand.COMMAND_WORD, SelectCommand.COMMAND_WORD, HistoryCommand.COMMAND_WORD,"},{"lineNumber":26,"author":{"gitID":"lithiumlkid"},"content":"                ListCommand.COMMAND_WORD, RedoCommand.COMMAND_WORD,  UndoCommand.COMMAND_WORD,"},{"lineNumber":27,"author":{"gitID":"lithiumlkid"},"content":"                SortCommand.COMMAND_WORD, SetCommand.COMMAND_WORD, RemarkCommand.COMMAND_WORD,"},{"lineNumber":28,"author":{"gitID":"lithiumlkid"},"content":"                CreateCommand.COMMAND_WORD"},{"lineNumber":29,"author":{"gitID":"lithiumlkid"},"content":"        ).collect(Collectors.toSet());"},{"lineNumber":30,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":31,"author":{"gitID":"lithiumlkid"},"content":"        for (String command : commandSet) {"},{"lineNumber":32,"author":{"gitID":"lithiumlkid"},"content":"            this.insert(command);"},{"lineNumber":33,"author":{"gitID":"lithiumlkid"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":35,"author":{"gitID":"lithiumlkid"},"content":"        commandMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":36,"author":{"gitID":"lithiumlkid"},"content":"        commandMap.put(AddCommand.COMMAND_WORD, AddCommand.MESSAGE_PARAMETERS);"},{"lineNumber":37,"author":{"gitID":"lithiumlkid"},"content":"        commandMap.put(DeleteCommand.COMMAND_WORD, DeleteCommand.MESSAGE_PARAMETERS);"},{"lineNumber":38,"author":{"gitID":"lithiumlkid"},"content":"        commandMap.put(EditCommand.COMMAND_WORD, EditCommand.MESSAGE_PARAMETERS);"},{"lineNumber":39,"author":{"gitID":"lithiumlkid"},"content":"        commandMap.put(FindCommand.COMMAND_WORD, FindCommand.MESSAGE_PARAMETERS);"},{"lineNumber":40,"author":{"gitID":"lithiumlkid"},"content":"        commandMap.put(SelectCommand.COMMAND_WORD, SelectCommand.MESSAGE_PARAMETERS);"},{"lineNumber":41,"author":{"gitID":"lithiumlkid"},"content":"        commandMap.put(SortCommand.COMMAND_WORD, SortCommand.MESSAGE_PARAMETERS);"},{"lineNumber":42,"author":{"gitID":"lithiumlkid"},"content":"        commandMap.put(SetCommand.COMMAND_WORD, SetCommand.MESSAGE_PARAMETERS);"},{"lineNumber":43,"author":{"gitID":"lithiumlkid"},"content":"        commandMap.put(RemarkCommand.COMMAND_WORD, RemarkCommand.MESSAGE_PARAMETERS);"},{"lineNumber":44,"author":{"gitID":"lithiumlkid"},"content":"        commandMap.put(CreateCommand.COMMAND_WORD, CreateCommand.MESSAGE_PARAMETERS);"},{"lineNumber":45,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":46,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":48,"author":{"gitID":"lithiumlkid"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"lithiumlkid"},"content":"     * Inserts input into Trie"},{"lineNumber":50,"author":{"gitID":"lithiumlkid"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"lithiumlkid"},"content":"     * @param input command string"},{"lineNumber":52,"author":{"gitID":"lithiumlkid"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"lithiumlkid"},"content":"    private void insert(String input) {"},{"lineNumber":54,"author":{"gitID":"lithiumlkid"},"content":"        char[] inputArray \u003d input.toCharArray();"},{"lineNumber":55,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":56,"author":{"gitID":"lithiumlkid"},"content":"        if (root \u003d\u003d null) {"},{"lineNumber":57,"author":{"gitID":"lithiumlkid"},"content":"            root \u003d new TrieNode(inputArray[0], null, null);"},{"lineNumber":58,"author":{"gitID":"lithiumlkid"},"content":"            TrieNode temp \u003d root;"},{"lineNumber":59,"author":{"gitID":"lithiumlkid"},"content":"            for (int i \u003d 1; i \u003c inputArray.length; i++) {"},{"lineNumber":60,"author":{"gitID":"lithiumlkid"},"content":"                temp.setChild(new TrieNode(inputArray[i], null, null));"},{"lineNumber":61,"author":{"gitID":"lithiumlkid"},"content":"                temp \u003d temp.getChild();"},{"lineNumber":62,"author":{"gitID":"lithiumlkid"},"content":"            }"},{"lineNumber":63,"author":{"gitID":"lithiumlkid"},"content":"        } else {"},{"lineNumber":64,"author":{"gitID":"lithiumlkid"},"content":"            TrieNode temp \u003d root;"},{"lineNumber":65,"author":{"gitID":"lithiumlkid"},"content":"            int i \u003d 0;"},{"lineNumber":66,"author":{"gitID":"lithiumlkid"},"content":"            while (temp.hasSibling()) {"},{"lineNumber":67,"author":{"gitID":"lithiumlkid"},"content":"                if (temp.getKey() \u003d\u003d inputArray[i]) {"},{"lineNumber":68,"author":{"gitID":"lithiumlkid"},"content":"                    temp \u003d temp.getChild();"},{"lineNumber":69,"author":{"gitID":"lithiumlkid"},"content":"                    i++;"},{"lineNumber":70,"author":{"gitID":"lithiumlkid"},"content":"                } else {"},{"lineNumber":71,"author":{"gitID":"lithiumlkid"},"content":"                    temp \u003d temp.getSibling();"},{"lineNumber":72,"author":{"gitID":"lithiumlkid"},"content":"                }"},{"lineNumber":73,"author":{"gitID":"lithiumlkid"},"content":"            }"},{"lineNumber":74,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":75,"author":{"gitID":"lithiumlkid"},"content":"            while (i \u003c inputArray.length - 1) {"},{"lineNumber":76,"author":{"gitID":"lithiumlkid"},"content":"                if (temp.getKey() \u003d\u003d inputArray[i] \u0026\u0026 temp.hasChild()) {"},{"lineNumber":77,"author":{"gitID":"lithiumlkid"},"content":"                    i++;"},{"lineNumber":78,"author":{"gitID":"lithiumlkid"},"content":"                    temp \u003d temp.getChild();"},{"lineNumber":79,"author":{"gitID":"lithiumlkid"},"content":"                } else if (temp.getKey() \u003d\u003d inputArray[i] \u0026\u0026 !temp.hasChild()) {"},{"lineNumber":80,"author":{"gitID":"lithiumlkid"},"content":"                    i++;"},{"lineNumber":81,"author":{"gitID":"lithiumlkid"},"content":"                    temp.setChild(new TrieNode(inputArray[i], null, null));"},{"lineNumber":82,"author":{"gitID":"lithiumlkid"},"content":"                    temp \u003d temp.getChild();"},{"lineNumber":83,"author":{"gitID":"lithiumlkid"},"content":"                } else {"},{"lineNumber":84,"author":{"gitID":"lithiumlkid"},"content":"                    temp.setSibling(new TrieNode(inputArray[i], null, null));"},{"lineNumber":85,"author":{"gitID":"lithiumlkid"},"content":"                    temp \u003d temp.getSibling();"},{"lineNumber":86,"author":{"gitID":"lithiumlkid"},"content":"                }"},{"lineNumber":87,"author":{"gitID":"lithiumlkid"},"content":"            }"},{"lineNumber":88,"author":{"gitID":"lithiumlkid"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":91,"author":{"gitID":"lithiumlkid"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"lithiumlkid"},"content":"     * Indicates whether a node is a endOfWord"},{"lineNumber":93,"author":{"gitID":"lithiumlkid"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"lithiumlkid"},"content":"    private boolean isEndOfWord(TrieNode current) {"},{"lineNumber":95,"author":{"gitID":"lithiumlkid"},"content":"        return !current.hasSibling() \u0026\u0026 !current.hasChild();"},{"lineNumber":96,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":98,"author":{"gitID":"lithiumlkid"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"lithiumlkid"},"content":"     * @param input string to autocomplete by returning command with matching prefix"},{"lineNumber":100,"author":{"gitID":"lithiumlkid"},"content":"     * @return input if the command is not found, matching command word otherwise"},{"lineNumber":101,"author":{"gitID":"lithiumlkid"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"lithiumlkid"},"content":"    public String attemptAutoComplete(String input) throws NullPointerException {"},{"lineNumber":103,"author":{"gitID":"lithiumlkid"},"content":"        StringBuilder output \u003d new StringBuilder();"},{"lineNumber":104,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":105,"author":{"gitID":"lithiumlkid"},"content":"        if (commandSet.contains(input)) {"},{"lineNumber":106,"author":{"gitID":"lithiumlkid"},"content":"            if (commandMap.containsKey(input)) {"},{"lineNumber":107,"author":{"gitID":"lithiumlkid"},"content":"                output.append(\" \");"},{"lineNumber":108,"author":{"gitID":"lithiumlkid"},"content":"                output.append(commandMap.get(input));"},{"lineNumber":109,"author":{"gitID":"lithiumlkid"},"content":"            }"},{"lineNumber":110,"author":{"gitID":"lithiumlkid"},"content":"        } else {"},{"lineNumber":111,"author":{"gitID":"lithiumlkid"},"content":"            char[] inputArray \u003d input.toLowerCase().toCharArray();"},{"lineNumber":112,"author":{"gitID":"lithiumlkid"},"content":"            TrieNode temp \u003d root;"},{"lineNumber":113,"author":{"gitID":"lithiumlkid"},"content":"            int i \u003d 0;"},{"lineNumber":114,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":115,"author":{"gitID":"lithiumlkid"},"content":"            while (!isEndOfWord(temp)) {"},{"lineNumber":116,"author":{"gitID":"lithiumlkid"},"content":"                if (i \u003c inputArray.length) {"},{"lineNumber":117,"author":{"gitID":"lithiumlkid"},"content":"                    if (temp.getKey() \u003d\u003d inputArray[i]) {"},{"lineNumber":118,"author":{"gitID":"lithiumlkid"},"content":"                        output.append(inputArray[i]);"},{"lineNumber":119,"author":{"gitID":"lithiumlkid"},"content":"                        temp \u003d temp.getChild();"},{"lineNumber":120,"author":{"gitID":"lithiumlkid"},"content":"                        i++;"},{"lineNumber":121,"author":{"gitID":"lithiumlkid"},"content":"                    } else {"},{"lineNumber":122,"author":{"gitID":"lithiumlkid"},"content":"                        temp \u003d temp.getSibling();"},{"lineNumber":123,"author":{"gitID":"lithiumlkid"},"content":"                    }"},{"lineNumber":124,"author":{"gitID":"lithiumlkid"},"content":"                } else if (temp.hasSibling()) {"},{"lineNumber":125,"author":{"gitID":"lithiumlkid"},"content":"                    return input;"},{"lineNumber":126,"author":{"gitID":"lithiumlkid"},"content":"                } else {"},{"lineNumber":127,"author":{"gitID":"lithiumlkid"},"content":"                    output.append(temp.getKey());"},{"lineNumber":128,"author":{"gitID":"lithiumlkid"},"content":"                    temp \u003d temp.getChild();"},{"lineNumber":129,"author":{"gitID":"lithiumlkid"},"content":"                }"},{"lineNumber":130,"author":{"gitID":"lithiumlkid"},"content":"            }"},{"lineNumber":131,"author":{"gitID":"lithiumlkid"},"content":"            output.append(temp.getKey());"},{"lineNumber":132,"author":{"gitID":"lithiumlkid"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"lithiumlkid"},"content":"        return output.toString();"},{"lineNumber":134,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":136,"author":{"gitID":"lithiumlkid"},"content":"    public Set\u003cString\u003e getCommandSet() {"},{"lineNumber":137,"author":{"gitID":"lithiumlkid"},"content":"        return commandSet;"},{"lineNumber":138,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":140,"author":{"gitID":"lithiumlkid"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"lithiumlkid"},"content":"     * @return a list of all possible commands for the given input"},{"lineNumber":142,"author":{"gitID":"lithiumlkid"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"lithiumlkid"},"content":"    public List\u003cString\u003e getOptions(String input) {"},{"lineNumber":144,"author":{"gitID":"lithiumlkid"},"content":"        char[] inputArray \u003d input.toLowerCase().toCharArray();"},{"lineNumber":145,"author":{"gitID":"lithiumlkid"},"content":"        TrieNode start \u003d root;"},{"lineNumber":146,"author":{"gitID":"lithiumlkid"},"content":"        int i \u003d 0;"},{"lineNumber":147,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":148,"author":{"gitID":"lithiumlkid"},"content":"        while (!isEndOfWord(start) \u0026\u0026 i \u003c inputArray.length) {"},{"lineNumber":149,"author":{"gitID":"lithiumlkid"},"content":"            if (start.getKey() \u003d\u003d inputArray[i]) {"},{"lineNumber":150,"author":{"gitID":"lithiumlkid"},"content":"                i++;"},{"lineNumber":151,"author":{"gitID":"lithiumlkid"},"content":"                start \u003d start.getChild();"},{"lineNumber":152,"author":{"gitID":"lithiumlkid"},"content":"            } else {"},{"lineNumber":153,"author":{"gitID":"lithiumlkid"},"content":"                start \u003d start.getSibling();"},{"lineNumber":154,"author":{"gitID":"lithiumlkid"},"content":"            }"},{"lineNumber":155,"author":{"gitID":"lithiumlkid"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":157,"author":{"gitID":"lithiumlkid"},"content":"        return findOptions(start, input);"},{"lineNumber":158,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":160,"author":{"gitID":"lithiumlkid"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"lithiumlkid"},"content":"     * Traverses the trie and gets possible options"},{"lineNumber":162,"author":{"gitID":"lithiumlkid"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"lithiumlkid"},"content":"    private List\u003cString\u003e findOptions(TrieNode start, String stub) {"},{"lineNumber":164,"author":{"gitID":"lithiumlkid"},"content":"        List\u003cString\u003e options \u003d new ArrayList\u003c\u003e();"},{"lineNumber":165,"author":{"gitID":"lithiumlkid"},"content":"        StringBuilder output \u003d new StringBuilder();"},{"lineNumber":166,"author":{"gitID":"lithiumlkid"},"content":"        output.append(stub);"},{"lineNumber":167,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":168,"author":{"gitID":"lithiumlkid"},"content":"        if (isEndOfWord(start)) {"},{"lineNumber":169,"author":{"gitID":"lithiumlkid"},"content":"            output.append(start.getKey());"},{"lineNumber":170,"author":{"gitID":"lithiumlkid"},"content":"            options.add(output.toString());"},{"lineNumber":171,"author":{"gitID":"lithiumlkid"},"content":"            return options;"},{"lineNumber":172,"author":{"gitID":"lithiumlkid"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"lithiumlkid"},"content":"        if (start.hasSibling()) {"},{"lineNumber":174,"author":{"gitID":"lithiumlkid"},"content":"            options.addAll(findOptions(start.getSibling(), output.toString()));"},{"lineNumber":175,"author":{"gitID":"lithiumlkid"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"lithiumlkid"},"content":"        if (start.hasChild()) {"},{"lineNumber":177,"author":{"gitID":"lithiumlkid"},"content":"            output.append(start.getKey());"},{"lineNumber":178,"author":{"gitID":"lithiumlkid"},"content":"            options.addAll(findOptions(start.getChild(), output.toString()));"},{"lineNumber":179,"author":{"gitID":"lithiumlkid"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"lithiumlkid"},"content":"        return options;"},{"lineNumber":181,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"lithiumlkid"},"content":"}"}],"authorContributionMap":{"lithiumlkid":178,"-":4}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"f\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"lithiumlkid"},"content":"    public static final String MESSAGE_PARAMETERS \u003d \"KEYWORD [MORE KEYWORD]\";"},{"lineNumber":20,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"lithiumlkid":2,"-":37}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"lithiumlkid"},"content":"import seedu.address.logic.commands.CommandTrie;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.team.Team;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":28,"author":{"gitID":"lithiumlkid"},"content":"    private final CommandTrie commandTrie;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":35,"author":{"gitID":"lithiumlkid"},"content":"        commandTrie \u003d new CommandTrie();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTeam\u003e getInitTeamList() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return model.getInitTeamList();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":67,"author":{"gitID":"lithiumlkid"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"lithiumlkid"},"content":"    public CommandTrie getCommandTrie() {"},{"lineNumber":69,"author":{"gitID":"lithiumlkid"},"content":"        return commandTrie;"},{"lineNumber":70,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"lithiumlkid":8,"-":63}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_JERSEY_NUMBER;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_POSITION;"},{"lineNumber":10,"author":{"gitID":"lithiumlkid"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":27,"author":{"gitID":"lithiumlkid"},"content":"import seedu.address.model.person.JerseyNumber;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":31,"author":{"gitID":"lithiumlkid"},"content":"import seedu.address.model.person.Position;"},{"lineNumber":32,"author":{"gitID":"lithiumlkid"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":33,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":37,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":40,"author":{"gitID":"lithiumlkid"},"content":" * Edits the details of an existing player in the address book."},{"lineNumber":41,"author":{"gitID":"-"},"content":" */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"e\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"lithiumlkid"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the player identified \""},{"lineNumber":48,"author":{"gitID":"lithiumlkid"},"content":"            + \"by the index number used in the last player listing. \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":54,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":55,"author":{"gitID":"lithiumlkid"},"content":"            + \"[\" + PREFIX_RATING + \"RATING] \""},{"lineNumber":56,"author":{"gitID":"lithiumlkid"},"content":"            + \"[\" + PREFIX_POSITION + \"POSITION] \""},{"lineNumber":57,"author":{"gitID":"lithiumlkid"},"content":"            + \"[\" + PREFIX_JERSEY_NUMBER + \"JERSEY_NUMBER] \""},{"lineNumber":58,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":59,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":60,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":61,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"lithiumlkid"},"content":"    public static final String MESSAGE_PARAMETERS \u003d \"INDEX \""},{"lineNumber":64,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":65,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":66,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":67,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":68,"author":{"gitID":"lithiumlkid"},"content":"            + \"[\" + PREFIX_RATING + \"RATING] \""},{"lineNumber":69,"author":{"gitID":"lithiumlkid"},"content":"            + \"[\" + PREFIX_POSITION + \"POSITION] \""},{"lineNumber":70,"author":{"gitID":"lithiumlkid"},"content":"            + \"[\" + PREFIX_JERSEY_NUMBER + \"JERSEY_NUMBER] \""},{"lineNumber":71,"author":{"gitID":"lithiumlkid"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]\";"},{"lineNumber":72,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":75,"author":{"gitID":"lithiumlkid"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This player already exists in the address book.\";"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"lithiumlkid"},"content":"     * @param index of the player in the filtered player list to edit"},{"lineNumber":85,"author":{"gitID":"lithiumlkid"},"content":"     * @param editPersonDescriptor details to edit the player with"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":102,"author":{"gitID":"lithiumlkid"},"content":"            throw new AssertionError(\"The target player cannot be missing\");"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":131,"author":{"gitID":"jordancjq"},"content":"        Remark updatedRemark \u003d personToEdit.getRemark();"},{"lineNumber":132,"author":{"gitID":"jordancjq"},"content":"        TeamName updatedTeamName \u003d personToEdit.getTeamName();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":134,"author":{"gitID":"lithiumlkid"},"content":"        Rating updatedRating \u003d editPersonDescriptor.getRating().orElse(personToEdit.getRating());"},{"lineNumber":135,"author":{"gitID":"lithiumlkid"},"content":"        JerseyNumber updatedJerseyNumber \u003d editPersonDescriptor.getJerseyNumber()"},{"lineNumber":136,"author":{"gitID":"lithiumlkid"},"content":"                .orElse(personToEdit.getJerseyNumber());"},{"lineNumber":137,"author":{"gitID":"lithiumlkid"},"content":"        Position updatedPosition \u003d editPersonDescriptor.getPosition().orElse(personToEdit.getPosition());"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"jordancjq"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedRemark,"},{"lineNumber":140,"author":{"gitID":"lithiumlkid"},"content":"                updatedTeamName, updatedTags, updatedRating, updatedPosition, updatedJerseyNumber);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":158,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":159,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"lithiumlkid"},"content":"     * Stores the details to edit the player with. Each non-empty field value will replace the"},{"lineNumber":164,"author":{"gitID":"lithiumlkid"},"content":"     * corresponding field value of the player."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":172,"author":{"gitID":"lithiumlkid"},"content":"        private Rating rating;"},{"lineNumber":173,"author":{"gitID":"lithiumlkid"},"content":"        private Position position;"},{"lineNumber":174,"author":{"gitID":"lithiumlkid"},"content":"        private JerseyNumber jerseyNumber;"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":179,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":180,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":181,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":188,"author":{"gitID":"lithiumlkid"},"content":"            setRating(toCopy.rating);"},{"lineNumber":189,"author":{"gitID":"lithiumlkid"},"content":"            setPosition(toCopy.position);"},{"lineNumber":190,"author":{"gitID":"lithiumlkid"},"content":"            setJerseyNumber(toCopy.jerseyNumber);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":194,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":195,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":197,"author":{"gitID":"lithiumlkid"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.tags,"},{"lineNumber":198,"author":{"gitID":"lithiumlkid"},"content":"                    this.rating, this.position, this.jerseyNumber);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":234,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":235,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":236,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":238,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":242,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":243,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":244,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":245,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"lithiumlkid"},"content":"        public void setRating(Rating rating) {"},{"lineNumber":251,"author":{"gitID":"lithiumlkid"},"content":"            this.rating \u003d rating;"},{"lineNumber":252,"author":{"gitID":"lithiumlkid"},"content":"        }"},{"lineNumber":253,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":254,"author":{"gitID":"lithiumlkid"},"content":"        public Optional\u003cRating\u003e getRating() {"},{"lineNumber":255,"author":{"gitID":"lithiumlkid"},"content":"            return Optional.ofNullable(rating);"},{"lineNumber":256,"author":{"gitID":"lithiumlkid"},"content":"        }"},{"lineNumber":257,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":258,"author":{"gitID":"lithiumlkid"},"content":"        public void setPosition(Position position) {"},{"lineNumber":259,"author":{"gitID":"lithiumlkid"},"content":"            this.position \u003d position;"},{"lineNumber":260,"author":{"gitID":"lithiumlkid"},"content":"        }"},{"lineNumber":261,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":262,"author":{"gitID":"lithiumlkid"},"content":"        public Optional\u003cPosition\u003e getPosition() {"},{"lineNumber":263,"author":{"gitID":"lithiumlkid"},"content":"            return Optional.ofNullable(position);"},{"lineNumber":264,"author":{"gitID":"lithiumlkid"},"content":"        }"},{"lineNumber":265,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":266,"author":{"gitID":"lithiumlkid"},"content":"        public void setJerseyNumber(JerseyNumber jerseyNumber) {"},{"lineNumber":267,"author":{"gitID":"lithiumlkid"},"content":"            this.jerseyNumber \u003d jerseyNumber;"},{"lineNumber":268,"author":{"gitID":"lithiumlkid"},"content":"        }"},{"lineNumber":269,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":270,"author":{"gitID":"lithiumlkid"},"content":"        public Optional\u003cJerseyNumber\u003e getJerseyNumber() {"},{"lineNumber":271,"author":{"gitID":"lithiumlkid"},"content":"            return Optional.ofNullable(jerseyNumber);"},{"lineNumber":272,"author":{"gitID":"lithiumlkid"},"content":"        }"},{"lineNumber":273,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":276,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":277,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":278,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":279,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":282,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":284,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":287,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":290,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":291,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":292,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":293,"author":{"gitID":"lithiumlkid"},"content":"                    \u0026\u0026 getTags().equals(e.getTags())"},{"lineNumber":294,"author":{"gitID":"lithiumlkid"},"content":"                    \u0026\u0026 getRating().equals(e.getRating())"},{"lineNumber":295,"author":{"gitID":"lithiumlkid"},"content":"                    \u0026\u0026 getPosition().equals(e.getPosition())"},{"lineNumber":296,"author":{"gitID":"lithiumlkid"},"content":"                    \u0026\u0026 getJerseyNumber().equals(e.getJerseyNumber());"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":298,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":299,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"lithiumlkid":65,"jordancjq":5,"-":229}},{"path":"src/main/java/seedu/address/storage/AddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a storage for {@link seedu.address.model.AddressBook}."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface AddressBookStorage {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns the file path of the data file."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @see #getAddressBookFilePath()"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @see #saveAddressBook(ReadOnlyAddressBook)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"lithiumlkid"},"content":"    void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":45,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"lithiumlkid":2,"-":44}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"lithiumlkid"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"lithiumlkid"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":82,"author":{"gitID":"lithiumlkid"},"content":"        addressBookStorage.backupAddressBook(addressBook);"},{"lineNumber":83,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            saveAddressBook(event.data);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"lithiumlkid":5,"-":92}},{"path":"src/main/java/seedu/address/storage/XmlAddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A class to access AddressBook data stored as an xml file on the hard disk."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorage implements AddressBookStorage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public XmlAddressBookStorage(String filePath) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return readAddressBook(filePath);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Similar to {@link #readAddressBook()}"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException,"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                                                                                 FileNotFoundException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        File addressBookFile \u003d new File(filePath);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (!addressBookFile.exists()) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            logger.info(\"AddressBook file \"  + addressBookFile + \" not found\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return Optional.of(xmlAddressBook.toModelType());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            logger.info(\"Illegal values found in \" + addressBookFile + \": \" + ive.getMessage());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"lithiumlkid"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"lithiumlkid"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":66,"author":{"gitID":"lithiumlkid"},"content":"        saveAddressBook(addressBook, filePath + \".backup\");"},{"lineNumber":67,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, filePath);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableAddressBook(addressBook));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"lithiumlkid":5,"-":82}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":14,"author":{"gitID":"lithiumlkid"},"content":"import seedu.address.model.person.JerseyNumber;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitID":"lithiumlkid"},"content":"import seedu.address.model.person.Position;"},{"lineNumber":19,"author":{"gitID":"lithiumlkid"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":20,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":40,"author":{"gitID":"jordancjq"},"content":"    private String remark;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":42,"author":{"gitID":"jordancjq"},"content":"    private String teamName;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":44,"author":{"gitID":"lithiumlkid"},"content":"    private String rating;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":46,"author":{"gitID":"lithiumlkid"},"content":"    private String position;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":48,"author":{"gitID":"lithiumlkid"},"content":"    private String jerseyNumber;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(String name, String phone, String email, String address, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":82,"author":{"gitID":"jordancjq"},"content":"        remark \u003d source.getRemark().value;"},{"lineNumber":83,"author":{"gitID":"jordancjq"},"content":"        teamName \u003d source.getTeamName().fullName;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":85,"author":{"gitID":"lithiumlkid"},"content":"        rating \u003d source.getRating().value;"},{"lineNumber":86,"author":{"gitID":"lithiumlkid"},"content":"        position \u003d source.getPosition().value;"},{"lineNumber":87,"author":{"gitID":"lithiumlkid"},"content":"        jerseyNumber \u003d source.getJerseyNumber().value;"},{"lineNumber":88,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"jordancjq"},"content":"        final Remark remark \u003d new Remark(this.remark);"},{"lineNumber":138,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":139,"author":{"gitID":"jordancjq"},"content":"        final TeamName teamName \u003d new TeamName(this.teamName);"},{"lineNumber":140,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":142,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":143,"author":{"gitID":"lithiumlkid"},"content":"        if (this.rating \u003d\u003d null) {"},{"lineNumber":144,"author":{"gitID":"lithiumlkid"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Rating.class.getSimpleName()));"},{"lineNumber":145,"author":{"gitID":"lithiumlkid"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"lithiumlkid"},"content":"        if (!Rating.isValidRating(this.rating)) {"},{"lineNumber":147,"author":{"gitID":"lithiumlkid"},"content":"            throw new IllegalValueException(Rating.MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":148,"author":{"gitID":"lithiumlkid"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"lithiumlkid"},"content":"        final Rating rating \u003d new Rating(this.rating);"},{"lineNumber":150,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":151,"author":{"gitID":"lithiumlkid"},"content":"        if (this.position \u003d\u003d null) {"},{"lineNumber":152,"author":{"gitID":"lithiumlkid"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":153,"author":{"gitID":"lithiumlkid"},"content":"                    Position.class.getSimpleName()));"},{"lineNumber":154,"author":{"gitID":"lithiumlkid"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"lithiumlkid"},"content":"        if (!Position.isValidPosition(this.position)) {"},{"lineNumber":156,"author":{"gitID":"lithiumlkid"},"content":"            throw new IllegalValueException(Position.MESSAGE_POSITION_CONSTRAINTS);"},{"lineNumber":157,"author":{"gitID":"lithiumlkid"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"lithiumlkid"},"content":"        final Position position \u003d new Position(this.position);"},{"lineNumber":159,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":160,"author":{"gitID":"lithiumlkid"},"content":"        if (this.jerseyNumber \u003d\u003d null) {"},{"lineNumber":161,"author":{"gitID":"lithiumlkid"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":162,"author":{"gitID":"lithiumlkid"},"content":"                    JerseyNumber.class.getSimpleName()));"},{"lineNumber":163,"author":{"gitID":"lithiumlkid"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"lithiumlkid"},"content":"        if (!JerseyNumber.isValidJerseyNumber(this.jerseyNumber)) {"},{"lineNumber":165,"author":{"gitID":"lithiumlkid"},"content":"            throw new IllegalValueException(JerseyNumber.MESSAGE_JERSEY_NUMBER_CONSTRAINTS);"},{"lineNumber":166,"author":{"gitID":"lithiumlkid"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"lithiumlkid"},"content":"        final JerseyNumber jerseyNumber \u003d new JerseyNumber(this.jerseyNumber);"},{"lineNumber":168,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":169,"author":{"gitID":"lithiumlkid"},"content":"        return new Person(name, phone, email, address, remark, teamName, tags, rating, position, jerseyNumber);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":184,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":185,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":186,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(address, otherPerson.address)"},{"lineNumber":187,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"lithiumlkid":38,"jordancjq":10,"-":141}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":""},{"lineNumber":2,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":22,"author":{"gitID":"jordancjq"},"content":"    private List\u003cXmlAdaptedTeam\u003e teams;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"jordancjq"},"content":"        teams \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":45,"author":{"gitID":"jordancjq"},"content":"        teams.addAll(src.getTeamList().stream().map(XmlAdaptedTeam::new).collect(Collectors.toList()));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag}."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            addressBook.addTag(t.toModelType());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        for (XmlAdaptedPerson p : persons) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            addressBook.addPerson(p.toModelType());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"jordancjq"},"content":"        for (XmlAdaptedTeam tm : teams) {"},{"lineNumber":63,"author":{"gitID":"jordancjq"},"content":"            addressBook.createTeam(tm.toModelType());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlSerializableAddressBook)) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"},{"lineNumber":79,"author":{"gitID":"jordancjq"},"content":"        return persons.equals(otherAb.persons) \u0026\u0026 tags.equals(otherAb.tags) \u0026\u0026 teams.equals(otherAb.teams);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jordancjq":6,"-":75}},{"path":"src/main/java/seedu/address/model/person/Phone.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.parser.ParserUtil.UNSPECIFIED_FIELD;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s phone number in the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class Phone {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"},{"lineNumber":15,"author":{"gitID":"-"},"content":"            \"Phone numbers can only contain numbers, and should be at least 3 digits long\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d{3,}\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Constructs a {@code Phone}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @param phone A valid phone number."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public Phone(String phone) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.value \u003d phone;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person phone number."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static boolean isValidPhone(String test) {"},{"lineNumber":34,"author":{"gitID":"jordancjq"},"content":"        return test.matches(PHONE_VALIDATION_REGEX) || test.equals(UNSPECIFIED_FIELD);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Phone) other).value)); // state check"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jordancjq":2,"-":52}},{"path":"src/main/java/seedu/address/model/person/Address.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.parser.ParserUtil.UNSPECIFIED_FIELD;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s address in the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class Address {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"-"},"content":"            \"Person addresses can take any values, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * Constructs an {@code Address}."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @param address A valid address."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public Address(String address) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.value \u003d address;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person email."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":39,"author":{"gitID":"jordancjq"},"content":"        return test.matches(ADDRESS_VALIDATION_REGEX) || test.equals(UNSPECIFIED_FIELD);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof Address // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Address) other).value)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jordancjq":2,"-":57}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitID":"lithiumlkid"},"content":"import seedu.address.model.person.JerseyNumber;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitID":"lithiumlkid"},"content":"import seedu.address.model.person.Position;"},{"lineNumber":15,"author":{"gitID":"lithiumlkid"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":16,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":25,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return new Person[] {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":29,"author":{"gitID":"jordancjq"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Remark(\"\"), new TeamName(\"\u003cUNSPECIFIED\u003e\"),"},{"lineNumber":30,"author":{"gitID":"lithiumlkid"},"content":"                getTagSet(\"friends\"), new Rating(\"0\"), new Position(\"1\"), new JerseyNumber(\"2\")),"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":32,"author":{"gitID":"jordancjq"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Remark(\"\"), new TeamName(\"\u003cUNSPECIFIED\u003e\"),"},{"lineNumber":33,"author":{"gitID":"lithiumlkid"},"content":"                getTagSet(\"colleagues\", \"friends\"), new Rating(\"0\"), new Position(\"1\"), new JerseyNumber(\"2\")),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":35,"author":{"gitID":"jordancjq"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Remark(\"\"), new TeamName(\"\u003cUNSPECIFIED\u003e\"),"},{"lineNumber":36,"author":{"gitID":"lithiumlkid"},"content":"                getTagSet(\"neighbours\"), new Rating(\"0\"), new Position(\"1\"), new JerseyNumber(\"2\")),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":38,"author":{"gitID":"jordancjq"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Remark(\"\"),"},{"lineNumber":39,"author":{"gitID":"lithiumlkid"},"content":"                    new TeamName(\"\u003cUNSPECIFIED\u003e\"), getTagSet(\"family\"),"},{"lineNumber":40,"author":{"gitID":"lithiumlkid"},"content":"                    new Rating(\"0\"), new Position(\"1\"), new JerseyNumber(\"2\")),"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":42,"author":{"gitID":"jordancjq"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Remark(\"\"), new TeamName(\"\u003cUNSPECIFIED\u003e\"),"},{"lineNumber":43,"author":{"gitID":"lithiumlkid"},"content":"                getTagSet(\"classmates\"),"},{"lineNumber":44,"author":{"gitID":"lithiumlkid"},"content":"                    new Rating(\"0\"), new Position(\"1\"), new JerseyNumber(\"2\")),"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":46,"author":{"gitID":"jordancjq"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Remark(\"\"), new TeamName(\"\u003cUNSPECIFIED\u003e\"),"},{"lineNumber":47,"author":{"gitID":"lithiumlkid"},"content":"                getTagSet(\"colleagues\"), new Rating(\"0\"), new Position(\"1\"), new JerseyNumber(\"2\"))"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"lithiumlkid":11,"jordancjq":9,"-":55}},{"path":"src/main/java/seedu/address/logic/commands/AssignCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"},{"lineNumber":5,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TEAMNAME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":7,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":8,"author":{"gitID":"jordancjq"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"jordancjq"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":11,"author":{"gitID":"jordancjq"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":12,"author":{"gitID":"jordancjq"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"jordancjq"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":17,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":18,"author":{"gitID":"jordancjq"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"jordancjq"},"content":" * Assigns a person to a team."},{"lineNumber":20,"author":{"gitID":"jordancjq"},"content":" */"},{"lineNumber":21,"author":{"gitID":"jordancjq"},"content":"public class AssignCommand extends UndoableCommand {"},{"lineNumber":22,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":23,"author":{"gitID":"jordancjq"},"content":"    public static final String COMMAND_WORD \u003d \"assign\";"},{"lineNumber":24,"author":{"gitID":"jordancjq"},"content":"    public static final String COMMAND_ALIAS \u003d \"at\";"},{"lineNumber":25,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":26,"author":{"gitID":"jordancjq"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Assigns a person or a group of person to a team \""},{"lineNumber":27,"author":{"gitID":"jordancjq"},"content":"            + \"by the index number used in the last person listing.\\n\""},{"lineNumber":28,"author":{"gitID":"jordancjq"},"content":"            + \"Team of the person will be updated and will be added to team.\\n\""},{"lineNumber":29,"author":{"gitID":"jordancjq"},"content":"            + \"Parameters: \""},{"lineNumber":30,"author":{"gitID":"jordancjq"},"content":"            + PREFIX_TEAMNAME + \"TEAM_NAME \""},{"lineNumber":31,"author":{"gitID":"jordancjq"},"content":"            + PREFIX_INDEX + \"INDEX (must be a positive integer) \""},{"lineNumber":32,"author":{"gitID":"jordancjq"},"content":"            + \"[INDEX]...\\n\""},{"lineNumber":33,"author":{"gitID":"jordancjq"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":34,"author":{"gitID":"jordancjq"},"content":"            + PREFIX_TEAMNAME + \"Arsenal \""},{"lineNumber":35,"author":{"gitID":"jordancjq"},"content":"            + PREFIX_INDEX + \"1 2\";"},{"lineNumber":36,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":37,"author":{"gitID":"jordancjq"},"content":"    public static final String MESSAGE_PARAMETERS \u003d PREFIX_TEAMNAME + \"TEAM_NAME \""},{"lineNumber":38,"author":{"gitID":"jordancjq"},"content":"            + PREFIX_INDEX + \"INDEX \""},{"lineNumber":39,"author":{"gitID":"jordancjq"},"content":"            + \"[INDEX]...\";"},{"lineNumber":40,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":41,"author":{"gitID":"jordancjq"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Person assigned to team\";"},{"lineNumber":42,"author":{"gitID":"jordancjq"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the team\";"},{"lineNumber":43,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":44,"author":{"gitID":"jordancjq"},"content":"    private final TeamName targetTeam;"},{"lineNumber":45,"author":{"gitID":"jordancjq"},"content":"    private final List\u003cIndex\u003e targetIndexes;"},{"lineNumber":46,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":47,"author":{"gitID":"jordancjq"},"content":"    private List\u003cPerson\u003e personsToAssign;"},{"lineNumber":48,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":49,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"jordancjq"},"content":"     * Creates an AssignCommand to assign person to {@code Team}"},{"lineNumber":51,"author":{"gitID":"jordancjq"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"jordancjq"},"content":"    public AssignCommand(TeamName targetTeam, List\u003cIndex\u003e targetIndexes) {"},{"lineNumber":53,"author":{"gitID":"jordancjq"},"content":"        requireNonNull(targetTeam);"},{"lineNumber":54,"author":{"gitID":"jordancjq"},"content":"        requireNonNull(targetIndexes);"},{"lineNumber":55,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":56,"author":{"gitID":"jordancjq"},"content":"        this.targetTeam \u003d targetTeam;"},{"lineNumber":57,"author":{"gitID":"jordancjq"},"content":"        this.targetIndexes \u003d targetIndexes;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":63,"author":{"gitID":"jordancjq"},"content":"            for (Person person : personsToAssign) {"},{"lineNumber":64,"author":{"gitID":"jordancjq"},"content":"                model.assignPersonToTeam(person, targetTeam);"},{"lineNumber":65,"author":{"gitID":"jordancjq"},"content":"            }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":68,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":74,"author":{"gitID":"jordancjq"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"jordancjq"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":76,"author":{"gitID":"jordancjq"},"content":"        if (!model.getAddressBook().getTeamList().stream().anyMatch(t -\u003e t.getTeamName().equals(targetTeam))) {"},{"lineNumber":77,"author":{"gitID":"jordancjq"},"content":"            throw new CommandException(Messages.MESSAGE_TEAM_NOT_FOUND);"},{"lineNumber":78,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":81,"author":{"gitID":"jordancjq"},"content":"        List\u003cIndex\u003e executableIndexes \u003d new ArrayList\u003c\u003e();"},{"lineNumber":82,"author":{"gitID":"jordancjq"},"content":"        Boolean canAssignPerson \u003d false;"},{"lineNumber":83,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":84,"author":{"gitID":"jordancjq"},"content":"        for (Index idx : targetIndexes) {"},{"lineNumber":85,"author":{"gitID":"jordancjq"},"content":"            if (idx.getZeroBased() \u003c lastShownList.size()) {"},{"lineNumber":86,"author":{"gitID":"jordancjq"},"content":"                executableIndexes.add(idx);"},{"lineNumber":87,"author":{"gitID":"jordancjq"},"content":"                canAssignPerson \u003d true;"},{"lineNumber":88,"author":{"gitID":"jordancjq"},"content":"            }"},{"lineNumber":89,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":91,"author":{"gitID":"jordancjq"},"content":"        if (!canAssignPerson) {"},{"lineNumber":92,"author":{"gitID":"jordancjq"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ALL_INDEX);"},{"lineNumber":93,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":95,"author":{"gitID":"jordancjq"},"content":"        personsToAssign \u003d new ArrayList\u003c\u003e();"},{"lineNumber":96,"author":{"gitID":"jordancjq"},"content":"        executableIndexes.forEach(idx -\u003e personsToAssign.add(lastShownList.get(idx.getZeroBased())));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":102,"author":{"gitID":"jordancjq"},"content":"                || (other instanceof AssignCommand // instanceof handles nulls"},{"lineNumber":103,"author":{"gitID":"jordancjq"},"content":"                \u0026\u0026 this.targetTeam.equals(((AssignCommand) other).targetTeam)) // state check"},{"lineNumber":104,"author":{"gitID":"jordancjq"},"content":"                \u0026\u0026 this.targetIndexes.equals(((AssignCommand) other).targetIndexes);"},{"lineNumber":105,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"jordancjq"},"content":"}"}],"authorContributionMap":{"jordancjq":85,"-":21}},{"path":"src/main/java/seedu/address/model/person/Remark.java","lines":[{"lineNumber":1,"author":{"gitID":"jordancjq"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":3,"author":{"gitID":"jordancjq"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":5,"author":{"gitID":"jordancjq"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"jordancjq"},"content":" * Represents a Person\u0027s remark in the address book."},{"lineNumber":7,"author":{"gitID":"jordancjq"},"content":" * Guarantees: immutable; is always valid}"},{"lineNumber":8,"author":{"gitID":"jordancjq"},"content":" */"},{"lineNumber":9,"author":{"gitID":"jordancjq"},"content":"public class Remark {"},{"lineNumber":10,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":11,"author":{"gitID":"jordancjq"},"content":"    public static final String MESSAGE_REMARK_CONSTRAINTS \u003d"},{"lineNumber":12,"author":{"gitID":"jordancjq"},"content":"            \"Remark can contain any values, can even be blank\";"},{"lineNumber":13,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":14,"author":{"gitID":"jordancjq"},"content":"    public final String value;"},{"lineNumber":15,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":16,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"jordancjq"},"content":"     * Constructs a {@code Remark}"},{"lineNumber":18,"author":{"gitID":"jordancjq"},"content":"     *"},{"lineNumber":19,"author":{"gitID":"jordancjq"},"content":"     * @param remark Any remark"},{"lineNumber":20,"author":{"gitID":"jordancjq"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"jordancjq"},"content":"    public Remark(String remark) {"},{"lineNumber":22,"author":{"gitID":"jordancjq"},"content":"        requireNonNull(remark);"},{"lineNumber":23,"author":{"gitID":"jordancjq"},"content":"        this.value \u003d remark;"},{"lineNumber":24,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":26,"author":{"gitID":"jordancjq"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"jordancjq"},"content":"    public String toString() {"},{"lineNumber":28,"author":{"gitID":"jordancjq"},"content":"        return value;"},{"lineNumber":29,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":31,"author":{"gitID":"jordancjq"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"jordancjq"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitID":"jordancjq"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":34,"author":{"gitID":"jordancjq"},"content":"                || (other instanceof Remark // instanceof handles nulls"},{"lineNumber":35,"author":{"gitID":"jordancjq"},"content":"                \u0026\u0026 this.value.equals(((Remark) other).value)); // state check"},{"lineNumber":36,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":38,"author":{"gitID":"jordancjq"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"jordancjq"},"content":"    public int hashCode() {"},{"lineNumber":40,"author":{"gitID":"jordancjq"},"content":"        return value.hashCode();"},{"lineNumber":41,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"jordancjq"},"content":"}"}],"authorContributionMap":{"jordancjq":42}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":11,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":23,"author":{"gitID":"jordancjq"},"content":"    private final Remark remark;"},{"lineNumber":24,"author":{"gitID":"jordancjq"},"content":"    private final TeamName teamName;"},{"lineNumber":25,"author":{"gitID":"lithiumlkid"},"content":"    private final JerseyNumber jerseyNumber;"},{"lineNumber":26,"author":{"gitID":"lithiumlkid"},"content":"    private final Rating rating;"},{"lineNumber":27,"author":{"gitID":"lithiumlkid"},"content":"    private final Position position;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"jordancjq"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Remark remark, TeamName teamName,"},{"lineNumber":35,"author":{"gitID":"lithiumlkid"},"content":"                  Set\u003cTag\u003e tags, Rating rating, Position position, JerseyNumber jerseyNumber) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":41,"author":{"gitID":"jordancjq"},"content":"        this.remark \u003d remark;"},{"lineNumber":42,"author":{"gitID":"jordancjq"},"content":"        this.teamName \u003d teamName;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":45,"author":{"gitID":"lithiumlkid"},"content":"        this.rating \u003d rating;"},{"lineNumber":46,"author":{"gitID":"lithiumlkid"},"content":"        this.position \u003d position;"},{"lineNumber":47,"author":{"gitID":"lithiumlkid"},"content":"        this.jerseyNumber \u003d jerseyNumber;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"jordancjq"},"content":"    public Remark getRemark() {"},{"lineNumber":67,"author":{"gitID":"jordancjq"},"content":"        return remark;"},{"lineNumber":68,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":70,"author":{"gitID":"jordancjq"},"content":"    public TeamName getTeamName() {"},{"lineNumber":71,"author":{"gitID":"jordancjq"},"content":"        return teamName;"},{"lineNumber":72,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":74,"author":{"gitID":"lithiumlkid"},"content":"    public JerseyNumber getJerseyNumber() {"},{"lineNumber":75,"author":{"gitID":"lithiumlkid"},"content":"        return jerseyNumber;"},{"lineNumber":76,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":78,"author":{"gitID":"lithiumlkid"},"content":"    public Rating getRating() {"},{"lineNumber":79,"author":{"gitID":"lithiumlkid"},"content":"        return rating;"},{"lineNumber":80,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":82,"author":{"gitID":"lithiumlkid"},"content":"    public Position getPosition() {"},{"lineNumber":83,"author":{"gitID":"lithiumlkid"},"content":"        return position;"},{"lineNumber":84,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":114,"author":{"gitID":"lithiumlkid"},"content":"        return Objects.hash(name, phone, email, address, remark, teamName, tags, rating, position, jerseyNumber);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":121,"author":{"gitID":"jordancjq"},"content":"                .append(\" Team: \")"},{"lineNumber":122,"author":{"gitID":"jordancjq"},"content":"                .append(getTeamName())"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":131,"author":{"gitID":"jordancjq"},"content":"        builder.append(\"\\n\");"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"lithiumlkid":20,"jordancjq":17,"-":98}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":6,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.Team;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"jordancjq"},"content":"     * Returns an unmodifiable view of the teams list."},{"lineNumber":27,"author":{"gitID":"jordancjq"},"content":"     * This list will not contain any duplicate teams."},{"lineNumber":28,"author":{"gitID":"jordancjq"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"jordancjq"},"content":"    ObservableList\u003cTeam\u003e getTeamList();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jordancjq":6,"-":24}},{"path":"src/main/java/seedu/address/model/person/JerseyNumber.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.parser.ParserUtil.UNSPECIFIED_FIELD;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"lithiumlkid"},"content":" * Represents a Player\u0027s jersey number in the address book."},{"lineNumber":9,"author":{"gitID":"lithiumlkid"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidJerseyNumber(String)}"},{"lineNumber":10,"author":{"gitID":"lithiumlkid"},"content":" */"},{"lineNumber":11,"author":{"gitID":"lithiumlkid"},"content":"public class JerseyNumber {"},{"lineNumber":12,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":13,"author":{"gitID":"lithiumlkid"},"content":"    public static final String MESSAGE_JERSEY_NUMBER_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"lithiumlkid"},"content":"            \"Player\u0027s jersey number should be an integer from 0 - 99.\";"},{"lineNumber":15,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":16,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":17,"author":{"gitID":"lithiumlkid"},"content":"    public static final String RATING_VALIDATION_REGEX \u003d \"[0-9]|[1-8][0-9]|9[0-9]\";"},{"lineNumber":18,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":19,"author":{"gitID":"lithiumlkid"},"content":"    public final String value;"},{"lineNumber":20,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":21,"author":{"gitID":"lithiumlkid"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"lithiumlkid"},"content":"     * Constructs an {@code JerseyNumber}."},{"lineNumber":23,"author":{"gitID":"lithiumlkid"},"content":"     *"},{"lineNumber":24,"author":{"gitID":"lithiumlkid"},"content":"     * @param jerseyNumber A valid jersey number."},{"lineNumber":25,"author":{"gitID":"lithiumlkid"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"lithiumlkid"},"content":"    public JerseyNumber(String jerseyNumber) {"},{"lineNumber":27,"author":{"gitID":"lithiumlkid"},"content":"        requireNonNull(jerseyNumber);"},{"lineNumber":28,"author":{"gitID":"lithiumlkid"},"content":"        checkArgument(isValidJerseyNumber(jerseyNumber), MESSAGE_JERSEY_NUMBER_CONSTRAINTS);"},{"lineNumber":29,"author":{"gitID":"lithiumlkid"},"content":"        this.value \u003d jerseyNumber;"},{"lineNumber":30,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":32,"author":{"gitID":"lithiumlkid"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"lithiumlkid"},"content":"     * Returns true if a given string is a valid player\u0027s jersey number."},{"lineNumber":34,"author":{"gitID":"lithiumlkid"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"lithiumlkid"},"content":"    public static boolean isValidJerseyNumber(String test) {"},{"lineNumber":36,"author":{"gitID":"lithiumlkid"},"content":"        return test.matches(RATING_VALIDATION_REGEX) || test.equals(UNSPECIFIED_FIELD);"},{"lineNumber":37,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":39,"author":{"gitID":"jordancjq"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"jordancjq"},"content":"    public String toString() {"},{"lineNumber":41,"author":{"gitID":"jordancjq"},"content":"        return value;"},{"lineNumber":42,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":44,"author":{"gitID":"jordancjq"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"jordancjq"},"content":"    public boolean equals(Object other) {"},{"lineNumber":46,"author":{"gitID":"jordancjq"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":47,"author":{"gitID":"lithiumlkid"},"content":"                || (other instanceof JerseyNumber // instanceof handles nulls"},{"lineNumber":48,"author":{"gitID":"lithiumlkid"},"content":"                \u0026\u0026 this.value.equals(((JerseyNumber) other).value)); // state check"},{"lineNumber":49,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":51,"author":{"gitID":"jordancjq"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"jordancjq"},"content":"    public int hashCode() {"},{"lineNumber":53,"author":{"gitID":"jordancjq"},"content":"        return value.hashCode();"},{"lineNumber":54,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":56,"author":{"gitID":"lithiumlkid"},"content":"}"}],"authorContributionMap":{"lithiumlkid":33,"jordancjq":17,"-":6}},{"path":"src/main/java/seedu/address/model/team/Team.java","lines":[{"lineNumber":1,"author":{"gitID":"jordancjq"},"content":"package seedu.address.model.team;"},{"lineNumber":2,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":3,"author":{"gitID":"jordancjq"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"jordancjq"},"content":"import java.util.Objects;"},{"lineNumber":5,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":6,"author":{"gitID":"jordancjq"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":10,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":11,"author":{"gitID":"jordancjq"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"jordancjq"},"content":" * Represents a Team in the application."},{"lineNumber":13,"author":{"gitID":"jordancjq"},"content":" * Guarantees: details are present and not null, field values are validated, im!mutable"},{"lineNumber":14,"author":{"gitID":"jordancjq"},"content":" */"},{"lineNumber":15,"author":{"gitID":"jordancjq"},"content":"public class Team extends UniquePersonList {"},{"lineNumber":16,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_TEAM_CONSTRAINTS \u003d \"Team names should be a string\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"jordancjq"},"content":"    private final TeamName teamName;"},{"lineNumber":20,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":21,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"jordancjq"},"content":"     * Every field must be present and not null."},{"lineNumber":23,"author":{"gitID":"jordancjq"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"jordancjq"},"content":"    public Team(TeamName teamName) {"},{"lineNumber":25,"author":{"gitID":"jordancjq"},"content":"        this.teamName \u003d teamName;"},{"lineNumber":26,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":28,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"jordancjq"},"content":"     * Constructs {@code Team} with {@code teamName} and {@code players}."},{"lineNumber":30,"author":{"gitID":"jordancjq"},"content":"     * Every field must be present and not null."},{"lineNumber":31,"author":{"gitID":"jordancjq"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"jordancjq"},"content":"    public Team(TeamName teamName, List\u003cPerson\u003e players) {"},{"lineNumber":33,"author":{"gitID":"jordancjq"},"content":"        this.teamName \u003d teamName;"},{"lineNumber":34,"author":{"gitID":"jordancjq"},"content":"        try {"},{"lineNumber":35,"author":{"gitID":"jordancjq"},"content":"            setPersons(players);"},{"lineNumber":36,"author":{"gitID":"jordancjq"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":37,"author":{"gitID":"jordancjq"},"content":"            throw new AssertionError(\"Team should not have duplicated person from loading from database\");"},{"lineNumber":38,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":41,"author":{"gitID":"jordancjq"},"content":"    public TeamName getTeamName() {"},{"lineNumber":42,"author":{"gitID":"jordancjq"},"content":"        return teamName;"},{"lineNumber":43,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":45,"author":{"gitID":"jordancjq"},"content":"    public ObservableList\u003cPerson\u003e getTeamPlayers() {"},{"lineNumber":46,"author":{"gitID":"jordancjq"},"content":"        return super.asObservableList();"},{"lineNumber":47,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":49,"author":{"gitID":"jordancjq"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"jordancjq"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitID":"jordancjq"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":52,"author":{"gitID":"jordancjq"},"content":"        builder.append(getTeamName())"},{"lineNumber":53,"author":{"gitID":"jordancjq"},"content":"                .append(\", \")"},{"lineNumber":54,"author":{"gitID":"jordancjq"},"content":"                .append(super.asObservableList().size())"},{"lineNumber":55,"author":{"gitID":"jordancjq"},"content":"                .append(\" players: \")"},{"lineNumber":56,"author":{"gitID":"jordancjq"},"content":"                .append(\"\\n\");"},{"lineNumber":57,"author":{"gitID":"jordancjq"},"content":"        getTeamPlayers().forEach(builder::append);"},{"lineNumber":58,"author":{"gitID":"jordancjq"},"content":"        return builder.toString();"},{"lineNumber":59,"author":{"gitID":"jordancjq"},"content":"        // TODO: refine later"},{"lineNumber":60,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":62,"author":{"gitID":"jordancjq"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"jordancjq"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitID":"jordancjq"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":65,"author":{"gitID":"jordancjq"},"content":"                || (other instanceof Team // instanceof handles nulls"},{"lineNumber":66,"author":{"gitID":"jordancjq"},"content":"                \u0026\u0026 this.teamName.equals(((Team) other).teamName));"},{"lineNumber":67,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":69,"author":{"gitID":"jordancjq"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"jordancjq"},"content":"    public int hashCode() {"},{"lineNumber":71,"author":{"gitID":"jordancjq"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":72,"author":{"gitID":"jordancjq"},"content":"        return Objects.hash(teamName);"},{"lineNumber":73,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"jordancjq"},"content":"}"}],"authorContributionMap":{"jordancjq":71,"-":3}},{"path":"src/main/java/seedu/address/model/person/Position.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.parser.ParserUtil.UNSPECIFIED_FIELD;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"lithiumlkid"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"lithiumlkid"},"content":"import java.util.HashMap;"},{"lineNumber":9,"author":{"gitID":"lithiumlkid"},"content":"import java.util.Map;"},{"lineNumber":10,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":11,"author":{"gitID":"lithiumlkid"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"lithiumlkid"},"content":" * Represents a Player\u0027s position in the address book."},{"lineNumber":13,"author":{"gitID":"lithiumlkid"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPosition(String)}"},{"lineNumber":14,"author":{"gitID":"lithiumlkid"},"content":" */"},{"lineNumber":15,"author":{"gitID":"lithiumlkid"},"content":"public class Position {"},{"lineNumber":16,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":17,"author":{"gitID":"lithiumlkid"},"content":"    public static final String MESSAGE_POSITION_CONSTRAINTS \u003d"},{"lineNumber":18,"author":{"gitID":"lithiumlkid"},"content":"            \"Player\u0027s position should be an integer from 1 - 4 where 1 - Striker, 2 - Midfield, 3 - Defender, \""},{"lineNumber":19,"author":{"gitID":"lithiumlkid"},"content":"                   + \"and 4 - Goalkeeper.\";"},{"lineNumber":20,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":21,"author":{"gitID":"lithiumlkid"},"content":"    public static final String RATING_VALIDATION_REGEX \u003d \"[1-4]\";"},{"lineNumber":22,"author":{"gitID":"lithiumlkid"},"content":"    private static final Map\u003cString, String\u003e myMap;"},{"lineNumber":23,"author":{"gitID":"lithiumlkid"},"content":"    static {"},{"lineNumber":24,"author":{"gitID":"lithiumlkid"},"content":"        Map\u003cString, String\u003e aMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":25,"author":{"gitID":"lithiumlkid"},"content":"        aMap.put(\"1\", \"Striker\");"},{"lineNumber":26,"author":{"gitID":"lithiumlkid"},"content":"        aMap.put(\"2\", \"Midfielder\");"},{"lineNumber":27,"author":{"gitID":"lithiumlkid"},"content":"        aMap.put(\"3\", \"Defender\");"},{"lineNumber":28,"author":{"gitID":"lithiumlkid"},"content":"        aMap.put(\"4\", \"Goalkeeper\");"},{"lineNumber":29,"author":{"gitID":"lithiumlkid"},"content":"        myMap \u003d Collections.unmodifiableMap(aMap);"},{"lineNumber":30,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"lithiumlkid"},"content":"    public final String value;"},{"lineNumber":32,"author":{"gitID":"lithiumlkid"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"lithiumlkid"},"content":"     * Constructs an {@code Position}."},{"lineNumber":34,"author":{"gitID":"lithiumlkid"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"lithiumlkid"},"content":"     * @param position A valid position."},{"lineNumber":36,"author":{"gitID":"lithiumlkid"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"lithiumlkid"},"content":"    public Position(String position) {"},{"lineNumber":38,"author":{"gitID":"lithiumlkid"},"content":"        requireNonNull(position);"},{"lineNumber":39,"author":{"gitID":"lithiumlkid"},"content":"        checkArgument(isValidPosition(position), MESSAGE_POSITION_CONSTRAINTS);"},{"lineNumber":40,"author":{"gitID":"lithiumlkid"},"content":"        this.value \u003d position;"},{"lineNumber":41,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":43,"author":{"gitID":"lithiumlkid"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"lithiumlkid"},"content":"     * Returns true if a given string is a valid player\u0027s position."},{"lineNumber":45,"author":{"gitID":"lithiumlkid"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"lithiumlkid"},"content":"    public static boolean isValidPosition(String test) {"},{"lineNumber":47,"author":{"gitID":"lithiumlkid"},"content":"        return test.matches(RATING_VALIDATION_REGEX) || test.equals(UNSPECIFIED_FIELD);"},{"lineNumber":48,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":50,"author":{"gitID":"lithiumlkid"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"lithiumlkid"},"content":"     * Returns position name according to value"},{"lineNumber":52,"author":{"gitID":"lithiumlkid"},"content":"     * @return position name"},{"lineNumber":53,"author":{"gitID":"lithiumlkid"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"lithiumlkid"},"content":"    public String getPositionName() {"},{"lineNumber":55,"author":{"gitID":"lithiumlkid"},"content":"        return myMap.get(value);"},{"lineNumber":56,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":58,"author":{"gitID":"jordancjq"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"jordancjq"},"content":"    public String toString() {"},{"lineNumber":60,"author":{"gitID":"jordancjq"},"content":"        return value;"},{"lineNumber":61,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":63,"author":{"gitID":"jordancjq"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"jordancjq"},"content":"    public boolean equals(Object other) {"},{"lineNumber":65,"author":{"gitID":"jordancjq"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":66,"author":{"gitID":"lithiumlkid"},"content":"                || (other instanceof Position // instanceof handles nulls"},{"lineNumber":67,"author":{"gitID":"lithiumlkid"},"content":"                \u0026\u0026 this.value.equals(((Position) other).value)); // state check"},{"lineNumber":68,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":70,"author":{"gitID":"jordancjq"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"jordancjq"},"content":"    public int hashCode() {"},{"lineNumber":72,"author":{"gitID":"jordancjq"},"content":"        return value.hashCode();"},{"lineNumber":73,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":75,"author":{"gitID":"lithiumlkid"},"content":"}"}],"authorContributionMap":{"lithiumlkid":55,"jordancjq":15,"-":5}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.parser.ParserUtil.UNSPECIFIED_FIELD;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.NoPlayerException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":22,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.Team;"},{"lineNumber":23,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":24,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.UniqueTeamList;"},{"lineNumber":25,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.exceptions.DuplicateTeamException;"},{"lineNumber":26,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.exceptions.TeamNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":36,"author":{"gitID":"jordancjq"},"content":"    private final UniqueTeamList teams;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":48,"author":{"gitID":"jordancjq"},"content":"        teams \u003d new UniqueTeamList();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"jordancjq"},"content":"    public void setTeams(List\u003cTeam\u003e teams) throws DuplicateTeamException {"},{"lineNumber":72,"author":{"gitID":"jordancjq"},"content":"        this.teams.setTeams(teams);"},{"lineNumber":73,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":84,"author":{"gitID":"jordancjq"},"content":"        List\u003cTeam\u003e syncedTeamList \u003d newData.getTeamList();"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":88,"author":{"gitID":"jordancjq"},"content":"            setTeams(syncedTeamList);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":91,"author":{"gitID":"jordancjq"},"content":"        } catch (DuplicateTeamException e) {"},{"lineNumber":92,"author":{"gitID":"jordancjq"},"content":"            throw new AssertionError(\"MTM should not have duplicate teams\");"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":110,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":131,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":132,"author":{"gitID":"jordancjq"},"content":"        removeUnusedTags();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public void sortPlayersBy(String field, String order) throws NoPlayerException {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        persons.sortBy(field, order);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":154,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":157,"author":{"gitID":"jordancjq"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(), person.getRemark(),"},{"lineNumber":158,"author":{"gitID":"lithiumlkid"},"content":"                person.getTeamName(), correctTagReferences, person.getRating(), person.getPosition(),"},{"lineNumber":159,"author":{"gitID":"lithiumlkid"},"content":"                person.getJerseyNumber());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * Sets the colour of {@code tag}."},{"lineNumber":183,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    public void setTagColour(Tag tag, String colour) {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        for (Tag t : tags) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            if (t.getTagName().equals(tag.getTagName())) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"                t.changeTagColour(colour);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"jordancjq"},"content":"     *"},{"lineNumber":194,"author":{"gitID":"jordancjq"},"content":"     * Removes {@code tag} from all persons in this {@code AddressBook}."},{"lineNumber":195,"author":{"gitID":"jordancjq"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"jordancjq"},"content":"    public void removeTag(Tag tag) {"},{"lineNumber":197,"author":{"gitID":"jordancjq"},"content":"        try {"},{"lineNumber":198,"author":{"gitID":"jordancjq"},"content":"            for (Person person : persons) {"},{"lineNumber":199,"author":{"gitID":"jordancjq"},"content":"                removeTagFromPerson(tag, person);"},{"lineNumber":200,"author":{"gitID":"jordancjq"},"content":"            }"},{"lineNumber":201,"author":{"gitID":"jordancjq"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":202,"author":{"gitID":"jordancjq"},"content":"            throw new AssertionError(\"Impossible: AddressBook should contain this person\");"},{"lineNumber":203,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":206,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"jordancjq"},"content":"     * Removes {@code tag} from {@code person} in this {@code AddressBook}."},{"lineNumber":208,"author":{"gitID":"jordancjq"},"content":"     * @throws PersonNotFoundException if the {@code person} is not in this {@code AddressBook}."},{"lineNumber":209,"author":{"gitID":"jordancjq"},"content":"     */"},{"lineNumber":210,"author":{"gitID":"jordancjq"},"content":"    private void removeTagFromPerson(Tag tag, Person person) throws PersonNotFoundException {"},{"lineNumber":211,"author":{"gitID":"jordancjq"},"content":"        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(person.getTags());"},{"lineNumber":212,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":213,"author":{"gitID":"jordancjq"},"content":"        if (!newTags.remove(tag)) {"},{"lineNumber":214,"author":{"gitID":"jordancjq"},"content":"            return;"},{"lineNumber":215,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":217,"author":{"gitID":"jordancjq"},"content":"        Person newPerson \u003d"},{"lineNumber":218,"author":{"gitID":"jordancjq"},"content":"                new Person(person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"},{"lineNumber":219,"author":{"gitID":"lithiumlkid"},"content":"                        person.getRemark(), person.getTeamName(), newTags, person.getRating(), person.getPosition(),"},{"lineNumber":220,"author":{"gitID":"lithiumlkid"},"content":"                        person.getJerseyNumber());"},{"lineNumber":221,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":222,"author":{"gitID":"jordancjq"},"content":"        try {"},{"lineNumber":223,"author":{"gitID":"jordancjq"},"content":"            updatePerson(person, newPerson);"},{"lineNumber":224,"author":{"gitID":"jordancjq"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":225,"author":{"gitID":"jordancjq"},"content":"            throw new AssertionError(\"AddressBook should not have duplicate person \""},{"lineNumber":226,"author":{"gitID":"jordancjq"},"content":"                    + \"after updating person\u0027s tag.\");"},{"lineNumber":227,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":230,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":231,"author":{"gitID":"jordancjq"},"content":"     * Removes all {@code tag} that are not in used by any {@code Person} in this {@code AddressBook}."},{"lineNumber":232,"author":{"gitID":"jordancjq"},"content":"     */"},{"lineNumber":233,"author":{"gitID":"jordancjq"},"content":"    private void removeUnusedTags() {"},{"lineNumber":234,"author":{"gitID":"jordancjq"},"content":"        Set\u003cTag\u003e tagsInPersons \u003d persons.asObservableList().stream()"},{"lineNumber":235,"author":{"gitID":"jordancjq"},"content":"                .map(Person::getTags)"},{"lineNumber":236,"author":{"gitID":"jordancjq"},"content":"                .flatMap(Set::stream)"},{"lineNumber":237,"author":{"gitID":"jordancjq"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":238,"author":{"gitID":"jordancjq"},"content":"        tags.setTags(tagsInPersons);"},{"lineNumber":239,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":241,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":242,"author":{"gitID":"jordancjq"},"content":"     * Creates a team in the manager."},{"lineNumber":243,"author":{"gitID":"jordancjq"},"content":"     * @throws DuplicateTeamException if an equivalent team already exists."},{"lineNumber":244,"author":{"gitID":"jordancjq"},"content":"     */"},{"lineNumber":245,"author":{"gitID":"jordancjq"},"content":"    public void createTeam(Team t) throws DuplicateTeamException {"},{"lineNumber":246,"author":{"gitID":"jordancjq"},"content":"        teams.add(t);"},{"lineNumber":247,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":249,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":250,"author":{"gitID":"jordancjq"},"content":"     * Assigns a {@code person} to a {@code team}."},{"lineNumber":251,"author":{"gitID":"jordancjq"},"content":"     * @throws TeamNotFoundException if the {@code team} is not found in this {@code AddressBook}."},{"lineNumber":252,"author":{"gitID":"jordancjq"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"jordancjq"},"content":"    public void assignPersonToTeam(Person person, TeamName teamName) throws DuplicatePersonException {"},{"lineNumber":254,"author":{"gitID":"jordancjq"},"content":"        Person newPersonWithTeam \u003d"},{"lineNumber":255,"author":{"gitID":"jordancjq"},"content":"                new Person(person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"},{"lineNumber":256,"author":{"gitID":"jordancjq"},"content":"                        person.getRemark(), teamName, person.getTags(), person.getRating(), person.getPosition(),"},{"lineNumber":257,"author":{"gitID":"lithiumlkid"},"content":"                        person.getJerseyNumber());"},{"lineNumber":258,"author":{"gitID":"jordancjq"},"content":"        try {"},{"lineNumber":259,"author":{"gitID":"jordancjq"},"content":"            updatePerson(person, newPersonWithTeam);"},{"lineNumber":260,"author":{"gitID":"jordancjq"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":261,"author":{"gitID":"jordancjq"},"content":"            throw new AssertionError(\"AddressBook should not have duplicate person after assigning team\");"},{"lineNumber":262,"author":{"gitID":"jordancjq"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":263,"author":{"gitID":"jordancjq"},"content":"            throw new AssertionError(\"Impossible: AddressBook should contain this person\");"},{"lineNumber":264,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":265,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":266,"author":{"gitID":"jordancjq"},"content":"        teams.assignPersonToTeam(newPersonWithTeam, teams.getTeam(teamName));"},{"lineNumber":267,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":268,"author":{"gitID":"jordancjq"},"content":"        try {"},{"lineNumber":269,"author":{"gitID":"jordancjq"},"content":"            removePersonFromTeam(person, person.getTeamName());"},{"lineNumber":270,"author":{"gitID":"jordancjq"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":271,"author":{"gitID":"jordancjq"},"content":"            throw new AssertionError(\"Impossible: Team should contain of this person\");"},{"lineNumber":272,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":273,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":275,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":276,"author":{"gitID":"jordancjq"},"content":"     * Removes a {@code person} from a {@code team}."},{"lineNumber":277,"author":{"gitID":"jordancjq"},"content":"     */"},{"lineNumber":278,"author":{"gitID":"jordancjq"},"content":"    public void removePersonFromTeam(Person person, TeamName teamName) throws PersonNotFoundException {"},{"lineNumber":279,"author":{"gitID":"jordancjq"},"content":"        if (!person.getTeamName().toString().equals(UNSPECIFIED_FIELD)) {"},{"lineNumber":280,"author":{"gitID":"jordancjq"},"content":"            try {"},{"lineNumber":281,"author":{"gitID":"jordancjq"},"content":"                teams.removePersonFromTeam(person, teams.getTeam(teamName));"},{"lineNumber":282,"author":{"gitID":"jordancjq"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"                throw new PersonNotFoundException();"},{"lineNumber":284,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":286,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":287,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":288,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":289,"author":{"gitID":"jordancjq"},"content":"     * Removes a {@code team} from {@code teams}."},{"lineNumber":290,"author":{"gitID":"jordancjq"},"content":"     */"},{"lineNumber":291,"author":{"gitID":"jordancjq"},"content":"    public void removeTeam(TeamName teamName) throws TeamNotFoundException {"},{"lineNumber":292,"author":{"gitID":"jordancjq"},"content":"        if (!teams.contains(teamName)) {"},{"lineNumber":293,"author":{"gitID":"jordancjq"},"content":"            throw new TeamNotFoundException();"},{"lineNumber":294,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":295,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":296,"author":{"gitID":"jordancjq"},"content":"        Team teamToRemove \u003d teams.getTeam(teamName);"},{"lineNumber":297,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":298,"author":{"gitID":"jordancjq"},"content":"        for (Person person : teamToRemove) {"},{"lineNumber":299,"author":{"gitID":"jordancjq"},"content":"            removeTeamFromPerson(person);"},{"lineNumber":300,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":301,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":302,"author":{"gitID":"jordancjq"},"content":"        teams.remove(teamToRemove);"},{"lineNumber":303,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":304,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":305,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":306,"author":{"gitID":"jordancjq"},"content":"     * Removes {@code teamName} from {@code person} in this {@code Team}."},{"lineNumber":307,"author":{"gitID":"jordancjq"},"content":"     */"},{"lineNumber":308,"author":{"gitID":"jordancjq"},"content":"    private void removeTeamFromPerson(Person person) {"},{"lineNumber":309,"author":{"gitID":"jordancjq"},"content":"        Person personWithRemoveTeam \u003d"},{"lineNumber":310,"author":{"gitID":"jordancjq"},"content":"                new Person(person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"},{"lineNumber":311,"author":{"gitID":"jordancjq"},"content":"                        person.getRemark(), new TeamName(UNSPECIFIED_FIELD), person.getTags(), person.getRating(),"},{"lineNumber":312,"author":{"gitID":"jordancjq"},"content":"                        person.getPosition(), person.getJerseyNumber());"},{"lineNumber":313,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":314,"author":{"gitID":"jordancjq"},"content":"        try {"},{"lineNumber":315,"author":{"gitID":"jordancjq"},"content":"            persons.setPerson(person, personWithRemoveTeam);"},{"lineNumber":316,"author":{"gitID":"jordancjq"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":317,"author":{"gitID":"jordancjq"},"content":"            throw new AssertionError(\"AddressBook should not have duplicate person after assigning team\");"},{"lineNumber":318,"author":{"gitID":"jordancjq"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":319,"author":{"gitID":"jordancjq"},"content":"            throw new AssertionError(\"Impossible: AddressBook should contain this person\");"},{"lineNumber":320,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":321,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":322,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":326,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":327,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":328,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":329,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":332,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":333,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":334,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":335,"author":{"gitID":"-"},"content":""},{"lineNumber":336,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":337,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":338,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":339,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":340,"author":{"gitID":"-"},"content":""},{"lineNumber":341,"author":{"gitID":"jordancjq"},"content":"    @Override"},{"lineNumber":342,"author":{"gitID":"jordancjq"},"content":"    public ObservableList\u003cTeam\u003e getTeamList() {"},{"lineNumber":343,"author":{"gitID":"jordancjq"},"content":"        return teams.asObservableList();"},{"lineNumber":344,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":345,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":346,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":347,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":348,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":349,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":350,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":351,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":352,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":353,"author":{"gitID":"-"},"content":""},{"lineNumber":354,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":355,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":356,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":357,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":358,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":359,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"lithiumlkid":5,"jordancjq":148,"-":206}},{"path":"src/main/java/seedu/address/model/person/Rating.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.parser.ParserUtil.UNSPECIFIED_FIELD;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"lithiumlkid"},"content":" * Represents a Player\u0027s rating in the address book."},{"lineNumber":9,"author":{"gitID":"lithiumlkid"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRating(String)}"},{"lineNumber":10,"author":{"gitID":"lithiumlkid"},"content":" */"},{"lineNumber":11,"author":{"gitID":"lithiumlkid"},"content":"public class Rating {"},{"lineNumber":12,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":13,"author":{"gitID":"lithiumlkid"},"content":"    public static final String MESSAGE_RATING_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"lithiumlkid"},"content":"            \"Player\u0027s rating should be an integer from 0 - 5.\";"},{"lineNumber":15,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":16,"author":{"gitID":"lithiumlkid"},"content":"    public static final String RATING_VALIDATION_REGEX \u003d \"[0-5]\";"},{"lineNumber":17,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":18,"author":{"gitID":"lithiumlkid"},"content":"    public final String value;"},{"lineNumber":19,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":20,"author":{"gitID":"lithiumlkid"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"lithiumlkid"},"content":"     * Constructs an {@code Rating}."},{"lineNumber":22,"author":{"gitID":"lithiumlkid"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"lithiumlkid"},"content":"     * @param rating A valid rating."},{"lineNumber":24,"author":{"gitID":"lithiumlkid"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"lithiumlkid"},"content":"    public Rating(String rating) {"},{"lineNumber":26,"author":{"gitID":"lithiumlkid"},"content":"        requireNonNull(rating);"},{"lineNumber":27,"author":{"gitID":"lithiumlkid"},"content":"        checkArgument(isValidRating(rating), MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitID":"lithiumlkid"},"content":"        this.value \u003d rating;"},{"lineNumber":29,"author":{"gitID":"lithiumlkid"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":31,"author":{"gitID":"lithiumlkid"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"lithiumlkid"},"content":"     * Returns true if a given string is a valid player\u0027s rating."},{"lineNumber":33,"author":{"gitID":"lithiumlkid"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"lithiumlkid"},"content":"    public static boolean isValidRating(String test) {"},{"lineNumber":35,"author":{"gitID":"lithiumlkid"},"content":"        return test.matches(RATING_VALIDATION_REGEX) || test.equals(UNSPECIFIED_FIELD);"},{"lineNumber":36,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":38,"author":{"gitID":"jordancjq"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"jordancjq"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitID":"jordancjq"},"content":"        return value;"},{"lineNumber":41,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":43,"author":{"gitID":"jordancjq"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"jordancjq"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitID":"jordancjq"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":46,"author":{"gitID":"lithiumlkid"},"content":"                || (other instanceof Rating // instanceof handles nulls"},{"lineNumber":47,"author":{"gitID":"lithiumlkid"},"content":"                \u0026\u0026 this.value.equals(((Rating) other).value)); // state check"},{"lineNumber":48,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":50,"author":{"gitID":"jordancjq"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"jordancjq"},"content":"    public int hashCode() {"},{"lineNumber":52,"author":{"gitID":"jordancjq"},"content":"        return value.hashCode();"},{"lineNumber":53,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"lithiumlkid"},"content":""},{"lineNumber":55,"author":{"gitID":"lithiumlkid"},"content":"}"}],"authorContributionMap":{"lithiumlkid":32,"jordancjq":17,"-":6}},{"path":"src/main/java/seedu/address/model/team/exceptions/TeamNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"jordancjq"},"content":"package seedu.address.model.team.exceptions;"},{"lineNumber":2,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":3,"author":{"gitID":"jordancjq"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"jordancjq"},"content":" * Signals that the operation is unable to find the specified team."},{"lineNumber":5,"author":{"gitID":"jordancjq"},"content":" */"},{"lineNumber":6,"author":{"gitID":"jordancjq"},"content":"public class TeamNotFoundException extends Exception {"},{"lineNumber":7,"author":{"gitID":"jordancjq"},"content":"}"}],"authorContributionMap":{"jordancjq":7}},{"path":"src/main/java/seedu/address/model/team/exceptions/DuplicateTeamException.java","lines":[{"lineNumber":1,"author":{"gitID":"jordancjq"},"content":"package seedu.address.model.team.exceptions;"},{"lineNumber":2,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":5,"author":{"gitID":"jordancjq"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"jordancjq"},"content":" * Signals that the operation will result in duplicate Team objects."},{"lineNumber":7,"author":{"gitID":"jordancjq"},"content":" */"},{"lineNumber":8,"author":{"gitID":"jordancjq"},"content":"public class DuplicateTeamException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"jordancjq"},"content":"    public DuplicateTeamException() {"},{"lineNumber":10,"author":{"gitID":"jordancjq"},"content":"        super(\"Operation would result in duplicate teams\");"},{"lineNumber":11,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"jordancjq"},"content":"}"}],"authorContributionMap":{"jordancjq":11,"-":1}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"jordancjq"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.NoPlayerException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":20,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.Team;"},{"lineNumber":22,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":23,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.exceptions.DuplicateTeamException;"},{"lineNumber":24,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.exceptions.TeamNotFoundException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":28,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void sortPlayers(String field, String order) throws NoPlayerException {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        addressBook.sortPlayersBy(field, order);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":98,"author":{"gitID":"jordancjq"},"content":"    public void deleteTag(Tag tag) {"},{"lineNumber":99,"author":{"gitID":"jordancjq"},"content":"        addressBook.removeTag(tag);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":101,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":103,"author":{"gitID":"jordancjq"},"content":"    @Override"},{"lineNumber":104,"author":{"gitID":"jordancjq"},"content":"    public synchronized void createTeam(Team team) throws DuplicateTeamException {"},{"lineNumber":105,"author":{"gitID":"jordancjq"},"content":"        addressBook.createTeam(team);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"jordancjq"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"jordancjq"},"content":"    public synchronized void assignPersonToTeam(Person person, TeamName teamName) throws DuplicatePersonException {"},{"lineNumber":111,"author":{"gitID":"jordancjq"},"content":"        addressBook.assignPersonToTeam(person, teamName);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"jordancjq"},"content":"    @Override"},{"lineNumber":117,"author":{"gitID":"jordancjq"},"content":"    public synchronized void removePersonFromTeam(Person person, TeamName teamName) throws PersonNotFoundException {"},{"lineNumber":118,"author":{"gitID":"jordancjq"},"content":"        requireAllNonNull(person, teamName);"},{"lineNumber":119,"author":{"gitID":"jordancjq"},"content":"        addressBook.removePersonFromTeam(person, teamName);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"jordancjq"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"jordancjq"},"content":"    public synchronized void removeTeam(TeamName teamName) throws TeamNotFoundException {"},{"lineNumber":125,"author":{"gitID":"jordancjq"},"content":"        requireNonNull(teamName);"},{"lineNumber":126,"author":{"gitID":"jordancjq"},"content":"        addressBook.removeTeam(teamName);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public boolean setTagColour(Tag tag, String colour) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        ObservableList\u003cTag\u003e allTags \u003d addressBook.getTagList();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        boolean isTagValid \u003d false;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        for (Tag t : allTags) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            if (t.getTagName().equals(tag.getTagName())) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"                isTagValid \u003d true;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                break;"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        if (!isTagValid) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        addressBook.setTagColour(tag, colour);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return isTagValid;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTeam\u003e getInitTeamList() {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        return addressBook.getTeamList();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"jordancjq"},"content":"    @Override"},{"lineNumber":170,"author":{"gitID":"jordancjq"},"content":"    public void updateFilteredPersonList(TeamName targetTeam) throws TeamNotFoundException {"},{"lineNumber":171,"author":{"gitID":"jordancjq"},"content":"        requireNonNull(targetTeam);"},{"lineNumber":172,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":173,"author":{"gitID":"jordancjq"},"content":"        List\u003cTeam\u003e teamList \u003d addressBook.getTeamList();"},{"lineNumber":174,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":175,"author":{"gitID":"jordancjq"},"content":"        if (teamList.stream().anyMatch(target -\u003e target.getTeamName().equals(targetTeam))) {"},{"lineNumber":176,"author":{"gitID":"jordancjq"},"content":"            filteredPersons.setPredicate(t -\u003e t.getTeamName().equals(targetTeam));"},{"lineNumber":177,"author":{"gitID":"jordancjq"},"content":"        } else {"},{"lineNumber":178,"author":{"gitID":"jordancjq"},"content":"            throw new TeamNotFoundException();"},{"lineNumber":179,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":197,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jordancjq":37,"-":163}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.NoPlayerException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":10,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.Team;"},{"lineNumber":12,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":13,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.exceptions.DuplicateTeamException;"},{"lineNumber":14,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.exceptions.TeamNotFoundException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"jordancjq"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code teamName}."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"jordancjq"},"content":"    void updateFilteredPersonList(TeamName targetTeam) throws TeamNotFoundException;"},{"lineNumber":59,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Sorts players in address book by field in asc or desc order"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * @param field"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * @param order"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    void sortPlayers(String field, String order) throws NoPlayerException;"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"jordancjq"},"content":"    /** Removes the given {@code tag} from all {@code Person}s. */"},{"lineNumber":68,"author":{"gitID":"jordancjq"},"content":"    void deleteTag(Tag tag);"},{"lineNumber":69,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":70,"author":{"gitID":"jordancjq"},"content":"    /** Create the given team */"},{"lineNumber":71,"author":{"gitID":"jordancjq"},"content":"    void createTeam(Team team) throws DuplicateTeamException;"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"jordancjq"},"content":"    /** Assign person to team */"},{"lineNumber":74,"author":{"gitID":"jordancjq"},"content":"    void assignPersonToTeam(Person person, TeamName teamName)"},{"lineNumber":75,"author":{"gitID":"jordancjq"},"content":"            throws DuplicatePersonException;"},{"lineNumber":76,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":77,"author":{"gitID":"jordancjq"},"content":"    /** Removes person from team */"},{"lineNumber":78,"author":{"gitID":"jordancjq"},"content":"    void removePersonFromTeam(Person person, TeamName teamName) throws PersonNotFoundException;"},{"lineNumber":79,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":80,"author":{"gitID":"jordancjq"},"content":"    /** Removes the given team */"},{"lineNumber":81,"author":{"gitID":"jordancjq"},"content":"    void removeTeam(TeamName teamName) throws TeamNotFoundException;"},{"lineNumber":82,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /** sets the given {@code tag} to color. */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    boolean setTagColour(Tag tag, String colour);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the team list */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    ObservableList\u003cTeam\u003e getInitTeamList();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jordancjq":24,"-":64}},{"path":"src/main/java/seedu/address/model/team/TeamName.java","lines":[{"lineNumber":1,"author":{"gitID":"jordancjq"},"content":"package seedu.address.model.team;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"jordancjq"},"content":"import static seedu.address.logic.parser.ParserUtil.UNSPECIFIED_FIELD;"},{"lineNumber":6,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":7,"author":{"gitID":"jordancjq"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"jordancjq"},"content":" * Represents a Team\u0027s name in the application."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Guarantees: imm utable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"jordancjq"},"content":"public class TeamName {"},{"lineNumber":12,"author":{"gitID":"jordancjq"},"content":"    public static final String MESSAGE_TEAM_NAME_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"jordancjq"},"content":"            \"Team name should only contain alphanumeric characters and spaces,\""},{"lineNumber":14,"author":{"gitID":"jordancjq"},"content":"            + \" and it should not be blank or consist of only numbers\";"},{"lineNumber":15,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":16,"author":{"gitID":"jordancjq"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"jordancjq"},"content":"     * The first character of the team name must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public final String fullName;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"jordancjq"},"content":"     * Constructs a {@code TeamName}."},{"lineNumber":26,"author":{"gitID":"jordancjq"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"jordancjq"},"content":"     * @param teamName A valid team name."},{"lineNumber":28,"author":{"gitID":"jordancjq"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"jordancjq"},"content":"    public TeamName(String teamName) {"},{"lineNumber":30,"author":{"gitID":"jordancjq"},"content":"        requireNonNull(teamName);"},{"lineNumber":31,"author":{"gitID":"jordancjq"},"content":"        checkArgument(isValidName(teamName), MESSAGE_TEAM_NAME_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"jordancjq"},"content":"        this.fullName \u003d teamName;"},{"lineNumber":33,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":35,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"jordancjq"},"content":"     * Returns true if a given string is a valid team name."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":39,"author":{"gitID":"jordancjq"},"content":"        return test.matches(NAME_VALIDATION_REGEX) || test.equals(UNSPECIFIED_FIELD);"},{"lineNumber":40,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return fullName;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"jordancjq"},"content":"                || (other instanceof TeamName // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"jordancjq"},"content":"                \u0026\u0026 this.fullName.equals(((TeamName) other).fullName)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"jordancjq"},"content":"}"}],"authorContributionMap":{"jordancjq":30,"-":28}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedTeam.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"jordancjq"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.Team;"},{"lineNumber":12,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.TeamName;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"jordancjq"},"content":" * JAXB-friendly adapted version of the Team"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class XmlAdaptedTeam {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"jordancjq"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Team\u0027s %s field is missing!\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"jordancjq"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private String teamName;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":24,"author":{"gitID":"jordancjq"},"content":"    private List\u003cXmlAdaptedPerson\u003e players \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedTeam."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public XmlAdaptedTeam() {}"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Constructs a {@code XmlAdaptedTeam} with the given {@code teamName}."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"jordancjq"},"content":"    public XmlAdaptedTeam(String teamName, List\u003cXmlAdaptedPerson\u003e persons) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.teamName \u003d teamName;"},{"lineNumber":37,"author":{"gitID":"jordancjq"},"content":"        if (persons !\u003d null) {"},{"lineNumber":38,"author":{"gitID":"jordancjq"},"content":"            this.players \u003d new ArrayList\u003c\u003e(persons);"},{"lineNumber":39,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Converts a given Team into this class for JAXB use."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"jordancjq"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedTeam"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public XmlAdaptedTeam(Team source) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        teamName \u003d source.getTeamName().toString();"},{"lineNumber":49,"author":{"gitID":"jordancjq"},"content":"        players \u003d new ArrayList\u003c\u003e();"},{"lineNumber":50,"author":{"gitID":"jordancjq"},"content":"        for (Person person : source.getTeamPlayers()) {"},{"lineNumber":51,"author":{"gitID":"jordancjq"},"content":"            players.add(new XmlAdaptedPerson(person));"},{"lineNumber":52,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"jordancjq"},"content":"     * Converts this jaxb-friendly adapted tag object into the model\u0027s Team object."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public Team toModelType() throws IllegalValueException {"},{"lineNumber":61,"author":{"gitID":"jordancjq"},"content":"        if (this.teamName \u003d\u003d null) {"},{"lineNumber":62,"author":{"gitID":"jordancjq"},"content":"            throw new IllegalValueException((String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":63,"author":{"gitID":"jordancjq"},"content":"                    TeamName.class.getSimpleName())));"},{"lineNumber":64,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"jordancjq"},"content":"        if (!TeamName.isValidName(this.teamName)) {"},{"lineNumber":66,"author":{"gitID":"jordancjq"},"content":"            throw new IllegalValueException(TeamName.MESSAGE_TEAM_NAME_CONSTRAINTS);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"jordancjq"},"content":"        final TeamName teamName \u003d new TeamName(this.teamName);"},{"lineNumber":69,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":70,"author":{"gitID":"jordancjq"},"content":"        final List\u003cPerson\u003e teamPlayers \u003d new ArrayList\u003c\u003e();"},{"lineNumber":71,"author":{"gitID":"jordancjq"},"content":"        for (XmlAdaptedPerson player : players) {"},{"lineNumber":72,"author":{"gitID":"jordancjq"},"content":"            teamPlayers.add(player.toModelType());"},{"lineNumber":73,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":75,"author":{"gitID":"jordancjq"},"content":"        return new Team(teamName, teamPlayers);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedTeam)) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"jordancjq"},"content":"        XmlAdaptedTeam otherTeam \u003d (XmlAdaptedTeam) other;"},{"lineNumber":88,"author":{"gitID":"jordancjq"},"content":"        return Objects.equals(teamName, otherTeam.teamName)"},{"lineNumber":89,"author":{"gitID":"jordancjq"},"content":"                \u0026\u0026 players.equals(otherTeam.players);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jordancjq":35,"-":57}},{"path":"src/main/java/seedu/address/model/team/UniqueTeamList.java","lines":[{"lineNumber":1,"author":{"gitID":"jordancjq"},"content":"package seedu.address.model.team;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":15,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.exceptions.DuplicateTeamException;"},{"lineNumber":16,"author":{"gitID":"jordancjq"},"content":"import seedu.address.model.team.exceptions.TeamNotFoundException;"},{"lineNumber":17,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":18,"author":{"gitID":"jordancjq"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"jordancjq"},"content":" * A list of teams that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":20,"author":{"gitID":"jordancjq"},"content":" *"},{"lineNumber":21,"author":{"gitID":"jordancjq"},"content":" * Supports a minimal set of list operations."},{"lineNumber":22,"author":{"gitID":"jordancjq"},"content":" *"},{"lineNumber":23,"author":{"gitID":"jordancjq"},"content":" * @see Team#equals(Object)"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"jordancjq"},"content":"public class UniqueTeamList implements Iterable\u003cTeam\u003e {"},{"lineNumber":27,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":28,"author":{"gitID":"jordancjq"},"content":"    private final ObservableList\u003cTeam\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":29,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":30,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"jordancjq"},"content":"     * Returns true if the list contains an equivalent team as the given argument."},{"lineNumber":32,"author":{"gitID":"jordancjq"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"jordancjq"},"content":"    public boolean contains(Team toCheck) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"jordancjq"},"content":"     * Returns true if the list contains an equivalent team as the given argument."},{"lineNumber":40,"author":{"gitID":"jordancjq"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"jordancjq"},"content":"    public boolean contains(TeamName toCheck) {"},{"lineNumber":42,"author":{"gitID":"jordancjq"},"content":"        requireNonNull(toCheck);"},{"lineNumber":43,"author":{"gitID":"jordancjq"},"content":"        return internalList.stream().anyMatch(t -\u003e t.getTeamName().equals(toCheck));"},{"lineNumber":44,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":46,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"jordancjq"},"content":"     * Returns {@code Team} that is specified by {@code toGet}."},{"lineNumber":48,"author":{"gitID":"jordancjq"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"jordancjq"},"content":"    public Team getTeam(TeamName toGet) {"},{"lineNumber":50,"author":{"gitID":"jordancjq"},"content":"        requireNonNull(toGet);"},{"lineNumber":51,"author":{"gitID":"jordancjq"},"content":"        return internalList.stream().filter(t -\u003e t.getTeamName().equals(toGet)).findFirst().get();"},{"lineNumber":52,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":54,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"jordancjq"},"content":"     * Adds a team to the list."},{"lineNumber":56,"author":{"gitID":"jordancjq"},"content":"     *"},{"lineNumber":57,"author":{"gitID":"jordancjq"},"content":"     * @throws DuplicateTeamException if the team to add is a duplicate of an existing team in the list."},{"lineNumber":58,"author":{"gitID":"jordancjq"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"jordancjq"},"content":"    public void add(Team toAdd) throws DuplicateTeamException {"},{"lineNumber":60,"author":{"gitID":"jordancjq"},"content":"        requireNonNull(toAdd);"},{"lineNumber":61,"author":{"gitID":"jordancjq"},"content":"        if (contains(toAdd)) {"},{"lineNumber":62,"author":{"gitID":"jordancjq"},"content":"            throw new DuplicateTeamException();"},{"lineNumber":63,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"jordancjq"},"content":"        internalList.add(toAdd);"},{"lineNumber":65,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":67,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"jordancjq"},"content":"     * Replaces the team {@code target} in the list with {@code editedTeam}."},{"lineNumber":69,"author":{"gitID":"jordancjq"},"content":"     *"},{"lineNumber":70,"author":{"gitID":"jordancjq"},"content":"     * @throws DuplicateTeamException if the replacement is equivalent to another existing team in the list."},{"lineNumber":71,"author":{"gitID":"jordancjq"},"content":"     * @throws TeamNotFoundException if {@code target} could not be found in the list."},{"lineNumber":72,"author":{"gitID":"jordancjq"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"jordancjq"},"content":"    public void setTeam(Team target, Team editedTeam)"},{"lineNumber":74,"author":{"gitID":"jordancjq"},"content":"            throws DuplicateTeamException, TeamNotFoundException {"},{"lineNumber":75,"author":{"gitID":"jordancjq"},"content":"        requireNonNull(editedTeam);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":79,"author":{"gitID":"jordancjq"},"content":"            throw new TeamNotFoundException();"},{"lineNumber":80,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":82,"author":{"gitID":"jordancjq"},"content":"        if (!target.equals(editedTeam) \u0026\u0026 internalList.contains(editedTeam)) {"},{"lineNumber":83,"author":{"gitID":"jordancjq"},"content":"            throw new DuplicateTeamException();"},{"lineNumber":84,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":86,"author":{"gitID":"jordancjq"},"content":"        internalList.set(index, editedTeam);"},{"lineNumber":87,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":89,"author":{"gitID":"jordancjq"},"content":"    public void setTeams(UniqueTeamList replacement) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"jordancjq"},"content":"    public void setTeams(List\u003cTeam\u003e teams) throws DuplicateTeamException {"},{"lineNumber":94,"author":{"gitID":"jordancjq"},"content":"        requireAllNonNull(teams);"},{"lineNumber":95,"author":{"gitID":"jordancjq"},"content":"        final UniqueTeamList replacement \u003d new UniqueTeamList();"},{"lineNumber":96,"author":{"gitID":"jordancjq"},"content":"        for (final Team team : teams) {"},{"lineNumber":97,"author":{"gitID":"jordancjq"},"content":"            replacement.add(team);"},{"lineNumber":98,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"jordancjq"},"content":"        setTeams(replacement);"},{"lineNumber":100,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":102,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"jordancjq"},"content":"     * Removes the equivalent team from the list."},{"lineNumber":104,"author":{"gitID":"jordancjq"},"content":"     *"},{"lineNumber":105,"author":{"gitID":"jordancjq"},"content":"     * @throws TeamNotFoundException if no such team could be found in the list."},{"lineNumber":106,"author":{"gitID":"jordancjq"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"jordancjq"},"content":"    public boolean remove(Team toRemove) throws TeamNotFoundException {"},{"lineNumber":108,"author":{"gitID":"jordancjq"},"content":"        requireNonNull(toRemove);"},{"lineNumber":109,"author":{"gitID":"jordancjq"},"content":"        final boolean teamFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":110,"author":{"gitID":"jordancjq"},"content":"        if (!teamFoundAndDeleted) {"},{"lineNumber":111,"author":{"gitID":"jordancjq"},"content":"            throw new TeamNotFoundException();"},{"lineNumber":112,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"jordancjq"},"content":"        return teamFoundAndDeleted;"},{"lineNumber":114,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":116,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"jordancjq"},"content":"     * Assign a {@code person} to a {@code team}."},{"lineNumber":118,"author":{"gitID":"jordancjq"},"content":"     * @throws DuplicatePersonException if person already exist in the team"},{"lineNumber":119,"author":{"gitID":"jordancjq"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"jordancjq"},"content":"    public void assignPersonToTeam(Person person, Team target) throws DuplicatePersonException {"},{"lineNumber":121,"author":{"gitID":"jordancjq"},"content":"        requireAllNonNull(person, target);"},{"lineNumber":122,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":123,"author":{"gitID":"jordancjq"},"content":"        if (target.getTeamPlayers().contains(person)) {"},{"lineNumber":124,"author":{"gitID":"jordancjq"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":125,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":127,"author":{"gitID":"jordancjq"},"content":"        target.add(person);"},{"lineNumber":128,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":130,"author":{"gitID":"jordancjq"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"jordancjq"},"content":"     * Removes a {@code person} from a {@code team}."},{"lineNumber":132,"author":{"gitID":"jordancjq"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"jordancjq"},"content":"    public void removePersonFromTeam(Person person, Team target) throws PersonNotFoundException {"},{"lineNumber":134,"author":{"gitID":"jordancjq"},"content":"        requireAllNonNull(person, target);"},{"lineNumber":135,"author":{"gitID":"jordancjq"},"content":"        try {"},{"lineNumber":136,"author":{"gitID":"jordancjq"},"content":"            System.out.println(\"Is this true? : \" + target.contains(person));"},{"lineNumber":137,"author":{"gitID":"jordancjq"},"content":"            target.remove(person);"},{"lineNumber":138,"author":{"gitID":"jordancjq"},"content":"        } catch (PersonNotFoundException e) {"},{"lineNumber":139,"author":{"gitID":"jordancjq"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":140,"author":{"gitID":"jordancjq"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"jordancjq"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"jordancjq"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"jordancjq"},"content":"    public ObservableList\u003cTeam\u003e asObservableList() {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":151,"author":{"gitID":"jordancjq"},"content":"    public Iterator\u003cTeam\u003e iterator() {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":158,"author":{"gitID":"jordancjq"},"content":"                || (other instanceof UniqueTeamList // instanceof handles nulls"},{"lineNumber":159,"author":{"gitID":"jordancjq"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueTeamList) other).internalList));"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jordancjq":121,"-":45}}]
