var resultJson = [{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"TeachConnect was developed by a team of students, with assistance from the Project Supervisor, as a project"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":"for the module CS2103T."},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"It was built upon the AddressBook - Level 4 project developed by the https://se-edu.github.io/docs/Team.html[se-edu]"},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":"team."},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d Mukesh Gadupudi"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"image::shanmu9898.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"{empty}[https://www.linkedin.com/in/mukesh-gadupudi-420a11139/[portfolio]] [https://github.com/shanmu9898[github]]"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"Role: Team Lead, Developer"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"Responsibilities: Model + Deliverable and Deadlines + Integration"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d Rachel Ngo Phuong Thao"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"image::sisyphus.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"{empty}[http://github.com/Sisyphus[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"Role: Developer"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"Responsibilities: UI + Storage + Scheduling and Tracking"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d Randy Pang Chung"},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":"image::randypx.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":"{empty}[http://github.com/randypx[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"Role: Developer"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":"Responsibilities: Logic + Testing"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d Jonathan Lim"},{"lineNumber":47,"author":{"gitID":"shanmu9898"},"content":"image::LimShiMinJonathan.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":"{empty}[http://github.com/LimShiMinJonathan[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":"Role: Developer"},{"lineNumber":51,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":52,"author":{"gitID":"shanmu9898"},"content":"Responsibilities: Storage + Documentation + Tool Expert"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"-":24,"shanmu9898":30}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"\u003d TeachConnect"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"https://travis-ci.org/CS2103JAN2018-W14-B1/main[image:https://travis-ci.org/CS2103JAN2018-W14-B1/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"-"},"content":"https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"https://coveralls.io/github/CS2103JAN2018-W14-B1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-W14-B1/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":7,"author":{"gitID":"-"},"content":"https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":11,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":15,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"__TeachConnect - The only management application you\u0027ll ever need"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"__"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"* TeachConnect is a contact and schedule management application designed for teachers and educational professionals."},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"* TeachConnect provides an intuitive and efficient solution for managing students and parents\u0027 contact details, recording appointments, setting up reminders, and many more."},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"* The majority of user interaction is through a CLI (Command Line Interface), however a GUI is provided with many optimization options."},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":26,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":27,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":33,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":34,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"Sisyphus25":6,"-":27,"shanmu9898":3}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"\u003d TeachConnect - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":":repoURL: https://github.com/CS2103JAN2018-W14-B1/main/"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"By: `Team W14-B1`      Since: `Jan 2018`      Licence: `MIT`"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"TeachConnect (TC) is created to help teachers and other educational professionals *better manage their contacts* and *remember students they taught*. TeachConnect is also tailored for teachers who would *prefer to use a Desktop App for managing contacts*. Most importantly, it is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, TeachConnect will manage your contacts faster than traditional GUI apps. Interested? Jump to \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":26,"author":{"gitID":"-"},"content":"+"},{"lineNumber":27,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":28,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8. +"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"You can download the latest Java version link:https://java.com/en/download/[here]."},{"lineNumber":30,"author":{"gitID":"-"},"content":"+"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":".  Download the latest `Teachconnect.jar` link:{repoURL}/releases[here]."},{"lineNumber":32,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for your TeachConnect."},{"lineNumber":33,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":34,"author":{"gitID":"-"},"content":"+"},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":"image::UI_modified.png[width\u003d\"790\"]"},{"lineNumber":36,"author":{"gitID":"-"},"content":"+"},{"lineNumber":37,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":38,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":39,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"* *`list`* : lists all contacts"},{"lineNumber":43,"author":{"gitID":"-"},"content":"* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe`."},{"lineNumber":44,"author":{"gitID":"-"},"content":"* **`delete`**`3` : deletes the 3rd contact shown in the current list"},{"lineNumber":45,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":51,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":54,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":57,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":58,"author":{"gitID":"-"},"content":"* Items with `…` after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":59,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":60,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing mannual : `help`"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a contact: `add`"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"Adds a contact.  +"},{"lineNumber":69,"author":{"gitID":"-"},"content":"Format: `add [TYPE] n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"****"},{"lineNumber":72,"author":{"gitID":"-"},"content":"* `[TYPE]` field represents the type of contact you wish to add.  +"},{"lineNumber":73,"author":{"gitID":"-"},"content":"* It can be `student`, `guardian` or `{nbsp}` (empty for a default contact)."},{"lineNumber":74,"author":{"gitID":"-"},"content":"****"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":77,"author":{"gitID":"-"},"content":"A contact can have any number of tags (including 0)"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"Adding a default contact: `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` t/friend +"},{"lineNumber":82,"author":{"gitID":"-"},"content":"Adding a student contact: `add student n/Betsy Crowe e/betsycrowe@example.com a/Centre Street, block 238, #02-02`"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Forming a class `[coming in v1.3]`"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"Forms a class of students for a specified subject and time period. +"},{"lineNumber":87,"author":{"gitID":"-"},"content":"Format: `form subj/SUBJECT s/START_DATE e/END_DATE i/INDEX...`"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"****"},{"lineNumber":90,"author":{"gitID":"shanmu9898"},"content":"* Students specified by the `INDEX` are added to the class."},{"lineNumber":91,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":92,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`."},{"lineNumber":93,"author":{"gitID":"-"},"content":"* Minimum of one student must be entered. There can be more than one student"},{"lineNumber":94,"author":{"gitID":"-"},"content":"* Only a student contact can be entered, default and guardian contacts are not allowed."},{"lineNumber":95,"author":{"gitID":"-"},"content":"* Dates must be in the format: `DD-MM-YYYY`."},{"lineNumber":96,"author":{"gitID":"-"},"content":"****"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":101,"author":{"gitID":"-"},"content":"`form 1,2,5 subj/English s/18-01-2018 e/17-07-2019` +"},{"lineNumber":102,"author":{"gitID":"-"},"content":"Forms an English class containing the first, second and fifth contact in the list that starts in 18 Jan 2018 to 17 July 2019."},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d Setting up an appointment : `set appointment` `[coming in v1.3]`"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"Sets an appointment with the specified contact. +"},{"lineNumber":108,"author":{"gitID":"-"},"content":"Format: `set appointment t/TITLE s/START_DATE START_TIME e/END_DATE END_TIME i/INDEX`"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"****"},{"lineNumber":111,"author":{"gitID":"-"},"content":"* This sets an appointment with `TITLE`, from `START_DATE` at `START_TIME` to `END_DATE` at `END_TIME`, with contact at the specified `INDEX`."},{"lineNumber":112,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":113,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`."},{"lineNumber":114,"author":{"gitID":"-"},"content":"* `START_DATE` and `END_DATE` must be in the format `DD-MM-YYYY`."},{"lineNumber":115,"author":{"gitID":"-"},"content":"* `START_TIME` and `END_TIME` must be in the 24-hr format: HH:MM."},{"lineNumber":116,"author":{"gitID":"Sisyphus25"},"content":"****"},{"lineNumber":117,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":118,"author":{"gitID":"Sisyphus25"},"content":"Examples:"},{"lineNumber":119,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":120,"author":{"gitID":"Sisyphus25"},"content":"* `set appointment t/Meet parent s/05-04-2018 10:00 e/05-04-2018 11:00 i/3` +"},{"lineNumber":121,"author":{"gitID":"-"},"content":"Sets an appointment on April 5th, 2018, 10am with the 3rd contact in the list."},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d Setting a task : `set task` `[coming in v1.3]`"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"Sets a task to be done by a deadline +"},{"lineNumber":126,"author":{"gitID":"-"},"content":"Format: `set task t/TITLE e/END_DATE END_TIME`"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"****"},{"lineNumber":129,"author":{"gitID":"shanmu9898"},"content":"* Task with `TITLE` which needs to completed before `END_DATE` at `END_TIME` is added."},{"lineNumber":130,"author":{"gitID":"-"},"content":"* `END_DATE` must be in the format `DD-MM-YYYY`."},{"lineNumber":131,"author":{"gitID":"-"},"content":"* `END_TIME` must be in the 24-hr format: HH:MM."},{"lineNumber":132,"author":{"gitID":"-"},"content":"****"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"* `set task t/Mark papers e/05-04-2018 10:00` +"},{"lineNumber":137,"author":{"gitID":"Sisyphus25"},"content":"Sets a task which needs to be completed before April 5th, 2018, 10am."},{"lineNumber":138,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":139,"author":{"gitID":"Sisyphus25"},"content":"\u003d\u003d\u003d Changing GUI theme : `theme` `[coming in v1.4]`"},{"lineNumber":140,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":141,"author":{"gitID":"Sisyphus25"},"content":"Changes the theme of the GUI  +"},{"lineNumber":142,"author":{"gitID":"Sisyphus25"},"content":"Format: `theme THEME_NAME`"},{"lineNumber":143,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":144,"author":{"gitID":"Sisyphus25"},"content":"****"},{"lineNumber":145,"author":{"gitID":"Sisyphus25"},"content":"* This changes the theme of the GUI to `THEME_NAME`."},{"lineNumber":146,"author":{"gitID":"Sisyphus25"},"content":"****"},{"lineNumber":147,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":148,"author":{"gitID":"Sisyphus25"},"content":"\u003d\u003d\u003d Listing all contacts/tasks/appointments/students/themes : `list`"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"Shows a list of all of the specified `TYPE`. +"},{"lineNumber":151,"author":{"gitID":"-"},"content":"Format: `list TYPE`."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"****"},{"lineNumber":154,"author":{"gitID":"Sisyphus25"},"content":"* `TYPE` can be of the following: `contacts`, `students`, `guardians`, `tasks`, `appointments`."},{"lineNumber":155,"author":{"gitID":"-"},"content":"* `TYPE` cannot be empty."},{"lineNumber":156,"author":{"gitID":"-"},"content":"****"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"* List all students: `list students` +"},{"lineNumber":161,"author":{"gitID":"-"},"content":"* List all tasks: `list tasks`"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a contact : `edit` [will be updated by v1.4]"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"Edits an existing contact. +"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"****"},{"lineNumber":172,"author":{"gitID":"-"},"content":"* Contact at the specified `INDEX` is edited."},{"lineNumber":173,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the last contact listing."},{"lineNumber":174,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`."},{"lineNumber":175,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":176,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":177,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the contact will be removed i.e adding of tags is not cumulative."},{"lineNumber":178,"author":{"gitID":"-"},"content":"* You can remove all the contact\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":179,"author":{"gitID":"-"},"content":"****"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":184,"author":{"gitID":"-"},"content":"Edits the phone number and email address of the 1st contact to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":185,"author":{"gitID":"-"},"content":"* `edit 2 n/Betsy Crower t/` +"},{"lineNumber":186,"author":{"gitID":"-"},"content":"Edits the name of the 2nd contact to be `Betsy Crower` and clears all existing tags."},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d Locating contacts by name: `find` [will be updated by v1.3]"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"Finds contacts whose names contain any of the given keywords. +"},{"lineNumber":191,"author":{"gitID":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"****"},{"lineNumber":194,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`."},{"lineNumber":195,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`."},{"lineNumber":196,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":197,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`."},{"lineNumber":198,"author":{"gitID":"-"},"content":"* Contacts matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`."},{"lineNumber":199,"author":{"gitID":"-"},"content":"****"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"* `find John` +"},{"lineNumber":204,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":205,"author":{"gitID":"-"},"content":"* `find Betsy Tim John` +"},{"lineNumber":206,"author":{"gitID":"-"},"content":"Returns any contact having names `Betsy`, `Tim`, or `John`"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting an entry in the list : `delete`"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"Deletes the specified entry in the list. +"},{"lineNumber":212,"author":{"gitID":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"****"},{"lineNumber":215,"author":{"gitID":"-"},"content":"* Entry at the specified `INDEX` is deleted."},{"lineNumber":216,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":217,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`."},{"lineNumber":218,"author":{"gitID":"-"},"content":"****"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"* `list contacts` +"},{"lineNumber":223,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":224,"author":{"gitID":"-"},"content":"Deletes the 2nd contact in the list"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":227,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":228,"author":{"gitID":"-"},"content":"Deletes the 1st contact in the results of the `find` command."},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"* `list tasks` +"},{"lineNumber":231,"author":{"gitID":"-"},"content":"`delete 4` +"},{"lineNumber":232,"author":{"gitID":"-"},"content":"Deletes the 4th task in the list"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting a contact : `select`"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"Selects the contact identified by the index number used in the last contact listing. +"},{"lineNumber":237,"author":{"gitID":"-"},"content":"Format: `select INDEX`"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"****"},{"lineNumber":240,"author":{"gitID":"-"},"content":"* Contact specified by `INDEX` is selected and is searched for in a Google search page."},{"lineNumber":241,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":242,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`."},{"lineNumber":243,"author":{"gitID":"-"},"content":"****"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":248,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"Selects the 2nd contact in the list."},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":253,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":254,"author":{"gitID":"-"},"content":"Selects the 1st contact in the results of the `find` command."},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":259,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":262,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":263,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":264,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":267,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"Sisyphus25"},"content":"Restores TeachConnect to the state before the previous _undoable_ command was executed. +"},{"lineNumber":270,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":273,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":274,"author":{"gitID":"Sisyphus25"},"content":"Undoable commands: those commands that modify TeachConnect\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":275,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":280,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":281,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":284,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":285,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":286,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":289,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":290,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":291,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":296,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":301,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":302,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":305,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":306,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":309,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":310,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":311,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":312,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":313,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":314,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"Clears all entries. +"},{"lineNumber":319,"author":{"gitID":"-"},"content":"Format: `clear`"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":324,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":325,"author":{"gitID":"-"},"content":""},{"lineNumber":326,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"shanmu9898"},"content":"TeachConnect data are saved in the hard disk automatically [even while sharing TeachConnect] after any command that changes the data. +"},{"lineNumber":329,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Importing the contacts : `import` `[since v1.2]`"},{"lineNumber":332,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":333,"author":{"gitID":"shanmu9898"},"content":"TeachConnect allows you to import contacts from a different TeachConnect file by specifying the location of the file. +"},{"lineNumber":334,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":335,"author":{"gitID":"shanmu9898"},"content":"Format: `import [TYPE] pathname`"},{"lineNumber":336,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":337,"author":{"gitID":"shanmu9898"},"content":"Examples:"},{"lineNumber":338,"author":{"gitID":"shanmu9898"},"content":"Importing Contacts : `import ./data/importsample.xml`"},{"lineNumber":339,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exporting the contacts : `export` `[since v1.2]`"},{"lineNumber":341,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":342,"author":{"gitID":"shanmu9898"},"content":"TeachConnect allows you to export contacts from your TeachConnect by specifying the name of the file you want to save it in and the path where you want to save it. It can export the contacts based on a given range of indexes or a given tag or a given tag in a range of indexes."},{"lineNumber":343,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":344,"author":{"gitID":"shanmu9898"},"content":"Format: `export [TYPE] n/NAME r/RANGE t/TAG p/PATH`"},{"lineNumber":345,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":346,"author":{"gitID":"shanmu9898"},"content":"Format: `export [TYPE] n/NAME r/RANGE p/PATH`"},{"lineNumber":347,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":348,"author":{"gitID":"shanmu9898"},"content":"[TIP]"},{"lineNumber":349,"author":{"gitID":"shanmu9898"},"content":"You can export all the people at once, all the people with a certain tag at once, all the people with a certain tag in a range at once or all the people in a range with any tags in a single command."},{"lineNumber":350,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":351,"author":{"gitID":"shanmu9898"},"content":"[WARNING]"},{"lineNumber":352,"author":{"gitID":"shanmu9898"},"content":"You can only export all a people based on one or zero tags."},{"lineNumber":353,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":354,"author":{"gitID":"shanmu9898"},"content":"Examples:"},{"lineNumber":355,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":356,"author":{"gitID":"shanmu9898"},"content":"Exporting contacts : `export n/StudentsFile1 r/all t/students p/./data`"},{"lineNumber":357,"author":{"gitID":"shanmu9898"},"content":"Exporting contacts : `export n/StudentsFile2 r/1,10 t/students p/./data`"},{"lineNumber":358,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":359,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":360,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Upcoming features `[coming soon]`"},{"lineNumber":361,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":362,"author":{"gitID":"-"},"content":"* Clear distinction between students and parents [coming in v1.3]"},{"lineNumber":363,"author":{"gitID":"-"},"content":"* Finding not only by name but by any field [coming in v1.3]"},{"lineNumber":364,"author":{"gitID":"shanmu9898"},"content":"* Shortcuts and Autocompletion [coming in v1.4]"},{"lineNumber":365,"author":{"gitID":"shanmu9898"},"content":"* A login feature [coming in v1.5]"},{"lineNumber":366,"author":{"gitID":"shanmu9898"},"content":"* Dynamic search [coming in v2.0]"},{"lineNumber":367,"author":{"gitID":"shanmu9898"},"content":"* NLP for event and appointment scheduling [coming in v2.0]"},{"lineNumber":368,"author":{"gitID":"shanmu9898"},"content":"* Encrypting data files [coming in v2.0]"},{"lineNumber":369,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":370,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":371,"author":{"gitID":"-"},"content":""},{"lineNumber":372,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":373,"author":{"gitID":"shanmu9898"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder. Alternatively you can also choose the import and export commands coming up!"},{"lineNumber":374,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":375,"author":{"gitID":"shanmu9898"},"content":"*Q*: Does it automatically tell us if there are any appointment clashes? +"},{"lineNumber":376,"author":{"gitID":"shanmu9898"},"content":"*A*: Hell yes! Our aim is also to help you make your planning simpler and that is just what we do!"},{"lineNumber":377,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":378,"author":{"gitID":"-"},"content":""},{"lineNumber":379,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":380,"author":{"gitID":"-"},"content":""},{"lineNumber":381,"author":{"gitID":"-"},"content":"* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"},{"lineNumber":382,"author":{"gitID":"-"},"content":"e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"},{"lineNumber":383,"author":{"gitID":"-"},"content":"* *Clear* : `clear`"},{"lineNumber":384,"author":{"gitID":"-"},"content":"* *Delete* : `delete INDEX` +"},{"lineNumber":385,"author":{"gitID":"-"},"content":"e.g. `delete 3`"},{"lineNumber":386,"author":{"gitID":"-"},"content":"* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"},{"lineNumber":387,"author":{"gitID":"-"},"content":"e.g. `edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":388,"author":{"gitID":"-"},"content":"* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":389,"author":{"gitID":"-"},"content":"e.g. `find James Jake`"},{"lineNumber":390,"author":{"gitID":"Sisyphus25"},"content":"* *List* : `list TYPE` +"},{"lineNumber":391,"author":{"gitID":"Sisyphus25"},"content":"e.g. `list students`, `list tasks`"},{"lineNumber":392,"author":{"gitID":"-"},"content":"* *Help* : `help`"},{"lineNumber":393,"author":{"gitID":"-"},"content":"* *Select* : `select INDEX` +"},{"lineNumber":394,"author":{"gitID":"-"},"content":"e.g.`select 2`"},{"lineNumber":395,"author":{"gitID":"Sisyphus25"},"content":"* *Add Appointment* `set appointment t/TITLE s/START_DATE START_TIME e/END_DATE END_TIME i/INDEX` +"},{"lineNumber":396,"author":{"gitID":"Sisyphus25"},"content":"e.g. `set appointment t/Meet parent s/05-04-2018 10:00 e/05-04-2018 11:00 i/3`"},{"lineNumber":397,"author":{"gitID":"Sisyphus25"},"content":"* *Add Task* `set task t/TITLE e/END_DATE END_TIME` +"},{"lineNumber":398,"author":{"gitID":"Sisyphus25"},"content":"e.g. `set task t/Mark papers d/05-04-2018 10:00`"},{"lineNumber":399,"author":{"gitID":"Sisyphus25"},"content":"* *Delete Schedule* : `delete schedule INDEX` +"},{"lineNumber":400,"author":{"gitID":"Sisyphus25"},"content":"e.g. `delete schedule 3`"},{"lineNumber":401,"author":{"gitID":"Sisyphus25"},"content":"* *Change GUI theme* : `theme THEME_NAME` +"},{"lineNumber":402,"author":{"gitID":"Sisyphus25"},"content":"e.g. `theme DARK`"},{"lineNumber":403,"author":{"gitID":"shanmu9898"},"content":"* *Import TeachConnect File* : `import` +"},{"lineNumber":404,"author":{"gitID":"shanmu9898"},"content":"e.g. `import ./data/samplefile.xml`"},{"lineNumber":405,"author":{"gitID":"shanmu9898"},"content":"* *Export* : `export n/NAME r/RANGE t/TAG p/PATH` +"},{"lineNumber":406,"author":{"gitID":"shanmu9898"},"content":"e.g. `export n/samplefile.xml r/all t/friends p/.data`"},{"lineNumber":407,"author":{"gitID":"-"},"content":"* *History* : `history`"},{"lineNumber":408,"author":{"gitID":"-"},"content":"* *Undo* : `undo`"},{"lineNumber":409,"author":{"gitID":"-"},"content":"* *Redo* : `redo`"}],"authorContributionMap":{"Sisyphus25":32,"-":324,"shanmu9898":53}},{"path":"src/test/java/systemtests/HelpCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.ui.StatusBarFooter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class HelpCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        //use accelerator"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        getCommandBox().click();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        getResultDisplay().click();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        getPersonListPanel().click();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"        getCalendarPanel().click();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        //use menu button"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        //use command box"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // open help window and give it focus"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // assert that while the help window is open the UI updates correctly for a command execution"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // assert that the status bar too is updated correctly while the help window is open"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // note: the select command tested above does not update the status bar"},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Asserts that the help window isn\u0027t open."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private void assertHelpWindowNotOpen() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":4,"-":88}},{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getMidIndex;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getPerson;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class DeleteCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST.getOneBased() + \"       \";"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        /* Case: delete the last person in the list -\u003e deleted */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandSuccess(lastPersonIndex);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: undo deleting the last person in the list -\u003e last person restored */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        removePerson(modelBeforeDeletingLast, lastPersonIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: delete the middle person in the list -\u003e deleted */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Index middlePersonIndex \u003d getMidIndex(getModel());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"        Index index \u003d INDEX_FIRST;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"},{"lineNumber":69,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        selectPerson(selectedIndex);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":101,"author":{"gitID":"-"},"content":"                getModel().getAddressBook().getPersonList().size() + 1);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * @return the removed person"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    private Person removePerson(Model model, Index index) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Person targetPerson \u003d getPerson(model, index);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            model.deletePerson(targetPerson);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"targetPerson is retrieved from model.\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return targetPerson;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":140,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":4,"-":196}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_STUDENT;"},{"lineNumber":18,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_STUDENT;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":27,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_STUDENT;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":29,"author":{"gitID":"randypx"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":32,"author":{"gitID":"randypx"},"content":"import static seedu.address.testutil.TypicalPersons.IVAN;"},{"lineNumber":33,"author":{"gitID":"randypx"},"content":"import static seedu.address.testutil.TypicalPersons.JOHN;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":35,"author":{"gitID":"randypx"},"content":"import static seedu.address.testutil.TypicalPersons.STUDENT_AMY;"},{"lineNumber":36,"author":{"gitID":"randypx"},"content":"import static seedu.address.testutil.TypicalPersons.STUDENT_BOB;"},{"lineNumber":37,"author":{"gitID":"randypx"},"content":"import static seedu.address.testutil.TypicalPersons.STUDENT_HOON;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.STUDENT_IDA;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":53,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":57,"author":{"gitID":"randypx"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"randypx"},"content":"        /* Case: add a student without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":69,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":70,"author":{"gitID":"randypx"},"content":"        Student toAdd \u003d STUDENT_AMY;"},{"lineNumber":71,"author":{"gitID":"randypx"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + PREAMBLE_STUDENT + \"  \" + NAME_DESC_AMY + \"  \""},{"lineNumber":72,"author":{"gitID":"randypx"},"content":"                + PHONE_DESC_AMY + \" \" + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_STUDENT + \" \";"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"randypx"},"content":"        /* Case: add a student with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":87,"author":{"gitID":"randypx"},"content":"        toAdd \u003d new StudentBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":88,"author":{"gitID":"randypx"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_STUDENT).build();"},{"lineNumber":89,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":90,"author":{"gitID":"randypx"},"content":"                + ADDRESS_DESC_AMY + TAG_DESC_STUDENT;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"randypx"},"content":"        /* Case: add a student with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":94,"author":{"gitID":"randypx"},"content":"        toAdd \u003d new StudentBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":95,"author":{"gitID":"randypx"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_STUDENT).build();"},{"lineNumber":96,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY"},{"lineNumber":97,"author":{"gitID":"randypx"},"content":"                + ADDRESS_DESC_AMY + TAG_DESC_STUDENT;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"randypx"},"content":"        /* Case: add a student with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":101,"author":{"gitID":"randypx"},"content":"        toAdd \u003d new StudentBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":102,"author":{"gitID":"randypx"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_STUDENT).build();"},{"lineNumber":103,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":104,"author":{"gitID":"randypx"},"content":"                + ADDRESS_DESC_AMY + TAG_DESC_STUDENT;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"randypx"},"content":"        /* Case: add a student with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":108,"author":{"gitID":"randypx"},"content":"        toAdd \u003d new StudentBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":109,"author":{"gitID":"randypx"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_STUDENT).build();"},{"lineNumber":110,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":111,"author":{"gitID":"randypx"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_STUDENT;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":116,"author":{"gitID":"randypx"},"content":"        assertCommandSuccess(GEORGE);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"randypx"},"content":"        /* Case: add a student with tags, command with parameters in random order -\u003e added */"},{"lineNumber":119,"author":{"gitID":"randypx"},"content":"        toAdd \u003d STUDENT_BOB;"},{"lineNumber":120,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":121,"author":{"gitID":"randypx"},"content":"                + TAG_DESC_STUDENT + EMAIL_DESC_BOB;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"randypx"},"content":"        /* Case: add a student, missing tags -\u003e added */"},{"lineNumber":125,"author":{"gitID":"randypx"},"content":"        assertCommandSuccess(STUDENT_HOON);"},{"lineNumber":126,"author":{"gitID":"randypx"},"content":""},{"lineNumber":127,"author":{"gitID":"randypx"},"content":"        /* Case: add a default person -\u003e added */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":134,"author":{"gitID":"randypx"},"content":"        assertCommandSuccess(JOHN);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"randypx"},"content":"        /* Case: selects first card in the person list, add a student -\u003e added, card selection remains unchanged */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":140,"author":{"gitID":"randypx"},"content":"        assertCommandSuccess(IVAN);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"randypx"},"content":"        /* Case: add a duplicate student -\u003e rejected */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(STUDENT_HOON);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        /* Case: add an existing student as default person -\u003e rejected */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: add an existing person as a student -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(STUDENT_IDA);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"randypx"},"content":"        /* Case: add a duplicate student except with different tags -\u003e rejected */"},{"lineNumber":157,"author":{"gitID":"randypx"},"content":"        // \"student\" is an existing tag used in the default model, see TypicalPersons#STUDENT_ALICE"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(STUDENT_HOON) + \" \" + PREFIX_TAG.getPrefix() + \"student\";"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":164,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":168,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":172,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":176,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":180,"author":{"gitID":"randypx"},"content":"        command \u003d \"adds \" + PREAMBLE_STUDENT + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"randypx"},"content":"        /* Case: invalid type -\u003e rejected */"},{"lineNumber":184,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" stu \" + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":185,"author":{"gitID":"randypx"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":189,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":190,"author":{"gitID":"randypx"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":194,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY"},{"lineNumber":195,"author":{"gitID":"randypx"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":199,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC"},{"lineNumber":200,"author":{"gitID":"randypx"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":204,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":205,"author":{"gitID":"randypx"},"content":"                + INVALID_ADDRESS_DESC;"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":209,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":210,"author":{"gitID":"randypx"},"content":"                + ADDRESS_DESC_AMY"},{"lineNumber":211,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC;"},{"lineNumber":212,"author":{"gitID":"Sisyphus25"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_NAME_CONSTRAINTS);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Person toAdd) {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":234,"author":{"gitID":"randypx"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}."},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":237,"author":{"gitID":"randypx"},"content":"    private void assertCommandSuccess(Student toAdd) {"},{"lineNumber":238,"author":{"gitID":"randypx"},"content":"        assertCommandSuccess(PersonUtil.getAddStudentCommand(toAdd), toAdd);"},{"lineNumber":239,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"randypx"},"content":""},{"lineNumber":241,"author":{"gitID":"randypx"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":254,"author":{"gitID":"randypx"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_ADD_PERSON_SUCCESS, toAdd);"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":264,"author":{"gitID":"randypx"},"content":"    private void assertCommandSuccess(String command, Student toAdd) {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":267,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":271,"author":{"gitID":"randypx"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_ADD_STUDENT_SUCCESS, toAdd);"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":277,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":278,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":279,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":280,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":281,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":282,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":284,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":290,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":293,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":294,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":295,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":296,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":297,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":298,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":299,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":300,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":301,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":302,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":303,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":304,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":309,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":310,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":311,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":312,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":1,"randypx":78,"-":233}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"import guitests.guihandles.CalendarPanelHandle;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":40,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":41,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":42,"author":{"gitID":"-"},"content":" */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return TypicalPersons.getTypicalAddressBook();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"Sisyphus25"},"content":"    public CalendarPanelHandle getCalendarPanel() {"},{"lineNumber":106,"author":{"gitID":"Sisyphus25"},"content":"        return mainWindowHandle.getCalendarPanel();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":125,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":216,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":223,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":230,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":240,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":251,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":255,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":256,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":257,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":258,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":266,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":4,"-":266}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class SelectCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"},{"lineNumber":26,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":27,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased() + \"   \";"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        assertCommandSuccess(command, INDEX_FIRST);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* Case: select the last card in the person list -\u003e selected */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Index personCount \u003d Index.fromOneBased(getTypicalPersons().size());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, personCount);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /* Case: select the middle card in the person list -\u003e selected */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(personCount.getOneBased() / 2);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"},{"lineNumber":57,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":58,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":85,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":89,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: select from empty address book -\u003e rejected */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":96,"author":{"gitID":"Sisyphus25"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased(),"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":117,"author":{"gitID":"-"},"content":"                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":4,"-":149}},{"path":"src/test/java/seedu/address/ui/TaskListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"public class TaskListPanelTest {"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":4}},{"path":"src/test/java/seedu/address/ui/PersonListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertPersonCardEquals;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class PersonListPanelTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            FXCollections.observableList(getTypicalPersons());"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private PersonListPanelHandle personListPanelHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        PersonListPanel personListPanel \u003d new PersonListPanel(TYPICAL_PERSONS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personListPanel);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(expectedPerson, actualCard);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void handleJumpToListRequestEvent() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        postNow(JUMP_TO_SECOND_EVENT);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"        PersonCardHandle expectedCard \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND.getZeroBased());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        PersonCardHandle selectedCard \u003d personListPanelHandle.getHandleToSelectedCard();"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"        assertPersonCardEquals(expectedCard, selectedCard);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":5,"-":53}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"\u003d TeachConnect - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":":repoURL: https://github.com/CS2103JAN2018-W14-B1/main/tree/master"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"By: `Team W14-B1`      Since: `Jan 2018`      Licence: `MIT`"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":24,"author":{"gitID":"-"},"content":"+"},{"lineNumber":25,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":26,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":27,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":28,"author":{"gitID":"-"},"content":"+"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":31,"author":{"gitID":"-"},"content":"+"},{"lineNumber":32,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":33,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":34,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":40,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":41,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":42,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":43,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":45,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":47,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":48,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":49,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":54,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":63,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":64,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":67,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":78,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":83,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":90,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":95,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":98,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":103,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":108,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":113,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":118,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":119,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":120,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":125,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":130,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":133,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":138,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":141,"author":{"gitID":"Sisyphus25"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the TeachConnect data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":146,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":149,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":154,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":157,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":168,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":169,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":172,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":175,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":176,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":179,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":182,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":185,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":186,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":187,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":192,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":195,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":198,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":205,"author":{"gitID":"Sisyphus25"},"content":"* stores TeachConnect data."},{"lineNumber":206,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":207,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":210,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":213,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":220,"author":{"gitID":"Sisyphus25"},"content":"* can save TeachConnect data in xml format and read it back."},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":223,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":232,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":233,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"Sisyphus25"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of TeachConnect (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"Sisyphus25"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of TeachConnect before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":244,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":245,"author":{"gitID":"-"},"content":"----"},{"lineNumber":246,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":250,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"-"},"content":"}"},{"lineNumber":252,"author":{"gitID":"-"},"content":"----"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":255,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":256,"author":{"gitID":"-"},"content":"----"},{"lineNumber":257,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"-"},"content":"}"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":270,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"-"},"content":"}"},{"lineNumber":272,"author":{"gitID":"-"},"content":"----"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"Sisyphus25"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in TeachConnect. The current state of TeachConnect is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":285,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"Sisyphus25"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore TeachConnect to the state before the `add` command executed."},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":294,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"Sisyphus25"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores TeachConnect to the state after the command is executed)."},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":303,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":322,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":323,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":324,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":325,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":326,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":331,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":332,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":333,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":334,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":335,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":""},{"lineNumber":338,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"Sisyphus25"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies TeachConnect (`add`, `clear`, `edit`)."},{"lineNumber":341,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":342,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":343,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":344,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":345,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":346,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":347,"author":{"gitID":"-"},"content":""},{"lineNumber":348,"author":{"gitID":"-"},"content":""},{"lineNumber":349,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":352,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":353,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":354,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":355,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":356,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":357,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":358,"author":{"gitID":"-"},"content":""},{"lineNumber":359,"author":{"gitID":"Sisyphus25"},"content":"\u003d\u003d\u003d Import Contacts"},{"lineNumber":360,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":361,"author":{"gitID":"shanmu9898"},"content":"The ImportCommand uses `XmlAddressBookStorage` to generate a temporary `AddressBook` object from a given path. It takes in a String value path. The command then adds the contacts found in the temporary `AddressBook` object into the main address book object. Below is the rough idea of the constructor for the class:"},{"lineNumber":362,"author":{"gitID":"shanmu9898"},"content":"[source,java]"},{"lineNumber":363,"author":{"gitID":"shanmu9898"},"content":"public ImportCommand(String importPath) {"},{"lineNumber":364,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(importPath);"},{"lineNumber":365,"author":{"gitID":"shanmu9898"},"content":"        this.filePath \u003d importPath;"},{"lineNumber":366,"author":{"gitID":"shanmu9898"},"content":"        addressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":367,"author":{"gitID":"shanmu9898"},"content":"}"},{"lineNumber":368,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":369,"author":{"gitID":"shanmu9898"},"content":"image::ImportCommandFlowChart.png[align\u003d\"center\"]"},{"lineNumber":370,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":371,"author":{"gitID":"shanmu9898"},"content":"Import command extends `Undoable Command` and hence Undo can be called on it. It initially checks if the given file path is valid and if so initialised the contacts from there, creates a `Person` object and adds it to the current `TeachConnect` with the help of `model`. The code can be found below."},{"lineNumber":372,"author":{"gitID":"shanmu9898"},"content":"[source, java]"},{"lineNumber":373,"author":{"gitID":"shanmu9898"},"content":"public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":374,"author":{"gitID":"shanmu9898"},"content":"        try {"},{"lineNumber":375,"author":{"gitID":"shanmu9898"},"content":"          if (addressBookStorage.readAddressBook(filePath).isPresent()) {"},{"lineNumber":376,"author":{"gitID":"shanmu9898"},"content":"              this.addressBookImported \u003d new AddressBook(addressBookStorage.readAddressBook().get());"},{"lineNumber":377,"author":{"gitID":"shanmu9898"},"content":"              ObservableList\u003cPerson\u003e people \u003d addressBookImported.getPersonList();"},{"lineNumber":378,"author":{"gitID":"shanmu9898"},"content":"              for (int i \u003d 0; i \u003c people.size(); i++) {"},{"lineNumber":379,"author":{"gitID":"shanmu9898"},"content":"                  try {"},{"lineNumber":380,"author":{"gitID":"shanmu9898"},"content":"                      model.addPerson(people.get(i));"},{"lineNumber":381,"author":{"gitID":"shanmu9898"},"content":"                  } catch (DuplicatePersonException e) {"},{"lineNumber":382,"author":{"gitID":"shanmu9898"},"content":"                      throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":383,"author":{"gitID":"shanmu9898"},"content":"                  }"},{"lineNumber":384,"author":{"gitID":"shanmu9898"},"content":"              }"},{"lineNumber":385,"author":{"gitID":"shanmu9898"},"content":"          } else {"},{"lineNumber":386,"author":{"gitID":"shanmu9898"},"content":"              throw new CommandException(String.format(MESSAGE_INVALID_FILE));"},{"lineNumber":387,"author":{"gitID":"shanmu9898"},"content":"          }"},{"lineNumber":388,"author":{"gitID":"shanmu9898"},"content":"      } catch (DataConversionException e) {"},{"lineNumber":389,"author":{"gitID":"shanmu9898"},"content":"          throw new CommandException(String.format(MESSAGE_INVALID_FILE));"},{"lineNumber":390,"author":{"gitID":"shanmu9898"},"content":"      } catch (IOException e) {"},{"lineNumber":391,"author":{"gitID":"shanmu9898"},"content":"          throw new CommandException(String.format(MESSAGE_INVALID_FILE));"},{"lineNumber":392,"author":{"gitID":"shanmu9898"},"content":"      }"},{"lineNumber":393,"author":{"gitID":"shanmu9898"},"content":"     return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":394,"author":{"gitID":"shanmu9898"},"content":"}"},{"lineNumber":395,"author":{"gitID":"-"},"content":""},{"lineNumber":396,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":397,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d\u003d\u003d Aspects : Implementation Import Command"},{"lineNumber":398,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":399,"author":{"gitID":"shanmu9898"},"content":"* **Alternative 1 (current choice):** Only import from an `XML` file."},{"lineNumber":400,"author":{"gitID":"shanmu9898"},"content":"** Pros: Goes well with the idea of TeachConnect. Easier to implement and also clear distinction of the file that needs to be imported by the user with the help of the .XML extension."},{"lineNumber":401,"author":{"gitID":"shanmu9898"},"content":"** Cons: User might want to import from Excel only to realise this isn\u0027t possible."},{"lineNumber":402,"author":{"gitID":"shanmu9898"},"content":"* **Alternative 2:** Include import from an `Excel` file too."},{"lineNumber":403,"author":{"gitID":"shanmu9898"},"content":"** Pros: Might be more intuitive for the user and might come in handy."},{"lineNumber":404,"author":{"gitID":"shanmu9898"},"content":"** Cons: Complex implementation ther by giving rise to more bugs and slower response rate."},{"lineNumber":405,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":406,"author":{"gitID":"shanmu9898"},"content":"// tag::export[]"},{"lineNumber":407,"author":{"gitID":"Sisyphus25"},"content":"\u003d\u003d\u003d Export contacts"},{"lineNumber":408,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":409,"author":{"gitID":"shanmu9898"},"content":"The `ExportCommand` uses `XmlAddressBookStorage` class to generate a xml file based on a given range/index/tag and save it to the location specified with the chosen file name. It takes in String `name` String `range` Tag `tag` String `path`. The tag is not compulsory and can be excluded or included depending on the user. Below is the basic idea of the constructor for the class:"},{"lineNumber":410,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":411,"author":{"gitID":"shanmu9898"},"content":"[source,java]"},{"lineNumber":412,"author":{"gitID":"shanmu9898"},"content":"----"},{"lineNumber":413,"author":{"gitID":"shanmu9898"},"content":"ExportCommand(String range, Tag tag, String path, String nameOfExportFile) {"},{"lineNumber":414,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(range);"},{"lineNumber":415,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(tag);"},{"lineNumber":416,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(path);"},{"lineNumber":417,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(nameOfExportFile);"},{"lineNumber":418,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":419,"author":{"gitID":"shanmu9898"},"content":"        this.range \u003d range;"},{"lineNumber":420,"author":{"gitID":"shanmu9898"},"content":"        this.path \u003d path;"},{"lineNumber":421,"author":{"gitID":"shanmu9898"},"content":"        thispublic.tag \u003d tag;"},{"lineNumber":422,"author":{"gitID":"shanmu9898"},"content":"        this.nameOfExportFile \u003d nameOfExportFile;"},{"lineNumber":423,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":424,"author":{"gitID":"shanmu9898"},"content":"        teachConnectBook \u003d new AddressBook();"},{"lineNumber":425,"author":{"gitID":"shanmu9898"},"content":"}"},{"lineNumber":426,"author":{"gitID":"shanmu9898"},"content":"----"},{"lineNumber":427,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":428,"author":{"gitID":"shanmu9898"},"content":"image::ExportCommandDiagram.png[align\u003d\"center\"]"},{"lineNumber":429,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":430,"author":{"gitID":"shanmu9898"},"content":"The method `handleRange()` splits the range using a separator [, in this case] and returns a `String` array with the upper bound and lower bound as values. In some cases it also returns `all` or the single `index` that has to be exported."},{"lineNumber":431,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":432,"author":{"gitID":"shanmu9898"},"content":"Below is an extract of the method `handleRange()`:"},{"lineNumber":433,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":434,"author":{"gitID":"shanmu9898"},"content":"[source,java]"},{"lineNumber":435,"author":{"gitID":"shanmu9898"},"content":"----"},{"lineNumber":436,"author":{"gitID":"shanmu9898"},"content":"public String[] handleRange() throws IOException {"},{"lineNumber":437,"author":{"gitID":"shanmu9898"},"content":"        String[] rangeStringArray \u003d this.range.split(\",\");"},{"lineNumber":438,"author":{"gitID":"shanmu9898"},"content":"        if (rangeStringArray.length \u003e 2) {"},{"lineNumber":439,"author":{"gitID":"shanmu9898"},"content":"            throw new IOException();"},{"lineNumber":440,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":441,"author":{"gitID":"shanmu9898"},"content":"        return rangeStringArray;"},{"lineNumber":442,"author":{"gitID":"shanmu9898"},"content":"}"},{"lineNumber":443,"author":{"gitID":"shanmu9898"},"content":"----"},{"lineNumber":444,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":445,"author":{"gitID":"shanmu9898"},"content":"Any range with more than 2 values in the String array returned throws an IO Exception. To add the contacts to the export file, contacts are added to the teachConnectBook. There are 4 individual cases and multiple combinations of these:"},{"lineNumber":446,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":447,"author":{"gitID":"shanmu9898"},"content":"* All (Without a tag)"},{"lineNumber":448,"author":{"gitID":"shanmu9898"},"content":"** if the word `all` is present in the user input, we will just export all the contacts from the last shown list."},{"lineNumber":449,"author":{"gitID":"shanmu9898"},"content":"* All (With a Tag)"},{"lineNumber":450,"author":{"gitID":"shanmu9898"},"content":"** if the word `all` is present along with a tag specified in the user input, we will just export all the contacts with that particular tag from the last shown list"},{"lineNumber":451,"author":{"gitID":"shanmu9898"},"content":"* Specific index (e.g. 1, 2, 3)"},{"lineNumber":452,"author":{"gitID":"shanmu9898"},"content":"** if the user input contains a specific index, we will add that index (one-based) to the `teachConnectBook`."},{"lineNumber":453,"author":{"gitID":"shanmu9898"},"content":"* Range of indexes (e.g. 1,5)"},{"lineNumber":454,"author":{"gitID":"shanmu9898"},"content":"** if the user input contains a range which is identified by the `,` character, we will add that range of index (one-based) to the `teachConnectBook` including the lower range but excluding the upper bound."},{"lineNumber":455,"author":{"gitID":"shanmu9898"},"content":"* Range of indexes (with a tag)"},{"lineNumber":456,"author":{"gitID":"shanmu9898"},"content":"** if the user input contains a range which is identified by the `,` character along with the tag, we will add that range of index (one-based) to the `teachConnectBook` if that contact contains that particular tag including the lower range but excluding the upper bound."},{"lineNumber":457,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":458,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":459,"author":{"gitID":"shanmu9898"},"content":"Below is the code snippet to identify the three cases in the user input:"},{"lineNumber":460,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":461,"author":{"gitID":"shanmu9898"},"content":"[source,java]"},{"lineNumber":462,"author":{"gitID":"shanmu9898"},"content":"----"},{"lineNumber":463,"author":{"gitID":"shanmu9898"},"content":"String[] rangeGiven;"},{"lineNumber":464,"author":{"gitID":"shanmu9898"},"content":"        try {"},{"lineNumber":465,"author":{"gitID":"shanmu9898"},"content":"            rangeGiven \u003d handleRange();"},{"lineNumber":466,"author":{"gitID":"shanmu9898"},"content":"        } catch (IOException e) {"},{"lineNumber":467,"author":{"gitID":"shanmu9898"},"content":"            return new CommandResult(MESSAGE_RANGE_ERROR);"},{"lineNumber":468,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":469,"author":{"gitID":"shanmu9898"},"content":"        if (rangeGiven[0].equals(\"all\")) {"},{"lineNumber":470,"author":{"gitID":"shanmu9898"},"content":"            try {"},{"lineNumber":471,"author":{"gitID":"shanmu9898"},"content":"                exportAllRange(tag);"},{"lineNumber":472,"author":{"gitID":"shanmu9898"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":473,"author":{"gitID":"shanmu9898"},"content":"                throw new AssertionError(MESSAGE_FAIL);"},{"lineNumber":474,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":475,"author":{"gitID":"shanmu9898"},"content":"        } else {"},{"lineNumber":476,"author":{"gitID":"shanmu9898"},"content":"            if (rangeGiven.length !\u003d 1) {"},{"lineNumber":477,"author":{"gitID":"shanmu9898"},"content":"                for (int i \u003d 0; i \u003c rangeGiven.length; i++) {"},{"lineNumber":478,"author":{"gitID":"shanmu9898"},"content":"                    int low \u003d Integer.parseInt(rangeGiven[0]);"},{"lineNumber":479,"author":{"gitID":"shanmu9898"},"content":"                    int high \u003d Integer.parseInt(rangeGiven[1]);"},{"lineNumber":480,"author":{"gitID":"shanmu9898"},"content":"                    if (low \u003e\u003d high) {"},{"lineNumber":481,"author":{"gitID":"shanmu9898"},"content":"                        return new CommandResult(MESSAGE_RANGE_ERROR);"},{"lineNumber":482,"author":{"gitID":"shanmu9898"},"content":"                    } else {"},{"lineNumber":483,"author":{"gitID":"shanmu9898"},"content":"                        try {"},{"lineNumber":484,"author":{"gitID":"shanmu9898"},"content":"                            exportRange(low, high, tag);"},{"lineNumber":485,"author":{"gitID":"shanmu9898"},"content":"                        } catch (DuplicatePersonException e) {"},{"lineNumber":486,"author":{"gitID":"shanmu9898"},"content":"                            throw new AssertionError(MESSAGE_FAIL);"},{"lineNumber":487,"author":{"gitID":"shanmu9898"},"content":"                        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":488,"author":{"gitID":"shanmu9898"},"content":"                            return new CommandResult(MESSAGE_OUT_OF_BOUNDS);"},{"lineNumber":489,"author":{"gitID":"shanmu9898"},"content":"                        }"},{"lineNumber":490,"author":{"gitID":"shanmu9898"},"content":"                    }"},{"lineNumber":491,"author":{"gitID":"shanmu9898"},"content":"                }"},{"lineNumber":492,"author":{"gitID":"shanmu9898"},"content":"            } else {"},{"lineNumber":493,"author":{"gitID":"shanmu9898"},"content":"                int low \u003d Integer.parseInt(rangeGiven[0]);"},{"lineNumber":494,"author":{"gitID":"shanmu9898"},"content":"                try {"},{"lineNumber":495,"author":{"gitID":"shanmu9898"},"content":"                    exportSpecific(low);"},{"lineNumber":496,"author":{"gitID":"shanmu9898"},"content":"                } catch (DuplicatePersonException e) {"},{"lineNumber":497,"author":{"gitID":"shanmu9898"},"content":"                    throw new AssertionError(MESSAGE_FAIL);"},{"lineNumber":498,"author":{"gitID":"shanmu9898"},"content":"                } catch (IndexOutOfBoundsException e) {"},{"lineNumber":499,"author":{"gitID":"shanmu9898"},"content":"                    return new CommandResult(MESSAGE_OUT_OF_BOUNDS);"},{"lineNumber":500,"author":{"gitID":"shanmu9898"},"content":"                }"},{"lineNumber":501,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":502,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":503,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":504,"author":{"gitID":"shanmu9898"},"content":"        ....Storage part comes here"},{"lineNumber":505,"author":{"gitID":"shanmu9898"},"content":"----"},{"lineNumber":506,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":507,"author":{"gitID":"shanmu9898"},"content":"The final step is to create the xml file from the `teachConnectBook`."},{"lineNumber":508,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":509,"author":{"gitID":"shanmu9898"},"content":"Below is the code snippet to export the data into an xml file using `AddressBookStorage`."},{"lineNumber":510,"author":{"gitID":"shanmu9898"},"content":"[source,java]"},{"lineNumber":511,"author":{"gitID":"shanmu9898"},"content":"----"},{"lineNumber":512,"author":{"gitID":"shanmu9898"},"content":"teachConnectStorage \u003d new XmlAddressBookStorage(path + \"/\" + nameOfExportFile + \".xml\");"},{"lineNumber":513,"author":{"gitID":"shanmu9898"},"content":"        try {"},{"lineNumber":514,"author":{"gitID":"shanmu9898"},"content":"            teachConnectStorage.saveAddressBook(teachConnectBook);"},{"lineNumber":515,"author":{"gitID":"shanmu9898"},"content":"        } catch (IOException e) {"},{"lineNumber":516,"author":{"gitID":"shanmu9898"},"content":"            return new CommandResult(MESSAGE_FAIL);"},{"lineNumber":517,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":518,"author":{"gitID":"shanmu9898"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":519,"author":{"gitID":"shanmu9898"},"content":"----"},{"lineNumber":520,"author":{"gitID":"shanmu9898"},"content":"// end::export[]"},{"lineNumber":521,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":522,"author":{"gitID":"-"},"content":"// tag::studentmanagement[]"},{"lineNumber":523,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Incomplete] Student Management"},{"lineNumber":524,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":525,"author":{"gitID":"-"},"content":""},{"lineNumber":526,"author":{"gitID":"-"},"content":"The student manangement allows the user of TeachConnect to manage a particular type of contact, a student. The user is capable of interacting with the student contact just like with any other contact, for example: adding, editing, deleting and so on. In addition, users will be able to form classes to group students of the same class together. An overview of the Model Class after implementation is shown below:"},{"lineNumber":527,"author":{"gitID":"-"},"content":""},{"lineNumber":528,"author":{"gitID":"-"},"content":"image::EditedModelClassDiagram.png[align\u003d\"center\"]"},{"lineNumber":529,"author":{"gitID":"-"},"content":""},{"lineNumber":530,"author":{"gitID":"-"},"content":"As shown above, `student` extends from `person`, giving `student` access to its constructor and getter methods for `name`, `phone`, `email`, `address` whereas only `student` will have access to `class`."},{"lineNumber":531,"author":{"gitID":"-"},"content":""},{"lineNumber":532,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":533,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspects : Implementation of student"},{"lineNumber":534,"author":{"gitID":"-"},"content":""},{"lineNumber":535,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** student extends person"},{"lineNumber":536,"author":{"gitID":"-"},"content":"** Pros: Allow students access to person methods while restricting person from accessing student methods."},{"lineNumber":537,"author":{"gitID":"-"},"content":"** Cons: A seperate UniqueStudentList is required to store the student contacts."},{"lineNumber":538,"author":{"gitID":"-"},"content":"* **Alternative 2:** only use a tag to show its a student"},{"lineNumber":539,"author":{"gitID":"-"},"content":"** Pros: Simpler to implement and tags are visible to user"},{"lineNumber":540,"author":{"gitID":"-"},"content":"** Cons: Requires every operation to check the tags. Tags can be removed."},{"lineNumber":541,"author":{"gitID":"-"},"content":"// end::studentmanagement[]"},{"lineNumber":542,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":543,"author":{"gitID":"Sisyphus25"},"content":"// tag::eventmanagement[]"},{"lineNumber":544,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":545,"author":{"gitID":"Sisyphus25"},"content":"\u003d\u003d\u003d Event Management"},{"lineNumber":546,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":547,"author":{"gitID":"Sisyphus25"},"content":"There are two types of events: an `Appointment` or a `Task`."},{"lineNumber":548,"author":{"gitID":"Sisyphus25"},"content":"The model for event are shown below:"},{"lineNumber":549,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":550,"author":{"gitID":"Sisyphus25"},"content":"image::EventModelClassDiagram.png[align\u003d\"center\"]"},{"lineNumber":551,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":552,"author":{"gitID":"Sisyphus25"},"content":"`Appointment` consist of 4 variables:"},{"lineNumber":553,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":554,"author":{"gitID":"Sisyphus25"},"content":"* Title: Hold description for the appointment"},{"lineNumber":555,"author":{"gitID":"Sisyphus25"},"content":"* Start Time: Hold the starting time of the appointment"},{"lineNumber":556,"author":{"gitID":"Sisyphus25"},"content":"* End time: Hold the end time of the appointment"},{"lineNumber":557,"author":{"gitID":"Sisyphus25"},"content":"* Person to meet: (optional) Hold the target  in the appointment"},{"lineNumber":558,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":559,"author":{"gitID":"Sisyphus25"},"content":"`Task` consist of 2 variables:"},{"lineNumber":560,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":561,"author":{"gitID":"Sisyphus25"},"content":"* Title: Hold description for the task"},{"lineNumber":562,"author":{"gitID":"Sisyphus25"},"content":"* Time: Hold the time the task is expected to be finished"},{"lineNumber":563,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":564,"author":{"gitID":"Sisyphus25"},"content":"*Commands supported for each event*"},{"lineNumber":565,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":566,"author":{"gitID":"Sisyphus25"},"content":"* Set"},{"lineNumber":567,"author":{"gitID":"Sisyphus25"},"content":"* Remove"},{"lineNumber":568,"author":{"gitID":"Sisyphus25"},"content":"* Edit"},{"lineNumber":569,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":570,"author":{"gitID":"Sisyphus25"},"content":"Similar to `UniquePersonList` and `UniqueTagList`, `UniqueEventList` is linked"},{"lineNumber":571,"author":{"gitID":"Sisyphus25"},"content":"to `AddressBook`. Request to change to the `AddressBook` model is signalled through `ModelManager`."},{"lineNumber":572,"author":{"gitID":"-"},"content":""},{"lineNumber":573,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":574,"author":{"gitID":"Sisyphus25"},"content":"\u003d\u003d\u003d\u003d\u003d Aspects : Implementation of set event"},{"lineNumber":575,"author":{"gitID":"Sisyphus25"},"content":"* **Alternative 1 (current choice):** user can still set appointment/task with the starting time/deadline already elapsed."},{"lineNumber":576,"author":{"gitID":"Sisyphus25"},"content":"** Pros: Might be useful if the users want to keep track of past events."},{"lineNumber":577,"author":{"gitID":"Sisyphus25"},"content":"** Cons: Not the most intuitive implementation and might be prone to error from the user side."},{"lineNumber":578,"author":{"gitID":"Sisyphus25"},"content":"* **Alternative 2:** user can only set  appointment/task with the starting time/deadline in the future"},{"lineNumber":579,"author":{"gitID":"Sisyphus25"},"content":"** Pros: Is the more intuitive approach and can prevent the user from keying in \"redundant\" events"},{"lineNumber":580,"author":{"gitID":"Sisyphus25"},"content":"** Cons: As TeachConnect fetches the current time from the user\u0027s system, if the user for some purposes set the system\u0027s time to deviate from world clock, some difficulties may arise when he/she wants to add new event."},{"lineNumber":581,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":582,"author":{"gitID":"Sisyphus25"},"content":"// end::eventmanagement[]"},{"lineNumber":583,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":584,"author":{"gitID":"Sisyphus25"},"content":"// tag::changingguitheme[]"},{"lineNumber":585,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":586,"author":{"gitID":"Sisyphus25"},"content":"\u003d\u003d\u003d [Proposed] Changing GUI theme"},{"lineNumber":587,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":588,"author":{"gitID":"Sisyphus25"},"content":"// end::changingguitheme[]"},{"lineNumber":589,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":590,"author":{"gitID":"Sisyphus25"},"content":"_{to be finished later}_"},{"lineNumber":591,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":592,"author":{"gitID":"Sisyphus25"},"content":"// tag::dataencryption[]"},{"lineNumber":593,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":594,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":595,"author":{"gitID":"-"},"content":""},{"lineNumber":596,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":597,"author":{"gitID":"-"},"content":""},{"lineNumber":598,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":599,"author":{"gitID":"-"},"content":""},{"lineNumber":600,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":601,"author":{"gitID":"-"},"content":""},{"lineNumber":602,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":603,"author":{"gitID":"-"},"content":""},{"lineNumber":604,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":605,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":606,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":607,"author":{"gitID":"-"},"content":""},{"lineNumber":608,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":609,"author":{"gitID":"-"},"content":""},{"lineNumber":610,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":611,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":612,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":613,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":614,"author":{"gitID":"-"},"content":""},{"lineNumber":615,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":616,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":617,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":618,"author":{"gitID":"-"},"content":""},{"lineNumber":619,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":620,"author":{"gitID":"-"},"content":""},{"lineNumber":621,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":622,"author":{"gitID":"-"},"content":""},{"lineNumber":623,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":624,"author":{"gitID":"-"},"content":""},{"lineNumber":625,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":626,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":627,"author":{"gitID":"-"},"content":""},{"lineNumber":628,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":629,"author":{"gitID":"-"},"content":""},{"lineNumber":630,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":631,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":632,"author":{"gitID":"-"},"content":""},{"lineNumber":633,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":634,"author":{"gitID":"-"},"content":""},{"lineNumber":635,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":636,"author":{"gitID":"-"},"content":""},{"lineNumber":637,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":638,"author":{"gitID":"-"},"content":""},{"lineNumber":639,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":640,"author":{"gitID":"-"},"content":""},{"lineNumber":641,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":642,"author":{"gitID":"-"},"content":""},{"lineNumber":643,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":644,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":645,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":646,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":647,"author":{"gitID":"-"},"content":""},{"lineNumber":648,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":649,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":650,"author":{"gitID":"-"},"content":""},{"lineNumber":651,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":652,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":653,"author":{"gitID":"-"},"content":""},{"lineNumber":654,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":655,"author":{"gitID":"-"},"content":""},{"lineNumber":656,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":657,"author":{"gitID":"-"},"content":""},{"lineNumber":658,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":659,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":660,"author":{"gitID":"-"},"content":""},{"lineNumber":661,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":662,"author":{"gitID":"-"},"content":""},{"lineNumber":663,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":664,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":665,"author":{"gitID":"-"},"content":""},{"lineNumber":666,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":667,"author":{"gitID":"-"},"content":""},{"lineNumber":668,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":669,"author":{"gitID":"-"},"content":""},{"lineNumber":670,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":671,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":672,"author":{"gitID":"-"},"content":""},{"lineNumber":673,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":674,"author":{"gitID":"-"},"content":""},{"lineNumber":675,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":676,"author":{"gitID":"-"},"content":""},{"lineNumber":677,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":678,"author":{"gitID":"-"},"content":""},{"lineNumber":679,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":680,"author":{"gitID":"-"},"content":""},{"lineNumber":681,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":682,"author":{"gitID":"-"},"content":""},{"lineNumber":683,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":684,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":685,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":686,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":687,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":688,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":689,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":690,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":691,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":692,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":693,"author":{"gitID":"-"},"content":""},{"lineNumber":694,"author":{"gitID":"-"},"content":""},{"lineNumber":695,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":696,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":697,"author":{"gitID":"-"},"content":""},{"lineNumber":698,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":699,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":700,"author":{"gitID":"-"},"content":""},{"lineNumber":701,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":702,"author":{"gitID":"-"},"content":""},{"lineNumber":703,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":704,"author":{"gitID":"-"},"content":""},{"lineNumber":705,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":706,"author":{"gitID":"-"},"content":""},{"lineNumber":707,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":708,"author":{"gitID":"-"},"content":""},{"lineNumber":709,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":710,"author":{"gitID":"-"},"content":""},{"lineNumber":711,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":712,"author":{"gitID":"-"},"content":""},{"lineNumber":713,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":714,"author":{"gitID":"-"},"content":""},{"lineNumber":715,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":716,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":717,"author":{"gitID":"-"},"content":""},{"lineNumber":718,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":719,"author":{"gitID":"-"},"content":""},{"lineNumber":720,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":721,"author":{"gitID":"-"},"content":""},{"lineNumber":722,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":723,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":724,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":725,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":726,"author":{"gitID":"-"},"content":""},{"lineNumber":727,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":728,"author":{"gitID":"-"},"content":""},{"lineNumber":729,"author":{"gitID":"Sisyphus25"},"content":"A project often depends on third-party libraries. For example, TeachConnect depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":730,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":731,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":732,"author":{"gitID":"-"},"content":""},{"lineNumber":733,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":734,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":735,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":736,"author":{"gitID":"-"},"content":""},{"lineNumber":737,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":738,"author":{"gitID":"-"},"content":""},{"lineNumber":739,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":740,"author":{"gitID":"-"},"content":""},{"lineNumber":741,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":742,"author":{"gitID":"-"},"content":""},{"lineNumber":743,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":744,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":745,"author":{"gitID":"-"},"content":""},{"lineNumber":746,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":747,"author":{"gitID":"-"},"content":""},{"lineNumber":748,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":749,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":750,"author":{"gitID":"-"},"content":""},{"lineNumber":751,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":752,"author":{"gitID":"-"},"content":""},{"lineNumber":753,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":754,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":755,"author":{"gitID":"-"},"content":""},{"lineNumber":756,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."},{"lineNumber":757,"author":{"gitID":"-"},"content":"+"},{"lineNumber":758,"author":{"gitID":"-"},"content":"****"},{"lineNumber":759,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":760,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":761,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":762,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":763,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":764,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":765,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":766,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":767,"author":{"gitID":"-"},"content":"****"},{"lineNumber":768,"author":{"gitID":"-"},"content":""},{"lineNumber":769,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":770,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":771,"author":{"gitID":"-"},"content":""},{"lineNumber":772,"author":{"gitID":"Sisyphus25"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in TeachConnect, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":773,"author":{"gitID":"-"},"content":""},{"lineNumber":774,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":775,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":776,"author":{"gitID":"-"},"content":""},{"lineNumber":777,"author":{"gitID":"Sisyphus25"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in TeachConnect."},{"lineNumber":778,"author":{"gitID":"-"},"content":"+"},{"lineNumber":779,"author":{"gitID":"-"},"content":"****"},{"lineNumber":780,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":781,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":782,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":783,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":784,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":785,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."},{"lineNumber":786,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":787,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":788,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":789,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":790,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":791,"author":{"gitID":"-"},"content":"****"},{"lineNumber":792,"author":{"gitID":"-"},"content":""},{"lineNumber":793,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":794,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":795,"author":{"gitID":"-"},"content":""},{"lineNumber":796,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":797,"author":{"gitID":"-"},"content":""},{"lineNumber":798,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":799,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":800,"author":{"gitID":"-"},"content":""},{"lineNumber":801,"author":{"gitID":"-"},"content":". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":802,"author":{"gitID":"-"},"content":"+"},{"lineNumber":803,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":804,"author":{"gitID":"-"},"content":"+"},{"lineNumber":805,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":806,"author":{"gitID":"-"},"content":"+"},{"lineNumber":807,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":808,"author":{"gitID":"-"},"content":"+"},{"lineNumber":809,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":810,"author":{"gitID":"-"},"content":"+"},{"lineNumber":811,"author":{"gitID":"-"},"content":"****"},{"lineNumber":812,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":813,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":814,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":815,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":816,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":817,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":818,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":819,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":820,"author":{"gitID":"-"},"content":"****"},{"lineNumber":821,"author":{"gitID":"-"},"content":""},{"lineNumber":822,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":823,"author":{"gitID":"-"},"content":"+"},{"lineNumber":824,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":825,"author":{"gitID":"-"},"content":"+"},{"lineNumber":826,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":827,"author":{"gitID":"-"},"content":"+"},{"lineNumber":828,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":829,"author":{"gitID":"-"},"content":"+"},{"lineNumber":830,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":831,"author":{"gitID":"-"},"content":"+"},{"lineNumber":832,"author":{"gitID":"-"},"content":"****"},{"lineNumber":833,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":834,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":835,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":836,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":837,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":838,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":839,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":840,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":841,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":842,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":843,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":844,"author":{"gitID":"-"},"content":"****"},{"lineNumber":845,"author":{"gitID":"-"},"content":""},{"lineNumber":846,"author":{"gitID":"Sisyphus25"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in TeachConnect."},{"lineNumber":847,"author":{"gitID":"-"},"content":"+"},{"lineNumber":848,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":849,"author":{"gitID":"-"},"content":"+"},{"lineNumber":850,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":851,"author":{"gitID":"-"},"content":"+"},{"lineNumber":852,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":853,"author":{"gitID":"-"},"content":"+"},{"lineNumber":854,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":855,"author":{"gitID":"-"},"content":"+"},{"lineNumber":856,"author":{"gitID":"-"},"content":"****"},{"lineNumber":857,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":858,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":859,"author":{"gitID":"Sisyphus25"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever TeachConnect is updated."},{"lineNumber":860,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":861,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."},{"lineNumber":862,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."},{"lineNumber":863,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":864,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."},{"lineNumber":865,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":866,"author":{"gitID":"-"},"content":"****"},{"lineNumber":867,"author":{"gitID":"-"},"content":""},{"lineNumber":868,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":869,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":870,"author":{"gitID":"-"},"content":""},{"lineNumber":871,"author":{"gitID":"Sisyphus25"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving TeachConnect to the cloud. However, the current implementation of the application constantly saves TeachConnect after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for TeachConnect storage."},{"lineNumber":872,"author":{"gitID":"-"},"content":""},{"lineNumber":873,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":874,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":875,"author":{"gitID":"-"},"content":""},{"lineNumber":876,"author":{"gitID":"Sisyphus25"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that TeachConnect can be saved in a fixed temporary location."},{"lineNumber":877,"author":{"gitID":"-"},"content":"+"},{"lineNumber":878,"author":{"gitID":"-"},"content":"****"},{"lineNumber":879,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":880,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":881,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":882,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":883,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":884,"author":{"gitID":"-"},"content":"****"},{"lineNumber":885,"author":{"gitID":"-"},"content":""},{"lineNumber":886,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":887,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":888,"author":{"gitID":"-"},"content":""},{"lineNumber":889,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":890,"author":{"gitID":"-"},"content":""},{"lineNumber":891,"author":{"gitID":"Sisyphus25"},"content":"*Scenario:* You are a software maintainer for `TeachConnect`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":892,"author":{"gitID":"-"},"content":""},{"lineNumber":893,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":894,"author":{"gitID":"-"},"content":"Edits the remark for a person specified in the `INDEX`. +"},{"lineNumber":895,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":896,"author":{"gitID":"-"},"content":""},{"lineNumber":897,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":898,"author":{"gitID":"-"},"content":""},{"lineNumber":899,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":900,"author":{"gitID":"-"},"content":"Edits the remark for the first person to `Likes to drink coffee.`"},{"lineNumber":901,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":902,"author":{"gitID":"-"},"content":"Removes the remark for the first person."},{"lineNumber":903,"author":{"gitID":"-"},"content":""},{"lineNumber":904,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":905,"author":{"gitID":"-"},"content":""},{"lineNumber":906,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":907,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":908,"author":{"gitID":"-"},"content":""},{"lineNumber":909,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":910,"author":{"gitID":"-"},"content":""},{"lineNumber":911,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":912,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":913,"author":{"gitID":"-"},"content":""},{"lineNumber":914,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":915,"author":{"gitID":"-"},"content":""},{"lineNumber":916,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":917,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":918,"author":{"gitID":"-"},"content":""},{"lineNumber":919,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":920,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":921,"author":{"gitID":"-"},"content":""},{"lineNumber":922,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":923,"author":{"gitID":"-"},"content":""},{"lineNumber":924,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":925,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":926,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":927,"author":{"gitID":"-"},"content":""},{"lineNumber":928,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":929,"author":{"gitID":"-"},"content":""},{"lineNumber":930,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":931,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":932,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":933,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":934,"author":{"gitID":"-"},"content":""},{"lineNumber":935,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":936,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":937,"author":{"gitID":"-"},"content":""},{"lineNumber":938,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":939,"author":{"gitID":"-"},"content":""},{"lineNumber":940,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":941,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":942,"author":{"gitID":"-"},"content":""},{"lineNumber":943,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":944,"author":{"gitID":"-"},"content":""},{"lineNumber":945,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":946,"author":{"gitID":"-"},"content":""},{"lineNumber":947,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":948,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":949,"author":{"gitID":"-"},"content":""},{"lineNumber":950,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":951,"author":{"gitID":"-"},"content":""},{"lineNumber":952,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":953,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":954,"author":{"gitID":"-"},"content":""},{"lineNumber":955,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":956,"author":{"gitID":"-"},"content":""},{"lineNumber":957,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":958,"author":{"gitID":"-"},"content":""},{"lineNumber":959,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":960,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":961,"author":{"gitID":"-"},"content":""},{"lineNumber":962,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":963,"author":{"gitID":"-"},"content":""},{"lineNumber":964,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":965,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":966,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":967,"author":{"gitID":"-"},"content":""},{"lineNumber":968,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":969,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":970,"author":{"gitID":"-"},"content":""},{"lineNumber":971,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":972,"author":{"gitID":"-"},"content":""},{"lineNumber":973,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":974,"author":{"gitID":"-"},"content":""},{"lineNumber":975,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":976,"author":{"gitID":"-"},"content":""},{"lineNumber":977,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":978,"author":{"gitID":"-"},"content":""},{"lineNumber":979,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":980,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":981,"author":{"gitID":"-"},"content":""},{"lineNumber":982,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":983,"author":{"gitID":"-"},"content":""},{"lineNumber":984,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":985,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":986,"author":{"gitID":"-"},"content":""},{"lineNumber":987,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":988,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":989,"author":{"gitID":"-"},"content":""},{"lineNumber":990,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":991,"author":{"gitID":"-"},"content":""},{"lineNumber":992,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":993,"author":{"gitID":"-"},"content":""},{"lineNumber":994,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":995,"author":{"gitID":"-"},"content":""},{"lineNumber":996,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":997,"author":{"gitID":"-"},"content":""},{"lineNumber":998,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":999,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":1000,"author":{"gitID":"-"},"content":""},{"lineNumber":1001,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1002,"author":{"gitID":"-"},"content":""},{"lineNumber":1003,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":1004,"author":{"gitID":"-"},"content":""},{"lineNumber":1005,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1006,"author":{"gitID":"-"},"content":""},{"lineNumber":1007,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":1008,"author":{"gitID":"-"},"content":""},{"lineNumber":1009,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":1010,"author":{"gitID":"-"},"content":""},{"lineNumber":1011,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":1012,"author":{"gitID":"-"},"content":""},{"lineNumber":1013,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1014,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":1015,"author":{"gitID":"-"},"content":""},{"lineNumber":1016,"author":{"gitID":"Sisyphus25"},"content":"*Target user profile*: teachers or educational professionals who"},{"lineNumber":1017,"author":{"gitID":"-"},"content":""},{"lineNumber":1018,"author":{"gitID":"-"},"content":"* is a teacher or educational professional"},{"lineNumber":1019,"author":{"gitID":"-"},"content":"* has a need to manage a significant number of students and parents contact details"},{"lineNumber":1020,"author":{"gitID":"-"},"content":"* has a need to keep track of appointments with parents, students or other staff"},{"lineNumber":1021,"author":{"gitID":"-"},"content":"* has a need to keep track of tasks and their deadlines"},{"lineNumber":1022,"author":{"gitID":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":1023,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":1024,"author":{"gitID":"Sisyphus25"},"content":"* prefer typing over mouse input"},{"lineNumber":1025,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":1026,"author":{"gitID":"-"},"content":""},{"lineNumber":1027,"author":{"gitID":"-"},"content":""},{"lineNumber":1028,"author":{"gitID":"Sisyphus25"},"content":"*Value proposition*: TeachConnect provides a simple and intuitive interface to help teachers manage their contacts, events and tasks."},{"lineNumber":1029,"author":{"gitID":"-"},"content":""},{"lineNumber":1030,"author":{"gitID":"-"},"content":""},{"lineNumber":1031,"author":{"gitID":"shanmu9898"},"content":"*Feature Contribution*"},{"lineNumber":1032,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1033,"author":{"gitID":"shanmu9898"},"content":"1. Mukesh Gadupudi"},{"lineNumber":1034,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1035,"author":{"gitID":"shanmu9898"},"content":"** Major Feature : Sharing of Contacts"},{"lineNumber":1036,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1037,"author":{"gitID":"shanmu9898"},"content":"*** Contacts can be imported or exported"},{"lineNumber":1038,"author":{"gitID":"shanmu9898"},"content":"*** They can be exported based on the tag or index"},{"lineNumber":1039,"author":{"gitID":"shanmu9898"},"content":"*** Import can be done given the file path of an XML file"},{"lineNumber":1040,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1041,"author":{"gitID":"shanmu9898"},"content":"** Minor Feature : Email contacts"},{"lineNumber":1042,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1043,"author":{"gitID":"shanmu9898"},"content":"*** Contacts can be emailed by either by tag or an individual contact."},{"lineNumber":1044,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1045,"author":{"gitID":"shanmu9898"},"content":"** How the features fit into the product scope :"},{"lineNumber":1046,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1047,"author":{"gitID":"shanmu9898"},"content":"*** Major Feature: This feature can help teachers share contacts with other teachers. This is especially useful when teachers change classes or pass on the class to other teachers. Updating and losing data is also a common problem and to overcome this a backup can be stored by using this feature."},{"lineNumber":1048,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1049,"author":{"gitID":"shanmu9898"},"content":"*** Minor Feature: This feature can help teachers email contacts. This might be really helpful when the teacher wants to remind parents with appointments or remind students with the work they need to finish. This also helps the teachers send group messages to class or parents regarding some important announcements."},{"lineNumber":1050,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1051,"author":{"gitID":"Sisyphus25"},"content":"2. Rachel Ngo Phuong Thao"},{"lineNumber":1052,"author":{"gitID":"Sisyphus25"},"content":"** Major Feature : Managing Appointments \u0026 Tasks"},{"lineNumber":1053,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1054,"author":{"gitID":"Sisyphus25"},"content":"*** Users can add, edit, and remove appointments \u0026 tasks in TeachConnect"},{"lineNumber":1055,"author":{"gitID":"Sisyphus25"},"content":"*** The appointments \u0026 tasks would be rendered in a calendar in the GUI"},{"lineNumber":1056,"author":{"gitID":"Sisyphus25"},"content":"** Minor Feature : Changing the GUI theme"},{"lineNumber":1057,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1058,"author":{"gitID":"Sisyphus25"},"content":"*** Users can set the theme of the GUI to dark theme or light theme"},{"lineNumber":1059,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1060,"author":{"gitID":"shanmu9898"},"content":"** How the features fit into the product scope :"},{"lineNumber":1061,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1062,"author":{"gitID":"Sisyphus25"},"content":"*** Major Feature: This feature can help teachers keeping track of any upcoming appointment or task they have. This can be useful for teachers or teaching associates who frequently need to meet up with students and parents for counselling or administrative purposes."},{"lineNumber":1063,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1064,"author":{"gitID":"Sisyphus25"},"content":"*** Minor Feature: This feature increases the aesthetic sense and helps people set the theme according to their taste."},{"lineNumber":1065,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1066,"author":{"gitID":"shanmu9898"},"content":"3. Jonathan"},{"lineNumber":1067,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1068,"author":{"gitID":"shanmu9898"},"content":"** Major Feature : Data Encryption"},{"lineNumber":1069,"author":{"gitID":"shanmu9898"},"content":"*** Encrypts the data for increased safety"},{"lineNumber":1070,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1071,"author":{"gitID":"shanmu9898"},"content":"** Minor Feature : Sort Contacts"},{"lineNumber":1072,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1073,"author":{"gitID":"shanmu9898"},"content":"*** Contacts can be sorted in alphabetical order of the name/tag or the phone number of the contacts."},{"lineNumber":1074,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1075,"author":{"gitID":"shanmu9898"},"content":"** How the features fit into the product scope :"},{"lineNumber":1076,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1077,"author":{"gitID":"shanmu9898"},"content":"*** Major Feature: Since TeachConnect has a lot of personal details of students and parents, the owner of the address book would want to encrypt the application data file to prevent outside access to sensitive information."},{"lineNumber":1078,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1079,"author":{"gitID":"shanmu9898"},"content":"*** Minor Feature: This helps teacher relate and understand the index of the contacts in the TeachConnect better. Indexing becomes easy when they later want to export or set appointments."},{"lineNumber":1080,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1081,"author":{"gitID":"-"},"content":"4. Randy Pang Pang"},{"lineNumber":1082,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1083,"author":{"gitID":"-"},"content":"** Major Feature : Management of student contacts"},{"lineNumber":1084,"author":{"gitID":"-"},"content":"*** Student contact can be created and be added into classes"},{"lineNumber":1085,"author":{"gitID":"-"},"content":""},{"lineNumber":1086,"author":{"gitID":"-"},"content":"** Minor Feature : Multiple tabs for the list in GUI"},{"lineNumber":1087,"author":{"gitID":"-"},"content":"*** The list in GUI will hava tabs for multiple different lists"},{"lineNumber":1088,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1089,"author":{"gitID":"shanmu9898"},"content":"** How the features fit into the product scope :"},{"lineNumber":1090,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1091,"author":{"gitID":"-"},"content":"*** Major Feature: This feature is essential to TeachConnect as it helps teachers to remember which class did they taught a particular student."},{"lineNumber":1092,"author":{"gitID":"-"},"content":""},{"lineNumber":1093,"author":{"gitID":"-"},"content":"*** Minor Feature: This feature allows the teacher to keep multiple list, eg. one for students and one for all contacts. It also allows them to switch between multiple lists without having to type another list command."},{"lineNumber":1094,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1095,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1096,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1097,"author":{"gitID":"-"},"content":""},{"lineNumber":1098,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1099,"author":{"gitID":"-"},"content":""},{"lineNumber":1100,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1101,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1102,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1103,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":1104,"author":{"gitID":"-"},"content":""},{"lineNumber":1105,"author":{"gitID":"-"},"content":"|`* * *` |user |add a new person |"},{"lineNumber":1106,"author":{"gitID":"-"},"content":""},{"lineNumber":1107,"author":{"gitID":"Sisyphus25"},"content":"|`* * *` |user |delete a person |remove contacts that I no longer need"},{"lineNumber":1108,"author":{"gitID":"-"},"content":""},{"lineNumber":1109,"author":{"gitID":"-"},"content":"|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"},{"lineNumber":1110,"author":{"gitID":"-"},"content":""},{"lineNumber":1111,"author":{"gitID":"Sisyphus25"},"content":"|`* * *` |user |edit the details of a person"},{"lineNumber":1112,"author":{"gitID":"Sisyphus25"},"content":" |easily make changes to their details when they update their contact"},{"lineNumber":1113,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":1114,"author":{"gitID":"Sisyphus25"},"content":"|`* * *` |teacher |create a class |group and manage students who are taking the same class"},{"lineNumber":1115,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":1116,"author":{"gitID":"Sisyphus25"},"content":"|`* * *` |teacher |add persons to a class |group them for easy perusal"},{"lineNumber":1117,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":1118,"author":{"gitID":"Sisyphus25"},"content":"|`* * *` |teacher | list all the students in a particular class |know all the students taking that class"},{"lineNumber":1119,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":1120,"author":{"gitID":"Sisyphus25"},"content":"|`* *` |teacher |add appointment with a student to my schedule |be reminded of the appointment"},{"lineNumber":1121,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":1122,"author":{"gitID":"Sisyphus25"},"content":"|`* *` |teacher |delete appointments from my schedule |clear appointments I no longer need to be reminded about"},{"lineNumber":1123,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":1124,"author":{"gitID":"Sisyphus25"},"content":"|`* *` |teacher |list all appointments in my schedule |check all the appointments I have"},{"lineNumber":1125,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":1126,"author":{"gitID":"-"},"content":"|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"},{"lineNumber":1127,"author":{"gitID":"-"},"content":""},{"lineNumber":1128,"author":{"gitID":"Sisyphus25"},"content":"|`*` |user with many persons in TeachConnect |sort persons by name |locate a person easily"},{"lineNumber":1129,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":1130,"author":{"gitID":"Sisyphus25"},"content":"|`*` |user |tag a person |mark their contact with details"},{"lineNumber":1131,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":1132,"author":{"gitID":"Sisyphus25"},"content":"|`*` |user |find all person with a given tag |see all persons with contact marked with a certain detail"},{"lineNumber":1133,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":1134,"author":{"gitID":"Sisyphus25"},"content":"|`*` |user |change the colour of a tag |make it easier for me to distinguish the tags"},{"lineNumber":1135,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":1136,"author":{"gitID":"Sisyphus25"},"content":"|`*` |user |change the background colour of the application |make the application more pleasing to my eyes"},{"lineNumber":1137,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":1138,"author":{"gitID":"Sisyphus25"},"content":"|`*` |user |export persons from TeachConnect to an external file| have persons\u0027 contacts ready for import"},{"lineNumber":1139,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":1140,"author":{"gitID":"Sisyphus25"},"content":"|`*` |user |import persons from an external file to TeachConnect | have persons\u0027 contact details added without having to reenter the information"},{"lineNumber":1141,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1142,"author":{"gitID":"-"},"content":""},{"lineNumber":1143,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1144,"author":{"gitID":"-"},"content":""},{"lineNumber":1145,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1146,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1147,"author":{"gitID":"-"},"content":""},{"lineNumber":1148,"author":{"gitID":"Sisyphus25"},"content":"(For all use cases below, the *System* is `TeachConnect` and the *Actor* is the `teacher`, unless specified otherwise)"},{"lineNumber":1149,"author":{"gitID":"-"},"content":""},{"lineNumber":1150,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1151,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete person"},{"lineNumber":1152,"author":{"gitID":"-"},"content":""},{"lineNumber":1153,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1154,"author":{"gitID":"-"},"content":""},{"lineNumber":1155,"author":{"gitID":"-"},"content":"1.  Teacher requests to list persons"},{"lineNumber":1156,"author":{"gitID":"Sisyphus25"},"content":"2.  TeachConnect shows a list of persons"},{"lineNumber":1157,"author":{"gitID":"-"},"content":"3.  Teacher requests to delete a specific person in the list"},{"lineNumber":1158,"author":{"gitID":"Sisyphus25"},"content":"4.  TeachConnect deletes the person"},{"lineNumber":1159,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1160,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1161,"author":{"gitID":"-"},"content":""},{"lineNumber":1162,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1163,"author":{"gitID":"-"},"content":""},{"lineNumber":1164,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1165,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1166,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1167,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1168,"author":{"gitID":"-"},"content":""},{"lineNumber":1169,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1170,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1171,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1172,"author":{"gitID":"Sisyphus25"},"content":"** 3a1. TeachConnect shows an error message."},{"lineNumber":1173,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1174,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1175,"author":{"gitID":"-"},"content":""},{"lineNumber":1176,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1177,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Create class"},{"lineNumber":1178,"author":{"gitID":"-"},"content":""},{"lineNumber":1179,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1180,"author":{"gitID":"-"},"content":""},{"lineNumber":1181,"author":{"gitID":"-"},"content":"1.  Teacher requests to list persons"},{"lineNumber":1182,"author":{"gitID":"Sisyphus25"},"content":"2.  TeachConnect shows a list of persons"},{"lineNumber":1183,"author":{"gitID":"-"},"content":"3.  Teacher requests to create a class of a subject for a specified duration"},{"lineNumber":1184,"author":{"gitID":"Sisyphus25"},"content":"4.  TeachConnect prompts for student(s) to be added into the class"},{"lineNumber":1185,"author":{"gitID":"-"},"content":"5.  Teacher enters index of student(s) as shown in the list"},{"lineNumber":1186,"author":{"gitID":"Sisyphus25"},"content":"5.  TeachConnect creates the class"},{"lineNumber":1187,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1188,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1189,"author":{"gitID":"-"},"content":""},{"lineNumber":1190,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1191,"author":{"gitID":"-"},"content":""},{"lineNumber":1192,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1193,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1194,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1195,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1196,"author":{"gitID":"-"},"content":""},{"lineNumber":1197,"author":{"gitID":"-"},"content":"* 3a. The given subject or duration is invalid."},{"lineNumber":1198,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1199,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1200,"author":{"gitID":"Sisyphus25"},"content":"** 3a1. TeachConnect shows an error message."},{"lineNumber":1201,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1202,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1203,"author":{"gitID":"-"},"content":""},{"lineNumber":1204,"author":{"gitID":"-"},"content":"* 5a. One or more given index(s) is invalid."},{"lineNumber":1205,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1206,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1207,"author":{"gitID":"Sisyphus25"},"content":"** 5a1. TeachConnect shows an error message."},{"lineNumber":1208,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1209,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1210,"author":{"gitID":"-"},"content":""},{"lineNumber":1211,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1212,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add appointment"},{"lineNumber":1213,"author":{"gitID":"-"},"content":""},{"lineNumber":1214,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1215,"author":{"gitID":"-"},"content":""},{"lineNumber":1216,"author":{"gitID":"-"},"content":"1.  Teacher requests to add an appointment at a specified time"},{"lineNumber":1217,"author":{"gitID":"Sisyphus25"},"content":"2.  TeachConnect prompts for a title"},{"lineNumber":1218,"author":{"gitID":"-"},"content":"3.  Teacher enters a title"},{"lineNumber":1219,"author":{"gitID":"Sisyphus25"},"content":"4.  TeachConnect adds the appointment"},{"lineNumber":1220,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1221,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1222,"author":{"gitID":"-"},"content":""},{"lineNumber":1223,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1224,"author":{"gitID":"-"},"content":""},{"lineNumber":1225,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1226,"author":{"gitID":"-"},"content":"* 1a. Time given is invalid."},{"lineNumber":1227,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1228,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1229,"author":{"gitID":"Sisyphus25"},"content":"** 1a1. TeachConnect shows error message."},{"lineNumber":1230,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1231,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1232,"author":{"gitID":"-"},"content":""},{"lineNumber":1233,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1234,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete appointment"},{"lineNumber":1235,"author":{"gitID":"-"},"content":""},{"lineNumber":1236,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1237,"author":{"gitID":"-"},"content":""},{"lineNumber":1238,"author":{"gitID":"-"},"content":"1.  Teacher requests to list appointments"},{"lineNumber":1239,"author":{"gitID":"Sisyphus25"},"content":"2.  TeachConnect shows list of appointments"},{"lineNumber":1240,"author":{"gitID":"-"},"content":"3.  Teacher requests to delete a specific appointment in the list"},{"lineNumber":1241,"author":{"gitID":"Sisyphus25"},"content":"4.  TeachConnect deletes appointment"},{"lineNumber":1242,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1243,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1244,"author":{"gitID":"-"},"content":""},{"lineNumber":1245,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1246,"author":{"gitID":"-"},"content":""},{"lineNumber":1247,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1248,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1249,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1250,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1251,"author":{"gitID":"-"},"content":""},{"lineNumber":1252,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1253,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1254,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1255,"author":{"gitID":"Sisyphus25"},"content":"** 3a1. TeachConnect shows error message."},{"lineNumber":1256,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1257,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1258,"author":{"gitID":"-"},"content":""},{"lineNumber":1259,"author":{"gitID":"-"},"content":""},{"lineNumber":1260,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1261,"author":{"gitID":"-"},"content":""},{"lineNumber":1262,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1263,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1264,"author":{"gitID":"-"},"content":""},{"lineNumber":1265,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1266,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1267,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1268,"author":{"gitID":"shanmu9898"},"content":".  Should be intutive for any first time user."},{"lineNumber":1269,"author":{"gitID":"shanmu9898"},"content":".  Should be able to handle any invalid input i.e should be able to inform the user and guide the user for valid input."},{"lineNumber":1270,"author":{"gitID":"shanmu9898"},"content":".  Should respond within a second"},{"lineNumber":1271,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1272,"author":{"gitID":"-"},"content":""},{"lineNumber":1273,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1274,"author":{"gitID":"-"},"content":""},{"lineNumber":1275,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1276,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1277,"author":{"gitID":"-"},"content":""},{"lineNumber":1278,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1279,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1280,"author":{"gitID":"-"},"content":""},{"lineNumber":1281,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1282,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1283,"author":{"gitID":"-"},"content":""},{"lineNumber":1284,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1285,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1286,"author":{"gitID":"-"},"content":""},{"lineNumber":1287,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1288,"author":{"gitID":"-"},"content":""},{"lineNumber":1289,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1290,"author":{"gitID":"-"},"content":""},{"lineNumber":1291,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1292,"author":{"gitID":"-"},"content":""},{"lineNumber":1293,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1294,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1295,"author":{"gitID":"-"},"content":""},{"lineNumber":1296,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1297,"author":{"gitID":"-"},"content":""},{"lineNumber":1298,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1299,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1300,"author":{"gitID":"-"},"content":""},{"lineNumber":1301,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1302,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1303,"author":{"gitID":"-"},"content":""},{"lineNumber":1304,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1305,"author":{"gitID":"-"},"content":""},{"lineNumber":1306,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1307,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1308,"author":{"gitID":"-"},"content":""},{"lineNumber":1309,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1310,"author":{"gitID":"-"},"content":""},{"lineNumber":1311,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1312,"author":{"gitID":"-"},"content":""},{"lineNumber":1313,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1314,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1315,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1316,"author":{"gitID":"-"},"content":""},{"lineNumber":1317,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1318,"author":{"gitID":"-"},"content":""},{"lineNumber":1319,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1320,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1321,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1322,"author":{"gitID":"-"},"content":""},{"lineNumber":1323,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1324,"author":{"gitID":"-"},"content":""},{"lineNumber":1325,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":1326,"author":{"gitID":"-"},"content":""},{"lineNumber":1327,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":1328,"author":{"gitID":"-"},"content":""},{"lineNumber":1329,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":1330,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1331,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1332,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1333,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1334,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1335,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1336,"author":{"gitID":"-"},"content":""},{"lineNumber":1337,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1338,"author":{"gitID":"-"},"content":""},{"lineNumber":1339,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1340,"author":{"gitID":"-"},"content":""},{"lineNumber":1341,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1342,"author":{"gitID":"-"},"content":""},{"lineNumber":1343,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1344,"author":{"gitID":"-"},"content":""},{"lineNumber":1345,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"Sisyphus25":127,"-":1008,"shanmu9898":210}},{"path":"src/test/java/seedu/address/ui/AppointmentCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_APPOINTMENT_2;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_APPOINTMENT_3;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"public class AppointmentCardTest extends GuiUnitTest {"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    public void equals() {"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"        Appointment appointment \u003d TYPICAL_APPOINTMENT_2;"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"        AppointmentCard appointmentCard \u003d new AppointmentCard(appointment, 0);"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"        // same appointment, same index -\u003e returns true"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"        AppointmentCard copy \u003d new AppointmentCard(appointment, 0);"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(appointmentCard.equals(copy));"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(appointmentCard.equals(appointmentCard));"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"        // null -\u003e returns false"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(appointmentCard.equals(null));"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"        // different types -\u003e returns false"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(appointmentCard.equals(0));"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"        // different appointment, same index -\u003e returns false"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"        Appointment differentAppointment \u003d TYPICAL_APPOINTMENT_3;"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(appointmentCard.equals(new AppointmentCard(differentAppointment, 0)));"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"        // same appointment, different index -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(appointmentCard.equals(new AppointmentCard(appointment, 1)));"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":38,"-":3}},{"path":"src/test/java/seedu/address/ui/TaskCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_TASK_1;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_TASK_2;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"public class TaskCardTest extends GuiUnitTest {"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    public void equals() {"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"        Task task \u003d TYPICAL_TASK_2;"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"        TaskCard taskCard \u003d new TaskCard(task, 0);"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"        // same task, same index -\u003e returns true"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"        TaskCard copy \u003d new TaskCard(task, 0);"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(taskCard.equals(copy));"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(taskCard.equals(taskCard));"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"        // null -\u003e returns false"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(taskCard.equals(null));"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"        // different types -\u003e returns false"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(taskCard.equals(0));"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"        // different task, same index -\u003e returns false"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"        Task differentTask \u003d TYPICAL_TASK_1;"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(taskCard.equals(new TaskCard(differentTask, 0)));"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"        // same task, different index -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(taskCard.equals(new TaskCard(task, 1)));"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":39,"-":2}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    public static void assertPersonCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(expectedCard.getTagsNames(), actualCard.getTagsNames());"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"        expectedCard.getTagsNames().forEach(tag -\u003e"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"                assertEquals(expectedCard.getTagStyleClasses(tag), actualCard.getTagStyleClasses(tag)));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"        assertTagsEqual(expectedPerson, actualCard);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPerson} with the correct"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"     * color."},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"    private static void assertTagsEqual(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"        List\u003cString\u003e expectedTagsNames \u003d expectedPerson.getTags().stream()"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"                .map(tag -\u003e tag.tagName).collect(Collectors.toList());"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(expectedTagsNames, actualCard.getTagsNames());"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"        expectedPerson.getTags().forEach(tag -\u003e"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"                assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, tag.tagColorStyle),"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"                        actualCard.getTagStyleClasses(tag.tagName))"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"        );"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":94,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":26,"-":69}},{"path":"src/test/java/seedu/address/commons/core/ConfigTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ConfigTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"        String defaultConfigAsString \u003d \"App title : TeachConnect\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"                + \"Current log level : INFO\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"                + \"Preference file Location : preferences.json\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":31,"shanmu9898":1}},{"path":"src/test/java/seedu/address/commons/util/AppUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class AppUtilTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void getImage_exitingImage() {"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"        assertNotNull(AppUtil.getImage(\"/images/Tc_logo.png\"));"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        AppUtil.getImage(null);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void checkArgument_true_nothingHappens() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(true);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(true, \"\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(false);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        String errorMessage \u003d \"error message\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        thrown.expectMessage(errorMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(false,  errorMessage);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":46,"shanmu9898":1}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList("},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"            new XmlAdaptedTag(\"classmates\", \"teal\"));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getPersonList().size());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":82,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":84,"author":{"gitID":"-"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":91,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":93,"author":{"gitID":"-"},"content":"                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":100,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":102,"author":{"gitID":"-"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":134,"author":{"gitID":"-"},"content":"                builder.withPerson(new PersonBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":147,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":2,"-":145}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":62,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"        Index index \u003d INDEX_FIRST;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":65,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST.getZeroBased()), editedPerson);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":88,"author":{"gitID":"Sisyphus25"},"content":"        index \u003d INDEX_FIRST;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":"        index \u003d INDEX_FIRST;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":104,"author":{"gitID":"Sisyphus25"},"content":"        index \u003d INDEX_FIRST;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":112,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":113,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":122,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":123,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":125,"author":{"gitID":"Sisyphus25"},"content":"        index \u003d INDEX_FIRST;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        selectPerson(index);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":141,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"Sisyphus25"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased(),"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":157,"author":{"gitID":"Sisyphus25"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased() + INVALID_NAME_DESC,"},{"lineNumber":158,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":161,"author":{"gitID":"Sisyphus25"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased() + INVALID_PHONE_DESC,"},{"lineNumber":162,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":165,"author":{"gitID":"Sisyphus25"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased() + INVALID_EMAIL_DESC,"},{"lineNumber":166,"author":{"gitID":"-"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":169,"author":{"gitID":"Sisyphus25"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased() + INVALID_ADDRESS_DESC,"},{"lineNumber":170,"author":{"gitID":"-"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":173,"author":{"gitID":"Sisyphus25"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased() + INVALID_TAG_DESC,"},{"lineNumber":174,"author":{"gitID":"Sisyphus25"},"content":"                Tag.MESSAGE_TAG_NAME_CONSTRAINTS);"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"},{"lineNumber":179,"author":{"gitID":"Sisyphus25"},"content":"        index \u003d INDEX_FIRST;"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":187,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":214,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":218,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":222,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":249,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":15,"-":267}},{"path":"src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Test scope: similar to {@code DeleteCommandParserTest}."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * @see DeleteCommandParserTest"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SelectCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private SelectCommandParser parser \u003d new SelectCommandParser();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsSelectCommand() {"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":2,"-":27}},{"path":"src/test/java/seedu/address/logic/parser/ChangeThemeCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":" * Test scope: similar to ToggleCalendarViewCommandParser Test"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"public class ChangeThemeCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    private ChangeThemeCommandParser parser \u003d new ChangeThemeCommandParser();"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    public void parse_validArgs_returnsToggleCalendarViewCommand() {"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"        assertParseSuccess(parser, \"dark \", new ChangeThemeCommand(\"dark\"));"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, \"not a theme\","},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeThemeCommand.MESSAGE_INVALID_THEME));"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, \"x\","},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeThemeCommand.MESSAGE_INVALID_THEME));"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":25,"-":5}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"},{"lineNumber":88,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_NAME_CONSTRAINTS); // invalid tag"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":99,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY,"},{"lineNumber":100,"author":{"gitID":"Sisyphus25"},"content":"                Tag.MESSAGE_TAG_NAME_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND,"},{"lineNumber":102,"author":{"gitID":"Sisyphus25"},"content":"                Tag.MESSAGE_TAG_NAME_CONSTRAINTS);"},{"lineNumber":103,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND,"},{"lineNumber":104,"author":{"gitID":"Sisyphus25"},"content":"                Tag.MESSAGE_TAG_NAME_CONSTRAINTS);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":113,"author":{"gitID":"Sisyphus25"},"content":"        Index targetIndex \u003d INDEX_SECOND;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":127,"author":{"gitID":"Sisyphus25"},"content":"        Index targetIndex \u003d INDEX_FIRST;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":140,"author":{"gitID":"Sisyphus25"},"content":"        Index targetIndex \u003d INDEX_THIRD;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        // phone"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        // email"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        // address"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        // tags"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":173,"author":{"gitID":"Sisyphus25"},"content":"        Index targetIndex \u003d INDEX_FIRST;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased()  + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":175,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":176,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":179,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                .build();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        // no other valid values specified"},{"lineNumber":189,"author":{"gitID":"Sisyphus25"},"content":"        Index targetIndex \u003d INDEX_FIRST;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        // other valid values specified"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":197,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":199,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":206,"author":{"gitID":"Sisyphus25"},"content":"        Index targetIndex \u003d INDEX_THIRD;"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":16,"-":198}},{"path":"src/test/java/seedu/address/logic/parser/ImportCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.commands.ImportCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":"public class ImportCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"    @Rule"},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"    private ImportCommandParser importCommandParser \u003d new ImportCommandParser();"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"    public void parse_nullString_throwsNullPointerException() throws ParseException {"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"        importCommandParser.parse(null);"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"    public void parse_emptyString_throwsParseException() throws ParseException {"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"        importCommandParser.parse(\" \");"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":"    public void parse_moreThanOneBlockOfString_throwsParseException() throws ParseException {"},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":"        importCommandParser.parse(\"invalid two strings\");"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"    public void parse_validString_success() {"},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":"        String input \u003d \"./src/test/data/XmlAddressBookStorgageTest/importsamplefile.xml\";"},{"lineNumber":43,"author":{"gitID":"shanmu9898"},"content":"        ImportCommand expectedCommand \u003d new ImportCommand(input);"},{"lineNumber":44,"author":{"gitID":"shanmu9898"},"content":"        assertParseSuccess(importCommandParser, input, expectedCommand);"},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":47,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"-":6,"shanmu9898":44}},{"path":"src/test/java/seedu/address/logic/parser/SetAppointmentCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.END_TIME_DESC;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_END_TIME_DESC;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_TIME_DESC;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.START_TIME_DESC;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME;"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.SetAppointmentCommand;"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.EventTime;"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Title;"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.testutil.AppointmentBuilder;"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"public class SetAppointmentCommandParserTest {"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    private SetAppointmentCommandParser parser \u003d new SetAppointmentCommandParser();"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"        Appointment expectedAppointment \u003d new AppointmentBuilder(VALID_TITLE, VALID_START_TIME, VALID_END_TIME).build();"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"        // whitespace only preamble"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TITLE_DESC + START_TIME_DESC + END_TIME_DESC,"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"                new SetAppointmentCommand(expectedAppointment));"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"        // no personToMeet"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"        Appointment expectedAppointment \u003d new AppointmentBuilder(VALID_TITLE, VALID_START_TIME, VALID_END_TIME).build();"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"        assertParseSuccess(parser, TITLE_DESC + START_TIME_DESC + END_TIME_DESC,"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"                new SetAppointmentCommand((expectedAppointment)));"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetAppointmentCommand.MESSAGE_USAGE);"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"        // missing title prefix"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, VALID_TITLE + START_TIME_DESC + END_TIME_DESC,"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"                expectedMessage);"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"        // missing start time prefix"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, TITLE_DESC + VALID_START_TIME + END_TIME_DESC,"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"                expectedMessage);"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"        // missing start time prefix"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, TITLE_DESC + START_TIME_DESC + VALID_END_TIME,"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"                expectedMessage);"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"        // all prefixes missing"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, VALID_TITLE + VALID_START_TIME + VALID_END_TIME,"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"                expectedMessage);"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"        // invalid title"},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, INVALID_TITLE_DESC + START_TIME_DESC + END_TIME_DESC,"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":"                Title.MESSAGE_TITLE_CONSTRAINTS);"},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"        // invalid start time"},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, TITLE_DESC + INVALID_START_TIME_DESC + END_TIME_DESC,"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"                EventTime.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"        // invalid end time"},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, TITLE_DESC + START_TIME_DESC + INVALID_END_TIME_DESC,"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"                EventTime.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":72,"-":9}},{"path":"src/test/java/seedu/address/logic/parser/RemoveCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.RemoveCommand;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"public class RemoveCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"    private RemoveCommandParser parser \u003d new RemoveCommandParser();"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"        assertParseSuccess(parser, \"appointment\" + \" 1\", new RemoveCommand(INDEX_FIRST, \"appointment\"));"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, \"not valid\","},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, \"Appointment\" + \" 1\","},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, \"appointment\" + \" -1\","},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":23,"-":8}},{"path":"src/test/java/seedu/address/logic/parser/ListCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"public class ListCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"    private ListCommandParser parser \u003d new ListCommandParser();"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    public void parse_validArgs_returnsListCommand() {"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"        assertParseSuccess(parser, \"\", new ListCommand(\"\"));"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"        assertParseSuccess(parser, \"person\", new ListCommand(\"person\"));"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"        assertParseSuccess(parser, \"task\", new ListCommand(\"task\"));"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"        assertParseSuccess(parser, \"appointment\", new ListCommand(\"appointment\"));"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, \"ffffffd\","},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, \"event\","},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":25,"-":5}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.END_TIME_DESC;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.START_TIME_DESC;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME;"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PATH;"},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RANGE;"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_EXPORT;"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.testutil.ExportCommandBuilder.NAME_NEEDED;"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.testutil.ExportCommandBuilder.PATH_NEEDED;"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.testutil.ExportCommandBuilder.RANGE_ALL;"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.testutil.ExportCommandBuilder.TAG_NEEDED;"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.commands.DeleteShortcutCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.commands.ExportCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.commands.ImportCommand;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.RemoveCommand;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.SetAppointmentCommand;"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.SetTaskCommand;"},{"lineNumber":52,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.commands.ShortcutCommand;"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.ToggleCalendarViewCommand;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.EventTime;"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Title;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":62,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.testutil.AppointmentBuilder;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":90,"author":{"gitID":"Sisyphus25"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"},{"lineNumber":91,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST), command);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":99,"author":{"gitID":"Sisyphus25"},"content":"                + INDEX_FIRST.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":100,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(new EditCommand(INDEX_FIRST, descriptor), command);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":113,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" \") instanceof ListCommand);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" appointment\") instanceof ListCommand);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":145,"author":{"gitID":"Sisyphus25"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"},{"lineNumber":146,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST), command);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":175,"author":{"gitID":"shanmu9898"},"content":"    //@@author shanmu9898"},{"lineNumber":176,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":177,"author":{"gitID":"shanmu9898"},"content":"    public void parseCommand_export() throws Exception {"},{"lineNumber":178,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand command \u003d (ExportCommand) parser.parseCommand("},{"lineNumber":179,"author":{"gitID":"shanmu9898"},"content":"                ExportCommand.COMMAND_WORD + \" \" + PREFIX_NAME + NAME_NEEDED + \" \" + PREFIX_RANGE + RANGE_ALL"},{"lineNumber":180,"author":{"gitID":"shanmu9898"},"content":"                        + \" \" + PREFIX_TAG_EXPORT + TAG_NEEDED + \" \" + PREFIX_PATH + PATH_NEEDED);"},{"lineNumber":181,"author":{"gitID":"shanmu9898"},"content":"        assertEquals (new ExportCommand (\"all\", new Tag (\"friends\"), \"./data\","},{"lineNumber":182,"author":{"gitID":"shanmu9898"},"content":"                \"name\"), command);"},{"lineNumber":183,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":185,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":186,"author":{"gitID":"shanmu9898"},"content":"    public void parseCommand_import() throws Exception {"},{"lineNumber":187,"author":{"gitID":"shanmu9898"},"content":"        ImportCommand command \u003d (ImportCommand) parser.parseCommand("},{"lineNumber":188,"author":{"gitID":"shanmu9898"},"content":"                ImportCommand.COMMAND_WORD + \" \""},{"lineNumber":189,"author":{"gitID":"shanmu9898"},"content":"                        + \"src/test/data/XmlAddressBookStorageTest/importsamplefile.xml\");"},{"lineNumber":190,"author":{"gitID":"shanmu9898"},"content":"        assertEquals(new ImportCommand(\"src/test/data/XmlAddressBookStorageTest/importsamplefile.xml\"),"},{"lineNumber":191,"author":{"gitID":"shanmu9898"},"content":"                command);"},{"lineNumber":192,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":194,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":195,"author":{"gitID":"shanmu9898"},"content":"    public void parseCommand_shortcut() throws Exception {"},{"lineNumber":196,"author":{"gitID":"shanmu9898"},"content":"        ShortcutCommand command \u003d (ShortcutCommand) parser.parseCommand("},{"lineNumber":197,"author":{"gitID":"shanmu9898"},"content":"                ShortcutCommand.COMMAND_WORD + \" \" + \"list\" + \" \" + \"l\");"},{"lineNumber":198,"author":{"gitID":"shanmu9898"},"content":"        assertEquals(new ShortcutCommand(\"list\", \"l\"), command);"},{"lineNumber":199,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":201,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":202,"author":{"gitID":"shanmu9898"},"content":"    public void parseCommand_deleteShortcut() throws Exception {"},{"lineNumber":203,"author":{"gitID":"shanmu9898"},"content":"        DeleteShortcutCommand command \u003d (DeleteShortcutCommand) parser.parseCommand("},{"lineNumber":204,"author":{"gitID":"shanmu9898"},"content":"                DeleteShortcutCommand.COMMAND_WORD + \" \" + \"list\" + \" \" + \"l\");"},{"lineNumber":205,"author":{"gitID":"shanmu9898"},"content":"        assertEquals(new DeleteShortcutCommand(\"list\", \"l\"), command);"},{"lineNumber":206,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":208,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":209,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":210,"author":{"gitID":"Sisyphus25"},"content":"    //@@author Sisyphus25"},{"lineNumber":211,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":212,"author":{"gitID":"Sisyphus25"},"content":"    public void parseCommand_toggleCalendarView() throws Exception {"},{"lineNumber":213,"author":{"gitID":"Sisyphus25"},"content":"        ToggleCalendarViewCommand command \u003d"},{"lineNumber":214,"author":{"gitID":"Sisyphus25"},"content":"                (ToggleCalendarViewCommand) parser.parseCommand(ToggleCalendarViewCommand.COMMAND_WORD + \" \" + \"m\");"},{"lineNumber":215,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(new ToggleCalendarViewCommand(\u0027m\u0027), command);"},{"lineNumber":216,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":218,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":219,"author":{"gitID":"Sisyphus25"},"content":"    public void parseCommand_setAppointment() throws Exception {"},{"lineNumber":220,"author":{"gitID":"Sisyphus25"},"content":"        SetAppointmentCommand command \u003d"},{"lineNumber":221,"author":{"gitID":"Sisyphus25"},"content":"                (SetAppointmentCommand) parser.parseCommand(SetAppointmentCommand.COMMAND_WORD"},{"lineNumber":222,"author":{"gitID":"Sisyphus25"},"content":"                + TITLE_DESC + START_TIME_DESC + END_TIME_DESC);"},{"lineNumber":223,"author":{"gitID":"Sisyphus25"},"content":"        Appointment appointment \u003d new AppointmentBuilder(VALID_TITLE, VALID_START_TIME, VALID_END_TIME).build();"},{"lineNumber":224,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(new SetAppointmentCommand(appointment), command);"},{"lineNumber":225,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":227,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":228,"author":{"gitID":"Sisyphus25"},"content":"    public void parseCommand_setTask() throws Exception {"},{"lineNumber":229,"author":{"gitID":"Sisyphus25"},"content":"        SetTaskCommand command \u003d"},{"lineNumber":230,"author":{"gitID":"Sisyphus25"},"content":"                (SetTaskCommand) parser.parseCommand(SetTaskCommand.COMMAND_WORD + TITLE_DESC + END_TIME_DESC);"},{"lineNumber":231,"author":{"gitID":"Sisyphus25"},"content":"        Task task \u003d new Task(new Title(VALID_TITLE), new EventTime(VALID_END_TIME));"},{"lineNumber":232,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(new SetTaskCommand(task), command);"},{"lineNumber":233,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":235,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":236,"author":{"gitID":"Sisyphus25"},"content":"    public void parseCommand_changeTheme() throws Exception {"},{"lineNumber":237,"author":{"gitID":"Sisyphus25"},"content":"        ChangeThemeCommand command \u003d"},{"lineNumber":238,"author":{"gitID":"Sisyphus25"},"content":"                (ChangeThemeCommand) parser.parseCommand(ChangeThemeCommand.COMMAND_WORD + \" \" + \"dark\");"},{"lineNumber":239,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(new ChangeThemeCommand(\"dark\"), command);"},{"lineNumber":240,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":242,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":243,"author":{"gitID":"Sisyphus25"},"content":"    public void parseCommand_remove() throws Exception {"},{"lineNumber":244,"author":{"gitID":"Sisyphus25"},"content":"        RemoveCommand commandRemoveAppointment \u003d"},{"lineNumber":245,"author":{"gitID":"Sisyphus25"},"content":"                (RemoveCommand) parser.parseCommand(RemoveCommand.COMMAND_WORD + \" \" + \"appointment\" + \" \" + \"1\");"},{"lineNumber":246,"author":{"gitID":"Sisyphus25"},"content":"        RemoveCommand commandRemoveTask \u003d"},{"lineNumber":247,"author":{"gitID":"Sisyphus25"},"content":"                (RemoveCommand) parser.parseCommand(RemoveCommand.COMMAND_WORD + \" \" + \"task\" + \" \" + \"2\");"},{"lineNumber":248,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(new RemoveCommand(Index.fromOneBased(1), \"appointment\"), commandRemoveAppointment);"},{"lineNumber":249,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(new RemoveCommand(Index.fromOneBased(2), \"task\"), commandRemoveTask);"},{"lineNumber":250,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"Sisyphus25"},"content":"    //@@author"},{"lineNumber":252,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":253,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":66,"-":138,"shanmu9898":50}},{"path":"src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them."},{"lineNumber":16,"author":{"gitID":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class DeleteCommandParserTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":2,"-":30}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.EventTime;"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Title;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((Optional\u003cString\u003e) null));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void parseName_invalidValue_throwsIllegalValueException() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(Optional.of(INVALID_NAME)));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"Sisyphus25"},"content":"    //@@author Sisyphus25"},{"lineNumber":90,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"Sisyphus25"},"content":"    public void parseTitle_null_throwsNullPointerException() {"},{"lineNumber":92,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTitle((String) null));"},{"lineNumber":93,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTitle((Optional\u003cString\u003e) null));"},{"lineNumber":94,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":96,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"Sisyphus25"},"content":"    public void parseTitle_invalidValue_throwsIllegalValueException() {"},{"lineNumber":98,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseTitle(\" \"));"},{"lineNumber":99,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseTitle(Optional.of(\"  \")));"},{"lineNumber":100,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":102,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"Sisyphus25"},"content":"    public void parseTitle_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":104,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(ParserUtil.parseTitle(Optional.empty()).isPresent());"},{"lineNumber":105,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":107,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"Sisyphus25"},"content":"    public void parseTitle_validValue_returnsTitle() throws Exception {"},{"lineNumber":109,"author":{"gitID":"Sisyphus25"},"content":"        String validTitle \u003d \"Hanging out\";"},{"lineNumber":110,"author":{"gitID":"Sisyphus25"},"content":"        Title expectedTitle \u003d new Title(validTitle);"},{"lineNumber":111,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(expectedTitle, ParserUtil.parseTitle(validTitle));"},{"lineNumber":112,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(Optional.of(expectedTitle), ParserUtil.parseTitle(Optional.of(validTitle)));"},{"lineNumber":113,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":115,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"Sisyphus25"},"content":"    public void parseEventTime_null_throwsNullPointerException() {"},{"lineNumber":117,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEventTime((String) null));"},{"lineNumber":118,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEventTime((Optional\u003cString\u003e) null));"},{"lineNumber":119,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":121,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"Sisyphus25"},"content":"    public void parseEventTime_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":123,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(ParserUtil.parseEventTime(Optional.empty()).isPresent());"},{"lineNumber":124,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":126,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":127,"author":{"gitID":"Sisyphus25"},"content":"    public void parseEventTime_validValue_returnsEventTime() throws Exception {"},{"lineNumber":128,"author":{"gitID":"Sisyphus25"},"content":"        String validTime \u003d \"20/10/2018 10:00\";"},{"lineNumber":129,"author":{"gitID":"Sisyphus25"},"content":"        EventTime expectedEventTime \u003d new EventTime(validTime);"},{"lineNumber":130,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(expectedEventTime, ParserUtil.parseEventTime(validTime));"},{"lineNumber":131,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(Optional.of(expectedEventTime), ParserUtil.parseEventTime(Optional.of(validTime)));"},{"lineNumber":132,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":134,"author":{"gitID":"Sisyphus25"},"content":"    //@@author"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(VALID_NAME)));"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(nameWithWhitespace)));"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((Optional\u003cString\u003e) null));"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public void parsePhone_invalidValue_throwsIllegalValueException() {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(Optional.of(INVALID_PHONE)));"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public void parsePhone_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parsePhone(Optional.empty()).isPresent());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(VALID_PHONE)));"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(phoneWithWhitespace)));"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((Optional\u003cString\u003e) null));"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    public void parseAddress_invalidValue_throwsIllegalValueException() {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(Optional.of(INVALID_ADDRESS)));"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    public void parseAddress_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseAddress(Optional.empty()).isPresent());"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(VALID_ADDRESS)));"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(addressWithWhitespace)));"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((Optional\u003cString\u003e) null));"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    public void parseEmail_invalidValue_throwsIllegalValueException() {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(Optional.of(INVALID_EMAIL)));"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    public void parseEmail_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseEmail(Optional.empty()).isPresent());"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(VALID_EMAIL)));"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(emailWithWhitespace)));"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    public void parseTag_null_throwsNullPointerException() throws Exception {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(null);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    public void parseTag_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(INVALID_TAG);"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    public void parseTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(null);"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":278,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":284,"author":{"gitID":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":286,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":294,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":295,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":52,"-":243}},{"path":"src/test/java/seedu/address/logic/parser/SetTaskCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.END_TIME_DESC;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_END_TIME_DESC;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.SetTaskCommand;"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.EventTime;"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Title;"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"public class SetTaskCommandParserTest {"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    private SetTaskCommandParser parser \u003d new SetTaskCommandParser();"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"        Task expectedTask \u003d new Task(new Title(VALID_TITLE), new EventTime(VALID_END_TIME));"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        // whitespace only preamble"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TITLE_DESC + END_TIME_DESC,"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"                new SetTaskCommand(expectedTask));"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetTaskCommand.MESSAGE_USAGE);"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"        // missing title prefix"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, VALID_TITLE + END_TIME_DESC,"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"                expectedMessage);"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"        // missing end time prefix"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, TITLE_DESC + VALID_END_TIME,"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"                expectedMessage);"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"        // all prefixes missing"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, VALID_TITLE + VALID_END_TIME,"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"                expectedMessage);"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"        // invalid title"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, INVALID_TITLE_DESC + END_TIME_DESC, Title.MESSAGE_TITLE_CONSTRAINTS);"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"        // invalid end time"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, TITLE_DESC + INVALID_END_TIME_DESC, EventTime.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":50,"-":9}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":18,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_STUDENT;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":22,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_STUDENT;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":33,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.parser.AddCommandParser.MESSAGE_INVALID_TYPE;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"randypx"},"content":"        // student preamble with whitespaces"},{"lineNumber":61,"author":{"gitID":"randypx"},"content":"        assertParseSuccess(parser, PREAMBLE_STUDENT + PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":62,"author":{"gitID":"randypx"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_STUDENT, new AddCommand(expectedPerson));"},{"lineNumber":63,"author":{"gitID":"randypx"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags().build();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":138,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":142,"author":{"gitID":"Sisyphus25"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_NAME_CONSTRAINTS);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"randypx"},"content":"        // invalid type"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":150,"author":{"gitID":"randypx"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, MESSAGE_INVALID_TYPE);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":1,"randypx":9,"-":142}},{"path":"src/test/java/seedu/address/logic/parser/ExportCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.commands.ExportCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":"public class ExportCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"    @Rule"},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"    private ExportCommandParser exportCommandParser \u003d new ExportCommandParser();"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"    public void parse_nullString_throwsNullPointerException() throws ParseException {"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"        exportCommandParser.parse(null);"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"        Tag testingTag \u003d new Tag(\"shouldnotbethistag\");"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"        String testingInput \u003d \" n/name r/all p/./data\";"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand expectedCommand \u003d new ExportCommand(\"all\", testingTag, \"./data\", \"name\");"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"        assertParseSuccess(exportCommandParser, testingInput, expectedCommand);"},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":"    public void parse_allfieldsPresent_success() {"},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":"        Tag testingTag \u003d new Tag(\"friends\");"},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":"        String testingInput \u003d \" n/name r/all t/friends p/./data\";"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand expectedCommand \u003d new ExportCommand(\"all\", testingTag, \"./data\", \"name\");"},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":"        assertParseSuccess(exportCommandParser, testingInput, expectedCommand);"},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"-":6,"shanmu9898":36}},{"path":"src/test/java/seedu/address/logic/parser/ToggleCalendarViewParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.ToggleCalendarViewCommand;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"public class ToggleCalendarViewParserTest {"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"    private ToggleCalendarViewParser parser \u003d new ToggleCalendarViewParser();"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    public void parse_validArgs_returnsToggleCalendarViewCommand() {"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"        assertParseSuccess(parser, \"d\", new ToggleCalendarViewCommand(\u0027d\u0027));"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, \"day\","},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ToggleCalendarViewCommand.MESSAGE_USAGE));"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, \"x\","},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ToggleCalendarViewCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":23,"-":4}},{"path":"src/test/java/seedu/address/logic/parser/DeleteShortcutCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.commands.DeleteShortcutCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":"public class DeleteShortcutCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"    private DeleteShortcutCommandParser deleteShortcutCommandParser \u003d new DeleteShortcutCommandParser();"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"    public void parse_nullString_throwsNullPointerException() throws ParseException {"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"        deleteShortcutCommandParser.parse(null);"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"    public void parse_emptyString_throwsParseException() throws ParseException {"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"        deleteShortcutCommandParser.parse(\" \");"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":"    public void parse_validString_success() {"},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":"        String inputCommandWord \u003d \"list\";"},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":"        String inputShortcutWord \u003d \"l\";"},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":"        String input \u003d \"list l\";"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":"        DeleteShortcutCommand expectedCommand \u003d new DeleteShortcutCommand(inputCommandWord, inputShortcutWord);"},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":"        assertParseSuccess(deleteShortcutCommandParser, input, expectedCommand);"},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"-":10,"shanmu9898":31}},{"path":"src/test/java/seedu/address/logic/parser/ShortcutCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.commands.ShortcutCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":"public class ShortcutCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"    private ShortcutCommandParser shortcutCommandParser \u003d new ShortcutCommandParser();"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"    public void parse_nullString_throwsNullPointerException() throws ParseException {"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"        shortcutCommandParser.parse(null);"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"    public void parse_emptyString_throwsParseException() throws ParseException {"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"        shortcutCommandParser.parse(\" \");"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":"    public void parse_validString_success() {"},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":"        String inputCommandWord \u003d \"list\";"},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":"        String inputShortcutWord \u003d \"l\";"},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":"        String input \u003d \"list l\";"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":"        ShortcutCommand expectedCommand \u003d new ShortcutCommand(inputCommandWord, inputShortcutWord);"},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":"        assertParseSuccess(shortcutCommandParser, input, expectedCommand);"},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"-":10,"shanmu9898":31}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"        showPersonAtIndex(model, INDEX_FIRST);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"        showPersonAtIndex(model, INDEX_FIRST);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":89,"author":{"gitID":"Sisyphus25"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":90,"author":{"gitID":"Sisyphus25"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // delete -\u003e first person deleted"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person deleted again"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * 1. Deletes a {@code Person} from a filtered list."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * 2. Undo the deletion."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":133,"author":{"gitID":"Sisyphus25"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"Sisyphus25"},"content":"        showPersonAtIndex(model, INDEX_SECOND);"},{"lineNumber":137,"author":{"gitID":"Sisyphus25"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":146,"author":{"gitID":"Sisyphus25"},"content":"        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased()));"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // redo -\u003e deletes same second person in unfiltered person list"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":153,"author":{"gitID":"Sisyphus25"},"content":"        DeleteCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST);"},{"lineNumber":154,"author":{"gitID":"Sisyphus25"},"content":"        DeleteCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":160,"author":{"gitID":"Sisyphus25"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private DeleteCommand prepareCommand(Index index) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(index);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        return deleteCommand;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":18,"-":176}},{"path":"src/test/java/seedu/address/logic/commands/ImportCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"public class ImportCommandTest {"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"    private static final String INVALID_FILE_LOCATION \u003d \"./data/samplefile.xml\";"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":"    private static final String VALID_FILE_LOCATION \u003d"},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"            \"src/test/data/XmlAddressBookStorageTest/importsamplefile.xml\";"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"    public void constructor_nullString_throwsNullPointerException() {"},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":"        new ImportCommand(null);"},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":"    public void execute_importFailure_throwsException() {"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":"        ImportCommand command \u003d prepareCommand(INVALID_FILE_LOCATION);"},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"        assertCommandFailure(command, model, String.format(command.MESSAGE_INVALID_FILE));"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":43,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"shanmu9898"},"content":"    public void execute_acceptedSuccess_successfulImport() {"},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":47,"author":{"gitID":"shanmu9898"},"content":"        ClearCommand clearCommand \u003d new ClearCommand();"},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":"        clearCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":"        clearCommand.executeUndoableCommand();"},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":51,"author":{"gitID":"shanmu9898"},"content":"        ImportCommand command \u003d prepareCommand(VALID_FILE_LOCATION);"},{"lineNumber":52,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":53,"author":{"gitID":"shanmu9898"},"content":"        assertCommandSuccess(command, model, String.format (command.MESSAGE_SUCCESS, \"7\", \"0\"), model);"},{"lineNumber":54,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":56,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"shanmu9898"},"content":"    public void equals() {"},{"lineNumber":58,"author":{"gitID":"shanmu9898"},"content":"        final ImportCommand comparableCommand \u003d new ImportCommand(VALID_FILE_LOCATION);"},{"lineNumber":59,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":60,"author":{"gitID":"shanmu9898"},"content":"        // same values -\u003e returns true"},{"lineNumber":61,"author":{"gitID":"shanmu9898"},"content":"        ImportCommand comparedToCommand \u003d new ImportCommand(VALID_FILE_LOCATION);"},{"lineNumber":62,"author":{"gitID":"shanmu9898"},"content":"        assertTrue(comparableCommand.equals(comparedToCommand));"},{"lineNumber":63,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":64,"author":{"gitID":"shanmu9898"},"content":"        // same object -\u003e returns true"},{"lineNumber":65,"author":{"gitID":"shanmu9898"},"content":"        assertTrue(comparableCommand.equals(comparableCommand));"},{"lineNumber":66,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":67,"author":{"gitID":"shanmu9898"},"content":"        // null -\u003e returns false"},{"lineNumber":68,"author":{"gitID":"shanmu9898"},"content":"        assertFalse(comparableCommand.equals(null));"},{"lineNumber":69,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":70,"author":{"gitID":"shanmu9898"},"content":"        // different types -\u003e returns false"},{"lineNumber":71,"author":{"gitID":"shanmu9898"},"content":"        assertFalse(comparableCommand.equals(new ClearCommand()));"},{"lineNumber":72,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":73,"author":{"gitID":"shanmu9898"},"content":"        // different range -\u003e returns false"},{"lineNumber":74,"author":{"gitID":"shanmu9898"},"content":"        assertFalse(comparableCommand.equals(new ImportCommand(\"./data/sampleimportfile.xml\")));"},{"lineNumber":75,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":77,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":78,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"shanmu9898"},"content":"     * A method to prepare the Import command based on the path given"},{"lineNumber":80,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"shanmu9898"},"content":"    private ImportCommand prepareCommand(String path) {"},{"lineNumber":82,"author":{"gitID":"shanmu9898"},"content":"        ImportCommand importCommand \u003d new ImportCommand(path);"},{"lineNumber":83,"author":{"gitID":"shanmu9898"},"content":"        importCommand.setData(new ModelManager(getTypicalAddressBook(), new UserPrefs()), new CommandHistory(),"},{"lineNumber":84,"author":{"gitID":"shanmu9898"},"content":"                new UndoRedoStack());"},{"lineNumber":85,"author":{"gitID":"shanmu9898"},"content":"        return importCommand;"},{"lineNumber":86,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":88,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"-":13,"shanmu9898":75}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.ListCommand.MESSAGE_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.events.ui.ToggleListEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class ListCommandTest {"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private ListCommand listCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"    public void execute_personListIsNotFiltered_showsSameList() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        listCommand \u003d new ListCommand(\"\");"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        listCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, model, MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"    public void execute_personListIsFiltered_showsEverything() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        listCommand \u003d new ListCommand(\"\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        listCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"        showPersonAtIndex(model, INDEX_FIRST);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, model, MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"    public void execute_listAppointment_success() throws CommandException {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        listCommand \u003d new ListCommand(\"appointment\");"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        listCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"        CommandResult result \u003d listCommand.execute();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertEquals(MESSAGE_SUCCESS, result.feedbackToUser);"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ToggleListEvent);"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"    public void execute_listTask_success() throws CommandException {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        listCommand \u003d new ListCommand(\"task\");"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        listCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":"        CommandResult result \u003d listCommand.execute();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(MESSAGE_SUCCESS, result.feedbackToUser);"},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ToggleListEvent);"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":23,"-":52}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class EditCommandTest {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST, descriptor);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(lastPerson, editedPerson);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST, new EditPersonDescriptor());"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":91,"author":{"gitID":"Sisyphus25"},"content":"        showPersonAtIndex(model, INDEX_FIRST);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"Sisyphus25"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST,"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":108,"author":{"gitID":"Sisyphus25"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":110,"author":{"gitID":"Sisyphus25"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_SECOND, descriptor);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":117,"author":{"gitID":"Sisyphus25"},"content":"        showPersonAtIndex(model, INDEX_FIRST);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":120,"author":{"gitID":"Sisyphus25"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND.getZeroBased());"},{"lineNumber":121,"author":{"gitID":"Sisyphus25"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST,"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":142,"author":{"gitID":"Sisyphus25"},"content":"        showPersonAtIndex(model, INDEX_FIRST);"},{"lineNumber":143,"author":{"gitID":"Sisyphus25"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":159,"author":{"gitID":"Sisyphus25"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":161,"author":{"gitID":"Sisyphus25"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST, descriptor);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        // edit -\u003e first person edited"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person edited again"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        // execution failed -\u003e editCommand not pushed into undoRedoStack"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * 1. Edits a {@code Person} from a filtered list."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * 2. Undo the edit."},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":207,"author":{"gitID":"Sisyphus25"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST, descriptor);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"Sisyphus25"},"content":"        showPersonAtIndex(model, INDEX_SECOND);"},{"lineNumber":211,"author":{"gitID":"Sisyphus25"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":220,"author":{"gitID":"Sisyphus25"},"content":"        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased()), personToEdit);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        // redo -\u003e edits same second person in unfiltered person list"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":227,"author":{"gitID":"Sisyphus25"},"content":"        final EditCommand standardCommand \u003d prepareCommand(INDEX_FIRST, DESC_AMY);"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":231,"author":{"gitID":"Sisyphus25"},"content":"        EditCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST, copyDescriptor);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":248,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND, DESC_AMY)));"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":251,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST, DESC_BOB)));"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    private EditCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, descriptor);"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        return editCommand;"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":25,"-":237}},{"path":"src/test/java/seedu/address/logic/commands/RemoveCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":" * Contains Test for {@code RemoveCommand}"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"public class RemoveCommandTest {"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"    public void execute_validIndexRemoveAppointment_success() throws Exception {"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"        Appointment appointmentToDelete \u003d model.getFilteredAppointmentList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"        RemoveCommand removeCommandRemovingAppointment \u003d prepareCommand(INDEX_FIRST, \"appointment\");"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        String expectedMessage \u003d"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"                String.format(RemoveCommand.MESSAGE_DELETE_EVENT_SUCCESS, \"appointment\", appointmentToDelete);"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"        expectedModel.deleteAppointment(appointmentToDelete);"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"        assertCommandSuccess(removeCommandRemovingAppointment, model, expectedMessage, expectedModel);"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"    public void execute_validIndexRemoveTask_success() throws Exception {"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"        RemoveCommand removeCommandRemovingTask \u003d prepareCommand(INDEX_FIRST, \"task\");"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"        String expectedMessage \u003d"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"                String.format(RemoveCommand.MESSAGE_DELETE_EVENT_SUCCESS, \"task\", taskToDelete);"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"        expectedModel.deleteTask(taskToDelete);"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"        assertCommandSuccess(removeCommandRemovingTask, model, expectedMessage, expectedModel);"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"    public void execute_invalidIndex_throwsCommandException() throws Exception {"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"        RemoveCommand removeCommandRemovingTask \u003d prepareCommand(outOfBoundIndex, \"task\");"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"        Index outOfBoundIndex2 \u003d Index.fromOneBased(model.getFilteredAppointmentList().size() + 1);"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"        RemoveCommand removeCommandRemovingAppointment \u003d prepareCommand(outOfBoundIndex2, \"appointment\");"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"        assertCommandFailure(removeCommandRemovingTask, model, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"        assertCommandFailure(removeCommandRemovingAppointment,"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"                model, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"    public void equals() throws Exception {"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"        RemoveCommand removeCommandRemovingAppointment \u003d prepareCommand(INDEX_FIRST, \"appointment\");"},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"        RemoveCommand removeCommandRemovingTask \u003d prepareCommand(INDEX_SECOND, \"task\");"},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":"        // same object -\u003e returns true"},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(removeCommandRemovingAppointment.equals(removeCommandRemovingAppointment));"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"        // same values -\u003e returns true"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"        RemoveCommand removeCommandRemovingAppointmentCopy \u003d prepareCommand(INDEX_FIRST, \"appointment\");"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(removeCommandRemovingAppointment.equals(removeCommandRemovingAppointmentCopy));"},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"        removeCommandRemovingAppointmentCopy.preprocessUndoableCommand();"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(removeCommandRemovingAppointment.equals(removeCommandRemovingAppointmentCopy));"},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":"        // different types -\u003e returns false"},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(removeCommandRemovingAppointment.equals(1));"},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":"        // null -\u003e returns false"},{"lineNumber":86,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(removeCommandRemovingAppointment.equals(null));"},{"lineNumber":87,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":88,"author":{"gitID":"Sisyphus25"},"content":"        // different person -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(removeCommandRemovingAppointment.equals(removeCommandRemovingTask));"},{"lineNumber":90,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":92,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"Sisyphus25"},"content":"     * Returns a {@code RemoveCommand} with the parameter {@code index}, {@code eventType}."},{"lineNumber":94,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":"    private RemoveCommand prepareCommand(Index index, String eventType) {"},{"lineNumber":96,"author":{"gitID":"Sisyphus25"},"content":"        RemoveCommand removeCommand \u003d new RemoveCommand(index, eventType);"},{"lineNumber":97,"author":{"gitID":"Sisyphus25"},"content":"        removeCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":98,"author":{"gitID":"Sisyphus25"},"content":"        return removeCommand;"},{"lineNumber":99,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":100}},{"path":"src/test/java/seedu/address/logic/commands/ToggleCalendarViewCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.ToggleCalendarViewCommand.MESSAGE_VIEW_TOGGLE_SUCCESS;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.events.ui.ToggleCalendarViewEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"public class ToggleCalendarViewCommandTest {"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    @Rule"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"    public void execute_help_success() throws CommandException {"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"        Character viewMode \u003d \u0027d\u0027;"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"        CommandResult result \u003d new ToggleCalendarViewCommand(viewMode).execute();"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(MESSAGE_VIEW_TOGGLE_SUCCESS, result.feedbackToUser);"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ToggleCalendarViewEvent);"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":22,"-":4,"shanmu9898":1}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":45,"author":{"gitID":"randypx"},"content":"    public static final String VALID_TAG_STUDENT \u003d \"student\";"},{"lineNumber":46,"author":{"gitID":"shanmu9898"},"content":"    public static final String VALID_TAG_NOTUSED \u003d \"notused\";"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"    public static final String VALID_TITLE \u003d \"Consultation\";"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"    public static final String VALID_START_TIME \u003d \"10/10/2018 10:00\";"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"    public static final String VALID_END_TIME \u003d \"10/10/2018 12:00\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":60,"author":{"gitID":"randypx"},"content":"    public static final String TAG_DESC_STUDENT \u003d \" \" + PREFIX_TAG + VALID_TAG_STUDENT;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"    public static final String TITLE_DESC \u003d \" \" + PREFIX_TITLE + VALID_TITLE;"},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":"    public static final String START_TIME_DESC \u003d \" \" + PREFIX_START_TIME + VALID_START_TIME;"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":"    public static final String END_TIME_DESC \u003d \" \" + PREFIX_END_TIME + VALID_END_TIME;"},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"    public static final String INVALID_TITLE_DESC \u003d \" \" + PREFIX_TITLE + \"  \"; // spaces only"},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"    public static final String INVALID_START_TIME_DESC \u003d \" \" + PREFIX_START_TIME + \"911afddf\"; // not a time stamp"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"    public static final String INVALID_END_TIME_DESC \u003d"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":"            \" \" + PREFIX_END_TIME + \"May 20, 2018 10am\"; // not in correct format"},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":80,"author":{"gitID":"randypx"},"content":"    public static final String PREAMBLE_STUDENT \u003d \" student \";"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":119,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":169,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":15,"randypx":3,"-":156,"shanmu9898":1}},{"path":"src/test/java/seedu/address/logic/commands/SetAppointmentCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.APPOINTMENT_WITHOUT_PERSON_1;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.APPOINTMENT_WITHOUT_PERSON_3;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_APPOINTMENT_1;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_APPOINTMENT_2;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_APPOINTMENT_3;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"import org.junit.Before;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"public class SetAppointmentCommandTest {"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"    @Rule"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"    private Model model;"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"    @Before"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"    public void setUp() {"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"    public void constructor_nullAppointment_throwsNullPointerException() {"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"        new SetAppointmentCommand(null, null);"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"    public void execute_invalidPersonToMeetIndex_failure() {"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"        SetAppointmentCommand command \u003d getSetAppointmentCommand(TYPICAL_APPOINTMENT_3, outOfBoundsIndex, model);"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"            command.execute();"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"        } catch (CommandException ce) {"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"            assertEquals(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX, ce.getMessage());"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"    public void execute_appointmentWithoutPersonToMeetAccepted_addSuccessful() throws Exception {"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"        CommandResult commandResult \u003d"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"                getSetAppointmentCommand(APPOINTMENT_WITHOUT_PERSON_3, null, model).execute();"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(String.format("},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"                SetAppointmentCommand.MESSAGE_SUCCESS, APPOINTMENT_WITHOUT_PERSON_3), commandResult.feedbackToUser);"},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"    public void execute_appointmentWithPersonToMeetAccepted_addSuccessful() throws Exception {"},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"        CommandResult commandResult \u003d"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"                getSetAppointmentCommand(APPOINTMENT_WITHOUT_PERSON_3, INDEX_THIRD, model).execute();"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(String.format("},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"                SetAppointmentCommand.MESSAGE_SUCCESS, TYPICAL_APPOINTMENT_3), commandResult.feedbackToUser);"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":"    public void execute_duplicateAppointmentsameIndex_throwsCommandException() throws Exception {"},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":"        thrown.expectMessage(SetAppointmentCommand.MESSAGE_DUPLICATE_APPOINTMENT);"},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":86,"author":{"gitID":"Sisyphus25"},"content":"        getSetAppointmentCommand(APPOINTMENT_WITHOUT_PERSON_1, INDEX_FIRST, model).execute();"},{"lineNumber":87,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":89,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"Sisyphus25"},"content":"    public void equals() {"},{"lineNumber":91,"author":{"gitID":"Sisyphus25"},"content":"        SetAppointmentCommand addAppointment1 \u003d"},{"lineNumber":92,"author":{"gitID":"Sisyphus25"},"content":"                new SetAppointmentCommand(TYPICAL_APPOINTMENT_1);"},{"lineNumber":93,"author":{"gitID":"Sisyphus25"},"content":"        SetAppointmentCommand addAppointment2 \u003d"},{"lineNumber":94,"author":{"gitID":"Sisyphus25"},"content":"                new SetAppointmentCommand(TYPICAL_APPOINTMENT_2);"},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":96,"author":{"gitID":"Sisyphus25"},"content":"        // same object -\u003e returns true"},{"lineNumber":97,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(addAppointment1.equals(addAppointment1));"},{"lineNumber":98,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":99,"author":{"gitID":"Sisyphus25"},"content":"        // same values -\u003e returns true"},{"lineNumber":100,"author":{"gitID":"Sisyphus25"},"content":"        SetAppointmentCommand addAppointment1Copy \u003d"},{"lineNumber":101,"author":{"gitID":"Sisyphus25"},"content":"                new SetAppointmentCommand(TYPICAL_APPOINTMENT_1);"},{"lineNumber":102,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(addAppointment1.equals(addAppointment1Copy));"},{"lineNumber":103,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":104,"author":{"gitID":"Sisyphus25"},"content":"        // different types -\u003e returns false"},{"lineNumber":105,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(addAppointment1.equals(1));"},{"lineNumber":106,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":107,"author":{"gitID":"Sisyphus25"},"content":"        // null -\u003e returns false"},{"lineNumber":108,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(addAppointment1.equals(null));"},{"lineNumber":109,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":110,"author":{"gitID":"Sisyphus25"},"content":"        // different appointments -\u003e returns false"},{"lineNumber":111,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(addAppointment1.equals(addAppointment2));"},{"lineNumber":112,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":114,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"Sisyphus25"},"content":"     * Generates a new SetAppointmentCommand with the details of the given appointment."},{"lineNumber":116,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"Sisyphus25"},"content":"    private SetAppointmentCommand getSetAppointmentCommand(Appointment baseAppointment, Index index, Model model) {"},{"lineNumber":118,"author":{"gitID":"Sisyphus25"},"content":"        SetAppointmentCommand command \u003d new SetAppointmentCommand(baseAppointment, index);"},{"lineNumber":119,"author":{"gitID":"Sisyphus25"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":120,"author":{"gitID":"Sisyphus25"},"content":"        return command;"},{"lineNumber":121,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":123,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":114,"-":9}},{"path":"src/test/java/seedu/address/logic/commands/DeleteShortcutCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.ShortcutDoubles;"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.UniqueShortcutDoublesList;"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"public class DeleteShortcutCommandTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"    private final String validtestingCommandWord \u003d \"list\";"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"    private final String validtestingShortcutWord \u003d \"l\";"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"    private final String invalidtestingCommandWord \u003d \"king\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"    public void constructor_nullCommandWord_throwsNullPointerException() {"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":"        new DeleteShortcutCommand(null, validtestingShortcutWord);"},{"lineNumber":43,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"shanmu9898"},"content":"    public void constructor_nullShortcutWord_throwsNullPointerException() {"},{"lineNumber":47,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":"        new DeleteShortcutCommand(validtestingCommandWord, null);"},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":51,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"shanmu9898"},"content":"    public void executeUndoCommand_invalidCommandWord_throwsCommandException() throws CommandException {"},{"lineNumber":53,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":54,"author":{"gitID":"shanmu9898"},"content":"        CommandResult commandResult \u003d getDeleteShortcutForCommand(validtestingShortcutWord,"},{"lineNumber":55,"author":{"gitID":"shanmu9898"},"content":"                                                                  invalidtestingCommandWord,"},{"lineNumber":56,"author":{"gitID":"shanmu9898"},"content":"                                                                  model).executeUndoableCommand();"},{"lineNumber":57,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":59,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"shanmu9898"},"content":"    public void executeUndoCommand_inputNotPresent_throwsCommandException() throws CommandException {"},{"lineNumber":61,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":62,"author":{"gitID":"shanmu9898"},"content":"        CommandResult commandResult \u003d getDeleteShortcutForCommand(validtestingShortcutWord,"},{"lineNumber":63,"author":{"gitID":"shanmu9898"},"content":"                                                                  validtestingCommandWord,"},{"lineNumber":64,"author":{"gitID":"shanmu9898"},"content":"                                                                  model).executeUndoableCommand();"},{"lineNumber":65,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":67,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"shanmu9898"},"content":"    public void executeUndoCommand_validInput_commandSuccess()"},{"lineNumber":69,"author":{"gitID":"shanmu9898"},"content":"                                        throws UniqueShortcutDoublesList.DuplicateShortcutDoublesException {"},{"lineNumber":70,"author":{"gitID":"shanmu9898"},"content":"        ShortcutDoubles shortcutDoubles \u003d new ShortcutDoubles(validtestingShortcutWord, validtestingCommandWord);"},{"lineNumber":71,"author":{"gitID":"shanmu9898"},"content":"        model.addCommandShortcut(shortcutDoubles);"},{"lineNumber":72,"author":{"gitID":"shanmu9898"},"content":"        assertCommandSuccess(getDeleteShortcutForCommand(validtestingShortcutWord,"},{"lineNumber":73,"author":{"gitID":"shanmu9898"},"content":"                                                         validtestingCommandWord,"},{"lineNumber":74,"author":{"gitID":"shanmu9898"},"content":"                                                         model),"},{"lineNumber":75,"author":{"gitID":"shanmu9898"},"content":"                                                         model,"},{"lineNumber":76,"author":{"gitID":"shanmu9898"},"content":"                                                         String.format(DeleteShortcutCommand"},{"lineNumber":77,"author":{"gitID":"shanmu9898"},"content":"                                                                       .MESSAGE_DELETE_SHORTCUT_SUCCESS),"},{"lineNumber":78,"author":{"gitID":"shanmu9898"},"content":"                                                         expectedModel);"},{"lineNumber":79,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":81,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"shanmu9898"},"content":"    public void equals() throws Exception {"},{"lineNumber":83,"author":{"gitID":"shanmu9898"},"content":"        DeleteShortcutCommand deleteFirstCommand \u003d getDeleteShortcutForCommand(validtestingShortcutWord,"},{"lineNumber":84,"author":{"gitID":"shanmu9898"},"content":"                                                                               validtestingCommandWord,"},{"lineNumber":85,"author":{"gitID":"shanmu9898"},"content":"                                                                               model);"},{"lineNumber":86,"author":{"gitID":"shanmu9898"},"content":"        DeleteShortcutCommand deleteSecondCommand \u003d getDeleteShortcutForCommand(\"c\","},{"lineNumber":87,"author":{"gitID":"shanmu9898"},"content":"                                                                                \"clear\","},{"lineNumber":88,"author":{"gitID":"shanmu9898"},"content":"                                                                                 model);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":94,"author":{"gitID":"shanmu9898"},"content":"        DeleteShortcutCommand deleteFirstCommandCopy \u003d getDeleteShortcutForCommand(\"l\","},{"lineNumber":95,"author":{"gitID":"shanmu9898"},"content":"                                                                           \"list\","},{"lineNumber":96,"author":{"gitID":"shanmu9898"},"content":"                                                                            model);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"shanmu9898"},"content":"    private DeleteShortcutCommand getDeleteShortcutForCommand(String shortcutWord, String commandWord, Model model) {"},{"lineNumber":113,"author":{"gitID":"shanmu9898"},"content":"        DeleteShortcutCommand command \u003d new DeleteShortcutCommand(commandWord, shortcutWord);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"Sisyphus25":1,"-":51,"shanmu9898":65}},{"path":"src/test/java/seedu/address/logic/commands/SetTaskCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_TASK_1;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_TASK_2;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.testutil.modelstub.ModelStub;"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.testutil.modelstub.ModelStubAcceptingTaskAdded;"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.testutil.modelstub.ModelStubThrowingDuplicateEventException;"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"public class SetTaskCommandTest {"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"    public void constructor_nullAppointment_throwsNullPointerException() {"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"        new SetTaskCommand(null);"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"    public void execute_appointmentAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"        ModelStubAcceptingTaskAdded modelStub \u003d new ModelStubAcceptingTaskAdded();"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"        CommandResult commandResult \u003d getSetTaskCommand(TYPICAL_TASK_2, modelStub).execute();"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(String.format(SetTaskCommand.MESSAGE_SUCCESS, TYPICAL_TASK_2), commandResult.feedbackToUser);"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(Arrays.asList(TYPICAL_TASK_2), modelStub.tasksAdded);"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"    public void execute_duplicateEvent_throwsCommandException() throws Exception {"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateEventException();"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"        thrown.expectMessage(SetTaskCommand.MESSAGE_DUPLICATE_TASK);"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"        getSetTaskCommand(TYPICAL_TASK_1, modelStub).execute();"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"    public void equals() {"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"        SetTaskCommand addTask1 \u003d"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"                new SetTaskCommand(TYPICAL_TASK_1);"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"        SetTaskCommand addTask2 \u003d"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"                new SetTaskCommand(TYPICAL_TASK_2);"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"        // same object -\u003e returns true"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(addTask1.equals(addTask1));"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"        // same values -\u003e returns true"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"        SetTaskCommand addAppointment1Copy \u003d"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"                new SetTaskCommand(TYPICAL_TASK_1);"},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(addTask1.equals(addAppointment1Copy));"},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":"        // different types -\u003e returns false"},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(addTask1.equals(1));"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"        // null -\u003e returns false"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(addTask1.equals(null));"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"        // different tasks -\u003e returns false"},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(addTask1.equals(addTask2));"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":"     * Generates a new SetTaskCommand with the details of the given task."},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":"    private SetTaskCommand getSetTaskCommand(Task task, Model model) {"},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":"        SetTaskCommand command \u003d new SetTaskCommand(task);"},{"lineNumber":86,"author":{"gitID":"Sisyphus25"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":87,"author":{"gitID":"Sisyphus25"},"content":"        return command;"},{"lineNumber":88,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":90,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":74,"-":16}},{"path":"src/test/java/seedu/address/logic/commands/UndoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class UndoCommandTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST);"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_FIRST);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void execute() throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":39,"author":{"gitID":"-"},"content":"                Arrays.asList(deleteCommandOne, deleteCommandTwo), Collections.emptyList());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        deleteCommandOne.execute();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        deleteCommandTwo.execute();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // multiple commands in undoStack"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // single command in undoStack"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // no command in undoStack"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":3,"-":54}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void execute_newPerson_success() throws Exception {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedModel.addPerson(validPerson);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(validPerson, model), model,"},{"lineNumber":38,"author":{"gitID":"randypx"},"content":"                String.format(AddCommand.MESSAGE_ADD_PERSON_SUCCESS, validPerson), expectedModel);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandFailure(prepareCommand(personInList, model), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code person} into the {@code model}."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private AddCommand prepareCommand(Person person, Model model) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"randypx":1,"-":54}},{"path":"src/test/java/seedu/address/logic/commands/ChangeThemeCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.ChangeThemeCommand.MESSAGE_CHANGE_THEME_SUCCESS;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.events.ui.ThemeChangeEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"public class ChangeThemeCommandTest {"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    @Rule"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"    public void execute_help_success() throws CommandException {"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"        String theme \u003d \"dark\";"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"        CommandResult result \u003d new ChangeThemeCommand(theme).execute();"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(MESSAGE_CHANGE_THEME_SUCCESS, result.feedbackToUser);"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ThemeChangeEvent);"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":22,"-":4,"shanmu9898":1}},{"path":"src/test/java/seedu/address/logic/commands/UndoableCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class UndoableCommandTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommand \u003d new DummyCommand(model);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void executeUndo() throws Exception {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        dummyCommand.execute();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"        showPersonAtIndex(model, INDEX_FIRST);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // undo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        dummyCommand.undo();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void redo() {"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"        showPersonAtIndex(model, INDEX_FIRST);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // redo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        dummyCommand.redo();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Deletes the first person in the model\u0027s filtered list."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    class DummyCommand extends UndoableCommand {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        DummyCommand(Model model) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            this.model \u003d model;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            Person personToDelete \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                model.deletePerson(personToDelete);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                fail(\"Impossible: personToDelete was retrieved from model.\");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":3,"-":65}},{"path":"src/test/java/seedu/address/logic/commands/RedoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class RedoCommandTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST);"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_SECOND);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        deleteCommandOne.preprocessUndoableCommand();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        deleteCommandTwo.preprocessUndoableCommand();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void execute() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":42,"author":{"gitID":"-"},"content":"                Collections.emptyList(), Arrays.asList(deleteCommandTwo, deleteCommandOne));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // multiple commands in redoStack"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // single command in redoStack"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // no command in redoStack"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":4,"-":54}},{"path":"src/test/java/seedu/address/logic/commands/SelectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class SelectCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"        assertExecutionSuccess(INDEX_FIRST);"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"        assertExecutionSuccess(INDEX_THIRD);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(lastPersonIndex);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"        showPersonAtIndex(model, INDEX_FIRST);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"        assertExecutionSuccess(INDEX_FIRST);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"        showPersonAtIndex(model, INDEX_FIRST);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST);"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * is raised with the correct index."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d selectCommand.execute();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            assertEquals(String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased()),"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            selectCommand.execute();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Returns a {@code SelectCommand} with parameters {@code index}."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    private SelectCommand prepareCommand(Index index) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(index);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        selectCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        return selectCommand;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":12,"-":129}},{"path":"src/test/java/seedu/address/logic/commands/ShortcutCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.ShortcutDoubles;"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.UniqueShortcutDoublesList;"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"public class ShortcutCommandTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"    private final String validTestingCommandWord \u003d \"list\";"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"    private final String validTestingShortcutWord \u003d \"l\";"},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"    private final String invalidTestingCommandWord \u003d \"king\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":"    public void constructor_nullCommandWord_throwsNullPointerException() {"},{"lineNumber":43,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":44,"author":{"gitID":"shanmu9898"},"content":"        new ShortcutCommand(null, validTestingShortcutWord);"},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":47,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":"    public void constructor_nullShortcutWord_throwsNullPointerException() {"},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":"        new ShortcutCommand(validTestingCommandWord, null);"},{"lineNumber":51,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":53,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"shanmu9898"},"content":"    public void executeUndoCommand_invalidCommandWord_throwsCommandException() throws CommandException {"},{"lineNumber":55,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":56,"author":{"gitID":"shanmu9898"},"content":"        thrown.expectMessage(ShortcutCommand.MESSAGE_NO_COMMAND_TO_MAP);"},{"lineNumber":57,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":58,"author":{"gitID":"shanmu9898"},"content":"        CommandResult commandResult \u003d getAddShortcutForCommand(validTestingShortcutWord,"},{"lineNumber":59,"author":{"gitID":"shanmu9898"},"content":"                                                               invalidTestingCommandWord,"},{"lineNumber":60,"author":{"gitID":"shanmu9898"},"content":"                                                               model).executeUndoableCommand();"},{"lineNumber":61,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":63,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"shanmu9898"},"content":"    public void executeUndoCommand_shortcutWordPresent_throwsCommandException()"},{"lineNumber":65,"author":{"gitID":"shanmu9898"},"content":"            throws UniqueShortcutDoublesList.DuplicateShortcutDoublesException, CommandException {"},{"lineNumber":66,"author":{"gitID":"shanmu9898"},"content":"        ShortcutDoubles shortcutDoubles \u003d new ShortcutDoubles(validTestingShortcutWord, validTestingCommandWord);"},{"lineNumber":67,"author":{"gitID":"shanmu9898"},"content":"        model.addCommandShortcut(shortcutDoubles);"},{"lineNumber":68,"author":{"gitID":"shanmu9898"},"content":"        CommandResult commandResult \u003d getAddShortcutForCommand(validTestingShortcutWord,"},{"lineNumber":69,"author":{"gitID":"shanmu9898"},"content":"                                                               validTestingCommandWord,"},{"lineNumber":70,"author":{"gitID":"shanmu9898"},"content":"                                                               model).executeUndoableCommand();"},{"lineNumber":71,"author":{"gitID":"shanmu9898"},"content":"        assertEquals(commandResult.feedbackToUser, String.format(ShortcutCommand.MESSAGE_SHORTCUT_AVAILABLE));"},{"lineNumber":72,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":74,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"shanmu9898"},"content":"    public void executeUndoCommand_validInput_commandSuccess()"},{"lineNumber":76,"author":{"gitID":"shanmu9898"},"content":"                             throws UniqueShortcutDoublesList.DuplicateShortcutDoublesException {"},{"lineNumber":77,"author":{"gitID":"shanmu9898"},"content":"        ShortcutDoubles shortcutDoubles \u003d new ShortcutDoubles(validTestingShortcutWord, validTestingCommandWord);"},{"lineNumber":78,"author":{"gitID":"shanmu9898"},"content":"        expectedModel.addCommandShortcut(shortcutDoubles);"},{"lineNumber":79,"author":{"gitID":"shanmu9898"},"content":"        assertCommandSuccess(getAddShortcutForCommand(validTestingShortcutWord,"},{"lineNumber":80,"author":{"gitID":"shanmu9898"},"content":"                                                      validTestingCommandWord,"},{"lineNumber":81,"author":{"gitID":"shanmu9898"},"content":"                                                      model), model,"},{"lineNumber":82,"author":{"gitID":"shanmu9898"},"content":"                                                       String.format(ShortcutCommand.MESSAGE_SUCCESS), expectedModel);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"shanmu9898"},"content":"    private ShortcutCommand getAddShortcutForCommand(String shortcutWord, String commandWord, Model model) {"},{"lineNumber":89,"author":{"gitID":"shanmu9898"},"content":"        ShortcutCommand command \u003d new ShortcutCommand(commandWord, shortcutWord);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"shanmu9898"},"content":"    public void equals() throws Exception {"},{"lineNumber":96,"author":{"gitID":"shanmu9898"},"content":"        ShortcutCommand deleteFirstCommand \u003d getAddShortcutForCommand(validTestingShortcutWord,"},{"lineNumber":97,"author":{"gitID":"shanmu9898"},"content":"                                                                      validTestingCommandWord,"},{"lineNumber":98,"author":{"gitID":"shanmu9898"},"content":"                                                                      model);"},{"lineNumber":99,"author":{"gitID":"shanmu9898"},"content":"        ShortcutCommand deleteSecondCommand \u003d getAddShortcutForCommand(\"c\","},{"lineNumber":100,"author":{"gitID":"shanmu9898"},"content":"                                                                       \"clear\","},{"lineNumber":101,"author":{"gitID":"shanmu9898"},"content":"                                                                        model);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":107,"author":{"gitID":"shanmu9898"},"content":"        ShortcutCommand deleteFirstCommandCopy \u003d getAddShortcutForCommand(\"l\","},{"lineNumber":108,"author":{"gitID":"shanmu9898"},"content":"                                                                          \"list\","},{"lineNumber":109,"author":{"gitID":"shanmu9898"},"content":"                                                                           model);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"Sisyphus25":1,"-":53,"shanmu9898":68}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"import junit.framework.TestCase;"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.events.ui.ToggleListEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class FindCommandTest {"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"    @Rule"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\" \");"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":"        assertCommandSuccessWithNoToggleListEvent(command, expectedMessage, Collections.emptyList());"},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"        model.changeCurrentActiveListType(\"appointment\");"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"        assertCommandSuccessWithToggleListEvent(command, expectedMessage, Collections.emptyList());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\"Kurz Elle Kunz\");"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":"        assertCommandSuccessWithNoToggleListEvent(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":"        model.changeCurrentActiveListType(\"appointment\");"},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":"        assertCommandSuccessWithToggleListEvent(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private FindCommand prepareCommand(String userInput) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        FindCommand command \u003d"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"Sisyphus25"},"content":"    private void assertCommandSuccessWithNoToggleListEvent("},{"lineNumber":102,"author":{"gitID":"Sisyphus25"},"content":"            FindCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":116,"author":{"gitID":"Sisyphus25"},"content":"     *     - a {@code ToggleListEvent} is called"},{"lineNumber":117,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"Sisyphus25"},"content":"    private void assertCommandSuccessWithToggleListEvent("},{"lineNumber":119,"author":{"gitID":"Sisyphus25"},"content":"            FindCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":126,"author":{"gitID":"Sisyphus25"},"content":"        TestCase.assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ToggleListEvent);"},{"lineNumber":127,"author":{"gitID":"Sisyphus25"},"content":"        TestCase.assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":20,"-":109}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.testutil.modelstub.ModelStub;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"randypx"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_ADD_PERSON_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":1,"randypx":1,"-":123}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class XmlAdaptedPersonTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"    private static final String INVALID_TAG_NAME \u003d \"#friend\";"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"    private static final String INVALID_TAG_COLOR_STYLE \u003d \"notacolor\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":108,"author":{"gitID":"Sisyphus25"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG_NAME, INVALID_TAG_COLOR_STYLE));"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"Sisyphus25"},"content":"    public void equals() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":117,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":118,"author":{"gitID":"Sisyphus25"},"content":"        //same object"},{"lineNumber":119,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(person.equals(person));"},{"lineNumber":120,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":121,"author":{"gitID":"Sisyphus25"},"content":"        //same value"},{"lineNumber":122,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedPerson personCopy \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":123,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(person.equals(personCopy));"},{"lineNumber":124,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":125,"author":{"gitID":"Sisyphus25"},"content":"        //different type"},{"lineNumber":126,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(person.equals(1));"},{"lineNumber":127,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":128,"author":{"gitID":"Sisyphus25"},"content":"        //different obj"},{"lineNumber":129,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedPerson anotherPerson \u003d new XmlAdaptedPerson(ALICE);"},{"lineNumber":130,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(person.equals(anotherPerson));"},{"lineNumber":131,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":23,"-":109}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedTaskTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.storage.XmlAdaptedTask.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_TASK_1;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_TASK_2;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.EventTime;"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Title;"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"public class XmlAdaptedTaskTest {"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"    private static final String INVALID_TITLE \u003d \"  \";"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    private static final String INVALID_TIME \u003d \"not a time stamp\";"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    public void toModelType_validTaskDetails_returnsPerson() throws Exception {"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedTask task \u003d new XmlAdaptedTask(TYPICAL_TASK_1);"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(TYPICAL_TASK_1, task.toModelType());"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"    public void toModelType_invalidTitle_throwsIllegalValueException() {"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedTask task \u003d"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"                new XmlAdaptedTask(INVALID_TITLE, VALID_END_TIME);"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"        String expectedMessage \u003d Title.MESSAGE_TITLE_CONSTRAINTS;"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"    public void toModelType_invalidTime_throwsIllegalValueException() {"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedTask task \u003d"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"                new XmlAdaptedTask(VALID_TITLE, INVALID_TIME);"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"        String expectedMessage \u003d EventTime.MESSAGE_TIME_CONSTRAINTS;"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, expectedMessage, task::toModelType);"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"    public void toModelType_nullTitle_throwsIllegalValueException() {"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedTask task \u003d"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"                new XmlAdaptedTask(null, VALID_END_TIME);"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName());"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"    public void toModelType_nullTime_throwsIllegalValueException() {"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedTask task \u003d"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"                new XmlAdaptedTask(VALID_TITLE, null);"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Time\");"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"    public void equals() {"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedTask task \u003d new XmlAdaptedTask(TYPICAL_TASK_1);"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"        //same object"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(task.equals(task));"},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":"        //same value"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedTask taskCopy \u003d new XmlAdaptedTask(TYPICAL_TASK_1);"},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(task.equals(taskCopy));"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"        //different type"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(task.equals(TYPICAL_TASK_1));"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"        //different obj"},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedTask anotherTask \u003d new XmlAdaptedTask(TYPICAL_TASK_2);"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(task.equals(anotherTask));"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":77,"-":3,"shanmu9898":1}},{"path":"src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_TASK_3;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorageTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlAddressBookStorageTest/\");"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        readAddressBook(null);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return new XmlAddressBookStorage(filePath).readAddressBook(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        readAddressBook(\"NotXmlFormatAddressBook.xml\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":60,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidPersonAddressBook.xml\");"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        //Save in new file and read back"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        original.addPerson(HOON);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        original.removePerson(ALICE);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        //Save and read without specifying file path"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        original.addPerson(IDA);"},{"lineNumber":96,"author":{"gitID":"Sisyphus25"},"content":"        original.addTask(TYPICAL_TASK_3);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        saveAddressBook(null, \"SomeFile.xml\");"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            new XmlAddressBookStorage(filePath).saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        saveAddressBook(new AddressBook(), null);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":2,"-":125}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedAppointmentTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import static junit.framework.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static junit.framework.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.storage.XmlAdaptedAppointment.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_APPOINTMENT_1;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_APPOINTMENT_2;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.EventTime;"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Title;"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"public class XmlAdaptedAppointmentTest {"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"    private static final String INVALID_TITLE \u003d \"  \";"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    private static final String VALID_PERSON_TO_MEET \u003d \"Alice Email: alice@gmail.com\";"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    private static final String INVALID_TIME \u003d \"not a time stamp\";"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"    public void toModelType_validAppointmentDetails_returnsPerson() throws Exception {"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedAppointment appointment \u003d new XmlAdaptedAppointment(TYPICAL_APPOINTMENT_1);"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(TYPICAL_APPOINTMENT_1, appointment.toModelType());"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"    public void toModelType_invalidTitle_throwsIllegalValueException() {"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"                new XmlAdaptedAppointment(INVALID_TITLE, VALID_START_TIME, VALID_END_TIME, VALID_PERSON_TO_MEET);"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"        String expectedMessage \u003d Title.MESSAGE_TITLE_CONSTRAINTS;"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"    public void toModelType_invalidStartTime_throwsIllegalValueException() {"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"                new XmlAdaptedAppointment(VALID_TITLE, INVALID_TIME, VALID_END_TIME, VALID_PERSON_TO_MEET);"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"        String expectedMessage \u003d EventTime.MESSAGE_TIME_CONSTRAINTS;"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"    public void toModelType_invalidStartEndTime_throwsIllegalValueException() {"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"                new XmlAdaptedAppointment(VALID_TITLE, VALID_START_TIME, INVALID_TIME, VALID_PERSON_TO_MEET);"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"        String expectedMessage \u003d EventTime.MESSAGE_TIME_CONSTRAINTS;"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"    public void toModelType_nullTitle_throwsIllegalValueException() {"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"                new XmlAdaptedAppointment(null, VALID_START_TIME, VALID_END_TIME, VALID_PERSON_TO_MEET);"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName());"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"    public void toModelType_nullStartTime_throwsIllegalValueException() {"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"                new XmlAdaptedAppointment(VALID_TITLE, null, VALID_END_TIME, VALID_PERSON_TO_MEET);"},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Start Time\");"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"    public void toModelType_nullEndTime_throwsIllegalValueException() {"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"                new XmlAdaptedAppointment(VALID_TITLE, VALID_START_TIME, null, VALID_PERSON_TO_MEET);"},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"End Time\");"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":"    public void toModelType_invalidTimePeriod_throwsIllegalValueException() {"},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":"                new XmlAdaptedAppointment(VALID_TITLE, \"20/10/2018 10:00\", \"20/10/2018 09:00\");"},{"lineNumber":86,"author":{"gitID":"Sisyphus25"},"content":"        String expectedMessage \u003d Appointment.MESSAGE_TIME_PERIOD_CONSTRAINTS;"},{"lineNumber":87,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":88,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":90,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"Sisyphus25"},"content":"    public void equals() {"},{"lineNumber":92,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedAppointment appointment \u003d new XmlAdaptedAppointment(TYPICAL_APPOINTMENT_1);"},{"lineNumber":93,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":94,"author":{"gitID":"Sisyphus25"},"content":"        //same object"},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(appointment.equals(appointment));"},{"lineNumber":96,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":97,"author":{"gitID":"Sisyphus25"},"content":"        //same value"},{"lineNumber":98,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedAppointment appointmentCopy \u003d new XmlAdaptedAppointment(TYPICAL_APPOINTMENT_1);"},{"lineNumber":99,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(appointment.equals(appointmentCopy));"},{"lineNumber":100,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":101,"author":{"gitID":"Sisyphus25"},"content":"        //different type"},{"lineNumber":102,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(appointment.equals(TYPICAL_APPOINTMENT_1));"},{"lineNumber":103,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":104,"author":{"gitID":"Sisyphus25"},"content":"        //different obj"},{"lineNumber":105,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedAppointment anotherAppointment \u003d new XmlAdaptedAppointment(TYPICAL_APPOINTMENT_2);"},{"lineNumber":106,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(appointment.equals(anotherAppointment));"},{"lineNumber":107,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":105,"-":2,"shanmu9898":1}},{"path":"src/test/java/seedu/address/model/UniquePersonListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class UniquePersonListTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        UniquePersonList uniquePersonList \u003d new UniquePersonList();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        uniquePersonList.asObservableList().remove(0);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":19,"shanmu9898":1}},{"path":"src/test/java/seedu/address/model/shortcut/ShortcutDoubleTest.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.model.shortcut;"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.ShortcutDoubles;"},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":"public class ShortcutDoubleTest {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"    public void constructor_nullCommandWord_throwsNullPointerException() {"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"        new ShortcutDoubles(\"l\", null);"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":"    public void constructor_nullShortcutWord_throwsNullPointerException() {"},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"        new ShortcutDoubles(null , \"list\");"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"    public void equals() throws Exception {"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"        ShortcutDoubles deleteFirstCommand \u003d new ShortcutDoubles(\"l\", \"list\");"},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"        ShortcutDoubles deleteSecondCommand \u003d new ShortcutDoubles(\"c\", \"clear\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":"        ShortcutDoubles deleteFirstCommandCopy \u003d new ShortcutDoubles(\"l\", \"list\");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"-":27,"shanmu9898":23}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NOTUSED;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_APPOINTMENT_1;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_APPOINTMENT_2;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_TASK_1;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_TASK_2;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.ShortcutDoubles;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(Collections.emptyList(), addressBook.getAppointmentList());"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTaskList());"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":"        List\u003cAppointment\u003e newAppointments \u003d Arrays.asList(TYPICAL_APPOINTMENT_1, TYPICAL_APPOINTMENT_2);"},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"        List\u003cTask\u003e newTasks \u003d Arrays.asList(TYPICAL_TASK_1, TYPICAL_TASK_2);"},{"lineNumber":73,"author":{"gitID":"shanmu9898"},"content":"        List\u003cShortcutDoubles\u003e newCommands \u003d Arrays.asList(new ShortcutDoubles(\"a\", \"add\"));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags, newAppointments, newTasks, newCommands);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"Sisyphus25"},"content":"    public void getAppointmentList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":"        addressBook.getAppointmentList().remove(0);"},{"lineNumber":96,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":98,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"Sisyphus25"},"content":"    public void getTaskList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":101,"author":{"gitID":"Sisyphus25"},"content":"        addressBook.getTaskList().remove(0);"},{"lineNumber":102,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"Sisyphus25"},"content":"     * A stub ReadOnlyAddressBook whose persons, tags and events lists can violate interface constraints."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":110,"author":{"gitID":"Sisyphus25"},"content":"        private final ObservableList\u003cAppointment\u003e appointments \u003d FXCollections.observableArrayList();"},{"lineNumber":111,"author":{"gitID":"Sisyphus25"},"content":"        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"},{"lineNumber":112,"author":{"gitID":"shanmu9898"},"content":"        private final ObservableList\u003cShortcutDoubles\u003e commandslist \u003d FXCollections.observableArrayList();"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons,"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                        Collection\u003c? extends Tag\u003e tags,"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                        Collection\u003cAppointment\u003e appointments,"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                        Collection\u003cTask\u003e tasks,"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                        Collection\u003cShortcutDoubles\u003e commands) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":122,"author":{"gitID":"Sisyphus25"},"content":"            this.tasks.setAll(tasks);"},{"lineNumber":123,"author":{"gitID":"Sisyphus25"},"content":"            this.appointments.setAll(appointments);"},{"lineNumber":124,"author":{"gitID":"shanmu9898"},"content":"            this.commandslist.setAll(commands);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":137,"author":{"gitID":"Sisyphus25"},"content":"        @Override"},{"lineNumber":138,"author":{"gitID":"Sisyphus25"},"content":"        public ObservableList\u003cAppointment\u003e getAppointmentList() {"},{"lineNumber":139,"author":{"gitID":"Sisyphus25"},"content":"            return appointments;"},{"lineNumber":140,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":142,"author":{"gitID":"Sisyphus25"},"content":"        @Override"},{"lineNumber":143,"author":{"gitID":"Sisyphus25"},"content":"        public ObservableList\u003cTask\u003e getTaskList() {"},{"lineNumber":144,"author":{"gitID":"Sisyphus25"},"content":"            return tasks;"},{"lineNumber":145,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":147,"author":{"gitID":"shanmu9898"},"content":"        @Override"},{"lineNumber":148,"author":{"gitID":"shanmu9898"},"content":"        public ObservableList\u003cShortcutDoubles\u003e getCommandsList() {"},{"lineNumber":149,"author":{"gitID":"shanmu9898"},"content":"            return commandslist;"},{"lineNumber":150,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":154,"author":{"gitID":"shanmu9898"},"content":"    public void updatePerson_modifiedAddressBooks_noError() throws PersonNotFoundException, DuplicatePersonException {"},{"lineNumber":155,"author":{"gitID":"shanmu9898"},"content":"        AddressBook testAddressBook \u003d new AddressBookBuilder().withPerson(BOB).build();"},{"lineNumber":156,"author":{"gitID":"shanmu9898"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(AMY).build();"},{"lineNumber":157,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":158,"author":{"gitID":"shanmu9898"},"content":"        testAddressBook.updatePerson(BOB, AMY);"},{"lineNumber":159,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":160,"author":{"gitID":"shanmu9898"},"content":"        assertEquals(testAddressBook, expectedAddressBook);"},{"lineNumber":161,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":163,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":164,"author":{"gitID":"shanmu9898"},"content":"    public void removeTag_tagNotPresent_addressBookUnchanged() throws PersonNotFoundException,"},{"lineNumber":165,"author":{"gitID":"shanmu9898"},"content":"                                                                      DuplicatePersonException {"},{"lineNumber":166,"author":{"gitID":"shanmu9898"},"content":"        AddressBook testAddressBook \u003d new AddressBookBuilder().withPerson(BOB).withPerson(AMY).build();"},{"lineNumber":167,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":168,"author":{"gitID":"shanmu9898"},"content":"        testAddressBook.removeTag(new Tag(VALID_TAG_NOTUSED));"},{"lineNumber":169,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":170,"author":{"gitID":"shanmu9898"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(BOB).withPerson(AMY).build();"},{"lineNumber":171,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":172,"author":{"gitID":"shanmu9898"},"content":"        assertEquals(expectedAddressBook, testAddressBook);"},{"lineNumber":173,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":175,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":176,"author":{"gitID":"shanmu9898"},"content":"    public void removeTag_tagUsedByMultiplePeople_tagRemoved() throws PersonNotFoundException,"},{"lineNumber":177,"author":{"gitID":"shanmu9898"},"content":"                                                                       DuplicatePersonException {"},{"lineNumber":178,"author":{"gitID":"shanmu9898"},"content":"        AddressBook testAddressBook \u003d new AddressBookBuilder().withPerson(BOB).withPerson(AMY).build();"},{"lineNumber":179,"author":{"gitID":"shanmu9898"},"content":"        testAddressBook.removeTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":180,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":181,"author":{"gitID":"shanmu9898"},"content":"        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":182,"author":{"gitID":"shanmu9898"},"content":"        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":183,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":184,"author":{"gitID":"shanmu9898"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(bobWithoutFriendTag)"},{"lineNumber":185,"author":{"gitID":"shanmu9898"},"content":"                                              .withPerson(amyWithoutFriendTag).build();"},{"lineNumber":186,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":187,"author":{"gitID":"shanmu9898"},"content":"        assertEquals(expectedAddressBook, testAddressBook);"},{"lineNumber":188,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":37,"-":100,"shanmu9898":53}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NOTUSED;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_APPOINTMENT_1;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_APPOINTMENT_3;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_TASK_1;"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_TASK_3;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"import junit.framework.TestCase;"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.events.model.AppointmentListChangedEvent;"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.UniqueEventList;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"    private AddressBook addressBook \u003d getTypicalAddressBook();"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"    private UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"    private ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        modelManager.getFilteredPersonList().remove(0);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"shanmu9898"},"content":"    public void getFilteredCommandList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":58,"author":{"gitID":"shanmu9898"},"content":"        modelManager.getFilteredCommandsList().remove(0);"},{"lineNumber":59,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"    public void getFilteredAppointmentList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"        modelManager.getFilteredAppointmentList().remove(0);"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":"        modelManager.getFilteredTaskList().remove(0);"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"    public void addPerson_addPersonToAddressBook_evokeAddressBookChangedEvent() throws DuplicatePersonException {"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"        ModelManager model \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":"        modelManager.addPerson(IDA);"},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof AddressBookChangedEvent);"},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":"    public void removePerson_removePersonFromAddressBook_evokeAddressBookChangedEvent() throws PersonNotFoundException {"},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":"        ModelManager model \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":"        modelManager.deletePerson(ALICE);"},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof AddressBookChangedEvent);"},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":87,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"Sisyphus25"},"content":"    public void addTask_addTaskToAddressBook_evokeAddressBookChangedEvent()"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            throws UniqueEventList.DuplicateEventException {"},{"lineNumber":90,"author":{"gitID":"Sisyphus25"},"content":"        ModelManager model \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":91,"author":{"gitID":"Sisyphus25"},"content":"        modelManager.addTask(TYPICAL_TASK_3);"},{"lineNumber":92,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof AddressBookChangedEvent);"},{"lineNumber":93,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"Sisyphus25"},"content":"    public void removeTask_removeTaskFromAddressBook_evokeAddressBookChangedEvent()"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            throws UniqueEventList.EventNotFoundException {"},{"lineNumber":98,"author":{"gitID":"Sisyphus25"},"content":"        ModelManager model \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":99,"author":{"gitID":"Sisyphus25"},"content":"        modelManager.deleteTask(TYPICAL_TASK_1);"},{"lineNumber":100,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof AddressBookChangedEvent);"},{"lineNumber":101,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":103,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"Sisyphus25"},"content":"    public void addTask_addAppointmentToAddressBook_evokeAppointmentListChangedEvent()"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            throws UniqueEventList.DuplicateEventException {"},{"lineNumber":106,"author":{"gitID":"Sisyphus25"},"content":"        ModelManager model \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":107,"author":{"gitID":"Sisyphus25"},"content":"        modelManager.addAppointment(TYPICAL_APPOINTMENT_3);"},{"lineNumber":108,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof AppointmentListChangedEvent);"},{"lineNumber":109,"author":{"gitID":"Sisyphus25"},"content":"        TestCase.assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 2);"},{"lineNumber":110,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":112,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"Sisyphus25"},"content":"    public void removeTask_removeAppointmentFromAddressBook_evokeAppointmentListChangedEvent()"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            throws UniqueEventList.EventNotFoundException {"},{"lineNumber":115,"author":{"gitID":"Sisyphus25"},"content":"        ModelManager model \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":116,"author":{"gitID":"Sisyphus25"},"content":"        modelManager.deleteAppointment(TYPICAL_APPOINTMENT_1);"},{"lineNumber":117,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof AppointmentListChangedEvent);"},{"lineNumber":118,"author":{"gitID":"Sisyphus25"},"content":"        TestCase.assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 2);"},{"lineNumber":119,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        differentUserPrefs.setAddressBookName(\"differentName\");"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":155,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":156,"author":{"gitID":"shanmu9898"},"content":"    public void deleteTag_tagNotPresent_modelUnchanged() throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":157,"author":{"gitID":"shanmu9898"},"content":"        AddressBook testAddressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":159,"author":{"gitID":"shanmu9898"},"content":"        ModelManager modelManager \u003d new ModelManager(testAddressBook, userPrefs);"},{"lineNumber":160,"author":{"gitID":"shanmu9898"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_NOTUSED));"},{"lineNumber":161,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":162,"author":{"gitID":"shanmu9898"},"content":"        assertEquals(new ModelManager(testAddressBook, userPrefs), modelManager);"},{"lineNumber":163,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":165,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":166,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":167,"author":{"gitID":"shanmu9898"},"content":"    public void deleteTag_tagUsedByMultiplePeople_tagRemoved() throws DuplicatePersonException,"},{"lineNumber":168,"author":{"gitID":"shanmu9898"},"content":"                                                                      PersonNotFoundException {"},{"lineNumber":169,"author":{"gitID":"shanmu9898"},"content":"        AddressBook testAddressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":170,"author":{"gitID":"shanmu9898"},"content":"        ModelManager modelManager \u003d new ModelManager(testAddressBook, userPrefs);"},{"lineNumber":171,"author":{"gitID":"shanmu9898"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":172,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":173,"author":{"gitID":"shanmu9898"},"content":"        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":174,"author":{"gitID":"shanmu9898"},"content":"        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":175,"author":{"gitID":"shanmu9898"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(amyWithoutFriendTag)"},{"lineNumber":176,"author":{"gitID":"shanmu9898"},"content":"                                              .withPerson(bobWithoutFriendTag).build();"},{"lineNumber":177,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":178,"author":{"gitID":"shanmu9898"},"content":"        assertEquals(new ModelManager(expectedAddressBook, userPrefs), modelManager);"},{"lineNumber":179,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":68,"-":70,"shanmu9898":42}},{"path":"src/test/java/seedu/address/model/event/EventTimeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"public class EventTimeTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new EventTime(null));"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    public void constructor_invalid_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EventTime(\"invalidTimeStamp\"));"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EventTime(\"\"));"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EventTime(\"10/20 10:00\"));"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EventTime(\"May 17 2018 10:00\"));"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EventTime(\"17-05-2019 10:00\"));"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    public void isExpired() {"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"        EventTime pastTime \u003d new EventTime(\"20/10/2013 10:00\");"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"        EventTime futureTime \u003d new EventTime(\"20/10/2100 10:00\");"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(futureTime.isExpired());"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(pastTime.isExpired());"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"}"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":""}],"authorContributionMap":{"Sisyphus25":28,"-":6}},{"path":"src/test/java/seedu/address/model/UniqueShortcutDoublesListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.UniqueShortcutDoublesList;"},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"public class UniqueShortcutDoublesListTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"        UniqueShortcutDoublesList uniqueShortcutDoublesList \u003d new UniqueShortcutDoublesList();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"        uniqueShortcutDoublesList.asObservableList().remove(0);"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"-":12,"shanmu9898":7}},{"path":"src/test/java/seedu/address/model/UniqueEventListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.UniqueEventList;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"public class UniqueEventListTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"        UniqueEventList\u003cAppointment\u003e uniqueAppointmentList \u003d new UniqueEventList\u003cAppointment\u003e();"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"        uniqueAppointmentList.asObservableList().remove(0);"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":8,"-":12}},{"path":"src/test/java/seedu/address/model/event/AppointmentTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"public class AppointmentTest {"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"    private static final Title VALID_TITLE \u003d new Title(\"Meet Student\");"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"    private static final EventTime VALID_START_TIME \u003d new EventTime(\"05/04/2018 10:00\");"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"    private static final EventTime VALID_END_TIME \u003d new EventTime(\"05/04/2018 11:00\");"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"    private static final EventTime INVALID_END_TIME \u003d new EventTime(\"05/04/2018 09:00\");"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    public void constructor_invalidAppointmentTime_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"                new Appointment(VALID_TITLE, VALID_START_TIME, INVALID_END_TIME));"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"    public void isValidTime() {"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"        // invalid time stamps"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(Appointment.isValidTime(VALID_START_TIME, INVALID_END_TIME)); //End time is before Start Time"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"        // valid time stamps"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(Appointment.isValidTime(VALID_START_TIME, VALID_END_TIME));"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":31}},{"path":"src/test/java/seedu/address/testutil/ExportCommandBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":" */"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":"public class ExportCommandBuilder {"},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":"    public static final String RANGE_ALL \u003d \"all\";"},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"    public static final String TAG_NEEDED \u003d \"friends\";"},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":"    public static final String PATH_NEEDED \u003d \"./data\";"},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":"    public static final String NAME_NEEDED \u003d \"name\";"},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"shanmu9898":14}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.UniqueEventList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A utility class to help with building Addressbook objects."},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":14,"author":{"gitID":"-"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").withTag(\"Friend\").build();}"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class AddressBookBuilder {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private AddressBook addressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public AddressBookBuilder() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        addressBook \u003d new AddressBook();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.addressBook \u003d addressBook;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withPerson(Person person) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            addressBook.addPerson(person);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"person is expected to be unique.\");"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Parses {@code tagName} into a {@code Tag} and adds it to the {@code AddressBook} that we are building."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withTag(String tagName) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            addressBook.addTag(new Tag(tagName));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tagName is expected to be valid.\");"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"     * Add a new {@code Appointment} to the {@code AddressBook} that we are building."},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"    public AddressBookBuilder withAppointment(Appointment appointment) {"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"            addressBook.addAppointment(appointment);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (UniqueEventList.DuplicateEventException ive) {"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"            throw new IllegalArgumentException(\"appointment is expected to be unique\");"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"        return this;"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public AddressBook build() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":13,"-":54}},{"path":"src/test/java/seedu/address/logic/commands/ExportCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"public class ExportCommandTest {"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"    @Rule"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"    private final Tag testingTag \u003d new Tag(\"testingTag\");"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"    private final String testingPath \u003d \"./test/data/XmlAddressBookStorageTest\";"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"    private final String name \u003d \"testingName\";"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"    private final String testingRange \u003d \"1,5\";"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"    public void constructor_nullRange_throwsNullPointerException() {"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":"        new ExportCommand(null, testingTag, testingPath, name);"},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":"    public void constructor_nullPath_throwsNullPointerException() {"},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"        new ExportCommand(testingRange, testingTag, null, name);"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":43,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"shanmu9898"},"content":"    public void constructor_nullName_throwsNullPointerException() {"},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":46,"author":{"gitID":"shanmu9898"},"content":"        new ExportCommand(testingRange, testingTag, testingPath, null);"},{"lineNumber":47,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":"    public void execute_multipleRange_showsMessageError() {"},{"lineNumber":51,"author":{"gitID":"shanmu9898"},"content":"        String testingMultiRange \u003d \"1,2,3\";"},{"lineNumber":52,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand exportCommand \u003d new ExportCommand(testingMultiRange, testingTag, testingPath, name);"},{"lineNumber":53,"author":{"gitID":"shanmu9898"},"content":"        exportCommand.setData(new ModelManager(getTypicalAddressBook(), new UserPrefs()), new CommandHistory(),"},{"lineNumber":54,"author":{"gitID":"shanmu9898"},"content":"                new UndoRedoStack());"},{"lineNumber":55,"author":{"gitID":"shanmu9898"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":56,"author":{"gitID":"shanmu9898"},"content":"        assertCommandSuccess(exportCommand, model, String.format(exportCommand.MESSAGE_RANGE_ERROR), model);"},{"lineNumber":57,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":58,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":60,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"shanmu9898"},"content":"    public void execute_outOfRange_showsMessageError() {"},{"lineNumber":62,"author":{"gitID":"shanmu9898"},"content":"        String testingOutOfRange \u003d \"0,10000000\";"},{"lineNumber":63,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand exportCommand \u003d new ExportCommand(testingOutOfRange, testingTag, testingPath, name);"},{"lineNumber":64,"author":{"gitID":"shanmu9898"},"content":"        exportCommand.setData(new ModelManager(getTypicalAddressBook(), new UserPrefs()), new CommandHistory(),"},{"lineNumber":65,"author":{"gitID":"shanmu9898"},"content":"                new UndoRedoStack());"},{"lineNumber":66,"author":{"gitID":"shanmu9898"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":67,"author":{"gitID":"shanmu9898"},"content":"        assertCommandSuccess(exportCommand, model, String.format(exportCommand.MESSAGE_OUT_OF_BOUNDS), model);"},{"lineNumber":68,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":69,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":71,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"shanmu9898"},"content":"    public void execute_successfulExport_showsNoMessageError() {"},{"lineNumber":73,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand exportCommand \u003d new ExportCommand(testingRange, testingTag, testingPath, name);"},{"lineNumber":74,"author":{"gitID":"shanmu9898"},"content":"        exportCommand.setData(new ModelManager(getTypicalAddressBook(), new UserPrefs()), new CommandHistory(),"},{"lineNumber":75,"author":{"gitID":"shanmu9898"},"content":"                new UndoRedoStack());"},{"lineNumber":76,"author":{"gitID":"shanmu9898"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":77,"author":{"gitID":"shanmu9898"},"content":"        assertCommandSuccess(exportCommand, model, String.format(exportCommand.MESSAGE_SUCCESS), model);"},{"lineNumber":78,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":80,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"shanmu9898"},"content":"    public void execute_successfulExportWithAllRange_showsNoMessageError() {"},{"lineNumber":82,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand exportCommand \u003d new ExportCommand(\"all\", testingTag, testingPath, name);"},{"lineNumber":83,"author":{"gitID":"shanmu9898"},"content":"        exportCommand.setData(new ModelManager(getTypicalAddressBook(), new UserPrefs()), new CommandHistory(),"},{"lineNumber":84,"author":{"gitID":"shanmu9898"},"content":"                new UndoRedoStack());"},{"lineNumber":85,"author":{"gitID":"shanmu9898"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":86,"author":{"gitID":"shanmu9898"},"content":"        assertCommandSuccess(exportCommand, model, String.format(exportCommand.MESSAGE_SUCCESS), model);"},{"lineNumber":87,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":89,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"shanmu9898"},"content":"    public void execute_successfulExportWithSingleRange_showsNoMessageError() {"},{"lineNumber":91,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand exportCommand \u003d new ExportCommand(\"2\", testingTag, testingPath, name);"},{"lineNumber":92,"author":{"gitID":"shanmu9898"},"content":"        exportCommand.setData(new ModelManager(getTypicalAddressBook(), new UserPrefs()), new CommandHistory(),"},{"lineNumber":93,"author":{"gitID":"shanmu9898"},"content":"                new UndoRedoStack());"},{"lineNumber":94,"author":{"gitID":"shanmu9898"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":95,"author":{"gitID":"shanmu9898"},"content":"        assertCommandSuccess(exportCommand, model, String.format(exportCommand.MESSAGE_SUCCESS), model);"},{"lineNumber":96,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":98,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"shanmu9898"},"content":"    public void execute_rangeNotCorrect_showsMessageError() {"},{"lineNumber":100,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand exportCommand \u003d new ExportCommand(\"2,1\", testingTag, testingPath, name);"},{"lineNumber":101,"author":{"gitID":"shanmu9898"},"content":"        exportCommand.setData(new ModelManager(getTypicalAddressBook(), new UserPrefs()), new CommandHistory(),"},{"lineNumber":102,"author":{"gitID":"shanmu9898"},"content":"                new UndoRedoStack());"},{"lineNumber":103,"author":{"gitID":"shanmu9898"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":104,"author":{"gitID":"shanmu9898"},"content":"        assertCommandSuccess(exportCommand, model, String.format(exportCommand.MESSAGE_RANGE_ERROR), model);"},{"lineNumber":105,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":107,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"shanmu9898"},"content":"    public void execute_whenTagIsSupposedlyNotGiven_showsNoMessageError() {"},{"lineNumber":109,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand exportCommand \u003d new ExportCommand(\"all\", new Tag(\"shouldnotbethistag\"), testingPath, name);"},{"lineNumber":110,"author":{"gitID":"shanmu9898"},"content":"        exportCommand.setData(new ModelManager(getTypicalAddressBook(), new UserPrefs()), new CommandHistory(),"},{"lineNumber":111,"author":{"gitID":"shanmu9898"},"content":"                new UndoRedoStack());"},{"lineNumber":112,"author":{"gitID":"shanmu9898"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":113,"author":{"gitID":"shanmu9898"},"content":"        assertCommandSuccess(exportCommand, model, String.format(exportCommand.MESSAGE_SUCCESS), model);"},{"lineNumber":114,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":116,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"shanmu9898"},"content":"    public void execute_whenTagIsSupposedlyNotGivnAndRangeError_showsMessageError() {"},{"lineNumber":118,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand exportCommand \u003d new ExportCommand(\"2,1\", new Tag(\"shouldnotbethistag\"), testingPath, name);"},{"lineNumber":119,"author":{"gitID":"shanmu9898"},"content":"        exportCommand.setData(new ModelManager(getTypicalAddressBook(), new UserPrefs()), new CommandHistory(),"},{"lineNumber":120,"author":{"gitID":"shanmu9898"},"content":"                new UndoRedoStack());"},{"lineNumber":121,"author":{"gitID":"shanmu9898"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":122,"author":{"gitID":"shanmu9898"},"content":"        assertCommandSuccess(exportCommand, model, String.format(exportCommand.MESSAGE_RANGE_ERROR), model);"},{"lineNumber":123,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":125,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"shanmu9898"},"content":"    public void execute_whenTagIsSupposedlyNotGivenAndRangeGiven_showsNoMessageError() {"},{"lineNumber":127,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand exportCommand \u003d new ExportCommand(testingRange, new Tag(\"shouldnotbethistag\"), testingPath, name);"},{"lineNumber":128,"author":{"gitID":"shanmu9898"},"content":"        exportCommand.setData(new ModelManager(getTypicalAddressBook(), new UserPrefs()), new CommandHistory(),"},{"lineNumber":129,"author":{"gitID":"shanmu9898"},"content":"                new UndoRedoStack());"},{"lineNumber":130,"author":{"gitID":"shanmu9898"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":131,"author":{"gitID":"shanmu9898"},"content":"        assertCommandSuccess(exportCommand, model, String.format(exportCommand.MESSAGE_SUCCESS), model);"},{"lineNumber":132,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":134,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":135,"author":{"gitID":"shanmu9898"},"content":"    public void execute_whenRangeIsSelectiveAndOutOfRange_showsMessageError() {"},{"lineNumber":136,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand exportCommand \u003d new ExportCommand(\"10000000\", new Tag(\"shouldnotbethistag\"), testingPath, name);"},{"lineNumber":137,"author":{"gitID":"shanmu9898"},"content":"        exportCommand.setData(new ModelManager(getTypicalAddressBook(), new UserPrefs()), new CommandHistory(),"},{"lineNumber":138,"author":{"gitID":"shanmu9898"},"content":"                new UndoRedoStack());"},{"lineNumber":139,"author":{"gitID":"shanmu9898"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":140,"author":{"gitID":"shanmu9898"},"content":"        assertCommandSuccess(exportCommand, model, String.format(exportCommand.MESSAGE_OUT_OF_BOUNDS), model);"},{"lineNumber":141,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":143,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":144,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":145,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"shanmu9898"},"content":"    public void equals() {"},{"lineNumber":147,"author":{"gitID":"shanmu9898"},"content":"        final ExportCommand comparableCommand \u003d new ExportCommand(testingRange, testingTag, testingPath, name);"},{"lineNumber":148,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":149,"author":{"gitID":"shanmu9898"},"content":"        // same values -\u003e returns true"},{"lineNumber":150,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand comparedToCommand \u003d new ExportCommand(testingRange, testingTag, testingPath, name);"},{"lineNumber":151,"author":{"gitID":"shanmu9898"},"content":"        assertTrue(comparableCommand.equals(comparedToCommand));"},{"lineNumber":152,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":153,"author":{"gitID":"shanmu9898"},"content":"        // same object -\u003e returns true"},{"lineNumber":154,"author":{"gitID":"shanmu9898"},"content":"        assertTrue(comparableCommand.equals(comparableCommand));"},{"lineNumber":155,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":156,"author":{"gitID":"shanmu9898"},"content":"        // null -\u003e returns false"},{"lineNumber":157,"author":{"gitID":"shanmu9898"},"content":"        assertFalse(comparableCommand.equals(null));"},{"lineNumber":158,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":159,"author":{"gitID":"shanmu9898"},"content":"        // different types -\u003e returns false"},{"lineNumber":160,"author":{"gitID":"shanmu9898"},"content":"        assertFalse(comparableCommand.equals(new ClearCommand()));"},{"lineNumber":161,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":162,"author":{"gitID":"shanmu9898"},"content":"        // different range -\u003e returns false"},{"lineNumber":163,"author":{"gitID":"shanmu9898"},"content":"        assertFalse(comparableCommand.equals(new ExportCommand(\"1,2\", testingTag, testingPath, name)));"},{"lineNumber":164,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":166,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":167,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":168,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"-":12,"shanmu9898":156}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"    public static final Index INDEX_THIRD \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":3,"-":9}},{"path":"src/test/java/seedu/address/model/event/TitleTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"public class TitleTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Title(null));"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    public void constructor_invalidTitle_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"        String invalidTitle \u003d \"\";"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"                new Title(invalidTitle));"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"    public void isValidTitle() {"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"        // null title"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"        // invalid Appointment"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(Title.isValidTitle(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(Title.isValidTitle(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"        // valid Appointment"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(Title.isValidTitle(\"Meet Dave\"));"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(Title.isValidTitle(\"-\")); // one character"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":30,"-":6}},{"path":"src/test/java/seedu/address/testutil/StudentBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"randypx"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"randypx"},"content":""},{"lineNumber":3,"author":{"gitID":"randypx"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"randypx"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"randypx"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":10,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":11,"author":{"gitID":"randypx"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":13,"author":{"gitID":"randypx"},"content":""},{"lineNumber":14,"author":{"gitID":"randypx"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"randypx"},"content":" * A utility class to help with building Student objects."},{"lineNumber":16,"author":{"gitID":"randypx"},"content":" */"},{"lineNumber":17,"author":{"gitID":"randypx"},"content":"public class StudentBuilder {"},{"lineNumber":18,"author":{"gitID":"randypx"},"content":""},{"lineNumber":19,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":20,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":21,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":22,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":23,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":24,"author":{"gitID":"randypx"},"content":""},{"lineNumber":25,"author":{"gitID":"randypx"},"content":"    private Name name;"},{"lineNumber":26,"author":{"gitID":"randypx"},"content":"    private Phone phone;"},{"lineNumber":27,"author":{"gitID":"randypx"},"content":"    private Email email;"},{"lineNumber":28,"author":{"gitID":"randypx"},"content":"    private Address address;"},{"lineNumber":29,"author":{"gitID":"randypx"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":30,"author":{"gitID":"randypx"},"content":""},{"lineNumber":31,"author":{"gitID":"randypx"},"content":"    public StudentBuilder() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":37,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"randypx"},"content":""},{"lineNumber":39,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"randypx"},"content":"     * Initializes the StudentBuilder with the data of {@code personToCopy}."},{"lineNumber":41,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"randypx"},"content":"    public StudentBuilder(Student personToCopy) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":48,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"randypx"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"randypx"},"content":"    public StudentBuilder withName(String name) {"},{"lineNumber":54,"author":{"gitID":"randypx"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":55,"author":{"gitID":"randypx"},"content":"        return this;"},{"lineNumber":56,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"randypx"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"randypx"},"content":"    public StudentBuilder withTags(String ... tags) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"randypx"},"content":""},{"lineNumber":70,"author":{"gitID":"randypx"},"content":"    public StudentBuilder withAddress(String address) {"},{"lineNumber":71,"author":{"gitID":"randypx"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":72,"author":{"gitID":"randypx"},"content":"        return this;"},{"lineNumber":73,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"randypx"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"randypx"},"content":""},{"lineNumber":79,"author":{"gitID":"randypx"},"content":"    public StudentBuilder withPhone(String phone) {"},{"lineNumber":80,"author":{"gitID":"randypx"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":81,"author":{"gitID":"randypx"},"content":"        return this;"},{"lineNumber":82,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"randypx"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"randypx"},"content":""},{"lineNumber":88,"author":{"gitID":"randypx"},"content":"    public StudentBuilder withEmail(String email) {"},{"lineNumber":89,"author":{"gitID":"randypx"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":90,"author":{"gitID":"randypx"},"content":"        return this;"},{"lineNumber":91,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"randypx"},"content":""},{"lineNumber":93,"author":{"gitID":"randypx"},"content":"    public Student build() {"},{"lineNumber":94,"author":{"gitID":"randypx"},"content":"        return new Student(name, phone, email, address, tags);"},{"lineNumber":95,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"randypx"},"content":"}"}],"authorContributionMap":{"randypx":62,"-":34}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_STUDENT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * A utility class for Person."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"randypx"},"content":"     * Returns an add command string for adding the {@code student}."},{"lineNumber":28,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"randypx"},"content":"    public static String getAddStudentCommand(Student person) {"},{"lineNumber":30,"author":{"gitID":"randypx"},"content":"        return AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + getPersonDetails(person);"},{"lineNumber":31,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"randypx"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":43,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"randypx":9,"-":38}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_STUDENT;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.UniqueEventList;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").build();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final Student GEORGE \u003d new StudentBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"},{"lineNumber":50,"author":{"gitID":"randypx"},"content":"    public static final Student IVAN \u003d new StudentBuilder().withName(\"Ivan Kutz\").withPhone(\"9867723\")"},{"lineNumber":51,"author":{"gitID":"randypx"},"content":"            .withEmail(\"wolf@example.com\").withAddress(\"Centre Street\").build();"},{"lineNumber":52,"author":{"gitID":"randypx"},"content":"    public static final Student JOHN \u003d new StudentBuilder().withName(\"John Blake\").withPhone(\"9575232\")"},{"lineNumber":53,"author":{"gitID":"randypx"},"content":"            .withEmail(\"star@example.com\").withAddress(\"Hollywood\").build();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"randypx"},"content":"    public static final Student STUDENT_HOON \u003d new StudentBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"},{"lineNumber":63,"author":{"gitID":"randypx"},"content":"    public static final Student STUDENT_IDA \u003d new StudentBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"randypx"},"content":"    public static final Student STUDENT_AMY \u003d new StudentBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":74,"author":{"gitID":"randypx"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_STUDENT).build();"},{"lineNumber":75,"author":{"gitID":"randypx"},"content":"    public static final Student STUDENT_BOB \u003d new StudentBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":76,"author":{"gitID":"randypx"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_STUDENT)"},{"lineNumber":77,"author":{"gitID":"randypx"},"content":"            .build();"},{"lineNumber":78,"author":{"gitID":"randypx"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":"        for (Appointment ap : TypicalEvents.getTypicalAppointments()) {"},{"lineNumber":96,"author":{"gitID":"Sisyphus25"},"content":"            try {"},{"lineNumber":97,"author":{"gitID":"Sisyphus25"},"content":"                ab.addAppointment(ap);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            } catch (UniqueEventList.DuplicateEventException e) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"Sisyphus25"},"content":"        for (Task t : TypicalEvents.getTypicalTasks()) {"},{"lineNumber":103,"author":{"gitID":"Sisyphus25"},"content":"            try {"},{"lineNumber":104,"author":{"gitID":"Sisyphus25"},"content":"                ab.addTask(t);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            } catch (UniqueEventList.DuplicateEventException e) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":9,"randypx":14,"-":92}},{"path":"src/test/java/seedu/address/testutil/modelstub/ModelStubThrowingDuplicateEventException.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.testutil.modelstub;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.UniqueEventList;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":" * A Model stub that always throw a DuplicateEventException when trying to add an appointment/task."},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"public class ModelStubThrowingDuplicateEventException extends ModelStub {"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"    public void addAppointment (Appointment appointment) throws UniqueEventList.DuplicateEventException {"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"        throw new UniqueEventList.DuplicateEventException();"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"    public void addTask (Task task) throws UniqueEventList.DuplicateEventException {"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"        throw new UniqueEventList.DuplicateEventException();"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"        return new AddressBook();"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":26,"-":2}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":20,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":21,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":22,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":23,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":24,"author":{"gitID":"randypx"},"content":""},{"lineNumber":25,"author":{"gitID":"randypx"},"content":"    private Name name;"},{"lineNumber":26,"author":{"gitID":"randypx"},"content":"    private Phone phone;"},{"lineNumber":27,"author":{"gitID":"randypx"},"content":"    private Email email;"},{"lineNumber":28,"author":{"gitID":"randypx"},"content":"    private Address address;"},{"lineNumber":29,"author":{"gitID":"randypx"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return new Person(name, phone, email, address, tags);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"randypx":11,"-":83}},{"path":"src/test/java/seedu/address/testutil/TypicalEvents.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.EventTime;"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Title;"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":" * A utility class containing a list of event objects to be used in tests."},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"public class TypicalEvents {"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    public static final Appointment TYPICAL_APPOINTMENT_1 \u003d"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"            new AppointmentBuilder(\"Meeting with parents\", \"09/10/2018 10:00\", \"09/10/2018 11:00\", ALICE).build();"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    public static final Appointment TYPICAL_APPOINTMENT_2 \u003d"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"            new AppointmentBuilder(\"Consultation session\", \"04/07/2018 10:00\", \"04/07/2018 11:00\", BOB).build();"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    public static final Appointment TYPICAL_APPOINTMENT_3 \u003d"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"            new AppointmentBuilder(\"Tutoring session\", \"30/04/2018 10:00\", \"30/04/2018 11:00\", CARL).build();"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    public static final Appointment APPOINTMENT_WITHOUT_PERSON_1 \u003d"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"            new AppointmentBuilder(\"Meeting with parents\", \"09/10/2018 10:00\", \"09/10/2018 11:00\").build();"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"    public static final Appointment APPOINTMENT_WITHOUT_PERSON_2 \u003d"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"            new AppointmentBuilder(\"Consultation session\", \"04/07/2018 10:00\", \"04/07/2018 11:00\", BOB).build();"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"    public static final Appointment APPOINTMENT_WITHOUT_PERSON_3 \u003d"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"            new AppointmentBuilder(\"Tutoring session\", \"30/04/2018 10:00\", \"30/04/2018 11:00\").build();"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"    public static final Task TYPICAL_TASK_1 \u003d"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"            new Task(new Title(\"To do\"), new EventTime(\"10/10/2018 10:00\"));"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"    public static final Task TYPICAL_TASK_2 \u003d"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"            new Task(new Title(\"Mark papers\"), new EventTime(\"15/04/2018 23:00\"));"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"    public static final Task TYPICAL_TASK_3 \u003d"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"            new Task(new Title(\"Purchase markers\"), new EventTime(\"19/04/2018 10:00\"));"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"    public static final Task TYPICAL_TASK_EXPIRED \u003d"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"            new Task(new Title(\"Expired task\"), new EventTime(\"19/04/2013 10:00\"));"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"    public static List\u003cAppointment\u003e getTypicalAppointments() {"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(TYPICAL_APPOINTMENT_1, TYPICAL_APPOINTMENT_2));"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"    public static List\u003cTask\u003e getTypicalTasks() {"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(TYPICAL_TASK_1, TYPICAL_TASK_2));"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":49,"-":1}},{"path":"src/test/java/seedu/address/testutil/modelstub/ModelStubAcceptingTaskAdded.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.testutil.modelstub;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.UniqueEventList;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":" * A Model stub that always accept the task being added."},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"public class ModelStubAcceptingTaskAdded extends ModelStub {"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    public final ArrayList\u003cTask\u003e tasksAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"    public void addTask(Task event) throws UniqueEventList.DuplicateEventException {"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(event);"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"        tasksAdded.add(event);"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"        return new AddressBook();"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":25,"-":4}},{"path":"src/test/java/guitests/guihandles/CalendarPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import javafx.scene.Node;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":" * Provides a handle for CalendarPanel"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"public class CalendarPanelHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"    public static final String CALENDAR_VIEW_ID \u003d \"#calendarPlaceholder\";"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"    protected CalendarPanelHandle(Node rootNode) {"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"        super(rootNode);"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":15}},{"path":"src/test/java/guitests/guihandles/MainWindowHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Provides a handle for {@code MainWindow}."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class MainWindowHandle extends StageHandle {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    private final PersonListPanelHandle personListPanel;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    private final ResultDisplayHandle resultDisplay;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final CommandBoxHandle commandBox;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final StatusBarFooterHandle statusBarFooter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private final MainMenuHandle mainMenu;"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"    private final CalendarPanelHandle calendarPanel;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public MainWindowHandle(Stage stage) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        super(stage);"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanelHandle(getChildNode(PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"        calendarPanel \u003d new CalendarPanelHandle(getChildNode(CalendarPanelHandle.CALENDAR_VIEW_ID));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return personListPanel;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return resultDisplay;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return commandBox;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return statusBarFooter;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return mainMenu;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"    public CalendarPanelHandle getCalendarPanel() {"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"        return calendarPanel;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":4,"-":47}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Label addressLabel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public String getAddress() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return addressLabel.getText();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"    public List\u003cString\u003e getTagsNames() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":72,"content":"    //@@author Sisyphus25-reused"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"    //Reused from https://github.com/se-edu/addressbook-level4/pull/798/commits/167b3d0b4f7ad34296d2fbf505f9ae71f983f53c"},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"     *"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":"     * @param tag Text value of the tag label"},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"     * @return List of style classes for tag label with text value {@code tag}"},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"    public List\u003cString\u003e getTagStyleClasses(String tag) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":"                .filter(label -\u003e label.getText().equals(tag))"},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":"                .map(Label::getStyleClass)"},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":"                .findFirst()"},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":"                .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag.\"));"},{"lineNumber":86,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"Sisyphus25":14,"-":72}},{"path":"src/test/java/seedu/address/testutil/AppointmentBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.model.event.PersonToMeet.EMAIL_SPLITTER;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.EventTime;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.PersonToMeet;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Title;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":" * A utility class to help with building Appointment objects."},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"public class AppointmentBuilder {"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    private Title title;"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    private EventTime time;"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    private EventTime endTime;"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"    private PersonToMeet personToMeet;"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"    public AppointmentBuilder(String title, String time, String endTime) {"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"        this(title, time, endTime, (String) null);"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    public AppointmentBuilder(String title, String time, String endTime, Person personToMeet) {"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"        this(title, time, endTime, personToMeet.getName() + EMAIL_SPLITTER + personToMeet.getEmail());"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"    public AppointmentBuilder(String title, String time, String endTime, String personToMeet) {"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"        this.title \u003d new Title(title);"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"        this.time \u003d new EventTime(time);"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"        this.endTime \u003d new EventTime(endTime);"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"        if (personToMeet !\u003d null) {"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"            String[] components \u003d personToMeet.split(EMAIL_SPLITTER);"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"            this.personToMeet \u003d new PersonToMeet(components[0], components[1]);"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"     * @return an {@code Appointment} from the data feed to constructor"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"    public Appointment build() {"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"        return new Appointment(title, time, endTime, personToMeet);"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":46}},{"path":"src/main/java/seedu/address/ui/UiManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * The manager of the UI component."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UiManager extends ComponentManager implements Ui {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/Tc_logo.png\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public UiManager(Logic logic, Config config, UserPrefs prefs) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        //Set the application icon."},{"lineNumber":52,"author":{"gitID":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        mainWindow.hide();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        final String content \u003d details + \":\\n\" + cause.toString();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                                               String contentText) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        alert.showAndWait();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        System.exit(1);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                event.exception);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":118,"shanmu9898":1}},{"path":"src/test/java/seedu/address/testutil/modelstub/ModelStub.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.testutil.modelstub;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.UniqueEventList;"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.ShortcutDoubles;"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.UniqueShortcutDoublesList;"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * A default model stub that have all of the methods failing."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"public class ModelStub implements Model {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"    public ObservableList\u003cShortcutDoubles\u003e getFilteredCommandsList() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":55,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"randypx"},"content":""},{"lineNumber":57,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"shanmu9898"},"content":"    public void addCommandShortcut(ShortcutDoubles shortcutDoubles)"},{"lineNumber":59,"author":{"gitID":"shanmu9898"},"content":"            throws UniqueShortcutDoublesList.DuplicateShortcutDoublesException {"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":63,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"shanmu9898"},"content":"    public void deleteCommandShortcut(ShortcutDoubles shortcutDoubles)"},{"lineNumber":65,"author":{"gitID":"shanmu9898"},"content":"            throws UniqueShortcutDoublesList.CommandShortcutNotFoundException {"},{"lineNumber":66,"author":{"gitID":"shanmu9898"},"content":"        fail(\"This method should not be called\");"},{"lineNumber":67,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":"    public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"Sisyphus25"},"content":"    public String getCurrentActiveListType() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"Sisyphus25"},"content":"    public void changeCurrentActiveListType(String type) {"},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":96,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":101,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":103,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":104,"author":{"gitID":"shanmu9898"},"content":"    public void deleteTag(Tag tag) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":108,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public void addAppointment(Appointment appointment) throws UniqueEventList.DuplicateEventException {"},{"lineNumber":110,"author":{"gitID":"Sisyphus25"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":111,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":113,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void deleteAppointment(Appointment appointment) throws UniqueEventList.EventNotFoundException {"},{"lineNumber":115,"author":{"gitID":"Sisyphus25"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":116,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":118,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void addTask(Task task) throws UniqueEventList.DuplicateEventException {"},{"lineNumber":120,"author":{"gitID":"Sisyphus25"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":121,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":123,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public void deleteTask(Task task) throws UniqueEventList.EventNotFoundException {"},{"lineNumber":125,"author":{"gitID":"Sisyphus25"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":126,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":44,"randypx":2,"-":64,"shanmu9898":17}},{"path":"src/test/java/seedu/address/testutil/TypicalImportedPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_STUDENT;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":" * Special Util class to get people for ImportCommandTest class."},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":" */"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"public class TypicalImportedPersons {"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"    public static final Person FLICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":"    public static final Person FENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":"            .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":"    public static final Person FARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":"    public static final Person FANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").build();"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"    public static final Person FLLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"},{"lineNumber":43,"author":{"gitID":"shanmu9898"},"content":"    public static final Person GIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":44,"author":{"gitID":"shanmu9898"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":"    public static final Student FEORGE \u003d new StudentBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":46,"author":{"gitID":"shanmu9898"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"},{"lineNumber":47,"author":{"gitID":"shanmu9898"},"content":"    public static final Student FVAN \u003d new StudentBuilder().withName(\"Ivan Kutz\").withPhone(\"9867723\")"},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":"            .withEmail(\"wolf@example.com\").withAddress(\"Centre Street\").build();"},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":"    public static final Student FOHN \u003d new StudentBuilder().withName(\"John Blake\").withPhone(\"9575232\")"},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":"            .withEmail(\"star@example.com\").withAddress(\"Hollywood\").build();"},{"lineNumber":51,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":52,"author":{"gitID":"shanmu9898"},"content":"    // Manually added"},{"lineNumber":53,"author":{"gitID":"shanmu9898"},"content":"    public static final Person FOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":54,"author":{"gitID":"shanmu9898"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"},{"lineNumber":55,"author":{"gitID":"shanmu9898"},"content":"    public static final Person FDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":56,"author":{"gitID":"shanmu9898"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"},{"lineNumber":57,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":58,"author":{"gitID":"shanmu9898"},"content":"    public static final Student FTUDENT_HOON \u003d new StudentBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":59,"author":{"gitID":"shanmu9898"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"},{"lineNumber":60,"author":{"gitID":"shanmu9898"},"content":"    public static final Student FTUDENT_IDA \u003d new StudentBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":61,"author":{"gitID":"shanmu9898"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"},{"lineNumber":62,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":63,"author":{"gitID":"shanmu9898"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":64,"author":{"gitID":"shanmu9898"},"content":"    public static final Person FMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":65,"author":{"gitID":"shanmu9898"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":66,"author":{"gitID":"shanmu9898"},"content":"    public static final Person FOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":67,"author":{"gitID":"shanmu9898"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":68,"author":{"gitID":"shanmu9898"},"content":"            .build();"},{"lineNumber":69,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":70,"author":{"gitID":"shanmu9898"},"content":"    public static final Student FTUDENT_AMY \u003d new StudentBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":71,"author":{"gitID":"shanmu9898"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_STUDENT).build();"},{"lineNumber":72,"author":{"gitID":"shanmu9898"},"content":"    public static final Student FTUDENT_BOB \u003d new StudentBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":73,"author":{"gitID":"shanmu9898"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_STUDENT)"},{"lineNumber":74,"author":{"gitID":"shanmu9898"},"content":"            .build();"},{"lineNumber":75,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":76,"author":{"gitID":"shanmu9898"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":77,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":78,"author":{"gitID":"shanmu9898"},"content":"    private TypicalImportedPersons() {} // prevents instantiation"},{"lineNumber":79,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":80,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"shanmu9898"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":82,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"shanmu9898"},"content":"    public static AddressBook getImportedAddressBook() {"},{"lineNumber":84,"author":{"gitID":"shanmu9898"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":85,"author":{"gitID":"shanmu9898"},"content":"        for (Person person : getImportedPersons()) {"},{"lineNumber":86,"author":{"gitID":"shanmu9898"},"content":"            try {"},{"lineNumber":87,"author":{"gitID":"shanmu9898"},"content":"                ab.addPerson(person);"},{"lineNumber":88,"author":{"gitID":"shanmu9898"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":89,"author":{"gitID":"shanmu9898"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":90,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":91,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"shanmu9898"},"content":"        return ab;"},{"lineNumber":93,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":95,"author":{"gitID":"shanmu9898"},"content":"    public static List\u003cPerson\u003e getImportedPersons() {"},{"lineNumber":96,"author":{"gitID":"shanmu9898"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(FLICE, FENSON, FARL, FANIEL, FLLE, GIONA, FEORGE));"},{"lineNumber":97,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"randypx":2,"-":21,"shanmu9898":75}},{"path":"src/main/java/seedu/address/ui/ThemeList.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":" * Provide list of themes and respective URL to their CSS stylesheet"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"public class ThemeList {"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"    private HashMap\u003cString, String\u003e themeList;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"    public ThemeList() {"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"        themeList \u003d new HashMap\u003c\u003e();"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"        themeList.put(\"dark\", \"view/DarkTheme.css\");"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"        themeList.put(\"light\", \"view/LightTheme.css\");"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"        themeList.put(\"doge\", \"view/DogeTheme.css\");"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    public String getThemeStyleSheet(String theme) {"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"        if (!themeList.containsKey(theme)) {"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"            return themeList.get(\"dark\");"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"        return themeList.get(theme);"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":25}},{"path":"src/main/java/seedu/address/ui/CalendarPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import java.time.Duration;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import java.time.LocalTime;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import java.time.ZoneId;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"import com.calendarfx.model.Entry;"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"import com.calendarfx.model.Interval;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"import com.calendarfx.view.CalendarView;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.events.model.AppointmentListChangedEvent;"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.events.ui.ToggleCalendarViewEvent;"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":" * The Calendar Panel of the App."},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"public class CalendarPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"    private static final String FXML \u003d \"CalendarPanel.fxml\";"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"    private CalendarView calendarView;"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"    private Calendar calendar;"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"    private ObservableList\u003cAppointment\u003e appointmentList;"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"    public CalendarPanel(ObservableList\u003cAppointment\u003e appointmentObservableList) {"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"        super(FXML);"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"        this.appointmentList \u003d appointmentObservableList;"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"        calendarView \u003d new CalendarView();"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"        CalendarSource calendarSource \u003d new CalendarSource(\"My Calendar\");"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"        calendar \u003d new Calendar(\"Appointments\");"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"        calendarView.setRequestedTime(LocalTime.now());"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"        calendarView.setToday(LocalDate.now());"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"        calendarView.setTime(LocalTime.now());"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"        calendarView.getCalendarSources().add(calendarSource);"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"        calendarSource.getCalendars().add(calendar);"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"        calendar.setStyle(Calendar.Style.getStyle(0));"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"        calendar.setLookAheadDuration(Duration.ofDays(365));"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"        updateCalendar();"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"        disableViews();"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"     * Clear the entry list in the CalendarFX calendar and"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"     * populate it with appointment in the updated appointmentList"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"    private void updateCalendar() {"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"        calendar.clear();"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"        ArrayList\u003cEntry\u003e entries \u003d getEntries();"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"        for (Entry entry : entries) {"},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"            calendar.addEntry(entry);"},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"    private ArrayList\u003cEntry\u003e getEntries() {"},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"        ArrayList\u003cEntry\u003e entries \u003d new ArrayList\u003c\u003e();"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"        for (Appointment appointment : appointmentList) {"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":"            entries.add(getEntry(appointment));"},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"        return entries;"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":"    private Entry getEntry(Appointment appointment) {"},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":"        LocalDateTime ldtstart \u003d LocalDateTime.ofInstant("},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":"                appointment.getTime().value.getTime().toInstant(), ZoneId.systemDefault());"},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":"        LocalDateTime ldtend \u003d LocalDateTime.ofInstant("},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":"                appointment.getEndTime().value.getTime().toInstant(), ZoneId.systemDefault());"},{"lineNumber":86,"author":{"gitID":"Sisyphus25"},"content":"        String description \u003d appointment.getTitle().value;"},{"lineNumber":87,"author":{"gitID":"Sisyphus25"},"content":"        return new Entry(description, new Interval(ldtstart, ldtend));"},{"lineNumber":88,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":90,"author":{"gitID":"Sisyphus25"},"content":"    //@@author Sisyphus25-reused"},{"lineNumber":91,"author":{"gitID":"Sisyphus25"},"content":"    //Reused from https://github.com/CS2103AUG2017-T17-B2/main with modifications"},{"lineNumber":92,"author":{"gitID":"Sisyphus25"},"content":"    private void setTime() {"},{"lineNumber":93,"author":{"gitID":"Sisyphus25"},"content":"        calendarView.setToday(LocalDate.now());"},{"lineNumber":94,"author":{"gitID":"Sisyphus25"},"content":"        calendarView.setTime(LocalTime.now());"},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":97,"author":{"gitID":"Sisyphus25"},"content":"    @Subscribe"},{"lineNumber":98,"author":{"gitID":"Sisyphus25"},"content":"    private void handleAppointmentListChangedEvent(AppointmentListChangedEvent event) {"},{"lineNumber":99,"author":{"gitID":"Sisyphus25"},"content":"        appointmentList \u003d event.appointmentList;"},{"lineNumber":100,"author":{"gitID":"Sisyphus25"},"content":"        Platform.runLater("},{"lineNumber":101,"author":{"gitID":"Sisyphus25"},"content":"                this::updateCalendar"},{"lineNumber":102,"author":{"gitID":"Sisyphus25"},"content":"        );"},{"lineNumber":103,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":105,"author":{"gitID":"Sisyphus25"},"content":"    @Subscribe"},{"lineNumber":106,"author":{"gitID":"Sisyphus25"},"content":"    private void handleToggleCalendarViewEvent(ToggleCalendarViewEvent event) {"},{"lineNumber":107,"author":{"gitID":"Sisyphus25"},"content":"        Character c \u003d event.viewMode;"},{"lineNumber":108,"author":{"gitID":"Sisyphus25"},"content":"        Platform.runLater(() -\u003e toggleView(c));"},{"lineNumber":109,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":111,"author":{"gitID":"Sisyphus25"},"content":"    public CalendarView getRoot() {"},{"lineNumber":112,"author":{"gitID":"Sisyphus25"},"content":"        return this.calendarView;"},{"lineNumber":113,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":115,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"Sisyphus25"},"content":"     * Remove clutter from interface"},{"lineNumber":117,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"Sisyphus25"},"content":"    private void disableViews() {"},{"lineNumber":119,"author":{"gitID":"Sisyphus25"},"content":"        calendarView.setShowAddCalendarButton(false);"},{"lineNumber":120,"author":{"gitID":"Sisyphus25"},"content":"        calendarView.setShowSearchField(false);"},{"lineNumber":121,"author":{"gitID":"Sisyphus25"},"content":"        calendarView.setShowSearchResultsTray(false);"},{"lineNumber":122,"author":{"gitID":"Sisyphus25"},"content":"        calendarView.setShowPrintButton(false);"},{"lineNumber":123,"author":{"gitID":"Sisyphus25"},"content":"        calendarView.setShowPageSwitcher(false);"},{"lineNumber":124,"author":{"gitID":"Sisyphus25"},"content":"        calendarView.setShowSourceTrayButton(false);"},{"lineNumber":125,"author":{"gitID":"Sisyphus25"},"content":"        calendarView.setShowPageToolBarControls(false);"},{"lineNumber":126,"author":{"gitID":"Sisyphus25"},"content":"        calendarView.setShowToolBar(false);"},{"lineNumber":127,"author":{"gitID":"Sisyphus25"},"content":"        calendarView.setShowSourceTray(false);"},{"lineNumber":128,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":129,"author":{"gitID":"Sisyphus25"},"content":"        calendarView.showDayPage();"},{"lineNumber":130,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":132,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"Sisyphus25"},"content":"     * Changes calendar view accordingly"},{"lineNumber":134,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"Sisyphus25"},"content":"    private void toggleView(Character c) {"},{"lineNumber":136,"author":{"gitID":"Sisyphus25"},"content":"        switch(c) {"},{"lineNumber":137,"author":{"gitID":"Sisyphus25"},"content":"        case (\u0027d\u0027):"},{"lineNumber":138,"author":{"gitID":"Sisyphus25"},"content":"            calendarView.showDayPage();"},{"lineNumber":139,"author":{"gitID":"Sisyphus25"},"content":"            return;"},{"lineNumber":140,"author":{"gitID":"Sisyphus25"},"content":"        case (\u0027w\u0027):"},{"lineNumber":141,"author":{"gitID":"Sisyphus25"},"content":"            calendarView.showWeekPage();"},{"lineNumber":142,"author":{"gitID":"Sisyphus25"},"content":"            return;"},{"lineNumber":143,"author":{"gitID":"Sisyphus25"},"content":"        case (\u0027m\u0027):"},{"lineNumber":144,"author":{"gitID":"Sisyphus25"},"content":"            calendarView.showMonthPage();"},{"lineNumber":145,"author":{"gitID":"Sisyphus25"},"content":"            return;"},{"lineNumber":146,"author":{"gitID":"Sisyphus25"},"content":"        default:"},{"lineNumber":147,"author":{"gitID":"Sisyphus25"},"content":"            //should not reach here"},{"lineNumber":148,"author":{"gitID":"Sisyphus25"},"content":"            assert (false);"},{"lineNumber":149,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":151,"content":"    //@@author"},{"lineNumber":152,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"null":1,"Sisyphus25":146,"-":5}},{"path":"src/main/java/seedu/address/ui/TaskCard.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import java.text.DateFormat;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":" * An UI component that displays information of a {@code Task}."},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"public class TaskCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    private static final String FXML \u003d \"TaskListCard.fxml\";"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"    private static final String DATE_FORMAT \u003d \"EEE, MMMMM dd, HH:mm a\";"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    private static final DateFormat DATE_FORMATTER \u003d new SimpleDateFormat(DATE_FORMAT);"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    public final Task task;"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    private HBox cardPane;"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"    private Label title;"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"    private Label id;"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"    private Label time;"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"    public TaskCard(Task task, int displayedIndex) {"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"        super(FXML);"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        this.task \u003d task;"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"        title.setText(task.getTitle().value);"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"        time.setText(\"Finish before: \" + DATE_FORMATTER.format(task.getTime().value.getTime()));"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"        // short circuit if same object"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"            return true;"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"        // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"        if (!(other instanceof TaskCard)) {"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"            return false;"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"        // state check"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"        TaskCard card \u003d (TaskCard) other;"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 task.equals(card.task);"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":55,"-":4}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.events.ui.ThemeChangeEvent;"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.events.ui.ToggleListEvent;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"    private static final String EXTENSIONS_STYLESHEET \u003d \"view/Extensions.css\";"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"    private static final String TAG_COLOUR_STYLESHEET \u003d \"view/TagColour.css\";"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"    private static final ThemeList THEME_LIST \u003d new ThemeList();"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"    private static final String DEFAULT_THEME \u003d \"light\";"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"    private AppointmentListPanel appointmentListPanel;"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"    private TaskListPanel taskListPanel;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"    private CalendarPanel calendarPanel;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"    private String theme;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"    private StackPane listPanelPlaceholder;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"    @FXML"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"    private StackPane calendarPlaceholder;"},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":"        setTheme();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"Sisyphus25"},"content":"    //@@author Sisyphus25"},{"lineNumber":98,"author":{"gitID":"Sisyphus25"},"content":"    private void setTheme() {"},{"lineNumber":99,"author":{"gitID":"Sisyphus25"},"content":"        setTheme(DEFAULT_THEME);"},{"lineNumber":100,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":102,"author":{"gitID":"Sisyphus25"},"content":"    private void setTheme(String theme) {"},{"lineNumber":103,"author":{"gitID":"Sisyphus25"},"content":"        primaryStage.getScene().getStylesheets().add(EXTENSIONS_STYLESHEET);"},{"lineNumber":104,"author":{"gitID":"Sisyphus25"},"content":"        primaryStage.getScene().getStylesheets().add(TAG_COLOUR_STYLESHEET);"},{"lineNumber":105,"author":{"gitID":"Sisyphus25"},"content":"        primaryStage.getScene().getStylesheets().add(THEME_LIST.getThemeStyleSheet(theme));"},{"lineNumber":106,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":108,"author":{"gitID":"Sisyphus25"},"content":"    @Subscribe"},{"lineNumber":109,"author":{"gitID":"Sisyphus25"},"content":"    private void handleThemeChangeEvent(ThemeChangeEvent event) {"},{"lineNumber":110,"author":{"gitID":"Sisyphus25"},"content":"        theme \u003d event.theme;"},{"lineNumber":111,"author":{"gitID":"Sisyphus25"},"content":"        Platform.runLater("},{"lineNumber":112,"author":{"gitID":"Sisyphus25"},"content":"                this::changeTheme"},{"lineNumber":113,"author":{"gitID":"Sisyphus25"},"content":"        );"},{"lineNumber":114,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":116,"author":{"gitID":"Sisyphus25"},"content":"    private void changeTheme() {"},{"lineNumber":117,"author":{"gitID":"Sisyphus25"},"content":"        primaryStage.getScene().getStylesheets().clear();"},{"lineNumber":118,"author":{"gitID":"Sisyphus25"},"content":"        setTheme(theme);"},{"lineNumber":119,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"Sisyphus25"},"content":"    //@@author"},{"lineNumber":121,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":134,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":135,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":136,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":137,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":138,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":139,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":140,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":141,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":142,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":143,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":144,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":145,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":146,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":147,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":158,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":161,"author":{"gitID":"Sisyphus25"},"content":"        listPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":171,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":172,"author":{"gitID":"Sisyphus25"},"content":"        calendarPanel \u003d new CalendarPanel(logic.getFilteredAppointmentList());"},{"lineNumber":173,"author":{"gitID":"Sisyphus25"},"content":"        calendarPlaceholder.getChildren().add(calendarPanel.getRoot());"},{"lineNumber":174,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":175,"author":{"gitID":"Sisyphus25"},"content":"        appointmentListPanel \u003d new AppointmentListPanel(logic.getFilteredAppointmentList());"},{"lineNumber":176,"author":{"gitID":"Sisyphus25"},"content":"        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":201,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":204,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":209,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":217,"author":{"gitID":"Sisyphus25"},"content":"     * Toggles list"},{"lineNumber":218,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":219,"author":{"gitID":"Sisyphus25"},"content":"    @FXML"},{"lineNumber":220,"author":{"gitID":"Sisyphus25"},"content":"    public void toggleList(String list) {"},{"lineNumber":221,"author":{"gitID":"Sisyphus25"},"content":"        listPanelPlaceholder.getChildren().clear();"},{"lineNumber":222,"author":{"gitID":"Sisyphus25"},"content":"        switch(list) {"},{"lineNumber":223,"author":{"gitID":"Sisyphus25"},"content":"        case \"appointment\":"},{"lineNumber":224,"author":{"gitID":"Sisyphus25"},"content":"            listPanelPlaceholder.getChildren().add(appointmentListPanel.getRoot());"},{"lineNumber":225,"author":{"gitID":"Sisyphus25"},"content":"            break;"},{"lineNumber":226,"author":{"gitID":"Sisyphus25"},"content":"        case \"task\":"},{"lineNumber":227,"author":{"gitID":"Sisyphus25"},"content":"            listPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"},{"lineNumber":228,"author":{"gitID":"Sisyphus25"},"content":"            break;"},{"lineNumber":229,"author":{"gitID":"Sisyphus25"},"content":"        case \"person\":"},{"lineNumber":230,"author":{"gitID":"Sisyphus25"},"content":"        default:"},{"lineNumber":231,"author":{"gitID":"Sisyphus25"},"content":"            listPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":232,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":233,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":234,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":242,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":258,"author":{"gitID":"Sisyphus25"},"content":"    @Subscribe"},{"lineNumber":259,"author":{"gitID":"Sisyphus25"},"content":"    private void handleToggleListEvent(ToggleListEvent event) {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":261,"author":{"gitID":"Sisyphus25"},"content":"        toggleList(event.list);"},{"lineNumber":262,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":77,"-":186}},{"path":"src/main/java/seedu/address/ui/TaskListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":16,"content":"//@@author Sisyphus24"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":" * Panel containing the list of tasks."},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"public class TaskListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    private static final String FXML \u003d \"TaskListPanel.fxml\";"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    private ListView\u003cTaskCard\u003e taskListView;"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    public TaskListPanel(ObservableList\u003cTask\u003e taskList) {"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"        super(FXML);"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        setConnections(taskList);"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"    private void setConnections(ObservableList\u003cTask\u003e taskList) {"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"        ObservableList\u003cTaskCard\u003e mappedList \u003d EasyBind.map(taskList, (task) -\u003e"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"                new TaskCard(task, taskList.indexOf(task) + 1));"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        taskListView.setItems(mappedList);"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code TaskCard}."},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"    class TaskListViewCell extends ListCell\u003cTaskCard\u003e {"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"        @Override"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"        protected void updateItem(TaskCard task, boolean empty) {"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"            super.updateItem(task, empty);"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"            if (empty || task \u003d\u003d null) {"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"                setGraphic(null);"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"                setText(null);"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"            } else {"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"                setGraphic(task.getRoot());"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"            }"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"null":1,"Sisyphus25":46,"-":11}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"content":"    //@@author"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"        initTags(person);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"content":"    //@@author Sisyphus25-reused"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"    //Reused from https://github.com/se-edu/addressbook-level4/pull/798/commits/167b3d0b4f7ad34296d2fbf505f9ae71f983f53c"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"     * Returns the color style for {@code tagName}\u0027s label."},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"    private void initTags(Person person) {"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"            tagLabel.getStyleClass().add(tag.tagColorStyle);"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"        });"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":67,"content":"    //@@author"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":3,"Sisyphus25":13,"-":69}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_INVALID_EVENT_DISPLAYED_INDEX \u003d \"The event index provided is invalid\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":1,"-":12}},{"path":"src/main/java/seedu/address/commons/core/Config.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Config values used by the app"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Config {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":"    private String appTitle \u003d \"TeachConnect\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return appTitle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return logLevel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        sb.append(\"App title : \" + appTitle);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        sb.append(\"\\nCurrent log level : \" + logLevel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":71,"shanmu9898":1}},{"path":"src/main/java/seedu/address/ui/AppointmentListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":" * Panel containing the list of appointments."},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"public class AppointmentListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    private static final String FXML \u003d \"AppointmentListPanel.fxml\";"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(AppointmentListPanel.class);"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    private ListView\u003cAppointmentCard\u003e appointmentListView;"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    public AppointmentListPanel(ObservableList\u003cAppointment\u003e appointmentList) {"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"        super(FXML);"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        setConnections(appointmentList);"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"    private void setConnections(ObservableList\u003cAppointment\u003e appointmentList) {"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"        ObservableList\u003cAppointmentCard\u003e mappedList \u003d EasyBind.map(appointmentList, (appointment) -\u003e"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"                        new AppointmentCard(appointment, appointmentList.indexOf(appointment) + 1));"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        appointmentListView.setItems(mappedList);"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"        appointmentListView.setCellFactory(listView -\u003e new AppointmentListViewCell());"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code AppointmentCard}."},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"    class AppointmentListViewCell extends ListCell\u003cAppointmentCard\u003e {"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"        @Override"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"        protected void updateItem(AppointmentCard appointment, boolean empty) {"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"            super.updateItem(appointment, empty);"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"            if (empty || appointment \u003d\u003d null) {"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"                setGraphic(null);"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"                setText(null);"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"            } else {"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"                setGraphic(appointment.getRoot());"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"            }"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":47,"-":11}},{"path":"src/main/java/seedu/address/commons/events/model/AddressBookChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/** Indicates the AddressBook in the model has changed*/"},{"lineNumber":7,"author":{"gitID":"-"},"content":"public class AddressBookChangedEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public final ReadOnlyAddressBook data;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public AddressBookChangedEvent(ReadOnlyAddressBook data) {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        this.data \u003d data;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"        return \"number of persons \" + data.getPersonList().size() + \", number of tags \""},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"                + data.getTagList().size() + \", number of events \" + data.getAppointmentList().size();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":2,"-":18}},{"path":"src/main/java/seedu/address/commons/events/ui/ThemeChangeEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":" * Indicates a request to change them"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"public class ThemeChangeEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"    public final String theme;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"    public ThemeChangeEvent(String theme) {"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"        this.theme \u003d theme;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":16,"-":4}},{"path":"src/main/java/seedu/address/commons/events/ui/ToggleCalendarViewEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":" * Indicates a request to toggle Calendar view mode"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"public class ToggleCalendarViewEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"    public final Character viewMode;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"    public ToggleCalendarViewEvent(Character viewMode) {"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"        this.viewMode \u003d viewMode;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":16,"-":4}},{"path":"src/main/java/seedu/address/ui/AppointmentCard.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import java.text.DateFormat;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":" * An UI component that displays information of a {@code Appointment}."},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"public class AppointmentCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    private static final String FXML \u003d \"AppointmentListCard.fxml\";"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"    private static final String DATE_FORMAT \u003d \"EEE, MMMMM dd, HH:mm a\";"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    private static final DateFormat DATE_FORMATTER \u003d new SimpleDateFormat(DATE_FORMAT);"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    public final Appointment appointment;"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    private HBox cardPane;"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"    private Label title;"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"    private Label id;"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"    private Label time;"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"    private Label endTime;"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"    private Label personToMeet;"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"    public AppointmentCard(Appointment appointment, int displayedIndex) {"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"        super(FXML);"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"        this.appointment \u003d appointment;"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"        title.setText(appointment.getTitle().value);"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"        time.setText(\"From: \" + DATE_FORMATTER.format(appointment.getTime().value.getTime()));"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"        endTime.setText(\"To: \" + DATE_FORMATTER.format(appointment.getEndTime().value.getTime()));"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"        if (appointment.getPersonToMeet() !\u003d null) {"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"            personToMeet.setText(\"With \" + appointment.getPersonToMeet().getName());"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"        } else {"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"            personToMeet.setText(\"\");"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"        // short circuit if same object"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"            return true;"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"        // instanceof handles nulls"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"        if (!(other instanceof AppointmentCard)) {"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"            return false;"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"        // state check"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"        AppointmentCard card \u003d (AppointmentCard) other;"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 appointment.equals(card.appointment);"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":65,"-":4}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    /** Returns an unmodifiable view of the filtered list of appointments */"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"    /** Returns an unmodifiable view of the filtered list of tasks */"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"    ObservableList\u003cTask\u003e getFilteredTaskList();"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"    /** Returns the item type of the current active list that is shown in the GUI by the address book*/"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"    String getCurrentActiveListType();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":11,"-":27}},{"path":"src/main/java/seedu/address/commons/events/ui/ToggleListEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":" * Indicates a request to toggle List"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"public class ToggleListEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"    public final String list;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"    public ToggleListEvent(String list) {"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"        this.list \u003d list;"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":21}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":21,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"randypx"},"content":"    public static final String MESSAGE_INVALID_TYPE \u003d \"Type must be student or defualt(empty).\";"},{"lineNumber":30,"author":{"gitID":"randypx"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"randypx"},"content":"        String[] preambleArgs \u003d argMultimap.getPreamble().split(\" \");"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"},{"lineNumber":42,"author":{"gitID":"randypx"},"content":"                || preambleArgs.length \u003e 1) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"randypx"},"content":"            switch (preambleArgs[0]) {"},{"lineNumber":54,"author":{"gitID":"randypx"},"content":"            case \"\":"},{"lineNumber":55,"author":{"gitID":"randypx"},"content":"                return new AddCommand(new Person(name, phone, email, address, tagList));"},{"lineNumber":56,"author":{"gitID":"randypx"},"content":""},{"lineNumber":57,"author":{"gitID":"randypx"},"content":"            case \"student\":"},{"lineNumber":58,"author":{"gitID":"randypx"},"content":"                return new AddCommand(new Student(name, phone, email, address, tagList));"},{"lineNumber":59,"author":{"gitID":"randypx"},"content":""},{"lineNumber":60,"author":{"gitID":"randypx"},"content":"            default:"},{"lineNumber":61,"author":{"gitID":"randypx"},"content":"                throw new IllegalValueException(MESSAGE_INVALID_TYPE);"},{"lineNumber":62,"author":{"gitID":"randypx"},"content":"            }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"randypx":15,"-":62}},{"path":"src/main/java/seedu/address/commons/events/model/AppointmentListChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":" * Indicates the appointment list has changed"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"public class AppointmentListChangedEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"    public final ObservableList\u003cAppointment\u003e appointmentList;"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"    public AppointmentListChangedEvent(ObservableList\u003cAppointment\u003e appointmentList) {"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"        this.appointmentList \u003d appointmentList;"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":21,"-":1}},{"path":"src/main/java/seedu/address/logic/parser/ImportCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.commands.ImportCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":" * Parses input arguments and creates a new ImportCommand object"},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":" */"},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":"public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":"     * Parses the given {@code String} of arguments in the context of the ImportCommand"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"     * and returns an ImportCommand object for execution."},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"    public ImportCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(args);"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"        String[] parameterGetterArray \u003d trimmedArgs.split(\" \");"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"        if (parameterGetterArray.length !\u003d 1) {"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"            throw new ParseException("},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":"        } else {"},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":"            return new ImportCommand(parameterGetterArray[0]);"},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"-":4,"shanmu9898":37}},{"path":"src/main/java/seedu/address/logic/parser/ToggleCalendarViewParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.ToggleCalendarViewCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":" * Parser for ToggleCalendarViewCommand"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"public class ToggleCalendarViewParser implements Parser\u003cToggleCalendarViewCommand\u003e {"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"     * Parses the given {@code viewMode} of arguments in the context of the ToggleCalendarViewParser"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"     * and returns an ToggleCalendarViewCommand object for execution."},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    public ToggleCalendarViewCommand parse(String args) throws ParseException {"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"        String viewMode \u003d args.trim();"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"        if (viewMode.isEmpty() || !isValidViewMode(viewMode)) {"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"                    ToggleCalendarViewCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"        return new ToggleCalendarViewCommand(viewMode.charAt(0));"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"     * @param str"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"     * @return whether if the string is a valid view mode or not"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"    private boolean isValidViewMode(String str) {"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"        if (str.length() !\u003d 1) {"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"            return false;"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        switch (str.charAt(0)) {"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"        case(\u0027w\u0027):"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"        case(\u0027d\u0027):"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"        case(\u0027m\u0027):"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"            return true;"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"        default:"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"            return false;"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":40,"-":4,"shanmu9898":1}},{"path":"src/main/java/seedu/address/logic/parser/DeleteShortcutCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.commands.DeleteShortcutCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":" * Parses input arguments and creates a new DeleteShortcutCommand object"},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":" */"},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":"public class DeleteShortcutCommandParser implements Parser\u003cDeleteShortcutCommand\u003e {"},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteShortcutCommand"},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":"     * and returns a DeleteShortcutCommand object for execution."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"    public DeleteShortcutCommand parse(String args) throws ParseException {"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(args);"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"        String[] splitWords \u003d trimmedArgs.split(\" \");"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"        if (splitWords.length \u003e 2 || splitWords.length \u003c 2) {"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteShortcutCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"        } else {"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"            return new DeleteShortcutCommand(splitWords[0], splitWords[1]);"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"-":5,"shanmu9898":25}},{"path":"src/main/java/seedu/address/logic/parser/ExportCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PATH;"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RANGE;"},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_EXPORT;"},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":"import java.util.stream.Stream;"},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.commands.ExportCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":" * Parses input arguments and creates a new ExportCommand object"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":" */"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":"     * Parses the given {@code String} of arguments in the context of the ExportCommand"},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"     * and returns an ExportCommand object for execution."},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"    public ExportCommand parse(String args) throws ParseException {"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(args);"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"        ArgumentMultimap argMultiMap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_RANGE,"},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"                PREFIX_TAG_EXPORT, PREFIX_PATH);"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":"        String[] preambleArgs \u003d argMultiMap.getPreamble().split(\" \");"},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":"        if (!arePrefixesPresent(argMultiMap, PREFIX_NAME, PREFIX_RANGE, PREFIX_PATH)"},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":"                || preambleArgs.length \u003e 1) {"},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"        String name \u003d argMultiMap.getValue(PREFIX_NAME).orElse(\"\");"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"        String range \u003d argMultiMap.getValue(PREFIX_RANGE).orElse(\"all\");"},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":"        String tag \u003d argMultiMap.getValue(PREFIX_TAG_EXPORT).orElse(\"shouldnotbethistag\");"},{"lineNumber":43,"author":{"gitID":"shanmu9898"},"content":"        String path \u003d argMultiMap.getValue(PREFIX_PATH).orElse(\"\");"},{"lineNumber":44,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":"        Tag tagExport \u003d new Tag(tag);"},{"lineNumber":46,"author":{"gitID":"shanmu9898"},"content":"        return new ExportCommand(range, tagExport, path, name);"},{"lineNumber":47,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":51,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"shanmu9898"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":53,"author":{"gitID":"shanmu9898"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":54,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"shanmu9898"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":56,"author":{"gitID":"shanmu9898"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":57,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":59,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":60,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":61,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"-":4,"shanmu9898":57}},{"path":"src/main/java/seedu/address/logic/parser/SetAppointmentCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_TO_MEET_INDEX;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import java.util.stream.Stream;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.SetAppointmentCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.EventTime;"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Title;"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":" * Parses input arguments and creates a new SetAppointmentCommand object"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"public class SetAppointmentCommandParser implements Parser\u003cSetAppointmentCommand\u003e {"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"     * Parses the given {@code String} of arguments in the context of the SetAppointmentCommand"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"     * and returns a SetAppointmentCommand object for execution."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"    public SetAppointmentCommand parse(String args) throws ParseException {"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_START_TIME,"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"                        PREFIX_END_TIME, PREFIX_PERSON_TO_MEET_INDEX);"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_START_TIME, PREFIX_END_TIME)"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"                    SetAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"            Index index \u003d null;"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"            Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE)).get();"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"            EventTime startTime \u003d ParserUtil.parseEventTime(argMultimap.getValue(PREFIX_START_TIME)).get();"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"            EventTime endTime \u003d ParserUtil.parseEventTime(argMultimap.getValue(PREFIX_END_TIME)).get();"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"            Optional\u003cIndex\u003e optionalIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PERSON_TO_MEET_INDEX));"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"            if (optionalIndex.isPresent()) {"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"                index \u003d optionalIndex.get();"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"            }"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"            Appointment appointment \u003d new Appointment(title, startTime, endTime);"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"            return new SetAppointmentCommand(appointment, index);"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"        } catch (IllegalValueException | IllegalArgumentException ive) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":47,"-":18}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.commands.DeleteShortcutCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.commands.ExportCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.commands.ImportCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.RemoveCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.SetAppointmentCommand;"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.SetTaskCommand;"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.commands.ShortcutCommand;"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.ToggleCalendarViewCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.ShortcutDoubles;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":44,"author":{"gitID":"shanmu9898"},"content":"    private List\u003cShortcutDoubles\u003e shortcutDoubles;"},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":46,"author":{"gitID":"shanmu9898"},"content":"    public AddressBookParser(List\u003cShortcutDoubles\u003e shortcutDoubles) {"},{"lineNumber":47,"author":{"gitID":"shanmu9898"},"content":"        this.shortcutDoubles \u003d shortcutDoubles;"},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":"    public AddressBookParser(){}"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException  {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":60,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":61,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":67,"author":{"gitID":"shanmu9898"},"content":"        String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":69,"author":{"gitID":"shanmu9898"},"content":"        if (shortcutDoubles !\u003d null) {"},{"lineNumber":70,"author":{"gitID":"shanmu9898"},"content":"            for (ShortcutDoubles s : shortcutDoubles) {"},{"lineNumber":71,"author":{"gitID":"shanmu9898"},"content":"                if (s.shortcutWord.equals(commandWord)) {"},{"lineNumber":72,"author":{"gitID":"shanmu9898"},"content":"                    commandWord \u003d s.commandWord;"},{"lineNumber":73,"author":{"gitID":"shanmu9898"},"content":"                }"},{"lineNumber":74,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":75,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":98,"author":{"gitID":"Sisyphus25"},"content":"            return new ListCommandParser().parse(arguments);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"Sisyphus25"},"content":"        case SetAppointmentCommand.COMMAND_WORD:"},{"lineNumber":116,"author":{"gitID":"Sisyphus25"},"content":"            return new SetAppointmentCommandParser().parse(arguments);"},{"lineNumber":117,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":118,"author":{"gitID":"Sisyphus25"},"content":"        case SetTaskCommand.COMMAND_WORD:"},{"lineNumber":119,"author":{"gitID":"Sisyphus25"},"content":"            return new SetTaskCommandParser().parse(arguments);"},{"lineNumber":120,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":121,"author":{"gitID":"shanmu9898"},"content":"        case ImportCommand.COMMAND_WORD:"},{"lineNumber":122,"author":{"gitID":"shanmu9898"},"content":"            return new ImportCommandParser().parse(arguments);"},{"lineNumber":123,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":124,"author":{"gitID":"shanmu9898"},"content":"        case ExportCommand.COMMAND_WORD:"},{"lineNumber":125,"author":{"gitID":"shanmu9898"},"content":"            return new ExportCommandParser().parse(arguments);"},{"lineNumber":126,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":127,"author":{"gitID":"shanmu9898"},"content":"        case ShortcutCommand.COMMAND_WORD:"},{"lineNumber":128,"author":{"gitID":"shanmu9898"},"content":"            return new ShortcutCommandParser().parse(arguments);"},{"lineNumber":129,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":130,"author":{"gitID":"Sisyphus25"},"content":"        case ToggleCalendarViewCommand.COMMAND_WORD:"},{"lineNumber":131,"author":{"gitID":"Sisyphus25"},"content":"            return new ToggleCalendarViewParser().parse(arguments);"},{"lineNumber":132,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":133,"author":{"gitID":"Sisyphus25"},"content":"        case ChangeThemeCommand.COMMAND_WORD:"},{"lineNumber":134,"author":{"gitID":"Sisyphus25"},"content":"            return new ChangeThemeCommandParser().parse(arguments);"},{"lineNumber":135,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":136,"author":{"gitID":"Sisyphus25"},"content":"        case RemoveCommand.COMMAND_WORD:"},{"lineNumber":137,"author":{"gitID":"Sisyphus25"},"content":"            return new RemoveCommandParser().parse(arguments);"},{"lineNumber":138,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":139,"author":{"gitID":"shanmu9898"},"content":"        case DeleteShortcutCommand.COMMAND_WORD:"},{"lineNumber":140,"author":{"gitID":"shanmu9898"},"content":"            return new DeleteShortcutCommandParser().parse(arguments);"},{"lineNumber":141,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":148,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":22,"-":90,"shanmu9898":37}},{"path":"src/main/java/seedu/address/logic/parser/RemoveCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.RemoveCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":" * Parses input arguments and creates a new RemoveCommand object"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"public class RemoveCommandParser implements Parser\u003cRemoveCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"     * Parses the given {@code String} of arguments in the context of the RemoveCommand"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"     * and returns an RemoveCommand object for execution."},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"    public RemoveCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(args);"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"        String[] parameterGetterArray \u003d trimmedArgs.split(\" \");"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"        if (trimmedArgs.isEmpty() || parameterGetterArray.length !\u003d 2) {"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"            throw new ParseException("},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"        try {"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"            if (!isValidEventType(parameterGetterArray[0])) {"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"                throw new IllegalValueException(\"Invalid event type\");"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"            }"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"            Index index \u003d ParserUtil.parseIndex(parameterGetterArray[1]);"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"            return new RemoveCommand(index, parameterGetterArray[0]);"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"            throw new ParseException("},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"    private boolean isValidEventType(String type) {"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"        return type.equals(\"appointment\") || type.equals(\"task\");"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"}"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":""}],"authorContributionMap":{"Sisyphus25":39,"-":8,"shanmu9898":1}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"t/\");"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"    public static final Prefix PREFIX_START_TIME \u003d new Prefix(\"s/\");"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    public static final Prefix PREFIX_END_TIME \u003d new Prefix(\"e/\");"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    public static final Prefix PREFIX_PERSON_TO_MEET_INDEX \u003d new Prefix(\"i/\");"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"    public static final Prefix PREFIX_PATH \u003d new Prefix(\"p/\");"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"    public static final Prefix PREFIX_TAG_EXPORT \u003d new Prefix(\"t/\");"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"    public static final Prefix PREFIX_RANGE \u003d new Prefix(\"r/\");"},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":4,"-":14,"shanmu9898":3}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.EventTime;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Title;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":23,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"    public static final String[] THEME_LIST \u003d {\"dark\", \"light\", \"doge\"};"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"     * Parses a {@code Optional\u003cString\u003e onebasedIndex} into an {@code Optional\u003cIndex\u003e}"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"     * if {@code onebasedIndex} is present."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"    public static Optional\u003cIndex\u003e parseIndex(Optional\u003cString\u003e oneBasedIndex) throws IllegalValueException {"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(oneBasedIndex);"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"        return oneBasedIndex.isPresent() ? Optional.of(parseIndex(oneBasedIndex.get())) : Optional.empty();"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"Sisyphus25"},"content":"    //@@author Sisyphus25"},{"lineNumber":156,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"Sisyphus25"},"content":"     * Parses a {@code Optional\u003cString\u003e title} into an {@code Optional\u003cTitle\u003e} if {@code title} is present."},{"lineNumber":158,"author":{"gitID":"Sisyphus25"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":159,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"Sisyphus25"},"content":"    public static Optional\u003cTitle\u003e parseTitle(Optional\u003cString\u003e title) throws IllegalValueException {"},{"lineNumber":161,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(title);"},{"lineNumber":162,"author":{"gitID":"Sisyphus25"},"content":"        return title.isPresent() ? Optional.of(parseTitle(title.get())) : Optional.empty();"},{"lineNumber":163,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":165,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"Sisyphus25"},"content":"     * Parses a {@code String title} into a {@code Title}."},{"lineNumber":167,"author":{"gitID":"Sisyphus25"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":168,"author":{"gitID":"Sisyphus25"},"content":"     *"},{"lineNumber":169,"author":{"gitID":"Sisyphus25"},"content":"     * @throws IllegalValueException if the given {@code title} is invalid."},{"lineNumber":170,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"Sisyphus25"},"content":"    public static Title parseTitle(String title) throws IllegalValueException {"},{"lineNumber":172,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(title);"},{"lineNumber":173,"author":{"gitID":"Sisyphus25"},"content":"        String trimmedTitle \u003d title.trim();"},{"lineNumber":174,"author":{"gitID":"Sisyphus25"},"content":"        if (!Title.isValidTitle(trimmedTitle)) {"},{"lineNumber":175,"author":{"gitID":"Sisyphus25"},"content":"            throw new IllegalValueException(Title.MESSAGE_TITLE_CONSTRAINTS);"},{"lineNumber":176,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"Sisyphus25"},"content":"        return new Title(trimmedTitle);"},{"lineNumber":178,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":180,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"Sisyphus25"},"content":"     * Parses a {@code Optional\u003cString\u003e eventTime} into an {@code Optional\u003cEventTime\u003e} if {@code eventTime} is present."},{"lineNumber":182,"author":{"gitID":"Sisyphus25"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":183,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"Sisyphus25"},"content":"    public static Optional\u003cEventTime\u003e parseEventTime(Optional\u003cString\u003e eventTime) throws IllegalArgumentException {"},{"lineNumber":185,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(eventTime);"},{"lineNumber":186,"author":{"gitID":"Sisyphus25"},"content":"        return eventTime.isPresent() ? Optional.of(parseEventTime(eventTime.get())) : Optional.empty();"},{"lineNumber":187,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":189,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"Sisyphus25"},"content":"     * Parses a {@code String eventTime} into a {@code EventTime}."},{"lineNumber":191,"author":{"gitID":"Sisyphus25"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":192,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"Sisyphus25"},"content":"    public static EventTime parseEventTime(String eventTime) throws IllegalArgumentException {"},{"lineNumber":194,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(eventTime);"},{"lineNumber":195,"author":{"gitID":"Sisyphus25"},"content":"        String trimmedEventTime \u003d eventTime.trim();"},{"lineNumber":196,"author":{"gitID":"Sisyphus25"},"content":"        return new EventTime(trimmedEventTime);"},{"lineNumber":197,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":199,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":200,"author":{"gitID":"Sisyphus25"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":201,"author":{"gitID":"Sisyphus25"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":202,"author":{"gitID":"Sisyphus25"},"content":"     *"},{"lineNumber":203,"author":{"gitID":"Sisyphus25"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":204,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":205,"author":{"gitID":"Sisyphus25"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":206,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(tag);"},{"lineNumber":207,"author":{"gitID":"Sisyphus25"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":208,"author":{"gitID":"Sisyphus25"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":209,"author":{"gitID":"Sisyphus25"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_NAME_CONSTRAINTS);"},{"lineNumber":210,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"Sisyphus25"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":212,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":214,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":215,"author":{"gitID":"Sisyphus25"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":216,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":217,"author":{"gitID":"Sisyphus25"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":218,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(tags);"},{"lineNumber":219,"author":{"gitID":"Sisyphus25"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":220,"author":{"gitID":"Sisyphus25"},"content":"        for (String tagName : tags) {"},{"lineNumber":221,"author":{"gitID":"Sisyphus25"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":222,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"Sisyphus25"},"content":"        return tagSet;"},{"lineNumber":224,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":82,"-":143}},{"path":"src/main/java/seedu/address/logic/parser/ShortcutCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.commands.ShortcutCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":" * Parser"},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":" */"},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":"public class ShortcutCommandParser implements Parser\u003cShortcutCommand\u003e {"},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":"     * Parses the given {@code String} of arguments in the context of the ShortcutCommand"},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"     * and returns an ShortcutCommand object for execution."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"    public ShortcutCommand parse(String args) throws ParseException {"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(args);"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"        String[] splitWords \u003d trimmedArgs.split(\" \");"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"        if (splitWords.length \u003e 2 || splitWords.length \u003c 2) {"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"            throw new ParseException("},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShortcutCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"        } else {"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"            return new ShortcutCommand(splitWords[0], splitWords[1]);"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"Sisyphus25":1,"-":5,"shanmu9898":23}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Deletes a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \": Deletes the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Person personToDelete;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        requireNonNull(personToDelete);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteCommand) other).personToDelete));"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":1,"-":66}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"randypx"},"content":""},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.events.ui.ToggleListEvent;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Item List Changed\";"},{"lineNumber":17,"author":{"gitID":"randypx"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Show listing of item selected. \\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"            + \"Parameter: ITEM\\n\""},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \"Item list: person, appointments\\n\""},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"            + \"Example: \" + COMMAND_WORD + \" appointment\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private String item;"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public ListCommand(String item) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.item \u003d item;"},{"lineNumber":27,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"randypx"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        switch(item) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        case(\"appointment\"):"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        case(\"task\"):"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            model.changeCurrentActiveListType(item);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            EventsCenter.getInstance().post(new ToggleListEvent(item));"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        case(\"person\"):"},{"lineNumber":38,"author":{"gitID":"randypx"},"content":"        default:"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            model.changeCurrentActiveListType(item);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            EventsCenter.getInstance().post(new ToggleListEvent(model.LIST_TYPE_PERSON));"},{"lineNumber":42,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"                || (other instanceof ListCommand // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.item.equals(((ListCommand) other).item)); // state check"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":12,"randypx":6,"-":34}},{"path":"src/main/java/seedu/address/logic/parser/ChangeThemeCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.ParserUtil.THEME_LIST;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":" * Parses input arguments and creates a new ChangeThemeCommand object"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"public class ChangeThemeCommandParser implements Parser\u003cChangeThemeCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"     * Parses the given {@code viewMode} of arguments in the context of the ChangeThemeCommandParser"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"     * and returns an ChangeThemeCommand object for execution."},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    public ChangeThemeCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"        String theme \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"        if (!isValidTheme(theme)) {"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"                    ChangeThemeCommand.MESSAGE_INVALID_THEME));"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"        return new ChangeThemeCommand(theme);"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"     * @param theme"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"     * @return whether if {@code theme} is a valid theme name"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"    private boolean isValidTheme(String theme) {"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        return !theme.isEmpty() \u0026\u0026 Arrays.asList(THEME_LIST).contains(theme);"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":33,"-":4,"shanmu9898":1}},{"path":"src/main/java/seedu/address/logic/parser/SetTaskCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.SetTaskCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.EventTime;"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Title;"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":" * Parses input arguments and creates a new SetTaskCommand object"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"public class SetTaskCommandParser implements Parser\u003cSetTaskCommand\u003e {"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"     * Parses the given {@code String} of arguments in the context of the SetTaskCommand"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"     * and returns a SetTaskCommand object for execution."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    public SetTaskCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_END_TIME);"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_END_TIME)"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"                    SetTaskCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        try {"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"            Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE)).get();"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"            EventTime time \u003d ParserUtil.parseEventTime(argMultimap.getValue(PREFIX_END_TIME)).get();"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"            Task task \u003d new Task(title, time);"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"            return new SetTaskCommand(task);"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"        } catch (IllegalValueException | IllegalArgumentException ive) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":34,"-":22}},{"path":"src/main/java/seedu/address/logic/parser/ListCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":" * Parser for ListCommand"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"public class ListCommandParser implements Parser\u003cListCommand\u003e {"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"     * Parses the given {@code args} of arguments in the context of the ListCommandParser"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"     * and returns an ListCommand object for execution."},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    public ListCommand parse(String args) throws ParseException {"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"        String item \u003d args.trim();"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"        if (!isValidItem(item)) {"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"                    ListCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"        return new ListCommand(item);"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"     * @param str"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"     * @return whether if the string is a valid view mode or not"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"    private boolean isValidItem(String str) {"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"        if (str.isEmpty()) {"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"            return true;"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"        switch (str) {"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        case(\"appointment\"):"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"        case(\"task\"):"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"        case(\"person\"):"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"            return true;"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"        default:"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"            return false;"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":38,"-":5,"shanmu9898":1}},{"path":"src/main/java/seedu/address/logic/commands/DeleteShortcutCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.ShortcutDoubles;"},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.UniqueShortcutDoublesList;"},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":" * Deletes a specific shortcut from the addressbook."},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":" */"},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":"public class DeleteShortcutCommand extends UndoableCommand {"},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"    public static final String COMMAND_WORD \u003d \"delete_shortcut\";"},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" CommandWord \" + \" ShortcutWord \""},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"                                               + \" :Deletes a shortcut for any command word\";"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"    public static final String MESSAGE_DELETE_SHORTCUT_SUCCESS \u003d \"The shortcut has been deleted!\";"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"    private final String shortcutWord;"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"    private final String commandWord;"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"    private ShortcutDoubles commandShortcut;"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"    public DeleteShortcutCommand(String commandWord, String shortcutWord) {"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(commandWord);"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(shortcutWord);"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"        this.commandWord \u003d commandWord;"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"        this.shortcutWord \u003d shortcutWord;"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"        commandShortcut \u003d new ShortcutDoubles(shortcutWord, commandWord);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(commandShortcut);"},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":"            model.deleteCommandShortcut(commandShortcut);"},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":"        } catch (UniqueShortcutDoublesList.CommandShortcutNotFoundException csnf) {"},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"            throw new CommandException(\"Please enter a valid Shortcut Command you have saved\");"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":43,"author":{"gitID":"shanmu9898"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_SHORTCUT_SUCCESS));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":"                || (other instanceof DeleteShortcutCommand // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":"                \u0026\u0026 this.shortcutWord.equals(((DeleteShortcutCommand) other).shortcutWord) // state check"},{"lineNumber":51,"author":{"gitID":"shanmu9898"},"content":"                \u0026\u0026 this.commandWord.equals(((DeleteShortcutCommand) other).commandWord) // state check"},{"lineNumber":52,"author":{"gitID":"shanmu9898"},"content":"                \u0026\u0026 Objects.equals(this.commandShortcut, ((DeleteShortcutCommand) other).commandShortcut));"},{"lineNumber":53,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"-":14,"shanmu9898":40}},{"path":"src/main/java/seedu/address/logic/commands/ToggleCalendarViewCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.events.ui.ToggleCalendarViewEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":" * Command to change calendar view"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"public class ToggleCalendarViewCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"    public static final String COMMAND_WORD \u003d \"calendar\";"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Toggles calendar view. \\n\""},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"            + \"Parameter: VIEW_MODE\\n\""},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"            + \"View mode: Day view: d, Week view: w, Month view: m\\n\""},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"            + \"Example: \" + COMMAND_WORD + \" d\";"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_VIEW_TOGGLE_SUCCESS \u003d \"View changed.\";"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"    private Character viewMode;"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    public ToggleCalendarViewCommand(Character viewMode) {"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(viewMode);"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"        this.viewMode \u003d viewMode;"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"        EventsCenter.getInstance().post(new ToggleCalendarViewEvent(viewMode));"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"        return new CommandResult(MESSAGE_VIEW_TOGGLE_SUCCESS);"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"                || (other instanceof ToggleCalendarViewCommand // instanceof handles nulls"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 this.viewMode \u003d\u003d ((ToggleCalendarViewCommand) other).viewMode); // state check"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":39,"-":3}},{"path":"src/main/java/seedu/address/logic/commands/ExportCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PATH;"},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RANGE;"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_EXPORT;"},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":" *"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":" * Exports people to an XML file of choice based on tag, index or range"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":" */"},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"public class ExportCommand extends Command {"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"    public static final String MESSAGE_FAIL \u003d \"TeachConnect faced some error while exporting! Please try again!\";"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"    public static final String MESSAGE_OUT_OF_BOUNDS \u003d \"Please check the index bounds!\";"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Contacts have been successfully exported!\";"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"    public static final String MESSAGE_RANGE_ERROR \u003d \"Please input valid range\";"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"    public static final String COMMAND_WORD \u003d \"export\";"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": exports contacts to the TeachConnect Book based \""},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":"            + \"on index, range or tag \\n\""},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":"            + \"Parameters: \""},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":"            + \" [TYPE] \""},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":"            + PREFIX_NAME + \" NAME \""},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":"            + PREFIX_RANGE + \" RANGE \""},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"            + PREFIX_TAG_EXPORT + \" TAG \""},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"            + PREFIX_PATH + \" PATH \\n\""},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":"            + \"Example 1: \" + COMMAND_WORD + \" \" + PREFIX_NAME + \"Exportfile \" + PREFIX_RANGE + \"all \""},{"lineNumber":43,"author":{"gitID":"shanmu9898"},"content":"            + PREFIX_TAG_EXPORT + \" friends \" + PREFIX_PATH + \"/src/main/data \\n\""},{"lineNumber":44,"author":{"gitID":"shanmu9898"},"content":"            + \"Example 2: \" + COMMAND_WORD + \" \" + PREFIX_NAME + \"Exportfile \" + PREFIX_RANGE + \"1 \""},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":"            + PREFIX_TAG_EXPORT + \" friends \" + PREFIX_PATH + \"/src/main/data \\n\""},{"lineNumber":46,"author":{"gitID":"shanmu9898"},"content":"            + \"Example 3: \" + COMMAND_WORD + \" \" + PREFIX_NAME + \"Exportfile \" + PREFIX_RANGE + \"1,2 \""},{"lineNumber":47,"author":{"gitID":"shanmu9898"},"content":"            + PREFIX_TAG_EXPORT + \" friends \" + PREFIX_PATH + \"/src/main/data\";"},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":"    private Tag tag;"},{"lineNumber":51,"author":{"gitID":"shanmu9898"},"content":"    private final String range;"},{"lineNumber":52,"author":{"gitID":"shanmu9898"},"content":"    private final String path;"},{"lineNumber":53,"author":{"gitID":"shanmu9898"},"content":"    private AddressBook teachConnectBook;"},{"lineNumber":54,"author":{"gitID":"shanmu9898"},"content":"    private AddressBookStorage teachConnectStorage;"},{"lineNumber":55,"author":{"gitID":"shanmu9898"},"content":"    private final String nameOfExportFile;"},{"lineNumber":56,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":57,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"shanmu9898"},"content":"     * Creates an ExportCommand to export the specified {@code Persons}"},{"lineNumber":59,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"shanmu9898"},"content":"    public ExportCommand(String range, Tag tag, String path, String nameOfExportFile) {"},{"lineNumber":61,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(range);"},{"lineNumber":62,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(tag);"},{"lineNumber":63,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(path);"},{"lineNumber":64,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(nameOfExportFile);"},{"lineNumber":65,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":66,"author":{"gitID":"shanmu9898"},"content":"        this.range \u003d range;"},{"lineNumber":67,"author":{"gitID":"shanmu9898"},"content":"        this.path \u003d path;"},{"lineNumber":68,"author":{"gitID":"shanmu9898"},"content":"        this.tag \u003d tag;"},{"lineNumber":69,"author":{"gitID":"shanmu9898"},"content":"        this.nameOfExportFile \u003d nameOfExportFile;"},{"lineNumber":70,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":71,"author":{"gitID":"shanmu9898"},"content":"        teachConnectBook \u003d new AddressBook();"},{"lineNumber":72,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":74,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"shanmu9898"},"content":"    public CommandResult execute() {"},{"lineNumber":76,"author":{"gitID":"shanmu9898"},"content":"        String[] rangeGiven;"},{"lineNumber":77,"author":{"gitID":"shanmu9898"},"content":"        try {"},{"lineNumber":78,"author":{"gitID":"shanmu9898"},"content":"            rangeGiven \u003d handleRange();"},{"lineNumber":79,"author":{"gitID":"shanmu9898"},"content":"        } catch (IOException e) {"},{"lineNumber":80,"author":{"gitID":"shanmu9898"},"content":"            return new CommandResult(MESSAGE_RANGE_ERROR);"},{"lineNumber":81,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"shanmu9898"},"content":"        CommandResult handledRangeSituation \u003d null;"},{"lineNumber":83,"author":{"gitID":"shanmu9898"},"content":"        try {"},{"lineNumber":84,"author":{"gitID":"shanmu9898"},"content":"            handledRangeSituation \u003d handleRangeArray(rangeGiven);"},{"lineNumber":85,"author":{"gitID":"shanmu9898"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":86,"author":{"gitID":"shanmu9898"},"content":"            return new CommandResult(MESSAGE_FAIL);"},{"lineNumber":87,"author":{"gitID":"shanmu9898"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":88,"author":{"gitID":"shanmu9898"},"content":"            return new CommandResult(MESSAGE_OUT_OF_BOUNDS);"},{"lineNumber":89,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"shanmu9898"},"content":"        if (handledRangeSituation !\u003d null) {"},{"lineNumber":91,"author":{"gitID":"shanmu9898"},"content":"            return handledRangeSituation;"},{"lineNumber":92,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":94,"author":{"gitID":"shanmu9898"},"content":"        if (!tryStorage()) {"},{"lineNumber":95,"author":{"gitID":"shanmu9898"},"content":"            return new CommandResult(MESSAGE_FAIL);"},{"lineNumber":96,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"shanmu9898"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":98,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":99,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":101,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"shanmu9898"},"content":"     * This method tries creating and storing the export file."},{"lineNumber":103,"author":{"gitID":"shanmu9898"},"content":"     * @return"},{"lineNumber":104,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"shanmu9898"},"content":"    private boolean tryStorage() {"},{"lineNumber":106,"author":{"gitID":"shanmu9898"},"content":"        teachConnectStorage \u003d new XmlAddressBookStorage(path + \"/\" + nameOfExportFile + \".xml\");"},{"lineNumber":107,"author":{"gitID":"shanmu9898"},"content":"        try {"},{"lineNumber":108,"author":{"gitID":"shanmu9898"},"content":"            teachConnectStorage.saveAddressBook(teachConnectBook);"},{"lineNumber":109,"author":{"gitID":"shanmu9898"},"content":"        } catch (IOException e) {"},{"lineNumber":110,"author":{"gitID":"shanmu9898"},"content":"            return false;"},{"lineNumber":111,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"shanmu9898"},"content":"        return true;"},{"lineNumber":113,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":115,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"shanmu9898"},"content":"     * Handles the range array returned by the handleRange() function"},{"lineNumber":117,"author":{"gitID":"shanmu9898"},"content":"     * @param rangeGiven"},{"lineNumber":118,"author":{"gitID":"shanmu9898"},"content":"     * @return"},{"lineNumber":119,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"shanmu9898"},"content":"    private CommandResult handleRangeArray(String[] rangeGiven) throws DuplicatePersonException,"},{"lineNumber":121,"author":{"gitID":"shanmu9898"},"content":"                                                                       IndexOutOfBoundsException {"},{"lineNumber":122,"author":{"gitID":"shanmu9898"},"content":"        if (rangeGiven[0].equals(\"all\")) {"},{"lineNumber":123,"author":{"gitID":"shanmu9898"},"content":"            exportAllRange(tag);"},{"lineNumber":124,"author":{"gitID":"shanmu9898"},"content":"        } else {"},{"lineNumber":125,"author":{"gitID":"shanmu9898"},"content":"            if (rangeGiven.length !\u003d 1) {"},{"lineNumber":126,"author":{"gitID":"shanmu9898"},"content":"                for (int i \u003d 0; i \u003c rangeGiven.length; i++) {"},{"lineNumber":127,"author":{"gitID":"shanmu9898"},"content":"                    int low \u003d Integer.parseInt(rangeGiven[0]);"},{"lineNumber":128,"author":{"gitID":"shanmu9898"},"content":"                    int high \u003d Integer.parseInt(rangeGiven[1]);"},{"lineNumber":129,"author":{"gitID":"shanmu9898"},"content":"                    if (low \u003e\u003d high) {"},{"lineNumber":130,"author":{"gitID":"shanmu9898"},"content":"                        return new CommandResult(MESSAGE_RANGE_ERROR);"},{"lineNumber":131,"author":{"gitID":"shanmu9898"},"content":"                    } else {"},{"lineNumber":132,"author":{"gitID":"shanmu9898"},"content":"                        exportRange(low, high, tag);"},{"lineNumber":133,"author":{"gitID":"shanmu9898"},"content":"                    }"},{"lineNumber":134,"author":{"gitID":"shanmu9898"},"content":"                }"},{"lineNumber":135,"author":{"gitID":"shanmu9898"},"content":"            } else {"},{"lineNumber":136,"author":{"gitID":"shanmu9898"},"content":"                int low \u003d Integer.parseInt(rangeGiven[0]);"},{"lineNumber":137,"author":{"gitID":"shanmu9898"},"content":"                exportSpecific(low);"},{"lineNumber":138,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":139,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":140,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":141,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"shanmu9898"},"content":"        return null;"},{"lineNumber":143,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":145,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"shanmu9898"},"content":"     * Adds a specific person to the teachConnectBook"},{"lineNumber":147,"author":{"gitID":"shanmu9898"},"content":"     *"},{"lineNumber":148,"author":{"gitID":"shanmu9898"},"content":"     * @param low"},{"lineNumber":149,"author":{"gitID":"shanmu9898"},"content":"     * @throws DuplicatePersonException"},{"lineNumber":150,"author":{"gitID":"shanmu9898"},"content":"     * @throws IndexOutOfBoundsException"},{"lineNumber":151,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"shanmu9898"},"content":"    private void exportSpecific(int low) throws DuplicatePersonException, IndexOutOfBoundsException {"},{"lineNumber":153,"author":{"gitID":"shanmu9898"},"content":"        ObservableList\u003cPerson\u003e exportPeople \u003d model.getFilteredPersonList();"},{"lineNumber":154,"author":{"gitID":"shanmu9898"},"content":"        teachConnectBook.addPerson(exportPeople.get(low - 1));"},{"lineNumber":155,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":157,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"shanmu9898"},"content":"     * Exports a range of people based on the tag and the index range given"},{"lineNumber":159,"author":{"gitID":"shanmu9898"},"content":"     *"},{"lineNumber":160,"author":{"gitID":"shanmu9898"},"content":"     * @param low"},{"lineNumber":161,"author":{"gitID":"shanmu9898"},"content":"     * @param high"},{"lineNumber":162,"author":{"gitID":"shanmu9898"},"content":"     * @param tag"},{"lineNumber":163,"author":{"gitID":"shanmu9898"},"content":"     * @throws DuplicatePersonException"},{"lineNumber":164,"author":{"gitID":"shanmu9898"},"content":"     * @throws IndexOutOfBoundsException"},{"lineNumber":165,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"shanmu9898"},"content":"    private void exportRange(int low, int high, Tag tag) throws DuplicatePersonException, IndexOutOfBoundsException {"},{"lineNumber":167,"author":{"gitID":"shanmu9898"},"content":"        ObservableList\u003cPerson\u003e exportPeople \u003d model.getFilteredPersonList();"},{"lineNumber":168,"author":{"gitID":"shanmu9898"},"content":"        ArrayList\u003cPerson\u003e exportAddition \u003d new ArrayList\u003cPerson\u003e();"},{"lineNumber":169,"author":{"gitID":"shanmu9898"},"content":"        if (tag.equals(new Tag(\"shouldnotbethistag\"))) {"},{"lineNumber":170,"author":{"gitID":"shanmu9898"},"content":"            for (int i \u003d low; i \u003c high; i++) {"},{"lineNumber":171,"author":{"gitID":"shanmu9898"},"content":"                exportAddition.add(exportPeople.get(i - 1));"},{"lineNumber":172,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":173,"author":{"gitID":"shanmu9898"},"content":"            teachConnectBook.setPersons(exportAddition);"},{"lineNumber":174,"author":{"gitID":"shanmu9898"},"content":"        } else {"},{"lineNumber":175,"author":{"gitID":"shanmu9898"},"content":"            for (int i \u003d low; i \u003c high; i++) {"},{"lineNumber":176,"author":{"gitID":"shanmu9898"},"content":"                if (exportPeople.get(i - 1).getTags().contains(tag)) {"},{"lineNumber":177,"author":{"gitID":"shanmu9898"},"content":"                    exportAddition.add(exportPeople.get(i - 1));"},{"lineNumber":178,"author":{"gitID":"shanmu9898"},"content":"                }"},{"lineNumber":179,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":180,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":181,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":183,"author":{"gitID":"shanmu9898"},"content":"        teachConnectBook.setPersons(exportAddition);"},{"lineNumber":184,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":186,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"shanmu9898"},"content":"     * Exports all the contacts in the TeachConnect book if contain certain tag"},{"lineNumber":188,"author":{"gitID":"shanmu9898"},"content":"     *"},{"lineNumber":189,"author":{"gitID":"shanmu9898"},"content":"     * @param tag"},{"lineNumber":190,"author":{"gitID":"shanmu9898"},"content":"     * @throws DuplicatePersonException"},{"lineNumber":191,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"shanmu9898"},"content":"    private void exportAllRange(Tag tag) throws DuplicatePersonException {"},{"lineNumber":193,"author":{"gitID":"shanmu9898"},"content":"        ObservableList\u003cPerson\u003e exportPeople \u003d model.getFilteredPersonList();"},{"lineNumber":194,"author":{"gitID":"shanmu9898"},"content":"        if (tag.equals(new Tag(\"shouldnotbethistag\"))) {"},{"lineNumber":195,"author":{"gitID":"shanmu9898"},"content":"            teachConnectBook.setPersons(exportPeople);"},{"lineNumber":196,"author":{"gitID":"shanmu9898"},"content":"        } else {"},{"lineNumber":197,"author":{"gitID":"shanmu9898"},"content":"            ArrayList\u003cPerson\u003e exportAddition \u003d new ArrayList\u003cPerson\u003e();"},{"lineNumber":198,"author":{"gitID":"shanmu9898"},"content":"            for (int i \u003d 0; i \u003c exportPeople.size(); i++) {"},{"lineNumber":199,"author":{"gitID":"shanmu9898"},"content":"                if (exportPeople.get(i).getTags().contains(tag)) {"},{"lineNumber":200,"author":{"gitID":"shanmu9898"},"content":"                    exportAddition.add(exportPeople.get(i));"},{"lineNumber":201,"author":{"gitID":"shanmu9898"},"content":"                }"},{"lineNumber":202,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":203,"author":{"gitID":"shanmu9898"},"content":"            teachConnectBook.setPersons(exportAddition);"},{"lineNumber":204,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":207,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":208,"author":{"gitID":"shanmu9898"},"content":"     * Helper method to identify the lower and higher end of the range given"},{"lineNumber":209,"author":{"gitID":"shanmu9898"},"content":"     *"},{"lineNumber":210,"author":{"gitID":"shanmu9898"},"content":"     * @return rangeStringArray"},{"lineNumber":211,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":212,"author":{"gitID":"shanmu9898"},"content":"    public String[] handleRange() throws IOException {"},{"lineNumber":213,"author":{"gitID":"shanmu9898"},"content":"        String[] rangeStringArray \u003d this.range.split(\",\");"},{"lineNumber":214,"author":{"gitID":"shanmu9898"},"content":"        if (rangeStringArray.length \u003e 2) {"},{"lineNumber":215,"author":{"gitID":"shanmu9898"},"content":"            throw new IOException();"},{"lineNumber":216,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"shanmu9898"},"content":"        return rangeStringArray;"},{"lineNumber":218,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":219,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":221,"author":{"gitID":"shanmu9898"},"content":"    //@@author shanmu9898 - reused"},{"lineNumber":222,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":223,"author":{"gitID":"shanmu9898"},"content":"     *"},{"lineNumber":224,"author":{"gitID":"shanmu9898"},"content":"     * @param other [in this case ExportCommand]"},{"lineNumber":225,"author":{"gitID":"shanmu9898"},"content":"     * @return a boolean value"},{"lineNumber":226,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":227,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":228,"author":{"gitID":"shanmu9898"},"content":"    public boolean equals(Object other) {"},{"lineNumber":229,"author":{"gitID":"shanmu9898"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":230,"author":{"gitID":"shanmu9898"},"content":"            return true;"},{"lineNumber":231,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":233,"author":{"gitID":"shanmu9898"},"content":"        if (!(other instanceof ExportCommand)) {"},{"lineNumber":234,"author":{"gitID":"shanmu9898"},"content":"            return false;"},{"lineNumber":235,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":236,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":237,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand e \u003d (ExportCommand) other;"},{"lineNumber":238,"author":{"gitID":"shanmu9898"},"content":"        return range.equals(e.range) \u0026\u0026 path.equals(e.path);"},{"lineNumber":239,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":241,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"-":8,"shanmu9898":233}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":24,"author":{"gitID":"randypx"},"content":"            + \" [TYPE] \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":30,"author":{"gitID":"randypx"},"content":"            + \"Example: \" + COMMAND_WORD"},{"lineNumber":31,"author":{"gitID":"randypx"},"content":"            + \" student \""},{"lineNumber":32,"author":{"gitID":"randypx"},"content":"            + PREFIX_NAME + \" Mary Jane \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":34,"author":{"gitID":"randypx"},"content":"            + PREFIX_EMAIL + \"MJ@example.com \""},{"lineNumber":35,"author":{"gitID":"randypx"},"content":"            + PREFIX_ADDRESS + \"478, Pasir Ris, #03-12 \""},{"lineNumber":36,"author":{"gitID":"randypx"},"content":"            + PREFIX_TAG + \"AStar\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"randypx"},"content":"    public static final String MESSAGE_ADD_PERSON_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":39,"author":{"gitID":"randypx"},"content":"    public static final String MESSAGE_ADD_STUDENT_SUCCESS \u003d \"New student added: %1$s\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":57,"author":{"gitID":"randypx"},"content":"            if (toAdd instanceof Student) {"},{"lineNumber":58,"author":{"gitID":"randypx"},"content":"                return new CommandResult(String.format(MESSAGE_ADD_STUDENT_SUCCESS, toAdd));"},{"lineNumber":59,"author":{"gitID":"randypx"},"content":"            } else {"},{"lineNumber":60,"author":{"gitID":"randypx"},"content":"                return new CommandResult(String.format(MESSAGE_ADD_PERSON_SUCCESS, toAdd));"},{"lineNumber":61,"author":{"gitID":"randypx"},"content":"            }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"randypx":15,"-":59}},{"path":"src/main/java/seedu/address/logic/commands/Command.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.events.ui.ToggleListEvent;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public abstract class Command {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    protected CommandHistory history;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    protected UndoRedoStack undoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of persons."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @return summary message for persons displayed"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static String getMessageForPersonListShownSummary(int displaySize) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result message."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @return feedback message of the operation result for display"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public abstract CommandResult execute() throws CommandException;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Provides any needed dependencies to the command."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Commands making use of any of these should override this method to gain"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * access to the dependencies."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"     * Set the person list to active and switch to person list view for the GUI."},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"     * Method used to support command that needed the person list to be shown: Find, Select"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"    public void setPersonListActive() {"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"        model.changeCurrentActiveListType(model.LIST_TYPE_PERSON);"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"        EventsCenter.getInstance().post(new ToggleListEvent(model.LIST_TYPE_PERSON));"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":10,"-":44,"shanmu9898":1}},{"path":"src/main/java/seedu/address/logic/commands/ShortcutCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.ShortcutDoubles;"},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.UniqueShortcutDoublesList;"},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":" *"},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":" */"},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":"public class ShortcutCommand extends UndoableCommand {"},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":"    public static final String COMMAND_WORD \u003d \"shortcut\";"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" CommandWord \" + \" ShortcutWord \""},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"                                               + \" :Creates a shortcut for any command word\";"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"    public static final String MESSAGE_SHORTCUT_AVAILABLE \u003d \"This shortcut already exists!\";"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Successfully added the shortcut\";"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"    public static final String MESSAGE_NO_COMMAND_TO_MAP \u003d \"The command word is invalid and hence cant be mapped!\";"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"    private final String shortcutWord;"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"    private final String commandWord;"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"    private List\u003cShortcutDoubles\u003e commandsList;"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"    private final String[] commandsPresent \u003d {\"add\", \"clear\", \"delete\", \"edit\", \"exit\", \"export\", \"find\","},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"                                              \"help\", \"history\", \"import\", \"list\", \"redo\", \"undo\", \"select\","},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"                                              \"set_appointment\", \"set_task\", \"shortcut\", \"undo\", \"calendar\","},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"                                              \"delete_shortcut\"};"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":"    public ShortcutCommand(String commandWord, String shortcutWord) {"},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(commandWord);"},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(shortcutWord);"},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":"        this.shortcutWord \u003d shortcutWord;"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":"        this.commandWord \u003d commandWord;"},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":43,"author":{"gitID":"shanmu9898"},"content":"        commandsList \u003d model.getFilteredCommandsList();"},{"lineNumber":44,"author":{"gitID":"shanmu9898"},"content":"        if (commandsList !\u003d null) {"},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":"            if (checkIfCommandPresent()) {"},{"lineNumber":46,"author":{"gitID":"shanmu9898"},"content":"                return new CommandResult(String.format(MESSAGE_SHORTCUT_AVAILABLE));"},{"lineNumber":47,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":51,"author":{"gitID":"shanmu9898"},"content":"        ShortcutDoubles toAdd \u003d new ShortcutDoubles(shortcutWord, commandWord);"},{"lineNumber":52,"author":{"gitID":"shanmu9898"},"content":"        try {"},{"lineNumber":53,"author":{"gitID":"shanmu9898"},"content":"            model.addCommandShortcut(toAdd);"},{"lineNumber":54,"author":{"gitID":"shanmu9898"},"content":"        } catch (UniqueShortcutDoublesList.DuplicateShortcutDoublesException e) {"},{"lineNumber":55,"author":{"gitID":"shanmu9898"},"content":"            return new CommandResult(String.format(MESSAGE_SHORTCUT_AVAILABLE));"},{"lineNumber":56,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":58,"author":{"gitID":"shanmu9898"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS));"},{"lineNumber":59,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":61,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"shanmu9898"},"content":"     * Checks if the shortcut command is valid or not"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * @return whether true or false"},{"lineNumber":64,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"shanmu9898"},"content":"    private boolean checkIfCommandPresent() throws CommandException {"},{"lineNumber":66,"author":{"gitID":"shanmu9898"},"content":"        if (!containsKeyWord(commandWord)) {"},{"lineNumber":67,"author":{"gitID":"shanmu9898"},"content":"            throw new CommandException(MESSAGE_NO_COMMAND_TO_MAP);"},{"lineNumber":68,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"shanmu9898"},"content":"        for (ShortcutDoubles s : commandsList) {"},{"lineNumber":70,"author":{"gitID":"shanmu9898"},"content":"            if (s.shortcutWord.equals(shortcutWord)) {"},{"lineNumber":71,"author":{"gitID":"shanmu9898"},"content":"                return true;"},{"lineNumber":72,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":73,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"shanmu9898"},"content":"        return false;"},{"lineNumber":75,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":77,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"shanmu9898"},"content":"     * Checks if the command word is in the Array of commands present"},{"lineNumber":79,"author":{"gitID":"shanmu9898"},"content":"     * @param commandWord"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * @return whether true or false"},{"lineNumber":81,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"shanmu9898"},"content":"    private boolean containsKeyWord(String commandWord) {"},{"lineNumber":83,"author":{"gitID":"shanmu9898"},"content":"        for (String s : commandsPresent) {"},{"lineNumber":84,"author":{"gitID":"shanmu9898"},"content":"            if (s.equals(commandWord)) {"},{"lineNumber":85,"author":{"gitID":"shanmu9898"},"content":"                return true;"},{"lineNumber":86,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":87,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"shanmu9898"},"content":"        return false;"},{"lineNumber":89,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":94,"author":{"gitID":"shanmu9898"},"content":"                || (other instanceof ShortcutCommand // instanceof handles nulls"},{"lineNumber":95,"author":{"gitID":"shanmu9898"},"content":"                \u0026\u0026 this.shortcutWord.equals(((ShortcutCommand) other).shortcutWord) // state check"},{"lineNumber":96,"author":{"gitID":"shanmu9898"},"content":"                \u0026\u0026 this.commandWord.equals(((ShortcutCommand) other).commandWord)); // state check"},{"lineNumber":97,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"-":13,"shanmu9898":85}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"        if (!model.getCurrentActiveListType().equals(model.LIST_TYPE_PERSON)) {"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"            setPersonListActive();"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":3,"-":51}},{"path":"src/main/java/seedu/address/logic/commands/RemoveCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.model.Model.LIST_TYPE_APPOINTMENT;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.model.Model.LIST_TYPE_TASK;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.UniqueEventList;"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":" * Remove an appointment or task identified using its last displayed index from the address book."},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"public class RemoveCommand extends UndoableCommand {"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    public static final String COMMAND_WORD \u003d \"remove\";"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"            + \": Removes the event identified by the index number used in the last event listing.\\n\""},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"            + \"Parameters: \""},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"            + \" EVENT_TYPE (could be appointment or task)\""},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"            + \"INDEX (must be a positive integer)\\n\""},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"            + \"Example: \" + COMMAND_WORD + \" appointment \" + \" 1\";"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_DELETE_EVENT_SUCCESS \u003d \"Removed %1$s: %2$s\";"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"    private final Index targetIndex;"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"    private String eventTypeOfDeletedTarget;"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"    private Object eventToBeDeleted;"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"    public RemoveCommand(Index targetIndex, String eventTypeOfDeletedTarget) {"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"        this.eventTypeOfDeletedTarget \u003d eventTypeOfDeletedTarget;"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(eventToBeDeleted);"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"            if (eventTypeOfDeletedTarget.equals(LIST_TYPE_APPOINTMENT)) {"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"                model.deleteAppointment((Appointment) eventToBeDeleted);"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"            } else if (eventTypeOfDeletedTarget.equals(LIST_TYPE_TASK)) {"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"                model.deleteTask((Task) eventToBeDeleted);"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"            }"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"        } catch (UniqueEventList.EventNotFoundException ive) {"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"            throw new AssertionError(String.format(\"The target %s cannot be missing\", eventTypeOfDeletedTarget));"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"        return new CommandResult("},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"                String.format(MESSAGE_DELETE_EVENT_SUCCESS, eventTypeOfDeletedTarget, eventToBeDeleted));"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"        if (eventTypeOfDeletedTarget.equals(LIST_TYPE_APPOINTMENT)) {"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"            List\u003cAppointment\u003e lastShownList \u003d model.getFilteredAppointmentList();"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"            }"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"            eventToBeDeleted \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"        } else if (eventTypeOfDeletedTarget.equals(LIST_TYPE_TASK)) {"},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":"            List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":"            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"            }"},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"            eventToBeDeleted \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":"    public boolean equals(Object other) {"},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":"                || (other instanceof RemoveCommand // instanceof handles nulls"},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 this.targetIndex.equals(((RemoveCommand) other).targetIndex) // state check"},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 Objects.equals(this.eventToBeDeleted, ((RemoveCommand) other).eventToBeDeleted));"},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":82,"-":4}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""},{"lineNumber":14,"author":{"gitID":"-"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"        if (!model.getCurrentActiveListType().equals(model.LIST_TYPE_PERSON)) {"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"            setPersonListActive();"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":3,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/ChangeThemeCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.events.ui.ThemeChangeEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":" * Change theme of the GUI."},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"public class ChangeThemeCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"    public static final String COMMAND_WORD \u003d \"theme\";"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"            + \": Change the theme of TeachConnect.\\n\""},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"            + \"Parameters: THEME\\n\""},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"            + \"Example: \" + COMMAND_WORD + \" dark\";"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_CHANGE_THEME_SUCCESS \u003d \"Theme changed\";"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_INVALID_THEME \u003d \"Not a valid theme\";"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    private final String theme;"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    public ChangeThemeCommand(String theme) {"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(theme);"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        this.theme \u003d theme;"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"        EventsCenter.getInstance().post(new ThemeChangeEvent(theme));"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"        return new CommandResult(MESSAGE_CHANGE_THEME_SUCCESS);"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"    public boolean equals(Object other) {"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"                || (other instanceof ChangeThemeCommand // instanceof handles nulls"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 this.theme.equals(((ChangeThemeCommand) other).theme)); // state check"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":39,"-":5}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"        addressBookParser \u003d new AddressBookParser(model.getFilteredCommandsList());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"        return model.getFilteredAppointmentList();"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"    public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"        return model.getFilteredTaskList();"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":"    public String getCurrentActiveListType() {"},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"        return model.getCurrentActiveListType();"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":17,"-":56,"shanmu9898":1}},{"path":"src/main/java/seedu/address/storage/Storage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * API of the Storage component"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public interface Storage extends AddressBookStorage, UserPrefsStorage {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException;"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Saves the current version of the Address Book to the hard disk."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     *   Creates the data file if it is missing."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    void handleAddressBookChangedEvent(AddressBookChangedEvent abce);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":38,"shanmu9898":4}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedTag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * JAXB-friendly adapted version of the Tag."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class XmlAdaptedTag {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private String tagName;"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    private String tagColorStyle;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedTag."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag() {}"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName} and {@code tagColorStyle}."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    public XmlAdaptedTag(String tagName, String tagColorStyle) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        this.tagColorStyle \u003d tagColorStyle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Converts a given Tag into this class for JAXB use."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag(Tag source) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        tagName \u003d source.tagName;"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"        tagColorStyle \u003d source.tagColorStyle;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public Tag toModelType() throws IllegalValueException {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_NAME_CONSTRAINTS);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"        if (!Tag.isValidTagColorStyle(tagColorStyle)) {"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_COLOR_STYLE_CONSTRAINTS);"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"        return new Tag(tagName, tagColorStyle);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedTag)) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"        return tagName.equals(((XmlAdaptedTag) other).tagName)"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 tagColorStyle.equals(((XmlAdaptedTag) other).tagColorStyle);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":15,"-":55}},{"path":"src/main/java/seedu/address/logic/commands/SetTaskCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.UniqueEventList;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":" * Adds a task to the address book."},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"public class SetTaskCommand extends UndoableCommand {"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    public static final String COMMAND_WORD \u003d \"set_task\";"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to the address book. \""},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"            + \"Parameters: \""},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"            + PREFIX_TITLE + \"TITLE \""},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"            + PREFIX_END_TIME + \"TIME \""},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"            + PREFIX_TITLE + \"Mark papers \""},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"            + PREFIX_END_TIME + \"20/05/2018 12:00 \";"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New task added: %1$s\";"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the address book\";"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"    private final Task toAdd;"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"     * Creates a SetTaskCommand to add the specified {@code Task}"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"    public SetTaskCommand(Task task) {"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(task);"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"        toAdd \u003d task;"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(model);"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"            model.addTask(toAdd);"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"        } catch (UniqueEventList.DuplicateEventException e) {"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TASK);"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"                || (other instanceof SetTaskCommand // instanceof handles nulls"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 toAdd.equals(((SetTaskCommand) other).toAdd));"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":53,"-":5}},{"path":"src/main/java/seedu/address/logic/commands/ImportCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":" * Imports contacts from a different TeachConnect XML file"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":" */"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"public class ImportCommand extends UndoableCommand {"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"    public static final String COMMAND_WORD \u003d \"import\";"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": imports contacts to the address book.\""},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"            + \"Parameters: file location...\\n\""},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"            + \"Example: \" + COMMAND_WORD + \" main/src/test/data/sandbox/somerandomfile.xml\";"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"%1$s contacts have been successfully imported \""},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"            + \"and %2$s have been left out!\";"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"    protected static final String MESSAGE_INVALID_FILE \u003d \"Please input a valid file location\";"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"    protected Storage storage;"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"    private AddressBook addressBookImported;"},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":"    private String filePath;"},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":"    private int numberAdded \u003d 0;"},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":"    private int numberNotAdded \u003d 0;"},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":"     * Creates an ImportCommand to import the specified TeachConnect XML file"},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"    public ImportCommand(String importPath) {"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(importPath);"},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":"        this.filePath \u003d importPath;"},{"lineNumber":43,"author":{"gitID":"shanmu9898"},"content":"        addressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":44,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":46,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"shanmu9898"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":"            if (addressBookStorage.readAddressBook(filePath).isPresent()) {"},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":"                this.addressBookImported \u003d new AddressBook(addressBookStorage.readAddressBook().get());"},{"lineNumber":51,"author":{"gitID":"shanmu9898"},"content":"                ObservableList\u003cPerson\u003e people \u003d addressBookImported.getPersonList();"},{"lineNumber":52,"author":{"gitID":"shanmu9898"},"content":"                for (int i \u003d 0; i \u003c people.size(); i++) {"},{"lineNumber":53,"author":{"gitID":"shanmu9898"},"content":"                    try {"},{"lineNumber":54,"author":{"gitID":"shanmu9898"},"content":"                        model.addPerson(people.get(i));"},{"lineNumber":55,"author":{"gitID":"shanmu9898"},"content":"                        numberAdded++;"},{"lineNumber":56,"author":{"gitID":"shanmu9898"},"content":"                    } catch (DuplicatePersonException e) {"},{"lineNumber":57,"author":{"gitID":"shanmu9898"},"content":"                        numberNotAdded++;"},{"lineNumber":58,"author":{"gitID":"shanmu9898"},"content":"                    }"},{"lineNumber":59,"author":{"gitID":"shanmu9898"},"content":"                }"},{"lineNumber":60,"author":{"gitID":"shanmu9898"},"content":"            } else {"},{"lineNumber":61,"author":{"gitID":"shanmu9898"},"content":"                throw new CommandException(String.format(MESSAGE_INVALID_FILE));"},{"lineNumber":62,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":63,"author":{"gitID":"shanmu9898"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":64,"author":{"gitID":"shanmu9898"},"content":"            throw new CommandException(String.format(MESSAGE_INVALID_FILE));"},{"lineNumber":65,"author":{"gitID":"shanmu9898"},"content":"        } catch (IOException e) {"},{"lineNumber":66,"author":{"gitID":"shanmu9898"},"content":"            throw new CommandException(String.format(MESSAGE_INVALID_FILE));"},{"lineNumber":67,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":69,"author":{"gitID":"shanmu9898"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, numberAdded, numberNotAdded));"},{"lineNumber":70,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":72,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"shanmu9898"},"content":"    public boolean equals(Object other) {"},{"lineNumber":74,"author":{"gitID":"shanmu9898"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":75,"author":{"gitID":"shanmu9898"},"content":"                || (other instanceof ImportCommand // instanceof handles nulls"},{"lineNumber":76,"author":{"gitID":"shanmu9898"},"content":"                \u0026\u0026 filePath.equals(((ImportCommand) other).filePath));"},{"lineNumber":77,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":79,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":80,"author":{"gitID":"shanmu9898"},"content":"}"},{"lineNumber":81,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":82,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":83,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":84,"author":{"gitID":"shanmu9898"},"content":""}],"authorContributionMap":{"-":8,"shanmu9898":76}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    private List\u003cXmlAdaptedAppointment\u003e appointments;"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    @XmlElement"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    private List\u003cXmlAdaptedTask\u003e tasks;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"    private List\u003cXmlAdaptedShortcutDouble\u003e commandsList;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"        appointments \u003d new ArrayList\u003c\u003e();"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"        commandsList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"        appointments.addAll(src.getAppointmentList().stream().map("},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"                XmlAdaptedAppointment::new).collect(Collectors.toList()));"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"        tasks.addAll(src.getTaskList().stream().map("},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"                XmlAdaptedTask::new).collect(Collectors.toList()));"},{"lineNumber":54,"author":{"gitID":"shanmu9898"},"content":"        commandsList.addAll(src.getCommandsList().stream().map(XmlAdaptedShortcutDouble::new)"},{"lineNumber":55,"author":{"gitID":"shanmu9898"},"content":"                    .collect(Collectors.toList()));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"     * {@code XmlAdaptedPerson},{@code XmlAdaptedTag}, {@code XmlAdaptedAppointment}, {@code XmlAdaptedTask}."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            addressBook.addTag(t.toModelType());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        for (XmlAdaptedPerson p : persons) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            addressBook.addPerson(p.toModelType());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"        for (XmlAdaptedAppointment a: appointments) {"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"            addressBook.addAppointment(a.toModelType());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"        for (XmlAdaptedTask t: tasks) {"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":"            addressBook.addTask(t.toModelType());"},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"shanmu9898"},"content":"        for (XmlAdaptedShortcutDouble s : commandsList) {"},{"lineNumber":79,"author":{"gitID":"shanmu9898"},"content":"            addressBook.addShortcutDoubles(s.toModelType());"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlSerializableAddressBook)) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"},{"lineNumber":94,"author":{"gitID":"Sisyphus25"},"content":"        return persons.equals(otherAb.persons)"},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 tags.equals(otherAb.tags)"},{"lineNumber":96,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 appointments.equals(otherAb.appointments)"},{"lineNumber":97,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 tasks.equals(otherAb.tasks)"},{"lineNumber":98,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 commandsList.equals(otherAb.commandsList);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"}"},{"lineNumber":101,"author":{"gitID":"Sisyphus25"},"content":""}],"authorContributionMap":{"Sisyphus25":23,"-":72,"shanmu9898":6}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedShortcutDouble.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.ShortcutDoubles;"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":" *"},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":" */"},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":"public class XmlAdaptedShortcutDouble {"},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":"    @XmlElement"},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":"    private String shortcutWord;"},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":"    @XmlElement"},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"    private String commandWord;"},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"    public XmlAdaptedShortcutDouble() {}"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"    public XmlAdaptedShortcutDouble(String shortcutWord, String commandWord) {"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"        this.shortcutWord \u003d shortcutWord;"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"        this.commandWord \u003d commandWord;"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":"    public XmlAdaptedShortcutDouble(ShortcutDoubles source) {"},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"        shortcutWord \u003d source.shortcutWord;"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"        commandWord \u003d source.commandWord;"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"    public ShortcutDoubles toModelType() throws IllegalValueException {"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"        return new ShortcutDoubles(shortcutWord, commandWord);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":"        if (!(other instanceof XmlAdaptedShortcutDouble)) {"},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"            return false;"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":43,"author":{"gitID":"shanmu9898"},"content":"        return commandWord.equals(((XmlAdaptedShortcutDouble) other).commandWord)"},{"lineNumber":44,"author":{"gitID":"shanmu9898"},"content":"                \u0026\u0026 shortcutWord.equals(((XmlAdaptedShortcutDouble) other).shortcutWord);"},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":47,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"Sisyphus25":1,"-":12,"shanmu9898":34}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedAppointment.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.model.event.PersonToMeet.EMAIL_SPLITTER;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.EventTime;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.PersonToMeet;"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Title;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"public class XmlAdaptedAppointment {"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Appointment\u0027s %s field is missing!\";"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"    private String title;"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    private String startTime;"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"    private String endTime;"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"    private String personToMeet;"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"     * Constructs an XmlAdaptedAppointment."},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"    public XmlAdaptedAppointment() {}"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"    public XmlAdaptedAppointment(String title, String startTime, String endTime) {"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"        this(title, startTime, endTime, null);"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"     * Constructs an {@code XmlAdaptedAppointment} with the given appointment details."},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"    public XmlAdaptedAppointment(String title, String startTime, String endTime, String personToMeet) {"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"        this.title \u003d title;"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"        if (personToMeet !\u003d null) {"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"            this.personToMeet \u003d personToMeet;"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"     * Converts a given Appointment into this class for JAXB use."},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"     *"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedAppointment"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"    public XmlAdaptedAppointment(Appointment source) {"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"        title \u003d source.getTitle().toString();"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"        startTime \u003d source.getTime().toString();"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"        endTime \u003d source.getEndTime().toString();"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"        if (source.getPersonToMeet() !\u003d null) {"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"            personToMeet \u003d source.getPersonToMeet().toString();"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Appointment object."},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":"     *"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted appointment"},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"    public Appointment toModelType() throws IllegalValueException {"},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"        if (this.title \u003d\u003d null) {"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"        if (!Title.isValidTitle(this.title)) {"},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"            throw new IllegalValueException(Title.MESSAGE_TITLE_CONSTRAINTS);"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":"        final Title title \u003d new Title(this.title);"},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":"        if (this.startTime \u003d\u003d null) {"},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Start Time\"));"},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":"        if (this.endTime \u003d\u003d null) {"},{"lineNumber":86,"author":{"gitID":"Sisyphus25"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"End Time\"));"},{"lineNumber":87,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":89,"author":{"gitID":"Sisyphus25"},"content":"        final EventTime startTime \u003d new EventTime(this.startTime);"},{"lineNumber":90,"author":{"gitID":"Sisyphus25"},"content":"        final EventTime endTime \u003d new EventTime(this.endTime);"},{"lineNumber":91,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":92,"author":{"gitID":"Sisyphus25"},"content":"        if (!Appointment.isValidTime(startTime, endTime)) {"},{"lineNumber":93,"author":{"gitID":"Sisyphus25"},"content":"            throw new IllegalValueException(Appointment.MESSAGE_TIME_PERIOD_CONSTRAINTS);"},{"lineNumber":94,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":96,"author":{"gitID":"Sisyphus25"},"content":"        if (this.personToMeet !\u003d null) {"},{"lineNumber":97,"author":{"gitID":"Sisyphus25"},"content":"            String[] components \u003d this.personToMeet.split(EMAIL_SPLITTER);"},{"lineNumber":98,"author":{"gitID":"Sisyphus25"},"content":"            PersonToMeet personToMeet \u003d new PersonToMeet(components[0], components[1]);"},{"lineNumber":99,"author":{"gitID":"Sisyphus25"},"content":"            return new Appointment(title, startTime, endTime, personToMeet);"},{"lineNumber":100,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":102,"author":{"gitID":"Sisyphus25"},"content":"        return new Appointment(title, startTime, endTime);"},{"lineNumber":103,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":105,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"Sisyphus25"},"content":"    public boolean equals(Object other) {"},{"lineNumber":107,"author":{"gitID":"Sisyphus25"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":108,"author":{"gitID":"Sisyphus25"},"content":"            return true;"},{"lineNumber":109,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":111,"author":{"gitID":"Sisyphus25"},"content":"        if (!(other instanceof XmlAdaptedAppointment)) {"},{"lineNumber":112,"author":{"gitID":"Sisyphus25"},"content":"            return false;"},{"lineNumber":113,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":115,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedAppointment otherAppointment \u003d (XmlAdaptedAppointment) other;"},{"lineNumber":116,"author":{"gitID":"Sisyphus25"},"content":"        return Objects.equals(title, otherAppointment.title)"},{"lineNumber":117,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 Objects.equals(startTime, otherAppointment.startTime)"},{"lineNumber":118,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 Objects.equals(endTime, otherAppointment.endTime)"},{"lineNumber":119,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 Objects.equals(personToMeet, otherAppointment.personToMeet);"},{"lineNumber":120,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":118,"-":3}},{"path":"src/main/java/seedu/address/logic/commands/SetAppointmentCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_TO_MEET_INDEX;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.PersonToMeet;"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.UniqueEventList;"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":" * Adds an appointment with the person at {@code index} in the person list to the address book."},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"public class SetAppointmentCommand extends UndoableCommand {"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    public static final String COMMAND_WORD \u003d \"set_appointment\";"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"            + \": Adds an appoinment to the address book. \""},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"            + \"Parameters: \""},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"            + PREFIX_TITLE + \"TITLE \""},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"            + PREFIX_START_TIME + \"START TIME \""},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"            + PREFIX_END_TIME + \"END TIME \""},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"            + PREFIX_PERSON_TO_MEET_INDEX + \"PERSON TO MEET \""},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"            + PREFIX_TITLE + \"Meet James \""},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"            + PREFIX_START_TIME + \"20/05/2018 10:00 \""},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"            + PREFIX_END_TIME + \"20/05/2018 12:00 \""},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"            + PREFIX_PERSON_TO_MEET_INDEX + \"3 \";"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New appointment added: %1$s\";"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"This appointment already exists in the address book\";"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"    private final Appointment baseAppointmentWithoutPerson;"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"    private final Index index;"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"    private PersonToMeet personToMeet;"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"     * Creates a SetAppointmentCommand without any PersonToMeet"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"    public SetAppointmentCommand(Appointment baseAppointmentWithoutPerson) {"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"        this(baseAppointmentWithoutPerson, null);"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"     * Creates a SetAppointmentCommand to add the specified {@code Appointment}"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"    public SetAppointmentCommand(Appointment baseAppointmentWithoutPerson, Index index) {"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(baseAppointmentWithoutPerson);"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"        this.baseAppointmentWithoutPerson \u003d baseAppointmentWithoutPerson;"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"        this.index \u003d index;"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(model);"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"            Appointment toAdd;"},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"            if (personToMeet !\u003d null) {"},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":"                toAdd \u003d new Appointment(baseAppointmentWithoutPerson.getTitle(), baseAppointmentWithoutPerson.getTime(),"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":"                        baseAppointmentWithoutPerson.getEndTime(), personToMeet);"},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"            } else {"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"                toAdd \u003d baseAppointmentWithoutPerson;"},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"            }"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"            model.addAppointment(toAdd);"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"        } catch (UniqueEventList.DuplicateEventException e) {"},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":"        if (index !\u003d null) {"},{"lineNumber":86,"author":{"gitID":"Sisyphus25"},"content":"            List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":87,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":88,"author":{"gitID":"Sisyphus25"},"content":"            if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":89,"author":{"gitID":"Sisyphus25"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":90,"author":{"gitID":"Sisyphus25"},"content":"            }"},{"lineNumber":91,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":92,"author":{"gitID":"Sisyphus25"},"content":"            Person person \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":93,"author":{"gitID":"Sisyphus25"},"content":"            personToMeet \u003d new PersonToMeet(person.getName().fullName, person.getEmail().value);"},{"lineNumber":94,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":97,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":98,"author":{"gitID":"Sisyphus25"},"content":"    public boolean equals(Object other) {"},{"lineNumber":99,"author":{"gitID":"Sisyphus25"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":100,"author":{"gitID":"Sisyphus25"},"content":"                || (other instanceof SetAppointmentCommand // instanceof handles nulls"},{"lineNumber":101,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 baseAppointmentWithoutPerson.equals(((SetAppointmentCommand) other).baseAppointmentWithoutPerson));"},{"lineNumber":102,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":99,"-":4}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":" * \u003cp\u003e"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":19,"author":{"gitID":"-"},"content":" *"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * @see Person#equals(Object)"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public boolean contains(Person toCheck) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Adds a person to the list."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void add(Person toAdd) throws DuplicatePersonException {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the replacement is equivalent to another existing person in the list."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void setPerson(Person target, Person editedPerson)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        if (!target.equals(editedPerson) \u0026\u0026 internalList.contains(editedPerson)) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        internalList.set(index, editedPerson);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public boolean remove(Person toRemove) throws PersonNotFoundException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        if (!personFoundAndDeleted) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return personFoundAndDeleted;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void setPersons(UniquePersonList replacement) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        requireAllNonNull(persons);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        final UniquePersonList replacement \u003d new UniquePersonList();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        for (final Person person : persons) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            replacement.add(person);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        setPersons(replacement);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e asObservableList() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.internalList.equals(((UniquePersonList) other).internalList));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":119,"shanmu9898":2}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.ShortcutDoubles;"},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.UniqueShortcutDoublesList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return new Person[]{"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":25,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":26,"author":{"gitID":"-"},"content":"                    getTagSet(\"friends\")),"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":29,"author":{"gitID":"-"},"content":"                    getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                    getTagSet(\"neighbours\")),"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                    getTagSet(\"family\")),"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 47 Tampines Street 20, #17-35\"),"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                    getTagSet(\"classmates\")),"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                    getTagSet(\"colleagues\"))"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":"    public static ShortcutDoubles[] getSampleShortcutDoubles() {"},{"lineNumber":46,"author":{"gitID":"shanmu9898"},"content":"        return new ShortcutDoubles[]{"},{"lineNumber":47,"author":{"gitID":"shanmu9898"},"content":"            new ShortcutDoubles(\"a\", \"add\"),"},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":"            new ShortcutDoubles(\"s\", \"shortcut\")"},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":"        };"},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":59,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":60,"author":{"gitID":"shanmu9898"},"content":"            for (ShortcutDoubles s : getSampleShortcutDoubles()) {"},{"lineNumber":61,"author":{"gitID":"shanmu9898"},"content":"                sampleAb.addShortcutDoubles(s);"},{"lineNumber":62,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":63,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":67,"author":{"gitID":"shanmu9898"},"content":"        } catch (UniqueShortcutDoublesList.DuplicateShortcutDoublesException e) {"},{"lineNumber":68,"author":{"gitID":"shanmu9898"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate command shortcuts\", e);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"shanmu9898"},"content":"    public static Set\u003cShortcutDoubles\u003e getSampleShortcutDoublesTagSet(String... strings) {"},{"lineNumber":86,"author":{"gitID":"shanmu9898"},"content":"        HashSet\u003cShortcutDoubles\u003e shortcutDoubles \u003d new HashSet\u003c\u003e();"},{"lineNumber":87,"author":{"gitID":"shanmu9898"},"content":"        for (String s : strings) {"},{"lineNumber":88,"author":{"gitID":"shanmu9898"},"content":"            shortcutDoubles.add(new ShortcutDoubles(s, s));"},{"lineNumber":89,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":91,"author":{"gitID":"shanmu9898"},"content":"        return shortcutDoubles;"},{"lineNumber":92,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":67,"shanmu9898":27}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.ShortcutDoubles;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"     * Returns an unmodifiable view of the appointments list."},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"     * This list will not contain any duplicate appointment."},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"    ObservableList\u003cAppointment\u003e getAppointmentList();"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"     * Returns an unmodifiable view of the tasks list."},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"     * This list will not contain any duplicate tasks."},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"    ObservableList\u003cTask\u003e getTaskList();"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"    ObservableList\u003cShortcutDoubles\u003e getCommandsList();"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":15,"-":24,"shanmu9898":4}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedTask.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.EventTime;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Title;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"public class XmlAdaptedTask {"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    private String title;"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    private String time;"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"     * Constructs an XmlAdaptedTask."},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"    public XmlAdaptedTask() {}"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"     * Constructs an {@code XmlAdaptedTask} with the given task details."},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"    public XmlAdaptedTask(String title, String time) {"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"        this.title \u003d title;"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        this.time \u003d time;"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"     * Converts a given Task into this class for JAXB use."},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"     *"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedTask"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"    public XmlAdaptedTask(Task source) {"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"        title \u003d source.getTitle().toString();"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"        time \u003d source.getTime().toString();"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Task object."},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"     *"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted task"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"    public Task toModelType() throws IllegalValueException {"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"        if (this.title \u003d\u003d null) {"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"        if (!Title.isValidTitle(this.title)) {"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"            throw new IllegalValueException(Title.MESSAGE_TITLE_CONSTRAINTS);"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"        final Title title \u003d new Title(this.title);"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"        if (this.time \u003d\u003d null) {"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Time\"));"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"        final EventTime time \u003d new EventTime(this.time);"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"        return new Task(title, time);"},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"    public boolean equals(Object other) {"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"            return true;"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"        if (!(other instanceof XmlAdaptedTask)) {"},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"            return false;"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedTask otherTask \u003d (XmlAdaptedTask) other;"},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":"        return Objects.equals(title, otherTask.title)"},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 Objects.equals(time, otherTask.time);"},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":83,"-":2}},{"path":"src/main/java/seedu/address/model/person/Student.java","lines":[{"lineNumber":1,"author":{"gitID":"randypx"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"randypx"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":6,"author":{"gitID":"randypx"},"content":""},{"lineNumber":7,"author":{"gitID":"randypx"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"randypx"},"content":" * Represents a Student in the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"randypx"},"content":"public class Student extends Person {"},{"lineNumber":12,"author":{"gitID":"randypx"},"content":""},{"lineNumber":13,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"randypx"},"content":"     * Every field must be present and not null."},{"lineNumber":15,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"randypx"},"content":"    public Student(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"},{"lineNumber":17,"author":{"gitID":"randypx"},"content":"        super(name, phone, email, address, tags);"},{"lineNumber":18,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"randypx"},"content":"}"}],"authorContributionMap":{"randypx":14,"-":5}},{"path":"src/main/java/seedu/address/model/event/Appointment.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":" * Represent an appointment in the schedule, contains time of the appointment as well as details and personMeet."},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"public class Appointment {"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_TIME_PERIOD_CONSTRAINTS \u003d \"The end time should be after the start time\";"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"    private final Title title;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"    private final EventTime time;"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"    private final EventTime endTime;"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    private final PersonToMeet personToMeet;"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    //Every field must be present and not null"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    public Appointment(Title title, EventTime startTime, EventTime endTime) {"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"        this(title, startTime, endTime, null);"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    //Every field except personToMeet must be present and not null"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"    public Appointment(Title title, EventTime startTime, EventTime endTime, PersonToMeet personToMeet) {"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"        requireAllNonNull(title, startTime, endTime);"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"        checkArgument(isValidTime(startTime, endTime), MESSAGE_TIME_PERIOD_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"        this.title \u003d title;"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"        this.time \u003d startTime;"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"        this.personToMeet \u003d personToMeet;"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"    public Title getTitle() {"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"        return title;"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"    public EventTime getTime() {"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"        return time;"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"    public EventTime getEndTime() {"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"        return endTime;"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"    public PersonToMeet getPersonToMeet() {"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"        return personToMeet;"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"            return true;"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"        if (!(other instanceof Appointment)) {"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"            return false;"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"        Appointment otherAppointment \u003d (Appointment) other;"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"        return otherAppointment.getTitle().equals(this.getTitle())"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 otherAppointment.getTime().equals(this.getTime())"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 otherAppointment.getEndTime().equals(this.getEndTime());"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"    public String toString() {"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"        builder.append(getTitle())"},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"                .append(\", Start Time: \")"},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":"                .append(getTime().toString())"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":"                .append(\", End Time: \")"},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"                .append(getEndTime().toString());"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"        if (personToMeet !\u003d null) {"},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"            builder.append(\", With: \")"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"                    .append(personToMeet.getName());"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"        return builder.toString();"},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":"     * Returns true if the given time is valid"},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":"    public static boolean isValidTime(EventTime startTime, EventTime endTime) {"},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":"        return endTime.value.after(startTime.value);"},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":86}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.UniqueEventList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.ShortcutDoubles;"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.UniqueShortcutDoublesList;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"    private final UniqueEventList\u003cAppointment\u003e appointments;"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"    private final UniqueEventList\u003cTask\u003e tasks;"},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":"    private final UniqueShortcutDoublesList shorcutCommands;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        appointments \u003d new UniqueEventList\u003cAppointment\u003e();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        tasks \u003d new UniqueEventList\u003cTask\u003e();"},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":"        shorcutCommands \u003d new UniqueShortcutDoublesList();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments)"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            throws UniqueEventList.DuplicateEventException {"},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"        this.appointments.setEvents(appointments);"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":77,"author":{"gitID":"shanmu9898"},"content":"    public void setShorcutCommands(List\u003cShortcutDoubles\u003e shorcutCommands) {"},{"lineNumber":78,"author":{"gitID":"shanmu9898"},"content":"        this.shorcutCommands.setCommandsList(shorcutCommands);"},{"lineNumber":79,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":"    public void setTasks(List\u003cTask\u003e tasks)"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            throws UniqueEventList.DuplicateEventException {"},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":"        this.tasks.setEvents(tasks);"},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":"        List\u003cAppointment\u003e appointmentList \u003d newData.getAppointmentList();"},{"lineNumber":96,"author":{"gitID":"Sisyphus25"},"content":"        List\u003cTask\u003e taskList \u003d newData.getTaskList();"},{"lineNumber":97,"author":{"gitID":"shanmu9898"},"content":"        List\u003cShortcutDoubles\u003e commandsList \u003d newData.getCommandsList();"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":101,"author":{"gitID":"Sisyphus25"},"content":"            setAppointments(appointmentList);"},{"lineNumber":102,"author":{"gitID":"Sisyphus25"},"content":"            setTasks(taskList);"},{"lineNumber":103,"author":{"gitID":"shanmu9898"},"content":"            setShorcutCommands(commandsList);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":105,"author":{"gitID":"shanmu9898"},"content":"            throw new AssertionError(\"TeachConnect should not have duplicate persons\");"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        } catch (UniqueEventList.DuplicateEventException e) {"},{"lineNumber":107,"author":{"gitID":"shanmu9898"},"content":"            throw new AssertionError(\"TeachConnect should not have duplicate events\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":125,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":146,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":147,"author":{"gitID":"randypx"},"content":"        removeUnusedTags();"},{"lineNumber":148,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":150,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Removes all {@code Tag}s that are not used by any {@code Person} in this {@code AddressBook}."},{"lineNumber":152,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"shanmu9898"},"content":"    private void removeUnusedTags() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagsInPersons \u003d persons.asObservableList().stream().map(Person::getTags).flatMap(Set::stream)"},{"lineNumber":155,"author":{"gitID":"shanmu9898"},"content":"                                 .collect(Collectors.toSet());"},{"lineNumber":156,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        tags.setTags(tagsInPersons);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":175,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":178,"author":{"gitID":"-"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(), correctTagReferences);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"shanmu9898"},"content":"     *"},{"lineNumber":195,"author":{"gitID":"shanmu9898"},"content":"     * @param commandShortcut"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * @return a boolean variable"},{"lineNumber":197,"author":{"gitID":"shanmu9898"},"content":"     * @throws UniqueShortcutDoublesList.CommandShortcutNotFoundException"},{"lineNumber":198,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":199,"author":{"gitID":"shanmu9898"},"content":"    public boolean removeShortcutDouble(ShortcutDoubles commandShortcut)"},{"lineNumber":200,"author":{"gitID":"shanmu9898"},"content":"            throws UniqueShortcutDoublesList.CommandShortcutNotFoundException {"},{"lineNumber":201,"author":{"gitID":"shanmu9898"},"content":"        if (shorcutCommands.remove(commandShortcut)) {"},{"lineNumber":202,"author":{"gitID":"shanmu9898"},"content":"            return true;"},{"lineNumber":203,"author":{"gitID":"shanmu9898"},"content":"        } else {"},{"lineNumber":204,"author":{"gitID":"shanmu9898"},"content":"            throw new UniqueShortcutDoublesList.CommandShortcutNotFoundException();"},{"lineNumber":205,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"shanmu9898"},"content":"    public void addShortcutDoubles(ShortcutDoubles s)"},{"lineNumber":215,"author":{"gitID":"shanmu9898"},"content":"            throws UniqueShortcutDoublesList.DuplicateShortcutDoublesException {"},{"lineNumber":216,"author":{"gitID":"shanmu9898"},"content":"        shorcutCommands.add(s);"},{"lineNumber":217,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":223,"author":{"gitID":"Sisyphus25"},"content":"        return persons.asObservableList().size() + \" persons, \""},{"lineNumber":224,"author":{"gitID":"Sisyphus25"},"content":"                + tags.asObservableList().size() +  \" tags, \""},{"lineNumber":225,"author":{"gitID":"Sisyphus25"},"content":"                + appointments.asObservableList().size() + \" appointments, \""},{"lineNumber":226,"author":{"gitID":"Sisyphus25"},"content":"                + tasks.asObservableList().size() +  \" tasks\";"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":241,"author":{"gitID":"shanmu9898"},"content":"    public ObservableList\u003cShortcutDoubles\u003e getCommandsList() {"},{"lineNumber":242,"author":{"gitID":"shanmu9898"},"content":"        return shorcutCommands.asObservableList();"},{"lineNumber":243,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":245,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":246,"author":{"gitID":"Sisyphus25"},"content":"    public ObservableList\u003cAppointment\u003e getAppointmentList() {"},{"lineNumber":247,"author":{"gitID":"Sisyphus25"},"content":"        return appointments.asObservableList();"},{"lineNumber":248,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":250,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":251,"author":{"gitID":"Sisyphus25"},"content":"    public ObservableList\u003cTask\u003e getTaskList() {"},{"lineNumber":252,"author":{"gitID":"Sisyphus25"},"content":"        return tasks.asObservableList();"},{"lineNumber":253,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":258,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":259,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":260,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 this.appointments.equals(((AddressBook) other).appointments)"},{"lineNumber":261,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 this.tasks.equals(((AddressBook) other).tasks)"},{"lineNumber":262,"author":{"gitID":"shanmu9898"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags)"},{"lineNumber":263,"author":{"gitID":"shanmu9898"},"content":"                \u0026\u0026 this.shorcutCommands.equals(((AddressBook) other).shorcutCommands));"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":269,"author":{"gitID":"Sisyphus25"},"content":"        return Objects.hash(persons, appointments, tasks, tags);"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":272,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * Removes the particular tag for all people in the AddressBook }."},{"lineNumber":274,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":275,"author":{"gitID":"shanmu9898"},"content":"    public void removeTag(Tag tag) throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":276,"author":{"gitID":"shanmu9898"},"content":"        for (Person person : persons) {"},{"lineNumber":277,"author":{"gitID":"shanmu9898"},"content":"            removeTagFromPerson(tag, person);"},{"lineNumber":278,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":279,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":280,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":281,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":282,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     * Removes the particular tag for that particular person in the AddressBook }."},{"lineNumber":284,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":285,"author":{"gitID":"shanmu9898"},"content":"    private void removeTagFromPerson(Tag tag, Person person) throws PersonNotFoundException, DuplicatePersonException {"},{"lineNumber":286,"author":{"gitID":"shanmu9898"},"content":"        Set\u003cTag\u003e listOfTags \u003d new HashSet\u003c\u003e(person.getTags());"},{"lineNumber":287,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":288,"author":{"gitID":"shanmu9898"},"content":"        if (listOfTags.contains(tag)) {"},{"lineNumber":289,"author":{"gitID":"shanmu9898"},"content":"            listOfTags.remove(tag);"},{"lineNumber":290,"author":{"gitID":"shanmu9898"},"content":"        } else {"},{"lineNumber":291,"author":{"gitID":"shanmu9898"},"content":"            return;"},{"lineNumber":292,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":293,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":294,"author":{"gitID":"shanmu9898"},"content":"        Person updatedPerson \u003d new Person(person.getName(), person.getPhone(), person.getEmail(),"},{"lineNumber":295,"author":{"gitID":"shanmu9898"},"content":"                                          person.getAddress(), listOfTags);"},{"lineNumber":296,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":297,"author":{"gitID":"shanmu9898"},"content":"        updatePerson(person, updatedPerson);"},{"lineNumber":298,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":299,"author":{"gitID":"randypx"},"content":""},{"lineNumber":300,"author":{"gitID":"Sisyphus25"},"content":"    //@@author Sisyphus25"},{"lineNumber":301,"author":{"gitID":"Sisyphus25"},"content":"    //event operations"},{"lineNumber":302,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":303,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":304,"author":{"gitID":"Sisyphus25"},"content":"     * Adds an appointment to the address book."},{"lineNumber":305,"author":{"gitID":"Sisyphus25"},"content":"     *"},{"lineNumber":306,"author":{"gitID":"Sisyphus25"},"content":"     * @throws UniqueEventList.DuplicateEventException if an equivalent appointment already exists."},{"lineNumber":307,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":308,"author":{"gitID":"Sisyphus25"},"content":"    public void addAppointment(Appointment e) throws UniqueEventList.DuplicateEventException {"},{"lineNumber":309,"author":{"gitID":"Sisyphus25"},"content":"        appointments.add(e);"},{"lineNumber":310,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":311,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":312,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":313,"author":{"gitID":"Sisyphus25"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":314,"author":{"gitID":"Sisyphus25"},"content":"     * @throws UniqueEventList.EventNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":315,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":316,"author":{"gitID":"Sisyphus25"},"content":"    public boolean removeAppointment(Appointment key) throws UniqueEventList.EventNotFoundException {"},{"lineNumber":317,"author":{"gitID":"Sisyphus25"},"content":"        if (appointments.remove(key)) {"},{"lineNumber":318,"author":{"gitID":"Sisyphus25"},"content":"            return true;"},{"lineNumber":319,"author":{"gitID":"Sisyphus25"},"content":"        } else {"},{"lineNumber":320,"author":{"gitID":"Sisyphus25"},"content":"            throw new UniqueEventList.EventNotFoundException();"},{"lineNumber":321,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":322,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":323,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":324,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":325,"author":{"gitID":"Sisyphus25"},"content":"     * Adds a task to the address book."},{"lineNumber":326,"author":{"gitID":"Sisyphus25"},"content":"     *"},{"lineNumber":327,"author":{"gitID":"Sisyphus25"},"content":"     * @throws UniqueEventList.DuplicateEventException if an equivalent appointment already exists."},{"lineNumber":328,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":329,"author":{"gitID":"Sisyphus25"},"content":"    public void addTask(Task e) throws UniqueEventList.DuplicateEventException {"},{"lineNumber":330,"author":{"gitID":"Sisyphus25"},"content":"        tasks.add(e);"},{"lineNumber":331,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":332,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":333,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":334,"author":{"gitID":"Sisyphus25"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":335,"author":{"gitID":"Sisyphus25"},"content":"     * @throws UniqueEventList.EventNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":336,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":337,"author":{"gitID":"Sisyphus25"},"content":"    public boolean removeTask(Task key) throws UniqueEventList.EventNotFoundException  {"},{"lineNumber":338,"author":{"gitID":"Sisyphus25"},"content":"        if (tasks.remove(key)) {"},{"lineNumber":339,"author":{"gitID":"Sisyphus25"},"content":"            return true;"},{"lineNumber":340,"author":{"gitID":"Sisyphus25"},"content":"        } else {"},{"lineNumber":341,"author":{"gitID":"Sisyphus25"},"content":"            throw new UniqueEventList.EventNotFoundException();"},{"lineNumber":342,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":343,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":344,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":80,"randypx":3,"-":193,"shanmu9898":68}},{"path":"src/main/java/seedu/address/model/shortcuts/ShortcutDoubles.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.model.shortcuts;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":" * Represents a Command Double"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":" */"},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":"public class ShortcutDoubles {"},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":"    public final String shortcutWord;"},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":"    public final String commandWord;"},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":"    public ShortcutDoubles(String shortcutWord, String commandWord) {"},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(shortcutWord);"},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(commandWord);"},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":"        this.shortcutWord \u003d shortcutWord;"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"        this.commandWord \u003d commandWord;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"                || (other instanceof ShortcutDoubles // instanceof handles nulls"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":"                \u0026\u0026 this.shortcutWord.equals(((ShortcutDoubles) other).shortcutWord)"},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"                \u0026\u0026 this.commandWord.equals(((ShortcutDoubles) other).commandWord)); // state check"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"-":7,"shanmu9898":20}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.events.model.AppointmentListChangedEvent;"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.UniqueEventList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.ShortcutDoubles;"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.UniqueShortcutDoublesList;"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":28,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"    public static final String LIST_TYPE_PERSON \u003d \"person\";"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"    public static final String LIST_TYPE_APPOINTMENT \u003d \"appointment\";"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"    public static final String LIST_TYPE_TASK \u003d \"task\";"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"    private final FilteredList\u003cAppointment\u003e filteredAppointments;"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"    private final FilteredList\u003cTask\u003e filteredTasks;"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"    private final FilteredList\u003cShortcutDoubles\u003e filteredShortcutCommands;"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"    private String currentActiveListType;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"        filteredAppointments \u003d new FilteredList\u003c\u003e(this.addressBook.getAppointmentList());"},{"lineNumber":56,"author":{"gitID":"shanmu9898"},"content":"        filteredShortcutCommands \u003d new FilteredList\u003c\u003e(this.addressBook.getCommandsList());"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"        filteredTasks \u003d new FilteredList\u003c\u003e(this.addressBook.getTaskList());"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"        currentActiveListType \u003d LIST_TYPE_PERSON;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":"    /** Raises an event to indicate the appointment list has changed */"},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":"    private void indicateAppointmentListChanged() {"},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":"        raise(new AppointmentListChangedEvent(addressBook.getAppointmentList()));"},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":100,"author":{"gitID":"shanmu9898"},"content":"    public synchronized void addCommandShortcut(ShortcutDoubles shortcutDoubles)"},{"lineNumber":101,"author":{"gitID":"shanmu9898"},"content":"               throws UniqueShortcutDoublesList.DuplicateShortcutDoublesException {"},{"lineNumber":102,"author":{"gitID":"shanmu9898"},"content":"        addressBook.addShortcutDoubles(shortcutDoubles);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":107,"author":{"gitID":"shanmu9898"},"content":"    public synchronized void deleteCommandShortcut(ShortcutDoubles shortcutDoubles)"},{"lineNumber":108,"author":{"gitID":"shanmu9898"},"content":"            throws UniqueShortcutDoublesList.CommandShortcutNotFoundException {"},{"lineNumber":109,"author":{"gitID":"shanmu9898"},"content":"        addressBook.removeShortcutDouble(shortcutDoubles);"},{"lineNumber":110,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"randypx"},"content":"    @Override"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public void addAppointment(Appointment appointment) throws UniqueEventList.DuplicateEventException {"},{"lineNumber":123,"author":{"gitID":"Sisyphus25"},"content":"        addressBook.addAppointment(appointment);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":125,"author":{"gitID":"Sisyphus25"},"content":"        indicateAppointmentListChanged();"},{"lineNumber":126,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":128,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void deleteAppointment(Appointment target) throws UniqueEventList.EventNotFoundException {"},{"lineNumber":130,"author":{"gitID":"Sisyphus25"},"content":"        addressBook.removeAppointment(target);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":132,"author":{"gitID":"Sisyphus25"},"content":"        indicateAppointmentListChanged();"},{"lineNumber":133,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":135,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public void addTask(Task task) throws UniqueEventList.DuplicateEventException {"},{"lineNumber":137,"author":{"gitID":"Sisyphus25"},"content":"        addressBook.addTask(task);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public void deleteTask(Task target) throws UniqueEventList.EventNotFoundException {"},{"lineNumber":143,"author":{"gitID":"Sisyphus25"},"content":"        addressBook.removeTask(target);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":160,"author":{"gitID":"Sisyphus25"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":161,"author":{"gitID":"Sisyphus25"},"content":"        return FXCollections.unmodifiableObservableList(filteredAppointments);"},{"lineNumber":162,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":164,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":165,"author":{"gitID":"Sisyphus25"},"content":"    public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":166,"author":{"gitID":"Sisyphus25"},"content":"        return FXCollections.unmodifiableObservableList(filteredTasks);"},{"lineNumber":167,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":169,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":170,"author":{"gitID":"shanmu9898"},"content":"    public ObservableList\u003cShortcutDoubles\u003e getFilteredCommandsList() {"},{"lineNumber":171,"author":{"gitID":"shanmu9898"},"content":"        return FXCollections.unmodifiableObservableList(filteredShortcutCommands);"},{"lineNumber":172,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":174,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":175,"author":{"gitID":"Sisyphus25"},"content":"    public String getCurrentActiveListType() {"},{"lineNumber":176,"author":{"gitID":"Sisyphus25"},"content":"        return currentActiveListType;"},{"lineNumber":177,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":179,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":180,"author":{"gitID":"Sisyphus25"},"content":"    public void changeCurrentActiveListType(String itemType) {"},{"lineNumber":181,"author":{"gitID":"Sisyphus25"},"content":"        currentActiveListType \u003d itemType;"},{"lineNumber":182,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":205,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":209,"author":{"gitID":"shanmu9898"},"content":"    public void deleteTag(Tag tag) throws PersonNotFoundException, DuplicatePersonException {"},{"lineNumber":210,"author":{"gitID":"shanmu9898"},"content":"        addressBook.removeTag(tag);"},{"lineNumber":211,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":52,"randypx":1,"-":135,"shanmu9898":25}},{"path":"src/main/java/seedu/address/model/event/Event.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":" * Represents an Event in the schedule."},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"public interface Event {"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"    Title getTitle();"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"    EventTime getTime();"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":9}},{"path":"src/main/java/seedu/address/model/event/Task.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":" * Represent a Task in the schedule, contains deadline as well as the title"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"public class Task {"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"    private Title title;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"    private EventTime time;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"    //Every field must be present and not null"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"    public Task(Title title, EventTime deadline) {"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"        requireAllNonNull(title, deadline);"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"        this.title \u003d title;"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"        this.time \u003d deadline;"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"    public Title getTitle() {"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"        return title;"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"    public EventTime getTime() {"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"        return time;"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"    public boolean equals(Object other) {"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"            return true;"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"        if (!(other instanceof Task)) {"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"            return false;"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"        Task otherTask \u003d (Task) other;"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"        return otherTask.getTitle().equals(this.getTitle())"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 otherTask.getTime().equals(this.getTime());"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"        return title + \", Deadline: \" + time;"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":45,"-":2}},{"path":"src/main/java/seedu/address/model/event/Title.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":" * Represents an event\u0027s title in the address book."},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"public class Title {"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_TITLE_CONSTRAINTS \u003d \"Title must be non empty\";"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"    /*"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"     * The title can not be empty string or spaces only"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    private static final String TITLE_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    public final String value;"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"     * Constructs a {@code Title}."},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"     *"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"     * @param title A valid title."},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    public Title(String title) {"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(title);"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"        checkArgument(isValidTitle(title), MESSAGE_TITLE_CONSTRAINTS);"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        this.value \u003d title;"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"     * Returns true if a given string is a valid title."},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"    public static boolean isValidTitle(String test) {"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        return test.matches(TITLE_VALIDATION_REGEX);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"                || (other instanceof Title // instanceof handles nulls"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 this.value.equals(((Title) other).value)); // state check"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":35,"-":20}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Represents a Tag in the address book."},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class Tag {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_TAG_NAME_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_TAG_COLOR_STYLE_CONSTRAINTS \u003d \"Tag color style is invalid or not supported\";"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    private static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":17,"content":"    //@@author Sisyphus25-reused"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    //Reused from https://github.com/se-edu/addressbook-level4/pull/798/commits/167b3d0b4f7ad34296d2fbf505f9ae71f983f53c"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    private static final String[] TAG_COLOR_STYLES \u003d {\"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\","},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"        \"green\", \"pink\", \"black\", \"grey\"};"},{"lineNumber":21,"content":"    //@@author"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"    public final String tagColorStyle;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public final String tagName;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public Tag(String tagName) {"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"        this(tagName, \"default\");"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"     * @param tagColorStyle A valid tag color style"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"    public Tag(String tagName, String tagColorStyle) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        requireNonNull(tagName);"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(tagColorStyle);"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"        if (tagColorStyle.equals(\"default\")) {"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"            tagColorStyle \u003d getTagColorStyle(tagName);"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_TAG_NAME_CONSTRAINTS);"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"        checkArgument(isValidTagColorStyle(tagColorStyle), MESSAGE_TAG_COLOR_STYLE_CONSTRAINTS);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"        this.tagColorStyle \u003d tagColorStyle;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return test.matches(TAG_VALIDATION_REGEX);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"     * Returns true if a given string is a valid tag color style."},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"    public static boolean isValidTagColorStyle(String tagColorStyle) {"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"        return Arrays.asList(TAG_COLOR_STYLES).contains(tagColorStyle);"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":72,"author":{"gitID":"shanmu9898"},"content":"                \u0026\u0026 this.tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"content":"    //@@author Sisyphus25-reused"},{"lineNumber":88,"author":{"gitID":"Sisyphus25"},"content":"    //Reused from https://github.com/se-edu/addressbook-level4/pull/798/commits/167b3d0b4f7ad34296d2fbf505f9ae71f983f53c"},{"lineNumber":89,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"Sisyphus25"},"content":"     * Returns a color style for {@code tagName}"},{"lineNumber":91,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"Sisyphus25"},"content":"    private String getTagColorStyle(String tagName) {"},{"lineNumber":93,"author":{"gitID":"Sisyphus25"},"content":"        // we use the hash code of the tag name to generate a random color, so that the color remain consistent"},{"lineNumber":94,"author":{"gitID":"Sisyphus25"},"content":"        // between different runs of the program while still making it random enough between tags."},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":"        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"},{"lineNumber":96,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":98,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":3,"Sisyphus25":41,"-":54,"shanmu9898":1}},{"path":"src/main/java/seedu/address/model/event/PersonToMeet.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.model.person.Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.model.person.Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":" * Represents an Appointment\u0027s personToMeet in the address book."},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":" * Guarantees: immutable;"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"public class PersonToMeet {"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    public static final String EMAIL_SPLITTER \u003d \" Email: \";"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"    private final String name;"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    private final String email;"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    public PersonToMeet(Person person) {"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(person);"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"        this.name \u003d person.getName().fullName;"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"        this.email \u003d person.getEmail().value;"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"    public PersonToMeet(String name, String email) {"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(name, email);"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"        checkArgument(Name.isValidName(name), MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"        checkArgument(Email.isValidEmail(email), MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"        this.name \u003d name;"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"        this.email \u003d email;"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"    public String getName() {"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"        return name;"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"    public String getEmail() {"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"        return email;"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"    public String toString() {"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"        return name + EMAIL_SPLITTER + email;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"                || (other instanceof PersonToMeet // instanceof handles nulls"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 this.name.equals(((PersonToMeet) other).name))"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 this.name.equals(((PersonToMeet) other).email); // state check"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":46,"-":11}},{"path":"src/main/java/seedu/address/model/shortcuts/UniqueShortcutDoublesList.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.model.shortcuts;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":" *"},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":" */"},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"public class UniqueShortcutDoublesList {"},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"    private final ObservableList\u003cShortcutDoubles\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"    public UniqueShortcutDoublesList(){"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":"     * Adds Shortcut Doubles to the internal list"},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"     * @param toAdd"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"     * @throws DuplicateShortcutDoublesException"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"    public void add(ShortcutDoubles toAdd) throws DuplicateShortcutDoublesException {"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(toAdd);"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"        if (contains(toAdd)) {"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"            throw new DuplicateShortcutDoublesException();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":"     * Returns an ObservableList of the internallist"},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"     * @return"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":"    public ObservableList\u003cShortcutDoubles\u003e asObservableList() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":"     * Gives a duplicate Except"},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":"    public static class DuplicateShortcutDoublesException extends DuplicateDataException {"},{"lineNumber":51,"author":{"gitID":"shanmu9898"},"content":"        protected DuplicateShortcutDoublesException() {"},{"lineNumber":52,"author":{"gitID":"shanmu9898"},"content":"            super(\"Operation would result in duplicate Doubles\");"},{"lineNumber":53,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":56,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"shanmu9898"},"content":"     * Helps in checking if there are duplicates"},{"lineNumber":58,"author":{"gitID":"shanmu9898"},"content":"     * @param toCheck"},{"lineNumber":59,"author":{"gitID":"shanmu9898"},"content":"     * @return"},{"lineNumber":60,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"shanmu9898"},"content":"    public boolean contains(ShortcutDoubles toCheck) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":70,"author":{"gitID":"shanmu9898"},"content":"                || (other instanceof UniqueShortcutDoublesList // instanceof handles nulls"},{"lineNumber":71,"author":{"gitID":"shanmu9898"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueShortcutDoublesList) other).internalList));"},{"lineNumber":72,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":74,"author":{"gitID":"shanmu9898"},"content":"    public void setCommandsList(List\u003cShortcutDoubles\u003e commandsList) {"},{"lineNumber":75,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(commandsList);"},{"lineNumber":76,"author":{"gitID":"shanmu9898"},"content":"        internalList.setAll(commandsList);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":78,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":80,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"shanmu9898"},"content":"     * Removes the equvivalent command shortcut from the list."},{"lineNumber":82,"author":{"gitID":"shanmu9898"},"content":"     * @param shortcutDoubles"},{"lineNumber":83,"author":{"gitID":"shanmu9898"},"content":"     *"},{"lineNumber":84,"author":{"gitID":"shanmu9898"},"content":"     * @throws UniqueShortcutDoublesList.CommandShortcutNotFoundException"},{"lineNumber":85,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"shanmu9898"},"content":"    public boolean remove(ShortcutDoubles shortcutDoubles)"},{"lineNumber":87,"author":{"gitID":"shanmu9898"},"content":"            throws UniqueShortcutDoublesList.CommandShortcutNotFoundException {"},{"lineNumber":88,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(shortcutDoubles);"},{"lineNumber":89,"author":{"gitID":"shanmu9898"},"content":"        final boolean shortcutToBeDeleted \u003d internalList.remove(shortcutDoubles);"},{"lineNumber":90,"author":{"gitID":"shanmu9898"},"content":"        if (!shortcutToBeDeleted) {"},{"lineNumber":91,"author":{"gitID":"shanmu9898"},"content":"            throw new UniqueShortcutDoublesList.CommandShortcutNotFoundException();"},{"lineNumber":92,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"shanmu9898"},"content":"        return shortcutToBeDeleted;"},{"lineNumber":94,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":96,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"shanmu9898"},"content":"     * Exception when the command shortcut is not present in the list of stored commands"},{"lineNumber":98,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"shanmu9898"},"content":"    public static class CommandShortcutNotFoundException extends Exception {}"},{"lineNumber":100,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"-":25,"shanmu9898":75}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.UniqueEventList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.ShortcutDoubles;"},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.UniqueShortcutDoublesList;"},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"    String LIST_TYPE_PERSON \u003d \"person\";"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    String LIST_TYPE_APPOINTMENT \u003d \"appointment\";"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"    String LIST_TYPE_TASK \u003d \"task\";"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":"    void addCommandShortcut(ShortcutDoubles shortcutDoubles)"},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"            throws UniqueShortcutDoublesList.DuplicateShortcutDoublesException;"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"    /** Returns an unmodifiable view of the filtered appointment list */"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"    /** Returns an unmodifiable view of the filtered appointment list */"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"    ObservableList\u003cTask\u003e getFilteredTaskList();"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"    /** Returns the item type of the curent active list being shown in the GUI */"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"    String getCurrentActiveListType();"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":64,"author":{"gitID":"shanmu9898"},"content":"    /** Deletes the given command shortcut */"},{"lineNumber":65,"author":{"gitID":"shanmu9898"},"content":"    void deleteCommandShortcut(ShortcutDoubles commandShortcut)"},{"lineNumber":66,"author":{"gitID":"shanmu9898"},"content":"            throws UniqueShortcutDoublesList.CommandShortcutNotFoundException;"},{"lineNumber":67,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"shanmu9898"},"content":"    ObservableList\u003cShortcutDoubles\u003e getFilteredCommandsList();"},{"lineNumber":75,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":76,"author":{"gitID":"shanmu9898"},"content":"    void deleteTag(Tag tag) throws PersonNotFoundException, DuplicatePersonException;"},{"lineNumber":77,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"    /** Adds the given appointment */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    void addAppointment(Appointment appointment) throws UniqueEventList.DuplicateEventException;"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":"    /** Deletes the given appointment. */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    void deleteAppointment(Appointment appointment) throws UniqueEventList.EventNotFoundException;"},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":"    /** Adds the given task */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    void addTask(Task task) throws UniqueEventList.DuplicateEventException;"},{"lineNumber":86,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":87,"author":{"gitID":"Sisyphus25"},"content":"    /** Deletes the given task */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    void deleteTask(Task task) throws UniqueEventList.EventNotFoundException;"},{"lineNumber":89,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":90,"author":{"gitID":"Sisyphus25"},"content":"    /** Change the current active list that is being displayed in the model */"},{"lineNumber":91,"author":{"gitID":"Sisyphus25"},"content":"    void changeCurrentActiveListType(String itemType);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":26,"-":52,"shanmu9898":14}},{"path":"src/main/java/seedu/address/model/event/EventTime.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import java.text.DateFormat;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import java.text.ParseException;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Calendar;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Date;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":" * Represents an event\u0027s time stamp in the address book."},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":" * Guarantees: immutable"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"public class EventTime {"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_TIME_CONSTRAINTS \u003d \"Time must be in the format dd/MM/yyyy HH:mm\";"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    private static final String DATE_FORMAT \u003d \"dd/MM/yyyy HH:mm\";"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    private static final DateFormat DATE_FORMATTER \u003d new SimpleDateFormat(DATE_FORMAT);"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    public final Calendar value;"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"     * Constructs a {@code EventTime}."},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"     * @param timeStamp valid timeStamp."},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"    public EventTime(String timeStamp) {"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(timeStamp);"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"        value \u003d Calendar.getInstance();"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"        try {"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"            this.value.setTime(DATE_FORMATTER.parse(timeStamp));"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"        } catch (ParseException e) {"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"            throw new IllegalArgumentException(MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"     * Returns true if the given time has already passed the current time"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"    public boolean isExpired() {"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"        Calendar currentTime \u003d Calendar.getInstance();"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"        currentTime.setTime(new Date());"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"        return value.before(currentTime);"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"    public String toString() {"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"        return DATE_FORMATTER.format(value.getTime());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"                || (other instanceof EventTime // instanceof handles nulls"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 this.value.equals(((EventTime) other).value)); // state check"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":51,"-":13}},{"path":"src/main/java/seedu/address/model/event/UniqueEventList.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":" * A list of events that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":" *"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":" * Supports a minimal set of list operations."},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"public class UniqueEventList\u003cA\u003e implements Iterable\u003cA\u003e {"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"    private final ObservableList\u003cA\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"     * Returns true if the list contains an equivalent Event as the given argument."},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    public boolean contains(A toCheck) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"     * Adds an Event to the list."},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"     *"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"     * @throws DuplicateEventException if the event to add"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"     * is a duplicate of an existing Event in the list."},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"    public void add(A toAdd) throws DuplicateEventException {"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(toAdd);"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"        if (contains(toAdd)) {"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"            throw new DuplicateEventException();"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"        internalList.add(toAdd);"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"     * Removes the equivalent Event from the list."},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"     *"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"     * @throws EventNotFoundException if no such event could be found in the list."},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"    public boolean remove(A toRemove) throws EventNotFoundException {"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(toRemove);"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"        final boolean eventFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"        if (!eventFoundAndDeleted) {"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"            throw new EventNotFoundException();"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"        return eventFoundAndDeleted;"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"    public void setEvents(UniqueEventList\u003cA\u003e replacement) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"    public void setEvents(List\u003cA\u003e events) throws DuplicateEventException {"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"        requireAllNonNull(events);"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"        final UniqueEventList\u003cA\u003e replacement \u003d new UniqueEventList\u003cA\u003e();"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"        for (final A event : events) {"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"            replacement.add(event);"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"        setEvents(replacement);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"    public ObservableList\u003cA\u003e asObservableList() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"    public Iterator\u003cA\u003e iterator() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":86,"author":{"gitID":"Sisyphus25"},"content":"                || (other instanceof UniqueEventList // instanceof handles nulls"},{"lineNumber":87,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueEventList\u003cA\u003e) other).internalList));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public static class DuplicateEventException extends DuplicateDataException {"},{"lineNumber":99,"author":{"gitID":"Sisyphus25"},"content":"        public DuplicateEventException() {"},{"lineNumber":100,"author":{"gitID":"Sisyphus25"},"content":"            super(\"Operation would result in duplicate events\");"},{"lineNumber":101,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"Sisyphus25"},"content":"     * Signals that an operation is looking for an appointment doesn\u0027t exist."},{"lineNumber":105,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public static class EventNotFoundException extends Exception {"},{"lineNumber":107,"author":{"gitID":"Sisyphus25"},"content":"        public EventNotFoundException() {"},{"lineNumber":108,"author":{"gitID":"Sisyphus25"},"content":"            super(\"Event not found\");"},{"lineNumber":109,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":73,"-":38}}]
