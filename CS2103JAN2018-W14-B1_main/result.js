var resultJson = [{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_STUDENT;"},{"lineNumber":18,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_STUDENT;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":27,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_STUDENT;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":29,"author":{"gitID":"randypx"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":32,"author":{"gitID":"randypx"},"content":"import static seedu.address.testutil.TypicalPersons.IVAN;"},{"lineNumber":33,"author":{"gitID":"randypx"},"content":"import static seedu.address.testutil.TypicalPersons.JOHN;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":35,"author":{"gitID":"randypx"},"content":"import static seedu.address.testutil.TypicalPersons.STUDENT_AMY;"},{"lineNumber":36,"author":{"gitID":"randypx"},"content":"import static seedu.address.testutil.TypicalPersons.STUDENT_BOB;"},{"lineNumber":37,"author":{"gitID":"randypx"},"content":"import static seedu.address.testutil.TypicalPersons.STUDENT_HOON;"},{"lineNumber":38,"author":{"gitID":"randypx"},"content":"import static seedu.address.testutil.TypicalPersons.STUDENT_IDA;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":53,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":57,"author":{"gitID":"randypx"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"randypx"},"content":"        /* Case: add a student without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":69,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":70,"author":{"gitID":"randypx"},"content":"        Student toAdd \u003d STUDENT_AMY;"},{"lineNumber":71,"author":{"gitID":"randypx"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + PREAMBLE_STUDENT + \"  \" + NAME_DESC_AMY + \"  \""},{"lineNumber":72,"author":{"gitID":"randypx"},"content":"                + PHONE_DESC_AMY + \" \" + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_STUDENT + \" \";"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"randypx"},"content":"        /* Case: add a student with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":87,"author":{"gitID":"randypx"},"content":"        toAdd \u003d new StudentBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":88,"author":{"gitID":"randypx"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_STUDENT).build();"},{"lineNumber":89,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":90,"author":{"gitID":"randypx"},"content":"                + ADDRESS_DESC_AMY + TAG_DESC_STUDENT;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"randypx"},"content":"        /* Case: add a student with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":94,"author":{"gitID":"randypx"},"content":"        toAdd \u003d new StudentBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":95,"author":{"gitID":"randypx"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_STUDENT).build();"},{"lineNumber":96,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY"},{"lineNumber":97,"author":{"gitID":"randypx"},"content":"                + ADDRESS_DESC_AMY + TAG_DESC_STUDENT;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"randypx"},"content":"        /* Case: add a student with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":101,"author":{"gitID":"randypx"},"content":"        toAdd \u003d new StudentBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":102,"author":{"gitID":"randypx"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_STUDENT).build();"},{"lineNumber":103,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":104,"author":{"gitID":"randypx"},"content":"                + ADDRESS_DESC_AMY + TAG_DESC_STUDENT;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"randypx"},"content":"        /* Case: add a student with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":108,"author":{"gitID":"randypx"},"content":"        toAdd \u003d new StudentBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":109,"author":{"gitID":"randypx"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_STUDENT).build();"},{"lineNumber":110,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":111,"author":{"gitID":"randypx"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_STUDENT;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":116,"author":{"gitID":"randypx"},"content":"        assertCommandSuccess(GEORGE);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"randypx"},"content":"        /* Case: add a student with tags, command with parameters in random order -\u003e added */"},{"lineNumber":119,"author":{"gitID":"randypx"},"content":"        toAdd \u003d STUDENT_BOB;"},{"lineNumber":120,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":121,"author":{"gitID":"randypx"},"content":"                + TAG_DESC_STUDENT + EMAIL_DESC_BOB;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"randypx"},"content":"        /* Case: add a student, missing tags -\u003e added */"},{"lineNumber":125,"author":{"gitID":"randypx"},"content":"        assertCommandSuccess(STUDENT_HOON);"},{"lineNumber":126,"author":{"gitID":"randypx"},"content":""},{"lineNumber":127,"author":{"gitID":"randypx"},"content":"        /* Case: add a default person -\u003e added */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":134,"author":{"gitID":"randypx"},"content":"        assertCommandSuccess(JOHN);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"randypx"},"content":"        /* Case: selects first card in the person list, add a student -\u003e added, card selection remains unchanged */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":140,"author":{"gitID":"randypx"},"content":"        assertCommandSuccess(IVAN);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"randypx"},"content":"        /* Case: add a duplicate student -\u003e rejected */"},{"lineNumber":145,"author":{"gitID":"randypx"},"content":"        command \u003d PersonUtil.getAddCommand(STUDENT_HOON);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"randypx"},"content":"        /* Case: add an existing student as default person -\u003e rejected */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"randypx"},"content":"        /* Case: add an existing person as a student -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"randypx"},"content":"        command \u003d PersonUtil.getAddCommand(STUDENT_IDA);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"randypx"},"content":"        /* Case: add a duplicate student except with different tags -\u003e rejected */"},{"lineNumber":157,"author":{"gitID":"randypx"},"content":"        // \"student\" is an existing tag used in the default model, see TypicalPersons#STUDENT_ALICE"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":160,"author":{"gitID":"randypx"},"content":"        command \u003d PersonUtil.getAddCommand(STUDENT_HOON) + \" \" + PREFIX_TAG.getPrefix() + \"student\";"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":164,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":168,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":172,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":176,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":180,"author":{"gitID":"randypx"},"content":"        command \u003d \"adds \" + PREAMBLE_STUDENT + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"randypx"},"content":"        /* Case: invalid type -\u003e rejected */"},{"lineNumber":184,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" stu \" + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":185,"author":{"gitID":"randypx"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":189,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":190,"author":{"gitID":"randypx"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":194,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY"},{"lineNumber":195,"author":{"gitID":"randypx"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":199,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC"},{"lineNumber":200,"author":{"gitID":"randypx"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":204,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":205,"author":{"gitID":"randypx"},"content":"                + INVALID_ADDRESS_DESC;"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":209,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":210,"author":{"gitID":"randypx"},"content":"                + ADDRESS_DESC_AMY"},{"lineNumber":211,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC;"},{"lineNumber":212,"author":{"gitID":"Sisyphus25"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_NAME_CONSTRAINTS);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Person toAdd) {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":234,"author":{"gitID":"randypx"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}."},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":237,"author":{"gitID":"randypx"},"content":"    private void assertCommandSuccess(Student toAdd) {"},{"lineNumber":238,"author":{"gitID":"randypx"},"content":"        assertCommandSuccess(PersonUtil.getAddStudentCommand(toAdd), toAdd);"},{"lineNumber":239,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"randypx"},"content":""},{"lineNumber":241,"author":{"gitID":"randypx"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":254,"author":{"gitID":"randypx"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_ADD_PERSON_SUCCESS, toAdd);"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":264,"author":{"gitID":"randypx"},"content":"    private void assertCommandSuccess(String command, Student toAdd) {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":267,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":271,"author":{"gitID":"randypx"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_ADD_STUDENT_SUCCESS, toAdd);"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":277,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":278,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":279,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":280,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":281,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":282,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":284,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":290,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":293,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":294,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":295,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":296,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":297,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":298,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":299,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":300,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":301,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":302,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":303,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":304,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":309,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":310,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":311,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":312,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":1,"randypx":84,"-":227}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(expectedCard.getTagsNames(), actualCard.getTagsNames());"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"        expectedCard.getTagsNames().forEach(tag -\u003e"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"                assertEquals(expectedCard.getTagStyleClasses(tag), actualCard.getTagStyleClasses(tag)));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"        assertTagsEqual(expectedPerson, actualCard);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPerson} with the correct"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"     * color."},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"    private static void assertTagsEqual(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"        List\u003cString\u003e expectedTagsNames \u003d expectedPerson.getTags().stream()"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"                .map(tag -\u003e tag.tagName).collect(Collectors.toList());"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(expectedTagsNames, actualCard.getTagsNames());"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"        expectedPerson.getTags().forEach(tag -\u003e"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"                assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, tag.tagColorStyle),"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"                        actualCard.getTagStyleClasses(tag.tagName))"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"        );"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":94,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":25,"-":70}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList("},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"            new XmlAdaptedTag(\"classmates\", \"teal\"));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getPersonList().size());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":82,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":84,"author":{"gitID":"-"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":91,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":93,"author":{"gitID":"-"},"content":"                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":100,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":102,"author":{"gitID":"-"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":134,"author":{"gitID":"-"},"content":"                builder.withPerson(new PersonBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":147,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":2,"-":145}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":62,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":65,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":79,"author":{"gitID":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":112,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":113,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":122,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":123,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        selectPerson(index);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":141,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"},{"lineNumber":158,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"},{"lineNumber":162,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"},{"lineNumber":166,"author":{"gitID":"-"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"},{"lineNumber":170,"author":{"gitID":"-"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"},{"lineNumber":174,"author":{"gitID":"Sisyphus25"},"content":"                Tag.MESSAGE_TAG_NAME_CONSTRAINTS);"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":187,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":214,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":218,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":222,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":249,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":1,"-":281}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":18,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_STUDENT;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":22,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_STUDENT;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":33,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.parser.AddCommandParser.MESSAGE_INVALID_TYPE;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"randypx"},"content":"        // student preamble with whitespaces"},{"lineNumber":61,"author":{"gitID":"randypx"},"content":"        assertParseSuccess(parser, PREAMBLE_STUDENT + PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":62,"author":{"gitID":"randypx"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_STUDENT, new AddCommand(expectedPerson));"},{"lineNumber":63,"author":{"gitID":"randypx"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags().build();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":138,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":142,"author":{"gitID":"Sisyphus25"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_NAME_CONSTRAINTS);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"randypx"},"content":"        // invalid type"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":150,"author":{"gitID":"randypx"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, MESSAGE_INVALID_TYPE);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":1,"randypx":9,"-":142}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"},{"lineNumber":88,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_NAME_CONSTRAINTS); // invalid tag"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":99,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY,"},{"lineNumber":100,"author":{"gitID":"Sisyphus25"},"content":"                Tag.MESSAGE_TAG_NAME_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND,"},{"lineNumber":102,"author":{"gitID":"Sisyphus25"},"content":"                Tag.MESSAGE_TAG_NAME_CONSTRAINTS);"},{"lineNumber":103,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND,"},{"lineNumber":104,"author":{"gitID":"Sisyphus25"},"content":"                Tag.MESSAGE_TAG_NAME_CONSTRAINTS);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        // phone"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        // email"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        // address"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        // tags"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased()  + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":175,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":176,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":179,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                .build();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        // no other valid values specified"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        // other valid values specified"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":197,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":199,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":7,"-":207}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void execute_newPerson_success() throws Exception {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedModel.addPerson(validPerson);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(validPerson, model), model,"},{"lineNumber":38,"author":{"gitID":"randypx"},"content":"                String.format(AddCommand.MESSAGE_ADD_PERSON_SUCCESS, validPerson), expectedModel);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandFailure(prepareCommand(personInList, model), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code person} into the {@code model}."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private AddCommand prepareCommand(Person person, Model model) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"randypx":1,"-":54}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":42,"author":{"gitID":"randypx"},"content":"    public static final String VALID_TAG_STUDENT \u003d \"student\";"},{"lineNumber":43,"author":{"gitID":"shanmu9898"},"content":"    public static final String VALID_TAG_NOTUSED \u003d \"notused\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":54,"author":{"gitID":"randypx"},"content":"    public static final String TAG_DESC_STUDENT \u003d \" \" + PREFIX_TAG + VALID_TAG_STUDENT;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":65,"author":{"gitID":"randypx"},"content":"    public static final String PREAMBLE_STUDENT \u003d \" student \";"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":104,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"randypx":3,"-":156,"shanmu9898":1}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"randypx"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_ADD_PERSON_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":136,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":138,"author":{"gitID":"shanmu9898"},"content":"        @Override"},{"lineNumber":139,"author":{"gitID":"shanmu9898"},"content":"        public void deleteTag(Tag tag) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"randypx":1,"-":171,"shanmu9898":5}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class XmlAdaptedPersonTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    private static final String INVALID_TAG_NAME \u003d \"#friend\";"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    private static final String INVALID_TAG_COLOR_STYLE \u003d \"notacolor\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":105,"author":{"gitID":"Sisyphus25"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG_NAME, INVALID_TAG_COLOR_STYLE));"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":3,"-":108}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NOTUSED;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        modelManager.getFilteredPersonList().remove(0);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        differentUserPrefs.setAddressBookName(\"differentName\");"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":77,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"shanmu9898"},"content":"    public void deleteTag_tagNotPresent_modelUnchanged() throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":79,"author":{"gitID":"shanmu9898"},"content":"        AddressBook testAddressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":81,"author":{"gitID":"shanmu9898"},"content":"        ModelManager modelManager \u003d new ModelManager(testAddressBook, userPrefs);"},{"lineNumber":82,"author":{"gitID":"shanmu9898"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_NOTUSED));"},{"lineNumber":83,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":84,"author":{"gitID":"shanmu9898"},"content":"        assertEquals(new ModelManager(testAddressBook, userPrefs), modelManager);"},{"lineNumber":85,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":87,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":88,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"shanmu9898"},"content":"    public void deleteTag_tagUsedByMultiplePeople_tagRemoved() throws DuplicatePersonException,"},{"lineNumber":90,"author":{"gitID":"shanmu9898"},"content":"                                                                      PersonNotFoundException {"},{"lineNumber":91,"author":{"gitID":"shanmu9898"},"content":"        AddressBook testAddressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":93,"author":{"gitID":"shanmu9898"},"content":"        ModelManager modelManager \u003d new ModelManager(testAddressBook, userPrefs);"},{"lineNumber":94,"author":{"gitID":"shanmu9898"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":95,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":96,"author":{"gitID":"shanmu9898"},"content":"        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":97,"author":{"gitID":"shanmu9898"},"content":"        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":98,"author":{"gitID":"shanmu9898"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(amyWithoutFriendTag)"},{"lineNumber":99,"author":{"gitID":"shanmu9898"},"content":"                                              .withPerson(bobWithoutFriendTag).build();"},{"lineNumber":100,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":101,"author":{"gitID":"shanmu9898"},"content":"        assertEquals(new ModelManager(expectedAddressBook, userPrefs), modelManager);"},{"lineNumber":102,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":67,"shanmu9898":36}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NOTUSED;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.testutil.TypicalEvents;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(Collections.emptyList(), addressBook.getEventList());"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"        TypicalEvents typicalEvents \u003d new TypicalEvents();"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"        List\u003cEvent\u003e newEvents \u003d Arrays.asList(typicalEvents.typicalAppointment1, typicalEvents.typicalTask1);"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags, newEvents);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"Sisyphus25"},"content":"    public void getEventList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":89,"author":{"gitID":"Sisyphus25"},"content":"        addressBook.getEventList().remove(0);"},{"lineNumber":90,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"Sisyphus25"},"content":"     * A stub ReadOnlyAddressBook whose persons, tags and events lists can violate interface constraints."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":98,"author":{"gitID":"Sisyphus25"},"content":"        private final ObservableList\u003cEvent\u003e events \u003d FXCollections.observableArrayList();"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"Sisyphus25"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags, Collection\u003cEvent\u003e events) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":103,"author":{"gitID":"Sisyphus25"},"content":"            this.events.setAll(events);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":116,"author":{"gitID":"Sisyphus25"},"content":"        @Override"},{"lineNumber":117,"author":{"gitID":"Sisyphus25"},"content":"        public ObservableList\u003cEvent\u003e getEventList() {"},{"lineNumber":118,"author":{"gitID":"Sisyphus25"},"content":"            return events;"},{"lineNumber":119,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"shanmu9898"},"content":"    public void updatePerson_modifiedAddressBooks_noError() throws PersonNotFoundException, DuplicatePersonException {"},{"lineNumber":124,"author":{"gitID":"shanmu9898"},"content":"        AddressBook testAddressBook \u003d new AddressBookBuilder().withPerson(BOB).build();"},{"lineNumber":125,"author":{"gitID":"shanmu9898"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(AMY).build();"},{"lineNumber":126,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":127,"author":{"gitID":"shanmu9898"},"content":"        testAddressBook.updatePerson(BOB, AMY);"},{"lineNumber":128,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":129,"author":{"gitID":"shanmu9898"},"content":"        assertEquals(testAddressBook, expectedAddressBook);"},{"lineNumber":130,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":132,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":133,"author":{"gitID":"shanmu9898"},"content":"    public void removeTag_tagNotPresent_addressBookUnchanged() throws PersonNotFoundException,"},{"lineNumber":134,"author":{"gitID":"shanmu9898"},"content":"                                                                      DuplicatePersonException {"},{"lineNumber":135,"author":{"gitID":"shanmu9898"},"content":"        AddressBook testAddressBook \u003d new AddressBookBuilder().withPerson(BOB).withPerson(AMY).build();"},{"lineNumber":136,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":137,"author":{"gitID":"shanmu9898"},"content":"        testAddressBook.removeTag(new Tag(VALID_TAG_NOTUSED));"},{"lineNumber":138,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":139,"author":{"gitID":"shanmu9898"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(BOB).withPerson(AMY).build();"},{"lineNumber":140,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":141,"author":{"gitID":"shanmu9898"},"content":"        assertEquals(expectedAddressBook, testAddressBook);"},{"lineNumber":142,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":144,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"shanmu9898"},"content":"    public void removeTag_tagUsedByMultiplePeople_tagRemoved() throws PersonNotFoundException,"},{"lineNumber":146,"author":{"gitID":"shanmu9898"},"content":"                                                                       DuplicatePersonException {"},{"lineNumber":147,"author":{"gitID":"shanmu9898"},"content":"        AddressBook testAddressBook \u003d new AddressBookBuilder().withPerson(BOB).withPerson(AMY).build();"},{"lineNumber":148,"author":{"gitID":"shanmu9898"},"content":"        testAddressBook.removeTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":149,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":150,"author":{"gitID":"shanmu9898"},"content":"        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":151,"author":{"gitID":"shanmu9898"},"content":"        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":152,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":153,"author":{"gitID":"shanmu9898"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(bobWithoutFriendTag)"},{"lineNumber":154,"author":{"gitID":"shanmu9898"},"content":"                                              .withPerson(amyWithoutFriendTag).build();"},{"lineNumber":155,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":156,"author":{"gitID":"shanmu9898"},"content":"        assertEquals(expectedAddressBook, testAddressBook);"},{"lineNumber":157,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":22,"-":92,"shanmu9898":45}},{"path":"src/test/java/seedu/address/model/event/AppointmentTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Calendar;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Date;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"public class AppointmentTest {"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    private static final String VALID_TITLE \u003d \"Meet Student\";"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    private static final Date CURRENT_DATE \u003d new Date();"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    private static final Person VALID_PERSON_TO_MEET \u003d TypicalPersons.ALICE;"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"    private Calendar validStartTime;"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    private Calendar validEndTime;"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"    private Calendar invalidStartTime;"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    private Calendar invalidEndTime;"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    public AppointmentTest() {"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"        validStartTime \u003d Calendar.getInstance();"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        validStartTime.setTime(CURRENT_DATE);"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"        validStartTime.add(Calendar.HOUR_OF_DAY, 2);"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"        validEndTime \u003d Calendar.getInstance();"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"        validEndTime.setTime(CURRENT_DATE);"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"        validEndTime.add(Calendar.HOUR_OF_DAY, 3);"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        invalidStartTime \u003d Calendar.getInstance();"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"        invalidStartTime.setTime(CURRENT_DATE);"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"        invalidStartTime.add(Calendar.HOUR_OF_DAY, -1);"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"        invalidEndTime \u003d Calendar.getInstance();"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"        invalidEndTime.setTime(CURRENT_DATE);"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"        invalidEndTime.add(Calendar.HOUR_OF_DAY, 1);"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"                new Appointment(null, null, null));"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"                new Appointment(VALID_TITLE, validStartTime, null));"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"                new Appointment(VALID_TITLE, null, validEndTime));"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"                new Appointment(null, validStartTime, validEndTime));"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"    public void constructor_invalidAppointmentTitle_throwsIllegalArgumentException() {"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"        String invalidTitle \u003d \"\";"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"                new Appointment(invalidTitle, validStartTime, validEndTime));"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"    public void constructor_invalidAppointmentTime_throwsIllegalArgumentException() {"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"                new Appointment(VALID_TITLE, invalidStartTime, validEndTime));"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"                new Appointment(VALID_TITLE, validStartTime, invalidEndTime));"},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"    public void isValidTitle() {"},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"        // null title"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Appointment.isValidTitle(null));"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"        // invalid Appointment"},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(Appointment.isValidTitle(\"\")); // empty string"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(Appointment.isValidTitle(\" \")); // spaces only"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":"        // valid Appointment"},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(Appointment.isValidTitle(\"Meet Dave\"));"},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(Appointment.isValidTitle(\"-\")); // one character"},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":85}},{"path":"src/test/java/seedu/address/model/UniqueEventListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.UniqueEventList;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"public class UniqueEventListTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"        UniqueEventList uniquePersonList \u003d new UniqueEventList();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        uniquePersonList.asObservableList().remove(0);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":4,"-":15}},{"path":"src/test/java/seedu/address/model/event/TaskTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Calendar;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Date;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"public class TaskTest {"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    private static final String VALID_TITLE \u003d \"Grade tests\";"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    private static final Date CURRENT_DATE \u003d new Date();"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"    private static final Person VALID_PERSON_TO_MEET \u003d TypicalPersons.ALICE;"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"    private Calendar validDeadline;"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    private Calendar invalidDeadline;"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    public TaskTest() {"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"        validDeadline \u003d Calendar.getInstance();"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"        validDeadline.setTime(CURRENT_DATE);"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"        validDeadline.add(Calendar.HOUR_OF_DAY, 2);"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"        invalidDeadline \u003d Calendar.getInstance();"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"        invalidDeadline.setTime(CURRENT_DATE);"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"        invalidDeadline.add(Calendar.HOUR_OF_DAY, -1);"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"                new Task(null, null));"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"                new Task(VALID_TITLE, null));"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"                new Task(null, validDeadline));"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"    public void constructor_invalidTestTitle_throwsIllegalArgumentException() {"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"        String invalidTitle \u003d \"\";"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"                new Task(invalidTitle, validDeadline));"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"    public void constructor_invalidTaskDeadline_throwsIllegalArgumentException() {"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"                new Task(VALID_TITLE, invalidDeadline));"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"    public void isValidTitle() {"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"        // null title"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Task.isValidTitle(null));"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"        // invalid Task"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(Task.isValidTitle(\"\")); // empty string"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(Task.isValidTitle(\" \")); // spaces only"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"        // valid Task"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(Task.isValidTitle(\"Todo\"));"},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(Task.isValidTitle(\"-\")); // one character"},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":71}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_STUDENT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * A utility class for Person."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"randypx"},"content":"     * Returns an add command string for adding the {@code student}."},{"lineNumber":28,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"randypx"},"content":"    public static String getAddStudentCommand(Student person) {"},{"lineNumber":30,"author":{"gitID":"randypx"},"content":"        return AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + getPersonDetails(person);"},{"lineNumber":31,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"randypx"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":43,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"randypx":9,"-":38}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":20,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":21,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":22,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":23,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":24,"author":{"gitID":"randypx"},"content":""},{"lineNumber":25,"author":{"gitID":"randypx"},"content":"    private Name name;"},{"lineNumber":26,"author":{"gitID":"randypx"},"content":"    private Phone phone;"},{"lineNumber":27,"author":{"gitID":"randypx"},"content":"    private Email email;"},{"lineNumber":28,"author":{"gitID":"randypx"},"content":"    private Address address;"},{"lineNumber":29,"author":{"gitID":"randypx"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return new Person(name, phone, email, address, tags);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"randypx":11,"-":83}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_STUDENT;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"},{"lineNumber":45,"author":{"gitID":"randypx"},"content":"    public static final Student GEORGE \u003d new StudentBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"},{"lineNumber":47,"author":{"gitID":"randypx"},"content":"    public static final Student IVAN \u003d new StudentBuilder().withName(\"Ivan Kutz\").withPhone(\"9867723\")"},{"lineNumber":48,"author":{"gitID":"randypx"},"content":"            .withEmail(\"wolf@example.com\").withAddress(\"Centre Street\").build();"},{"lineNumber":49,"author":{"gitID":"randypx"},"content":"    public static final Student JOHN \u003d new StudentBuilder().withName(\"John Blake\").withPhone(\"9575232\")"},{"lineNumber":50,"author":{"gitID":"randypx"},"content":"            .withEmail(\"star@example.com\").withAddress(\"Hollywood\").build();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"randypx"},"content":"    public static final Student STUDENT_HOON \u003d new StudentBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"},{"lineNumber":60,"author":{"gitID":"randypx"},"content":"    public static final Student STUDENT_IDA \u003d new StudentBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"randypx"},"content":"    public static final Student STUDENT_AMY \u003d new StudentBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":71,"author":{"gitID":"randypx"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_STUDENT).build();"},{"lineNumber":72,"author":{"gitID":"randypx"},"content":"    public static final Student STUDENT_BOB \u003d new StudentBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":73,"author":{"gitID":"randypx"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_STUDENT)"},{"lineNumber":74,"author":{"gitID":"randypx"},"content":"            .build();"},{"lineNumber":75,"author":{"gitID":"randypx"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"randypx":15,"-":83}},{"path":"src/test/java/seedu/address/testutil/TypicalEvents.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":" * A utility class containing a list of {@code Event} objects to be used in tests."},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"public class TypicalEvents {"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"    public final Event typicalAppointment1;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"    public final Event typicalTask1;"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"    public TypicalEvents() {"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"        typicalAppointment1 \u003d"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"                new EventBuilder(\"Meet student\", \"2018/10/09 10:00\", \"2018/10/09 11:00\", ALICE).build();"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"        typicalTask1 \u003d"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"                new EventBuilder(\"To do\", \"2018/10/10 10:00\").build();"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":19,"-":1}},{"path":"src/test/java/seedu/address/testutil/EventBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import java.text.ParseException;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Calendar;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Date;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":" * A utility class to help with building Event objects."},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"public class EventBuilder {"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    private static final String DATE_FORMAT \u003d \"yyyy/MM/dd HH:mm\";"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    private static final SimpleDateFormat DATE_FORMATTER \u003d new SimpleDateFormat(DATE_FORMAT);"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    private static final Date CURRENT_TIME \u003d new Date();"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    private String title;"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"    private Calendar time;"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    private Calendar endTime;"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"    private Person personToMeet;"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    private String eventType;"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    public EventBuilder(String title, String time, String endTime, Person personToMeet) {"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"        this.title \u003d title;"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        this.time \u003d Calendar.getInstance();"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"        this.endTime \u003d Calendar.getInstance();"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"        try {"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"            this.time.setTime(DATE_FORMATTER.parse(time));"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"            this.endTime.setTime(DATE_FORMATTER.parse(endTime));"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"        } catch (ParseException e) {"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"            this.time.setTime(CURRENT_TIME);"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"            this.time.add(Calendar.HOUR_OF_DAY, 1);"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"            this.time.setTime(CURRENT_TIME);"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"            this.time.add(Calendar.HOUR_OF_DAY, 2);"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"        this.personToMeet \u003d personToMeet;"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"        this.eventType \u003d \"Appointment\";"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"    public EventBuilder(String title, String time) {"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"        this.title \u003d title;"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"        this.time \u003d Calendar.getInstance();"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"        try {"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"            this.time.setTime(DATE_FORMATTER.parse(time));"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"        } catch (ParseException e) {"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"            this.time.setTime(CURRENT_TIME);"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"            this.time.add(Calendar.HOUR_OF_DAY, 1);"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"        this.endTime \u003d null;"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"        this.personToMeet \u003d null;"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"        this.eventType \u003d \"Task\";"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"     * @return an {@code Event} from the data feed to constructor"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"    public Event build() {"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"        if (eventType.equals(\"Appointment\")) {"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"            return new Appointment(title, time, endTime, personToMeet);"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"        } else if (eventType.equals(\"Task\")) {"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"            return new Task(title, time);"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"        } else {"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"            return null;"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":70}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Label addressLabel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public String getAddress() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return addressLabel.getText();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"    public List\u003cString\u003e getTagsNames() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":72,"content":"    //@@author Sisyphus25-reused"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"    //Reused from https://github.com/se-edu/addressbook-level4/pull/798/commits/167b3d0b4f7ad34296d2fbf505f9ae71f983f53c"},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"     *"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":"     * @param tag Text value of the tag label"},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"     * @return List of style classes for tag label with text value {@code tag}"},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"    public List\u003cString\u003e getTagStyleClasses(String tag) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":"                .filter(label -\u003e label.getText().equals(tag))"},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":"                .map(Label::getStyleClass)"},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":"                .findFirst()"},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":"                .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag.\"));"},{"lineNumber":86,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"Sisyphus25":14,"-":72}},{"path":"src/test/java/seedu/address/testutil/StudentBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"randypx"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"randypx"},"content":""},{"lineNumber":3,"author":{"gitID":"randypx"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"randypx"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"randypx"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":10,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":11,"author":{"gitID":"randypx"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":13,"author":{"gitID":"randypx"},"content":""},{"lineNumber":14,"author":{"gitID":"randypx"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"randypx"},"content":" * A utility class to help with building Student objects."},{"lineNumber":16,"author":{"gitID":"randypx"},"content":" */"},{"lineNumber":17,"author":{"gitID":"randypx"},"content":"public class StudentBuilder {"},{"lineNumber":18,"author":{"gitID":"randypx"},"content":""},{"lineNumber":19,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":20,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":21,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":22,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":23,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":24,"author":{"gitID":"randypx"},"content":""},{"lineNumber":25,"author":{"gitID":"randypx"},"content":"    private Name name;"},{"lineNumber":26,"author":{"gitID":"randypx"},"content":"    private Phone phone;"},{"lineNumber":27,"author":{"gitID":"randypx"},"content":"    private Email email;"},{"lineNumber":28,"author":{"gitID":"randypx"},"content":"    private Address address;"},{"lineNumber":29,"author":{"gitID":"randypx"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":30,"author":{"gitID":"randypx"},"content":""},{"lineNumber":31,"author":{"gitID":"randypx"},"content":"    public StudentBuilder() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":37,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"randypx"},"content":""},{"lineNumber":39,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"randypx"},"content":"     * Initializes the StudentBuilder with the data of {@code personToCopy}."},{"lineNumber":41,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"randypx"},"content":"    public StudentBuilder(Student personToCopy) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":48,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"randypx"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"randypx"},"content":"    public StudentBuilder withName(String name) {"},{"lineNumber":54,"author":{"gitID":"randypx"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":55,"author":{"gitID":"randypx"},"content":"        return this;"},{"lineNumber":56,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"randypx"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"randypx"},"content":"    public StudentBuilder withTags(String ... tags) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"randypx"},"content":""},{"lineNumber":70,"author":{"gitID":"randypx"},"content":"    public StudentBuilder withAddress(String address) {"},{"lineNumber":71,"author":{"gitID":"randypx"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":72,"author":{"gitID":"randypx"},"content":"        return this;"},{"lineNumber":73,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"randypx"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"randypx"},"content":""},{"lineNumber":79,"author":{"gitID":"randypx"},"content":"    public StudentBuilder withPhone(String phone) {"},{"lineNumber":80,"author":{"gitID":"randypx"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":81,"author":{"gitID":"randypx"},"content":"        return this;"},{"lineNumber":82,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"randypx"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"randypx"},"content":""},{"lineNumber":88,"author":{"gitID":"randypx"},"content":"    public StudentBuilder withEmail(String email) {"},{"lineNumber":89,"author":{"gitID":"randypx"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":90,"author":{"gitID":"randypx"},"content":"        return this;"},{"lineNumber":91,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"randypx"},"content":""},{"lineNumber":93,"author":{"gitID":"randypx"},"content":"    public Student build() {"},{"lineNumber":94,"author":{"gitID":"randypx"},"content":"        return new Student(name, phone, email, address, tags);"},{"lineNumber":95,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"randypx"},"content":"}"}],"authorContributionMap":{"randypx":62,"-":34}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"content":"    //@@author"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"        initTags(person);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"content":"    //@@author Sisyphus25-reused"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"    //Reused from https://github.com/se-edu/addressbook-level4/pull/798/commits/167b3d0b4f7ad34296d2fbf505f9ae71f983f53c"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"     * Returns the color style for {@code tagName}\u0027s label."},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"    private void initTags(Person person) {"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"            tagLabel.getStyleClass().add(tag.tagColorStyle);"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"        });"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":67,"content":"    //@@author"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":3,"Sisyphus25":13,"-":69}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":21,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"randypx"},"content":"    public static final String MESSAGE_INVALID_TYPE \u003d \"Type must be student or defualt(empty).\";"},{"lineNumber":30,"author":{"gitID":"randypx"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"randypx"},"content":"        String[] preambleArgs \u003d argMultimap.getPreamble().split(\" \");"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"},{"lineNumber":42,"author":{"gitID":"randypx"},"content":"                || preambleArgs.length \u003e 1) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"randypx"},"content":"            switch (preambleArgs[0]) {"},{"lineNumber":54,"author":{"gitID":"randypx"},"content":"            case \"\":"},{"lineNumber":55,"author":{"gitID":"randypx"},"content":"                return new AddCommand(new Person(name, phone, email, address, tagList));"},{"lineNumber":56,"author":{"gitID":"randypx"},"content":""},{"lineNumber":57,"author":{"gitID":"randypx"},"content":"            case \"student\":"},{"lineNumber":58,"author":{"gitID":"randypx"},"content":"                return new AddCommand(new Student(name, phone, email, address, tagList));"},{"lineNumber":59,"author":{"gitID":"randypx"},"content":""},{"lineNumber":60,"author":{"gitID":"randypx"},"content":"            default:"},{"lineNumber":61,"author":{"gitID":"randypx"},"content":"                throw new IllegalValueException(MESSAGE_INVALID_TYPE);"},{"lineNumber":62,"author":{"gitID":"randypx"},"content":"            }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"randypx":15,"-":62}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":24,"author":{"gitID":"randypx"},"content":"            + \" [TYPE] \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":30,"author":{"gitID":"randypx"},"content":"            + \"Example: \" + COMMAND_WORD"},{"lineNumber":31,"author":{"gitID":"randypx"},"content":"            + \" student \""},{"lineNumber":32,"author":{"gitID":"randypx"},"content":"            + PREFIX_NAME + \" Mary Jane \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":34,"author":{"gitID":"randypx"},"content":"            + PREFIX_EMAIL + \"MJ@example.com \""},{"lineNumber":35,"author":{"gitID":"randypx"},"content":"            + PREFIX_ADDRESS + \"478, Pasir Ris, #03-12 \""},{"lineNumber":36,"author":{"gitID":"randypx"},"content":"            + PREFIX_TAG + \"AStar\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"randypx"},"content":"    public static final String MESSAGE_ADD_PERSON_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":39,"author":{"gitID":"randypx"},"content":"    public static final String MESSAGE_ADD_STUDENT_SUCCESS \u003d \"New student added: %1$s\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":57,"author":{"gitID":"randypx"},"content":"            if (toAdd instanceof Student) {"},{"lineNumber":58,"author":{"gitID":"randypx"},"content":"                return new CommandResult(String.format(MESSAGE_ADD_STUDENT_SUCCESS, toAdd));"},{"lineNumber":59,"author":{"gitID":"randypx"},"content":"            } else {"},{"lineNumber":60,"author":{"gitID":"randypx"},"content":"                return new CommandResult(String.format(MESSAGE_ADD_PERSON_SUCCESS, toAdd));"},{"lineNumber":61,"author":{"gitID":"randypx"},"content":"            }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"randypx":15,"-":59}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":21,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":152,"author":{"gitID":"Sisyphus25"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_NAME_CONSTRAINTS);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":1,"-":167}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedTag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * JAXB-friendly adapted version of the Tag."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class XmlAdaptedTag {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private String tagName;"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    private String tagColorStyle;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedTag."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag() {}"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName} and {@code tagColorStyle}."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    public XmlAdaptedTag(String tagName, String tagColorStyle) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        this.tagColorStyle \u003d tagColorStyle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Converts a given Tag into this class for JAXB use."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag(Tag source) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        tagName \u003d source.tagName;"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"        tagColorStyle \u003d source.tagColorStyle;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public Tag toModelType() throws IllegalValueException {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_NAME_CONSTRAINTS);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"        if (!Tag.isValidTagColorStyle(tagColorStyle)) {"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_COLOR_STYLE_CONSTRAINTS);"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"        return new Tag(tagName, tagColorStyle);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedTag)) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"        return tagName.equals(((XmlAdaptedTag) other).tagName)"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 tagColorStyle.equals(((XmlAdaptedTag) other).tagColorStyle);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":15,"-":55}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"     * Returns an unmodifiable view of the events list."},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"     * This list will not contain any duplicate event."},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"    ObservableList\u003cEvent\u003e getEventList();"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":7,"-":24}},{"path":"src/main/java/seedu/address/model/event/Event.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Date;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":" * Represents an Event in the schedule."},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"public interface Event {"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"    public String getTitle();"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"    public Date getTime();"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":11}},{"path":"src/main/java/seedu/address/model/event/Appointment.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import java.text.DateFormat;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Calendar;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Date;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":" * Represent an appointment in the schedule, contains time of the appointment as well as details and personMeet."},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"public class Appointment implements Event {"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    /*"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"     * The title can not be empty string or spaces only"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    public static final String TITLE_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    private static final String DATE_FORMAT \u003d \"yyyy/MM/dd HH:mm\";"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"    private static final DateFormat DATE_FORMATTER \u003d new SimpleDateFormat(DATE_FORMAT);"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    private static final String MESSAGE_TITLE_CONSTRAINTS \u003d \"Title must be non empty\";"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    private static final String MESSAGE_TIME_CONSTRAINTS \u003d \"Invalid time stamp\";"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"    private String title;"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"    private Date time;"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"    private Date endTime;"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"    private Person personToMeet;"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"    //Every field must be present and not null"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"    public Appointment(String title, Calendar startTime, Calendar endTime) {"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"        this(title, startTime, endTime, null);"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"    //Every field except personToMeet must be present and not null"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"    public Appointment(String title, Calendar startTime, Calendar endTime, Person personToMeet) {"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"        requireAllNonNull(title, startTime, endTime);"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"        checkArgument(isValidTitle(title), MESSAGE_TITLE_CONSTRAINTS);"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"        checkArgument(isValidTime(startTime, endTime), MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"        this.title \u003d title;"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"        this.time \u003d startTime.getTime();"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"        this.endTime \u003d endTime.getTime();"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"        this.personToMeet \u003d personToMeet;"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"    public String getTitle() {"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"        return title;"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"    public Date getTime() {"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"        return time;"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"    public Date getEndTime() {"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"        return endTime;"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"    public Person getPersonToMeet() {"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"        return personToMeet;"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"    public boolean equals(Object other) {"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"            return true;"},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":"        if (!(other instanceof Appointment)) {"},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"            return false;"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"        Appointment otherAppointment \u003d (Appointment) other;"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":"        return otherAppointment.getTitle().equals(this.getTitle())"},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 otherAppointment.getTime().equals(this.getTime())"},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 otherAppointment.getEndTime().equals(this.getEndTime())"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 otherAppointment.getPersonToMeet().equals(this.getPersonToMeet());"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":"     * Returns true if a given string is a valid title."},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":"    public static boolean isValidTitle(String test) {"},{"lineNumber":86,"author":{"gitID":"Sisyphus25"},"content":"        return test.matches(TITLE_VALIDATION_REGEX);"},{"lineNumber":87,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":89,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"Sisyphus25"},"content":"     * Returns true if the given time is valid"},{"lineNumber":91,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"Sisyphus25"},"content":"    public static boolean isValidTime(Calendar startTime, Calendar endTime) {"},{"lineNumber":93,"author":{"gitID":"Sisyphus25"},"content":"        Calendar currentTime \u003d Calendar.getInstance();"},{"lineNumber":94,"author":{"gitID":"Sisyphus25"},"content":"        currentTime.setTime(new Date());"},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":"        return endTime.after(startTime) \u0026\u0026 startTime.after(currentTime);"},{"lineNumber":96,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":97}},{"path":"src/main/java/seedu/address/model/person/Student.java","lines":[{"lineNumber":1,"author":{"gitID":"randypx"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"randypx"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":6,"author":{"gitID":"randypx"},"content":""},{"lineNumber":7,"author":{"gitID":"randypx"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"randypx"},"content":" * Represents a Student in the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"randypx"},"content":"public class Student extends Person {"},{"lineNumber":12,"author":{"gitID":"randypx"},"content":""},{"lineNumber":13,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"randypx"},"content":"     * Every field must be present and not null."},{"lineNumber":15,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"randypx"},"content":"    public Student(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"},{"lineNumber":17,"author":{"gitID":"randypx"},"content":"        super(name, phone, email, address, tags);"},{"lineNumber":18,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"randypx"},"content":"}"}],"authorContributionMap":{"randypx":14,"-":5}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":22,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"shanmu9898"},"content":"    public void deleteTag(Tag tag) throws PersonNotFoundException, DuplicatePersonException {"},{"lineNumber":122,"author":{"gitID":"shanmu9898"},"content":"        addressBook.removeTag(tag);"},{"lineNumber":123,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":119,"shanmu9898":6}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Represents a Tag in the address book."},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class Tag {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_TAG_NAME_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_TAG_COLOR_STYLE_CONSTRAINTS \u003d \"Tag color style is invalid or not supported\";"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    private static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":17,"content":"    //@@author Sisyphus25-reused"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    //Reused from https://github.com/se-edu/addressbook-level4/pull/798/commits/167b3d0b4f7ad34296d2fbf505f9ae71f983f53c"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    private static final String[] TAG_COLOR_STYLES \u003d {\"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\","},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"        \"green\", \"pink\", \"black\", \"grey\"};"},{"lineNumber":21,"content":"    //@@author"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"    public final String tagColorStyle;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public final String tagName;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public Tag(String tagName) {"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"        this(tagName, \"default\");"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"     * @param tagColorStyle A valid tag color style"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"    public Tag(String tagName, String tagColorStyle) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        requireNonNull(tagName);"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(tagColorStyle);"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"        if (tagColorStyle.equals(\"default\")) {"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"            tagColorStyle \u003d getTagColorStyle(tagName);"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_TAG_NAME_CONSTRAINTS);"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"        checkArgument(isValidTagColorStyle(tagColorStyle), MESSAGE_TAG_COLOR_STYLE_CONSTRAINTS);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"        this.tagColorStyle \u003d tagColorStyle;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return test.matches(TAG_VALIDATION_REGEX);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"     * Returns true if a given string is a valid tag color style."},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"    public static boolean isValidTagColorStyle(String tagColorStyle) {"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"        return Arrays.asList(TAG_COLOR_STYLES).contains(tagColorStyle);"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 this.tagName.equals(((Tag) other).tagName)"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 this.tagColorStyle.equals(((Tag) other).tagColorStyle)); // state check"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"content":"    //@@author Sisyphus25-reused"},{"lineNumber":89,"author":{"gitID":"Sisyphus25"},"content":"    //Reused from https://github.com/se-edu/addressbook-level4/pull/798/commits/167b3d0b4f7ad34296d2fbf505f9ae71f983f53c"},{"lineNumber":90,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"Sisyphus25"},"content":"     * Returns a color style for {@code tagName}"},{"lineNumber":92,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"Sisyphus25"},"content":"    private String getTagColorStyle(String tagName) {"},{"lineNumber":94,"author":{"gitID":"Sisyphus25"},"content":"        // we use the hash code of the tag name to generate a random color, so that the color remain consistent"},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":"        // between different runs of the program while still making it random enough between tags."},{"lineNumber":96,"author":{"gitID":"Sisyphus25"},"content":"        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"},{"lineNumber":97,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":99,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":3,"Sisyphus25":43,"-":54}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":"    void deleteTag(Tag tag) throws PersonNotFoundException, DuplicatePersonException;"},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":48,"shanmu9898":3}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.UniqueEventList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"    private final UniqueEventList events;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"        events \u003d new UniqueEventList();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":97,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":118,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":119,"author":{"gitID":"shanmu9898"},"content":"        removeUnusedTags();"},{"lineNumber":120,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":122,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"shanmu9898"},"content":"     * Removes all {@code Tag}s that are not used by any {@code Person} in this {@code AddressBook}."},{"lineNumber":124,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"shanmu9898"},"content":"    private void removeUnusedTags() {"},{"lineNumber":126,"author":{"gitID":"shanmu9898"},"content":"        Set\u003cTag\u003e tagsInPersons \u003d persons.asObservableList().stream().map(Person::getTags).flatMap(Set::stream)"},{"lineNumber":127,"author":{"gitID":"shanmu9898"},"content":"                                 .collect(Collectors.toSet());"},{"lineNumber":128,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":129,"author":{"gitID":"shanmu9898"},"content":"        tags.setTags(tagsInPersons);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":147,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":150,"author":{"gitID":"-"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(), correctTagReferences);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":190,"author":{"gitID":"Sisyphus25"},"content":"    public ObservableList\u003cEvent\u003e getEventList() {"},{"lineNumber":191,"author":{"gitID":"Sisyphus25"},"content":"        return events.asObservableList();"},{"lineNumber":192,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":197,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":198,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":199,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":208,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"shanmu9898"},"content":"     * Removes the particular tag for all people in the AddressBook }."},{"lineNumber":210,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"shanmu9898"},"content":"    public void removeTag(Tag tag) throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":212,"author":{"gitID":"shanmu9898"},"content":"        for (Person person : persons) {"},{"lineNumber":213,"author":{"gitID":"shanmu9898"},"content":"            removeTagFromPerson(tag, person);"},{"lineNumber":214,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":216,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":218,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":219,"author":{"gitID":"shanmu9898"},"content":"     * Removes the particular tag for that particular person in the AddressBook }."},{"lineNumber":220,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":221,"author":{"gitID":"shanmu9898"},"content":"    private void removeTagFromPerson(Tag tag, Person person) throws PersonNotFoundException, DuplicatePersonException {"},{"lineNumber":222,"author":{"gitID":"shanmu9898"},"content":"        Set\u003cTag\u003e listOfTags \u003d new HashSet\u003c\u003e(person.getTags());"},{"lineNumber":223,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":224,"author":{"gitID":"shanmu9898"},"content":"        if (listOfTags.contains(tag)) {"},{"lineNumber":225,"author":{"gitID":"shanmu9898"},"content":"            listOfTags.remove(tag);"},{"lineNumber":226,"author":{"gitID":"shanmu9898"},"content":"        } else {"},{"lineNumber":227,"author":{"gitID":"shanmu9898"},"content":"            return;"},{"lineNumber":228,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":229,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":230,"author":{"gitID":"shanmu9898"},"content":"        Person updatedPerson \u003d new Person(person.getName(), person.getPhone(), person.getEmail(),"},{"lineNumber":231,"author":{"gitID":"shanmu9898"},"content":"                                          person.getAddress(), listOfTags);"},{"lineNumber":232,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":233,"author":{"gitID":"shanmu9898"},"content":"        updatePerson(person, updatedPerson);"},{"lineNumber":234,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":9,"-":187,"shanmu9898":39}},{"path":"src/main/java/seedu/address/model/event/UniqueEventList.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":" * A list of events  that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":" *"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":" * Supports a minimal set of list operations."},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"public class UniqueEventList implements Iterable\u003cEvent\u003e {"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"    private final ObservableList\u003cEvent\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"     * Returns true if the list contains an equivalent Event as the given argument."},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    public boolean contains(Event toCheck) {"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(toCheck);"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"     * Adds an Event to the list."},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"     *"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"     * @throws DuplicateEventException if the Event to add is a duplicate of an existing Event in the list."},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"    public void add(Event toAdd) throws DuplicateEventException {"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(toAdd);"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"        if (contains(toAdd)) {"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"            throw new DuplicateEventException();"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"        internalList.add(toAdd);"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"     * Removes the equivalent Event from the list."},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"     *"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"     * @throws EventNotFoundException if no such Event could be found in the list."},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"    public boolean remove(Event toRemove) throws EventNotFoundException {"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(toRemove);"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"        final boolean eventFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"        if (!eventFoundAndDeleted) {"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"            throw new EventNotFoundException();"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"        return eventFoundAndDeleted;"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"     * Replaces the person {@code target} in the list with {@code editedEvent}."},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"     *"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"     * @throws DuplicateEventException if the replacement is equivalent to another existing event in the list."},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"     * @throws EventNotFoundException if {@code target} could not be found in the list."},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"    public void setEvent(Event target, Event editedEvent)"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"            throws DuplicateEventException, EventNotFoundException {"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(editedEvent);"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"            throw new EventNotFoundException();"},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"        if (!target.equals(editedEvent) \u0026\u0026 internalList.contains(editedEvent)) {"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"            throw new DuplicateEventException();"},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":"        internalList.set(index, editedEvent);"},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"    public void setEvents(UniqueEventList replacement) {"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":"    public void setEvents(List\u003cEvent\u003e events) throws DuplicateEventException {"},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":"        requireAllNonNull(events);"},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":"        final UniqueEventList replacement \u003d new UniqueEventList();"},{"lineNumber":86,"author":{"gitID":"Sisyphus25"},"content":"        for (final Event event : events) {"},{"lineNumber":87,"author":{"gitID":"Sisyphus25"},"content":"            replacement.add(event);"},{"lineNumber":88,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"Sisyphus25"},"content":"        setEvents(replacement);"},{"lineNumber":90,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":"    public ObservableList\u003cEvent\u003e asObservableList() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":99,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":100,"author":{"gitID":"Sisyphus25"},"content":"    public Iterator\u003cEvent\u003e iterator() {"},{"lineNumber":101,"author":{"gitID":"Sisyphus25"},"content":"        return internalList.iterator();"},{"lineNumber":102,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":104,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":105,"author":{"gitID":"Sisyphus25"},"content":"    public boolean equals(Object other) {"},{"lineNumber":106,"author":{"gitID":"Sisyphus25"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":107,"author":{"gitID":"Sisyphus25"},"content":"                || (other instanceof UniqueEventList // instanceof handles nulls"},{"lineNumber":108,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueEventList) other).internalList));"},{"lineNumber":109,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":111,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"Sisyphus25"},"content":"    public int hashCode() {"},{"lineNumber":113,"author":{"gitID":"Sisyphus25"},"content":"        return internalList.hashCode();"},{"lineNumber":114,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":116,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"Sisyphus25"},"content":"     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":118,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"Sisyphus25"},"content":"    public static class DuplicateEventException extends DuplicateDataException {"},{"lineNumber":120,"author":{"gitID":"Sisyphus25"},"content":"        public DuplicateEventException() {"},{"lineNumber":121,"author":{"gitID":"Sisyphus25"},"content":"            super(\"Operation would result in duplicate events\");"},{"lineNumber":122,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"Sisyphus25"},"content":"     * Signals that an operation is looking for an event doesn\u0027t exist."},{"lineNumber":126,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"Sisyphus25"},"content":"    public static class EventNotFoundException extends Exception {"},{"lineNumber":128,"author":{"gitID":"Sisyphus25"},"content":"        public EventNotFoundException() {"},{"lineNumber":129,"author":{"gitID":"Sisyphus25"},"content":"            super(\"Event not found\");"},{"lineNumber":130,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":125,"-":7}},{"path":"src/main/java/seedu/address/model/event/Task.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import java.text.DateFormat;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Calendar;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Date;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":" * Represent a Task in the schedule, contains deadline as well as the title"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"public class Task implements Event {"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    public static final String TITLE_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    private static final String DATE_FORMAT \u003d \"yyyy/MM/dd HH:mm\";"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    private static final DateFormat DATE_FORMATTER \u003d new SimpleDateFormat(DATE_FORMAT);"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"    private static final String MESSAGE_TITLE_CONSTRAINTS \u003d \"Title must be non empty\";"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    private static final String MESSAGE_TIME_CONSTRAINTS \u003d \"Invalid time stamp\";"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    private String title;"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"    private Date time;"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    //Every field must be present and not null"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    public Task(String title, Calendar deadline) {"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"        requireAllNonNull(title, deadline);"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        checkArgument(isValidTitle(title), MESSAGE_TITLE_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"        checkArgument(isValidTime(deadline), MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"        this.title \u003d title;"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"        this.time \u003d deadline.getTime();"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"    public String getTitle() {"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        return title;"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"    public Date getTime() {"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"        return time;"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"            return true;"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"        if (!(other instanceof Task)) {"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"            return false;"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"        Task otherTask \u003d (Task) other;"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"        return otherTask.getTitle().equals(this.getTitle())"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 otherTask.getTime().equals(this.getTime());"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"     * Returns true if a given string is a valid title."},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"    public static boolean isValidTitle(String test) {"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"        return test.matches(TITLE_VALIDATION_REGEX);"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"     * Returns true if the given time is valid"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"    public static boolean isValidTime(Calendar deadline) {"},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"        Calendar currentTime \u003d Calendar.getInstance();"},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":"        currentTime.setTime(new Date());"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":"        return deadline.after(currentTime);"},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":70,"-":3}}]
