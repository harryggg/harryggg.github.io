var resultJson = [{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"E.T. (Employees Tracker) was developed by the W15-B1 team. +"},{"lineNumber":7,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d Li Yufei"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"image::crizyli.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"{empty} [https://github.com/crizyli[github]]"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"Role: - +"},{"lineNumber":16,"author":{"gitID":"-"},"content":"Responsibilities: Add lock \u0026 unlock command, import Google API"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Yang Yuqing"},{"lineNumber":21,"author":{"gitID":"-"},"content":"image::yoochard.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":22,"author":{"gitID":"-"},"content":"{empty} [https://github.com/yoochard[github]]"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"Role: - +"},{"lineNumber":25,"author":{"gitID":"-"},"content":"Responsibilities: Add sort command and adjust UI"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Gilbert Emerson"},{"lineNumber":30,"author":{"gitID":"-"},"content":"image::emer7.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"{empty}[http://github.com/emer7[github]]"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":34,"author":{"gitID":"-"},"content":"Responsibilities: Implement enhanced feature search and new feature review"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Ho Bing Xuan"},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"image::izhobx.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"{empty}[https://github.com/IzHoBX[github]]"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":"Responsibilities: Rating feature, notifications on timetable entry deadlines, email command, enhanced person identifying"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"crizyli":3,"IzHoBX":4,"-":38}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d E.T. (Employees Tracker)"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"https://travis-ci.org/CS2103JAN2018-W15-B1[image:https://travis-ci.org/CS2103JAN2018-W15-B1/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":7,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":8,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"* A desktop Employees Tracker application. Has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":15,"author":{"gitID":"-"},"content":"* A Java application that helps manager manage his or her employees"},{"lineNumber":16,"author":{"gitID":"-"},"content":"* Easy to use and can improve the productivity of the manager."},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":21,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":22,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":23,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":28,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":29,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4], https://github.com/vdurmont/emoji-java[emoji-java]"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"* The original source of the code: AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/[original source]"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"crizyli":1,"-":31}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"\u003d E.T. (Employee Tracker) - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-W15-B1/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"By: `Team W15-B1`      Since: `Feb 2018`      Licence: `MIT`"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"Employee Tracker (ET) is for managers who *prefer to use a desktop app for managing his/her subordinates*. More importantly, AB4 is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, AB4 can get your contact management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":26,"author":{"gitID":"-"},"content":"+"},{"lineNumber":27,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":28,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":29,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":30,"author":{"gitID":"-"},"content":"+"},{"lineNumber":31,"author":{"gitID":"-"},"content":".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."},{"lineNumber":32,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for your Address Book."},{"lineNumber":33,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":34,"author":{"gitID":"-"},"content":"+"},{"lineNumber":35,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":36,"author":{"gitID":"-"},"content":"+"},{"lineNumber":37,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":38,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":39,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"* *`list`* : lists all contacts"},{"lineNumber":42,"author":{"gitID":"-"},"content":"* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."},{"lineNumber":43,"author":{"gitID":"-"},"content":"* **`delete`**`3` : deletes the 3rd contact shown in the current list"},{"lineNumber":44,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":49,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":55,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":56,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":57,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":58,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a person: `add`"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"Adds a person to the address book +"},{"lineNumber":67,"author":{"gitID":"-"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":70,"author":{"gitID":"-"},"content":"A person can have any number of tags (including 0)"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"},{"lineNumber":75,"author":{"gitID":"-"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing all persons : `list`"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"Shows a list of all persons in the address book. +"},{"lineNumber":80,"author":{"gitID":"-"},"content":"Format: `list`"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"IzHoBX"},"content":"****"},{"lineNumber":83,"author":{"gitID":"IzHoBX"},"content":"* List command will shows you a list of persons, as shown in Figure 3.3."},{"lineNumber":84,"author":{"gitID":"IzHoBX"},"content":"* Each entry of the list contains information of a person."},{"lineNumber":85,"author":{"gitID":"IzHoBX"},"content":"* In each entry, from top to down, is the name, tags, phone number, address, email address and rating of that person."},{"lineNumber":86,"author":{"gitID":"IzHoBX"},"content":"****"},{"lineNumber":87,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":88,"author":{"gitID":"IzHoBX"},"content":"[NOTE]"},{"lineNumber":89,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":90,"author":{"gitID":"IzHoBX"},"content":"Rating will be shown as `-` if the person is yet to be rated."},{"lineNumber":91,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":92,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":93,"author":{"gitID":"IzHoBX"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":94,"author":{"gitID":"IzHoBX"},"content":"_Figure 3.3: List of persons_"},{"lineNumber":95,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":96,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a person : `edit`"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"Edits an existing person in the address book. +"},{"lineNumber":100,"author":{"gitID":"IzHoBX"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [r/RATING] [t/TAG]...`"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"****"},{"lineNumber":103,"author":{"gitID":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":104,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":105,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":106,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."},{"lineNumber":107,"author":{"gitID":"-"},"content":"* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":108,"author":{"gitID":"-"},"content":"****"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":113,"author":{"gitID":"-"},"content":"Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":114,"author":{"gitID":"-"},"content":"* `edit 2 n/Betsy Crower t/` +"},{"lineNumber":115,"author":{"gitID":"-"},"content":"Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d Rating a person : `rate` `[Since v1.2]`"},{"lineNumber":118,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":119,"author":{"gitID":"IzHoBX"},"content":"Updates the rating of an existing person in the address book. +"},{"lineNumber":120,"author":{"gitID":"IzHoBX"},"content":"Format: `rate INDEX RATING`"},{"lineNumber":121,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":122,"author":{"gitID":"IzHoBX"},"content":"****"},{"lineNumber":123,"author":{"gitID":"IzHoBX"},"content":"* Rates the person at the specified `INDEX`. The index refers to the index number shown in the last persons listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":124,"author":{"gitID":"IzHoBX"},"content":"* Both INDEX and RATING must be provided."},{"lineNumber":125,"author":{"gitID":"IzHoBX"},"content":"* Existing rating will be updated to the input RATING."},{"lineNumber":126,"author":{"gitID":"IzHoBX"},"content":"* RATING must be a positive integer between 1 and 5, i.e. 1, 2, 3, 4 or 5."},{"lineNumber":127,"author":{"gitID":"IzHoBX"},"content":"****"},{"lineNumber":128,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":129,"author":{"gitID":"IzHoBX"},"content":"[NOTE]"},{"lineNumber":130,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":131,"author":{"gitID":"IzHoBX"},"content":"* A person will have a null rating by default upon added. This implies that the person is yet to be rated."},{"lineNumber":132,"author":{"gitID":"IzHoBX"},"content":"* Null rating is shown as `-`."},{"lineNumber":133,"author":{"gitID":"IzHoBX"},"content":"* You cannot assign null rating to a person. If you want to revert a person back to null rating, please refer to \u003c\u003cUndoing previous command : `undo`\u003e\u003e"},{"lineNumber":134,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":135,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":136,"author":{"gitID":"IzHoBX"},"content":"Examples:"},{"lineNumber":137,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":138,"author":{"gitID":"IzHoBX"},"content":"* `list` +"},{"lineNumber":139,"author":{"gitID":"IzHoBX"},"content":"`rate 1 5` +"},{"lineNumber":140,"author":{"gitID":"IzHoBX"},"content":"Gives the 1st person in the last persons listing a 5-stars rating."},{"lineNumber":141,"author":{"gitID":"IzHoBX"},"content":"* `find Alex` +"},{"lineNumber":142,"author":{"gitID":"IzHoBX"},"content":"`rate 2 2` +"},{"lineNumber":143,"author":{"gitID":"IzHoBX"},"content":"Gives the 2nd person in the list of Alex(s) a 2-star rating."},{"lineNumber":144,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":145,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d Locating persons by name: `find` `[Since v1.2]`"},{"lineNumber":146,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Review an employee : `review`"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"Updates the review of an existing person in the address book. +"},{"lineNumber":150,"author":{"gitID":"-"},"content":"Format: `review INDEX u/REVIEWER REVIEW`"},{"lineNumber":151,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":152,"author":{"gitID":"IzHoBX"},"content":"****"},{"lineNumber":153,"author":{"gitID":"IzHoBX"},"content":"* Rates the person at the specified `INDEX`. The index refers to the index number shown in the last persons listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":154,"author":{"gitID":"-"},"content":"* Both INDEX and REVIEW must be provided."},{"lineNumber":155,"author":{"gitID":"-"},"content":"* Existing revie will be updated to the input REVIEW."},{"lineNumber":156,"author":{"gitID":"-"},"content":"* REVIEW can contain any character with no length limitation"},{"lineNumber":157,"author":{"gitID":"-"},"content":"* REVIEW will be tied to a REVIEWER"},{"lineNumber":158,"author":{"gitID":"-"},"content":"****"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":161,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":162,"author":{"gitID":"-"},"content":"* A person will have a null review by default upon added. This implies that the person is yet to be reviewed."},{"lineNumber":163,"author":{"gitID":"-"},"content":"* Null review is shown as `-`."},{"lineNumber":164,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":169,"author":{"gitID":"-"},"content":"`review 1 u/John Good Worker` +"},{"lineNumber":170,"author":{"gitID":"-"},"content":"Gives the 1st person in the last persons listing a review \"Good Worker\"."},{"lineNumber":171,"author":{"gitID":"-"},"content":"* `find n/Alex` +"},{"lineNumber":172,"author":{"gitID":"-"},"content":"`rate 2 u/John Lazy` +"},{"lineNumber":173,"author":{"gitID":"-"},"content":"Gives the 2nd person in the list of Alex(s) a review \"Lazy\"."},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Locating persons by name: `find`"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"Finds persons whose names or tags contain any of the given keywords. +"},{"lineNumber":178,"author":{"gitID":"-"},"content":"Format: `find (n/NAME_KEYWORDS | t/TAG_KEYWORDS)  [n/MORE_KEYWORDS] [t/MORE_KEYWORDS]`"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"****"},{"lineNumber":181,"author":{"gitID":"-"},"content":"* The search is case insensitive. +"},{"lineNumber":182,"author":{"gitID":"-"},"content":"e.g. `n/hans` will match `Hans`"},{"lineNumber":183,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. +"},{"lineNumber":184,"author":{"gitID":"-"},"content":"e.g. `n/Hans Bo` will match `Bo Hans`"},{"lineNumber":185,"author":{"gitID":"-"},"content":"* Both name and tag are searched (i.e. `AND` or intersection). +"},{"lineNumber":186,"author":{"gitID":"-"},"content":"e.g. `n/Hans Bo t/Friends`"},{"lineNumber":187,"author":{"gitID":"-"},"content":"will match `Hans` with tag `Friends` but not `Bo` with tag `Friends` or `Hans` with tag `Enemy`"},{"lineNumber":188,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. +"},{"lineNumber":189,"author":{"gitID":"-"},"content":"`n/Han` will not match `Hans`"},{"lineNumber":190,"author":{"gitID":"-"},"content":"****"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"* `find n/John` +"},{"lineNumber":195,"author":{"gitID":"-"},"content":"Returns any person having names `John`. +"},{"lineNumber":196,"author":{"gitID":"-"},"content":"e.g. `john` and `John Doe`"},{"lineNumber":197,"author":{"gitID":"-"},"content":"* `find n/Betsy Tim John` +"},{"lineNumber":198,"author":{"gitID":"-"},"content":"Returns any person having names `Betsy Tim John`"},{"lineNumber":199,"author":{"gitID":"-"},"content":"* `find n/Betsy n/Tim n/John` +"},{"lineNumber":200,"author":{"gitID":"-"},"content":"Returns any person having names `Betsy`, `Tim`, or `John`"},{"lineNumber":201,"author":{"gitID":"-"},"content":"* `find n/John t/Friends Colleagues` +"},{"lineNumber":202,"author":{"gitID":"-"},"content":"Returns any person having both names `John` and both tags `Friends` and `Colleagues`"},{"lineNumber":203,"author":{"gitID":"-"},"content":"* `find n/John t/Friends t/Colleagues` +"},{"lineNumber":204,"author":{"gitID":"-"},"content":"Returns any person having both names `John` and either tags `Friends` or `Colleagues`"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person : `delete`"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"Deletes the specified person from the address book. +"},{"lineNumber":209,"author":{"gitID":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"****"},{"lineNumber":212,"author":{"gitID":"-"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":213,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":214,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":215,"author":{"gitID":"-"},"content":"****"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":220,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":221,"author":{"gitID":"-"},"content":"Deletes the 2nd person in the address book."},{"lineNumber":222,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":223,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":224,"author":{"gitID":"-"},"content":"Deletes the 1st person in the results of the `find` command."},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting a person : `select`"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"Selects the person identified by the index number used in the last person listing. +"},{"lineNumber":229,"author":{"gitID":"-"},"content":"Format: `select INDEX`"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"****"},{"lineNumber":232,"author":{"gitID":"-"},"content":"* Selects the person and loads the Google search page the person at the specified `INDEX`."},{"lineNumber":233,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":234,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":235,"author":{"gitID":"-"},"content":"****"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":240,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":241,"author":{"gitID":"-"},"content":"Selects the 2nd person in the address book."},{"lineNumber":242,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":243,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":244,"author":{"gitID":"-"},"content":"Selects the 1st person in the results of the `find` command."},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":249,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":252,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":253,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":254,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":257,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"Restores the address book to the state before the previous _undoable_ command was executed. +"},{"lineNumber":260,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":263,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":264,"author":{"gitID":"-"},"content":"Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":265,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":270,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":271,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":274,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":275,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":276,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":279,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":280,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":281,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":286,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":291,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":292,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":295,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":296,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":299,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":300,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":301,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":302,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":303,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":304,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Locking the EmployeeTracker temporary: `lock` `[Since v1.2]`"},{"lineNumber":307,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":308,"author":{"gitID":"IzHoBX"},"content":"Lock the employee temporary+"},{"lineNumber":309,"author":{"gitID":"crizyli"},"content":"Format: `lock [PASSWORD]`"},{"lineNumber":310,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":311,"author":{"gitID":"crizyli"},"content":"****"},{"lineNumber":312,"author":{"gitID":"IzHoBX"},"content":"* Lock the EmployeeTracker with the specified PASSWORD."},{"lineNumber":313,"author":{"gitID":"crizyli"},"content":"* If PASSWORD is not provided, then no password for this lock."},{"lineNumber":314,"author":{"gitID":"crizyli"},"content":"* The PASSWORD is a String that can contain any character."},{"lineNumber":315,"author":{"gitID":"crizyli"},"content":"****"},{"lineNumber":316,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":317,"author":{"gitID":"crizyli"},"content":"Examples:"},{"lineNumber":318,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":319,"author":{"gitID":"crizyli"},"content":"* `lock 123` +"},{"lineNumber":320,"author":{"gitID":"crizyli"},"content":"Lock the address book with password: 123"},{"lineNumber":321,"author":{"gitID":"crizyli"},"content":"* `lock` +"},{"lineNumber":322,"author":{"gitID":"crizyli"},"content":"Lock the address book without password"},{"lineNumber":323,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":324,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Unlocking the EmployeeTracker: `unlock` `[Since v1.2]`"},{"lineNumber":325,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":326,"author":{"gitID":"IzHoBX"},"content":"Unlock the EmployeeTracker +"},{"lineNumber":327,"author":{"gitID":"crizyli"},"content":"Format: `unlock [PASSWORD]`"},{"lineNumber":328,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":329,"author":{"gitID":"crizyli"},"content":"****"},{"lineNumber":330,"author":{"gitID":"IzHoBX"},"content":"* Unlock the EmployeeTracker with the PASSWORD if last lock command provided a password."},{"lineNumber":331,"author":{"gitID":"crizyli"},"content":"* If no password needed, just enter unlock."},{"lineNumber":332,"author":{"gitID":"crizyli"},"content":"* The PASSWORD is a String that can contain any character."},{"lineNumber":333,"author":{"gitID":"crizyli"},"content":"****"},{"lineNumber":334,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":335,"author":{"gitID":"crizyli"},"content":"Examples:"},{"lineNumber":336,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":337,"author":{"gitID":"crizyli"},"content":"* `unlock 123` +"},{"lineNumber":338,"author":{"gitID":"crizyli"},"content":"Unlock the address book with password: 123 (the last lock command provided)"},{"lineNumber":339,"author":{"gitID":"crizyli"},"content":"* `unlock` +"},{"lineNumber":340,"author":{"gitID":"crizyli"},"content":"Unlock the address book, which is locked without password."},{"lineNumber":341,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":342,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Sorting the employees by any existing field: `sort` `[Since v1.2]`"},{"lineNumber":343,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":344,"author":{"gitID":"Yoochard"},"content":"Sort existing employees by any field +"},{"lineNumber":345,"author":{"gitID":"Yoochard"},"content":"Format: `sort FIELD`"},{"lineNumber":346,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":347,"author":{"gitID":"Yoochard"},"content":"****"},{"lineNumber":348,"author":{"gitID":"Yoochard"},"content":"* Sort the employees by any existing field in alphabetical order, note that rate field will be sorted in descending order"},{"lineNumber":349,"author":{"gitID":"Yoochard"},"content":"* The field entered must be one of the following: name, phone, email, address, rate, tag"},{"lineNumber":350,"author":{"gitID":"Yoochard"},"content":"* Sorting is case-insensitive"},{"lineNumber":351,"author":{"gitID":"Yoochard"},"content":"****"},{"lineNumber":352,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":353,"author":{"gitID":"Yoochard"},"content":"Examples:"},{"lineNumber":354,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":355,"author":{"gitID":"Yoochard"},"content":"* `sort name` +"},{"lineNumber":356,"author":{"gitID":"Yoochard"},"content":"Sort the employees by name in alphabetical order (case-insensitive)."},{"lineNumber":357,"author":{"gitID":"Yoochard"},"content":"* `lock rate` +"},{"lineNumber":358,"author":{"gitID":"Yoochard"},"content":"Sort the employees by rating in descending order."},{"lineNumber":359,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":360,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Adding an event on one employee\u0027s timetable: `addEvent` `[Since v1.2]`"},{"lineNumber":361,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":362,"author":{"gitID":"crizyli"},"content":"Add an event to the employee identified by the index number used in the last person listing. +"},{"lineNumber":363,"author":{"gitID":"crizyli"},"content":"Format: `addEvent INDEX title/TITLE loca/LOCATION stime/STRATTIME etime/ENDTIME descrip/DESCRIPTION`"},{"lineNumber":364,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":365,"author":{"gitID":"crizyli"},"content":"****"},{"lineNumber":366,"author":{"gitID":"crizyli"},"content":"* `STARTTIME` and `ENDTIME` *must be in the format `YYYY-MM-DDTHH-MM-SS`*."},{"lineNumber":367,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":368,"author":{"gitID":"crizyli"},"content":"* The index *must be a positive integer 1, 2, 3,* …​"},{"lineNumber":369,"author":{"gitID":"crizyli"},"content":"****"},{"lineNumber":370,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":371,"author":{"gitID":"crizyli"},"content":"Examples:"},{"lineNumber":372,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":373,"author":{"gitID":"crizyli"},"content":"* `list` +"},{"lineNumber":374,"author":{"gitID":"crizyli"},"content":"`addEvent 2 title/Test Event loca/NUS, Singapore stime/2017-04-09T19:00:00 etime/2018-04-09T21:00:00 descrip/A Test Event` +"},{"lineNumber":375,"author":{"gitID":"crizyli"},"content":"Adds the event to 2nd employee\u0027s timetable in the list."},{"lineNumber":376,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":377,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":378,"author":{"gitID":"-"},"content":""},{"lineNumber":379,"author":{"gitID":"-"},"content":"Clears all entries from the address book. +"},{"lineNumber":380,"author":{"gitID":"-"},"content":"Format: `clear`"},{"lineNumber":381,"author":{"gitID":"-"},"content":""},{"lineNumber":382,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":383,"author":{"gitID":"-"},"content":""},{"lineNumber":384,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":385,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":386,"author":{"gitID":"-"},"content":""},{"lineNumber":387,"author":{"gitID":"Yoochard"},"content":"\u003d\u003d\u003d User Interface optimisation"},{"lineNumber":388,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":389,"author":{"gitID":"Yoochard"},"content":"User will receive alert message in red colours when typing in an illegal message"},{"lineNumber":390,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":391,"author":{"gitID":"Yoochard"},"content":"Different tags will perform different colours for clarification"},{"lineNumber":392,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":393,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":394,"author":{"gitID":"-"},"content":""},{"lineNumber":395,"author":{"gitID":"-"},"content":"Address book data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":396,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":397,"author":{"gitID":"-"},"content":""},{"lineNumber":398,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Searching employees by rating `[coming in v2.0]`"},{"lineNumber":399,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":400,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d editing a timetable entry `[coming in v2.0]`"},{"lineNumber":401,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":402,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d deleting a timetable entry `[coming in v2.0]`"},{"lineNumber":403,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":404,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Logging in `[coming in v2.0]`"},{"lineNumber":405,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":406,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Adding timetable entry in mass to many employees\u0027 timetable at once `[coming in v2.0]`"},{"lineNumber":407,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":408,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Having my own timetable `[coming in v2.0]`"},{"lineNumber":409,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":410,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Jumping to email composing with a command `[coming in v2.0]`"},{"lineNumber":411,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":412,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Viewing my to-do-list `[coming in v2.0]`"},{"lineNumber":413,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":414,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Changing the window scheme/theme/skin `[coming in v2.0]`"},{"lineNumber":415,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":416,"author":{"gitID":"crizyli"},"content":"// tag::dataencryption[]"},{"lineNumber":417,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":418,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":419,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Exporting the data `[coming in v1.4]`"},{"lineNumber":420,"author":{"gitID":"-"},"content":""},{"lineNumber":421,"author":{"gitID":"-"},"content":"Export entries from last person listing of the address book. +"},{"lineNumber":422,"author":{"gitID":"-"},"content":"Format: `export PATH`"},{"lineNumber":423,"author":{"gitID":"-"},"content":""},{"lineNumber":424,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":425,"author":{"gitID":"-"},"content":""},{"lineNumber":426,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":427,"author":{"gitID":"-"},"content":"`export ./all` +"},{"lineNumber":428,"author":{"gitID":"-"},"content":"Export all entries in the address book into `./all.ser`"},{"lineNumber":429,"author":{"gitID":"-"},"content":"* `find n/Alex` +"},{"lineNumber":430,"author":{"gitID":"-"},"content":"`export ./alex` +"},{"lineNumber":431,"author":{"gitID":"-"},"content":"Export entries in the list of Alex(s) into `./alex.ser`"},{"lineNumber":432,"author":{"gitID":"-"},"content":""},{"lineNumber":433,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Importing the data `[coming in v1.4]`"},{"lineNumber":434,"author":{"gitID":"-"},"content":""},{"lineNumber":435,"author":{"gitID":"-"},"content":"Import from an external filesystem. +"},{"lineNumber":436,"author":{"gitID":"-"},"content":"Format: `import PATH`"},{"lineNumber":437,"author":{"gitID":"-"},"content":""},{"lineNumber":438,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":439,"author":{"gitID":"-"},"content":""},{"lineNumber":440,"author":{"gitID":"-"},"content":"`import ./all` +"},{"lineNumber":441,"author":{"gitID":"-"},"content":"Import entries of the address book from `./all.ser`"},{"lineNumber":442,"author":{"gitID":"-"},"content":""},{"lineNumber":443,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Receiving notification on timetable entry deadline"},{"lineNumber":444,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":445,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d\u003d Receiving notification in app"},{"lineNumber":446,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":447,"author":{"gitID":"IzHoBX"},"content":"In EmployeeTracker, a notification card will pop up when a timetable entry expires."},{"lineNumber":448,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":449,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d\u003d Receiving information via Windows"},{"lineNumber":450,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":451,"author":{"gitID":"IzHoBX"},"content":"In Windows 10 OS computers,even if you minimize the app, you will still receive notifications on timetable entry expiry through Windows notification sender."},{"lineNumber":452,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":453,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d\u003d Receiving a list of notifications in a sub-window"},{"lineNumber":454,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":455,"author":{"gitID":"IzHoBX"},"content":"Suppose you close or minimize the EmployeeTracker, and you missed some notifications on timetable entries expiry."},{"lineNumber":456,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":457,"author":{"gitID":"IzHoBX"},"content":"In such case, you will be greeted by a sub-window showing a list of notifications that you have missed."},{"lineNumber":458,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":459,"author":{"gitID":"IzHoBX"},"content":"You can do perform some simple commands in the sub-window:"},{"lineNumber":460,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":461,"author":{"gitID":"IzHoBX"},"content":"* dismissing one of notification"},{"lineNumber":462,"author":{"gitID":"IzHoBX"},"content":"* reminding a person about timetable entry expiry through email"},{"lineNumber":463,"author":{"gitID":"IzHoBX"},"content":"* reminding all persons involved in the list of notifications that they have timetable entry(s) expired"},{"lineNumber":464,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":465,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":466,"author":{"gitID":"-"},"content":""},{"lineNumber":467,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":468,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."},{"lineNumber":469,"author":{"gitID":"-"},"content":""},{"lineNumber":470,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":471,"author":{"gitID":"-"},"content":""},{"lineNumber":472,"author":{"gitID":"-"},"content":"* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"},{"lineNumber":473,"author":{"gitID":"-"},"content":"e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"},{"lineNumber":474,"author":{"gitID":"-"},"content":"* *Clear* : `clear`"},{"lineNumber":475,"author":{"gitID":"-"},"content":"* *Delete* : `delete INDEX` +"},{"lineNumber":476,"author":{"gitID":"-"},"content":"e.g. `delete 3`"},{"lineNumber":477,"author":{"gitID":"-"},"content":"* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"},{"lineNumber":478,"author":{"gitID":"-"},"content":"e.g. `edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":479,"author":{"gitID":"-"},"content":"* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":480,"author":{"gitID":"-"},"content":"e.g. `find James Jake`"},{"lineNumber":481,"author":{"gitID":"-"},"content":"* *List* : `list`"},{"lineNumber":482,"author":{"gitID":"-"},"content":"* *Help* : `help`"},{"lineNumber":483,"author":{"gitID":"-"},"content":"* *Select* : `select INDEX` +"},{"lineNumber":484,"author":{"gitID":"-"},"content":"e.g.`select 2`"},{"lineNumber":485,"author":{"gitID":"-"},"content":"* *History* : `history`"},{"lineNumber":486,"author":{"gitID":"-"},"content":"* *Undo* : `undo`"},{"lineNumber":487,"author":{"gitID":"-"},"content":"* *Redo* : `redo`"}],"authorContributionMap":{"crizyli":59,"Yoochard":23,"IzHoBX":91,"-":314}},{"path":"src/test/java/systemtests/HelpCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.ui.StatusBarFooter;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class HelpCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        //use accelerator"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        getCommandBox().click();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getResultDisplay().click();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        getPersonListPanel().click();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        getBrowserPanel().click();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        //use menu button"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        //use command box"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // open help window and give it focus"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // assert that while the help window is open the UI updates correctly for a command execution"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":65,"author":{"gitID":"Yoochard"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isDetailChanged());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // assert that the status bar too is updated correctly while the help window is open"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // note: the select command tested above does not update the status bar"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Asserts that the help window isn\u0027t open."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    private void assertHelpWindowNotOpen() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":1,"-":94}},{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getMidIndex;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class DeleteCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        /* Case: delete the last person in the list -\u003e deleted */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandSuccess(lastPersonIndex);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: undo deleting the last person in the list -\u003e last person restored */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        removePerson(modelBeforeDeletingLast, lastPersonIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: delete the middle person in the list -\u003e deleted */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Index middlePersonIndex \u003d getMidIndex(getModel());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"},{"lineNumber":69,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        selectPerson(selectedIndex);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":101,"author":{"gitID":"-"},"content":"                getModel().getAddressBook().getPersonList().size() + 1);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * @return the removed person"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    private Person removePerson(Model model, Index index) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Person targetPerson \u003d getPerson(model, index);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            model.deletePerson(targetPerson);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"targetPerson is retrieved from model.\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return targetPerson;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":140,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"Yoochard"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":197,"author":{"gitID":"Yoochard"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":2,"-":198}},{"path":"src/test/java/systemtests/ClearCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ClearCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void clear() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        final Model defaultModel \u003d getModel();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"},{"lineNumber":22,"author":{"gitID":"-"},"content":"         * spaces -\u003e cleared"},{"lineNumber":23,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        /* Case: undo clearing address book -\u003e original address book restored */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        /* Case: redo clearing address book -\u003e cleared */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before clearing -\u003e entire address book cleared */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: clear empty address book -\u003e cleared */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @see ClearCommandSystemTest#assertCommandSuccess(String)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":79,"author":{"gitID":"Yoochard"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":98,"author":{"gitID":"Yoochard"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":2,"-":99}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"import static seedu.address.testutil.TypicalPersons.AMY_DEFAULT;"},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":"import static seedu.address.testutil.TypicalPersons.BOB_DEFAULT;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":52,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":53,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":54,"author":{"gitID":"IzHoBX"},"content":"        Person toAdd \u003d AMY_DEFAULT;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":56,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":57,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandSuccess(command, toAdd);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":62,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":68,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":75,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandSuccess(command, toAdd);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":82,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandSuccess(command, toAdd);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":89,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandSuccess(command, toAdd);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":96,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandSuccess(command, toAdd);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":100,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandSuccess(ALICE_DEFAULT);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":103,"author":{"gitID":"IzHoBX"},"content":"        toAdd \u003d BOB_DEFAULT;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"},{"lineNumber":106,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandSuccess(command, toAdd);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":109,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandSuccess(HOON);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":114,"author":{"gitID":"IzHoBX"},"content":"        //showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":115,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandSuccess(IDA);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":120,"author":{"gitID":"IzHoBX"},"content":"        //selectPerson(Index.fromOneBased(1));"},{"lineNumber":121,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandSuccess(CARL);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON);"},{"lineNumber":127,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":134,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":138,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":142,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":146,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"},{"lineNumber":150,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":154,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":158,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":162,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"},{"lineNumber":166,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"},{"lineNumber":170,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":174,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC;"},{"lineNumber":175,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Person toAdd) {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":225,"author":{"gitID":"Yoochard"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":246,"author":{"gitID":"Yoochard"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":2,"IzHoBX":30,"-":217}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class SelectCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"},{"lineNumber":26,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":27,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, INDEX_FIRST_PERSON);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* Case: select the last card in the person list -\u003e selected */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Index personCount \u003d Index.fromOneBased(getTypicalPersons().size());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, personCount);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /* Case: select the middle card in the person list -\u003e selected */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(personCount.getOneBased() / 2);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"},{"lineNumber":57,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":58,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":85,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":89,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: select from empty address book -\u003e rejected */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":117,"author":{"gitID":"-"},"content":"                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"Yoochard"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":150,"author":{"gitID":"Yoochard"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":2,"-":151}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":44,"author":{"gitID":"Yoochard"},"content":"import seedu.address.ui.ResultDisplay;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":47,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":48,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":49,"author":{"gitID":"-"},"content":" */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"Yoochard"},"content":"    private List\u003cString\u003e defaultStyleOfResultDisplay;"},{"lineNumber":59,"author":{"gitID":"Yoochard"},"content":"    private List\u003cString\u003e errorStyleOfResultDisplay;"},{"lineNumber":60,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"Yoochard"},"content":"        defaultStyleOfResultDisplay \u003d mainWindowHandle.getResultDisplay().getStyleClass();"},{"lineNumber":77,"author":{"gitID":"Yoochard"},"content":"        errorStyleOfResultDisplay \u003d mainWindowHandle.getResultDisplay().getStyleClass();"},{"lineNumber":78,"author":{"gitID":"Yoochard"},"content":"        errorStyleOfResultDisplay.add(ResultDisplay.ERROR_STYLE_CLASS);"},{"lineNumber":79,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return TypicalPersons.getTypicalAddressBook();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":140,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" n/\" + keyword);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":173,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":183,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":196,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberPersonDetail();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isDetailChanged()"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isDetailChanged());"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isDetailChanged()"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":229,"author":{"gitID":"crizyli"},"content":"            expectedUrl \u003d new URL(BrowserPanel.getSearchPageUrl());"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isDetailChanged()"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isDetailChanged());"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":248,"author":{"gitID":"Yoochard"},"content":"     * Asserts that the command box and result display shows the default style."},{"lineNumber":249,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":250,"author":{"gitID":"Yoochard"},"content":"    protected void assertCommandBoxAndResultDisplayShowsDefaultStyle() {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":252,"author":{"gitID":"Yoochard"},"content":"        assertEquals(defaultStyleOfResultDisplay, getResultDisplay().getStyleClass());"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":256,"author":{"gitID":"Yoochard"},"content":"     * Asserts that the command box and result display shows the error style."},{"lineNumber":257,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":258,"author":{"gitID":"Yoochard"},"content":"    protected void assertCommandBoxAndResultDisplayShowsErrorStyle() {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":260,"author":{"gitID":"Yoochard"},"content":"        assertEquals(errorStyleOfResultDisplay, getResultDisplay().getStyleClass());"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":265,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":274,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":275,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":276,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":285,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":286,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":287,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":289,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":290,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":291,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":292,"author":{"gitID":"-"},"content":"            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"},{"lineNumber":293,"author":{"gitID":"-"},"content":"            assertTrue(getBrowserPanel().isFieldsEmpty());"},{"lineNumber":294,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":295,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":297,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":299,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":302,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":303,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":304,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":305,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":306,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":307,"author":{"gitID":"-"},"content":"}"},{"lineNumber":308,"author":{"gitID":"IzHoBX"},"content":""}],"authorContributionMap":{"crizyli":1,"Yoochard":14,"IzHoBX":1,"-":292}},{"path":"src/test/java/seedu/address/ui/ResultDisplayTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ResultDisplayTest extends GuiUnitTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"Yoochard"},"content":"    private static final NewResultAvailableEvent NEW_RESULT_SUCCESS_EVENT_STUB \u003d"},{"lineNumber":18,"author":{"gitID":"Yoochard"},"content":"            new NewResultAvailableEvent(\"success\", true);"},{"lineNumber":19,"author":{"gitID":"Yoochard"},"content":"    private static final NewResultAvailableEvent NEW_RESULT_FAILURE_EVENT_STUB \u003d"},{"lineNumber":20,"author":{"gitID":"Yoochard"},"content":"            new NewResultAvailableEvent(\"failure\", false);"},{"lineNumber":21,"author":{"gitID":"Yoochard"},"content":"    private List\u003cString\u003e defaultStyleOfResultDisplay;"},{"lineNumber":22,"author":{"gitID":"Yoochard"},"content":"    private List\u003cString\u003e errorStyleOfResultDisplay;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private ResultDisplayHandle resultDisplayHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(resultDisplay);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":33,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":34,"author":{"gitID":"Yoochard"},"content":"        defaultStyleOfResultDisplay \u003d new ArrayList\u003c\u003e(resultDisplayHandle.getStyleClass());"},{"lineNumber":35,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":36,"author":{"gitID":"Yoochard"},"content":"        errorStyleOfResultDisplay \u003d new ArrayList\u003c\u003e(defaultStyleOfResultDisplay);"},{"lineNumber":37,"author":{"gitID":"Yoochard"},"content":"        errorStyleOfResultDisplay.add(ResultDisplay.ERROR_STYLE_CLASS);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // default result text"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(\"\", resultDisplayHandle.getText());"},{"lineNumber":45,"author":{"gitID":"Yoochard"},"content":"        assertEquals(defaultStyleOfResultDisplay, resultDisplayHandle.getStyleClass());"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"Yoochard"},"content":"        // receiving new results"},{"lineNumber":48,"author":{"gitID":"Yoochard"},"content":"        assertResultDisplay(NEW_RESULT_SUCCESS_EVENT_STUB);"},{"lineNumber":49,"author":{"gitID":"Yoochard"},"content":"        assertResultDisplay(NEW_RESULT_FAILURE_EVENT_STUB);"},{"lineNumber":50,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":52,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"Yoochard"},"content":"     * Posts the {@code event} to the {@code EventsCenter}, then verifies that \u003cbr\u003e"},{"lineNumber":54,"author":{"gitID":"Yoochard"},"content":"     *      - the text on the result display matches the {@code event}\u0027s message \u003cbr\u003e"},{"lineNumber":55,"author":{"gitID":"Yoochard"},"content":"     *      - the result display\u0027s style is the same as {@code defaultStyleOfResultDisplay} if event is successful,"},{"lineNumber":56,"author":{"gitID":"Yoochard"},"content":"     *        {@code errorStyleOfResultDisplay} otherwise."},{"lineNumber":57,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"Yoochard"},"content":"    private void assertResultDisplay(NewResultAvailableEvent event) {"},{"lineNumber":59,"author":{"gitID":"Yoochard"},"content":"        postNow(event);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":61,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":62,"author":{"gitID":"Yoochard"},"content":"        List\u003cString\u003e expectedStyleClass \u003d event.isSuccessful ? defaultStyleOfResultDisplay : errorStyleOfResultDisplay;"},{"lineNumber":63,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":64,"author":{"gitID":"Yoochard"},"content":"        assertEquals(event.message, resultDisplayHandle.getText());"},{"lineNumber":65,"author":{"gitID":"Yoochard"},"content":"        assertEquals(expectedStyleClass, resultDisplayHandle.getStyleClass());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":30,"-":37}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class FindCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":29,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":30,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" n/\" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":38,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":39,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/Carl\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/Benson n/Daniel\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/Daniel n/Benson\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/Daniel n/Benson n/Daniel\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":67,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/Daniel n/Benson n/NonMatchingKeyWord\";"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/MeIeR\";"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/Mei\";"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/Meiers\";"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* Case: find person not in address book -\u003e 0 persons found */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/Mark\";"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        /* Case: find phone number of person in address book -\u003e 0 persons found */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + DANIEL.getPhone().value;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /* Case: find address of person in address book -\u003e 0 persons found */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + DANIEL.getAddress().value;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        /* Case: find email of person in address book -\u003e 0 persons found */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + DANIEL.getEmail().value;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        /* Case: find tags of person in address book -\u003e 0 persons found */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + tags.get(0).tagName;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /* Case: find while a person is selected -\u003e selected card deselected */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/Daniel\";"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        /* Case: find person in empty address book -\u003e 0 persons found */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":169,"author":{"gitID":"-"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":173,"author":{"gitID":"Yoochard"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":192,"author":{"gitID":"Yoochard"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":2,"-":193}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":18,"author":{"gitID":"Yoochard"},"content":"    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"},{"lineNumber":39,"author":{"gitID":"Yoochard"},"content":"        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":40,"author":{"gitID":"Yoochard"},"content":"                actualCard.getTags());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualPanel} displays the details of {@code expectedPerson}."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static void assertPanelDisplaysPerson(PersonCardHandle expectedPersonCard, BrowserPanelHandle actualPanel) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(expectedPersonCard.getName(), actualPanel.getName());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(expectedPersonCard.getPhone(), actualPanel.getPhone());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertEquals(expectedPersonCard.getEmail(), actualPanel.getEmail());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertEquals(expectedPersonCard.getAddress(), actualPanel.getAddress());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertEquals(expectedPersonCard.getTags(), actualPanel.getTags());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":3,"-":83}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d E.T. (Employees Tracker) - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"Yoochard"},"content":":repoURL: https://github.com/CS2103JAN2018-W15-B1/main/tree/master"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"By: `Team W15-B1`      Since: `Feb 2018`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":23,"author":{"gitID":"-"},"content":"+"},{"lineNumber":24,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":25,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":26,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":27,"author":{"gitID":"-"},"content":"+"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":30,"author":{"gitID":"-"},"content":"+"},{"lineNumber":31,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":32,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":33,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":39,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":40,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":41,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":42,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":43,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":45,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":47,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":48,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":53,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":62,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":63,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":66,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":81,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":86,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":93,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":98,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":101,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":106,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"Yoochard"},"content":"* At app launch: Initializing the components in the correct sequence, and connecting them up with each other."},{"lineNumber":111,"author":{"gitID":"Yoochard"},"content":"* At shut down: Shutting down the components and invoking cleanup method where necessary."},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":116,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":121,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":123,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":128,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":133,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":136,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":141,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":144,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":149,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":152,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":157,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":160,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":171,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":172,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":175,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":178,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":179,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":185,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":188,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":189,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":190,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":195,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":198,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":201,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":208,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":209,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":210,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":213,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":216,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":223,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":226,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":235,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":236,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":247,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":248,"author":{"gitID":"-"},"content":"----"},{"lineNumber":249,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":253,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"-"},"content":"}"},{"lineNumber":255,"author":{"gitID":"-"},"content":"----"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":258,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":259,"author":{"gitID":"-"},"content":"----"},{"lineNumber":260,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"-"},"content":"}"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":273,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"-"},"content":"}"},{"lineNumber":275,"author":{"gitID":"-"},"content":"----"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":288,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":297,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":306,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":323,"author":{"gitID":"-"},"content":""},{"lineNumber":324,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":325,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":326,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":327,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":328,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":329,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":332,"author":{"gitID":"-"},"content":""},{"lineNumber":333,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":334,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":335,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":336,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":337,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":338,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":""},{"lineNumber":341,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":342,"author":{"gitID":"-"},"content":""},{"lineNumber":343,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":344,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":345,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":346,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":347,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":348,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":349,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":353,"author":{"gitID":"-"},"content":""},{"lineNumber":354,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":355,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":356,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":357,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":358,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":359,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":360,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":361,"author":{"gitID":"-"},"content":""},{"lineNumber":362,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Manipulating the Rating field"},{"lineNumber":363,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":364,"author":{"gitID":"IzHoBX"},"content":"If a `Person` is instantiated without specifying `Rating` value, he will be assigned a `null rating` (indicated by -1 currently) by default. This will be displayed as `-` to user, indicating that this Person is yet to be rated."},{"lineNumber":365,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":366,"author":{"gitID":"IzHoBX"},"content":"The `Rating` field can be manipulated by user through `edit` or `rate` command. However, the valid inputs for rating are `1, 2, 3, 4, or 5`. That said, the current implementation does not allow a user to assign `null rating` to an existing person."},{"lineNumber":367,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":368,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Editing and rating a person"},{"lineNumber":369,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":370,"author":{"gitID":"IzHoBX"},"content":"`edit` command and `rate` command are implemented in a similar manner. They both involve modifying the field(s) of a person. The only difference is that `rate` can only change the `Rating` field, but `edit` can be used to change any field."},{"lineNumber":371,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":372,"author":{"gitID":"IzHoBX"},"content":"The implementation of `edit` and `rate` command in the Logic component involves 4 objects: +"},{"lineNumber":373,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":374,"author":{"gitID":"IzHoBX"},"content":". Person toEdit"},{"lineNumber":375,"author":{"gitID":"IzHoBX"},"content":". Person edited"},{"lineNumber":376,"author":{"gitID":"IzHoBX"},"content":". Parser: EditCommandParser or RateCommandParser"},{"lineNumber":377,"author":{"gitID":"IzHoBX"},"content":". EditPersonDescriptor"},{"lineNumber":378,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":379,"author":{"gitID":"IzHoBX"},"content":"Since all fields of the `Person` class are immutable, we need to use `edited` Person to replace the `toEdit` Person"},{"lineNumber":380,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":381,"author":{"gitID":"IzHoBX"},"content":"The details of implementation are as follow:"},{"lineNumber":382,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":383,"author":{"gitID":"IzHoBX"},"content":". `Parser` extracts the new information for each field from user input."},{"lineNumber":384,"author":{"gitID":"IzHoBX"},"content":". `EditPersonDescriptor` is used to record which field(s) will be changed and the respective new value."},{"lineNumber":385,"author":{"gitID":"IzHoBX"},"content":". `edited` Person will be created, by obtaining the new value for modified fields from `EditPersonDescriptor`. The value of unmodified field(s) are obtained from `toEdit` Person."},{"lineNumber":386,"author":{"gitID":"IzHoBX"},"content":". `edited` Person is used to replace `toEdit` Person in `AddressBook`"},{"lineNumber":387,"author":{"gitID":"-"},"content":""},{"lineNumber":388,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Review system"},{"lineNumber":389,"author":{"gitID":"-"},"content":""},{"lineNumber":390,"author":{"gitID":"-"},"content":"A person by default upon creation will have a null `Review` field, indicated to be `-` by default. This indicate that the person is yet to be reviewed."},{"lineNumber":391,"author":{"gitID":"-"},"content":""},{"lineNumber":392,"author":{"gitID":"-"},"content":"A person can be assigned a `Review` through the command of `Review`. `Review` does not have any restriction on the content (alphanumeric and symbols without any length restriction)."},{"lineNumber":393,"author":{"gitID":"-"},"content":""},{"lineNumber":394,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Reviewing a person"},{"lineNumber":395,"author":{"gitID":"-"},"content":""},{"lineNumber":396,"author":{"gitID":"-"},"content":"Currently `review` command and `rate` command are implemented in a similar manner, and hence `review` command and `edit` command are also implemented in a similar manner."},{"lineNumber":397,"author":{"gitID":"-"},"content":""},{"lineNumber":398,"author":{"gitID":"-"},"content":"The implementation basically mirrors what has already been documented in `3.3. Editing and rating a person`, so the implementation below is basically the iteration of the said part."},{"lineNumber":399,"author":{"gitID":"-"},"content":""},{"lineNumber":400,"author":{"gitID":"-"},"content":"The implementation of `edit` and `review` command in the Logic component involves 4 objects: +"},{"lineNumber":401,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":402,"author":{"gitID":"IzHoBX"},"content":". Person toEdit"},{"lineNumber":403,"author":{"gitID":"IzHoBX"},"content":". Person edited"},{"lineNumber":404,"author":{"gitID":"-"},"content":". Parser: EditCommandParser or ReviewCommandParser"},{"lineNumber":405,"author":{"gitID":"IzHoBX"},"content":". EditPersonDescriptor"},{"lineNumber":406,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":407,"author":{"gitID":"IzHoBX"},"content":"Since all fields of the `Person` class are immutable, we need to use `edited` Person to replace the `toEdit` Person"},{"lineNumber":408,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":409,"author":{"gitID":"IzHoBX"},"content":"The details of implementation are as follow:"},{"lineNumber":410,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":411,"author":{"gitID":"IzHoBX"},"content":". `Parser` extracts the new information for each field from user input."},{"lineNumber":412,"author":{"gitID":"IzHoBX"},"content":". `EditPersonDescriptor` is used to record which field(s) will be changed and the respective new value."},{"lineNumber":413,"author":{"gitID":"IzHoBX"},"content":". `edited` Person will be created, by obtaining the new value for modified fields from `EditPersonDescriptor`. The value of unmodified field(s) are obtained from `toEdit` Person."},{"lineNumber":414,"author":{"gitID":"IzHoBX"},"content":". `edited` Person is used to replace `toEdit` Person in `AddressBook`"},{"lineNumber":415,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":416,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d Lock and unlock the application"},{"lineNumber":417,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":418,"author":{"gitID":"crizyli"},"content":"`lock` command and `unlock` command are implemented in a similar manner. Both have the same command format."},{"lineNumber":419,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":420,"author":{"gitID":"crizyli"},"content":"The implementation of `lock` and `unlock` command in the Logic component involves 5 objects: +"},{"lineNumber":421,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":422,"author":{"gitID":"crizyli"},"content":". Command: LockCommand"},{"lineNumber":423,"author":{"gitID":"crizyli"},"content":". Command: UnlockCommand"},{"lineNumber":424,"author":{"gitID":"crizyli"},"content":". CommandParser: LockCommandParser or UnlockCommandParser"},{"lineNumber":425,"author":{"gitID":"crizyli"},"content":". AddressBookParser"},{"lineNumber":426,"author":{"gitID":"crizyli"},"content":". LogicManager"},{"lineNumber":427,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":428,"author":{"gitID":"crizyli"},"content":"The details of implementation of `lock` command are as follow:"},{"lineNumber":429,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":430,"author":{"gitID":"crizyli"},"content":". `AddressBookParser` is used to let the application accept `lock` command."},{"lineNumber":431,"author":{"gitID":"crizyli"},"content":". `LockCommandParser` extracts the password from user input."},{"lineNumber":432,"author":{"gitID":"crizyli"},"content":". `LockCommand` is used to set the password in LogicManager."},{"lineNumber":433,"author":{"gitID":"crizyli"},"content":". `LogicManager` is used to decide whether the application is locked or not, and decide the logic flow accordingly."},{"lineNumber":434,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":435,"author":{"gitID":"crizyli"},"content":"The details of implementation of `unlock` command are similar to `lock` command and are as follow:"},{"lineNumber":436,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":437,"author":{"gitID":"crizyli"},"content":". `AddressBookParser` is used to let the application accept `unlock` command."},{"lineNumber":438,"author":{"gitID":"crizyli"},"content":". `UnlockCommandParser` extracts the password from user input."},{"lineNumber":439,"author":{"gitID":"crizyli"},"content":". `UnlockCommand` is used to compare the user input password to the password stored in LogicManager by last `lock` caommand,"},{"lineNumber":440,"author":{"gitID":"crizyli"},"content":"if they are the same, unlock the application, otherwise, inform incorrect password."},{"lineNumber":441,"author":{"gitID":"crizyli"},"content":". `LogicManager` is used to decide whether the application is locked or not, and decide the logic flow accordingly."},{"lineNumber":442,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":443,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d Every employee has own timetable"},{"lineNumber":444,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":445,"author":{"gitID":"crizyli"},"content":"To implement the timetables for employees, we use a third party source which is Google Calendar API. With this API, we"},{"lineNumber":446,"author":{"gitID":"crizyli"},"content":"can integrate the application with Google Calendar, and achieve things liking creating events as what we usually do on"},{"lineNumber":447,"author":{"gitID":"crizyli"},"content":"Google Calendar website through the command. The import of Google Calendar API is simple: just add the necessary"},{"lineNumber":448,"author":{"gitID":"crizyli"},"content":"dependencies in Build.gradle and which will import the external libraries after building."},{"lineNumber":449,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":450,"author":{"gitID":"crizyli"},"content":"After we have the API, what we need to do is just automatically creating a new timetable (calendar) for every employee"},{"lineNumber":451,"author":{"gitID":"crizyli"},"content":"at the time this employee was added to the application. And this is what the CreateNewCalendar class for."},{"lineNumber":452,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":453,"author":{"gitID":"crizyli"},"content":"Additionally, as everyone has their own unique timetables, a new field called `CalendarId` will be created for each"},{"lineNumber":454,"author":{"gitID":"crizyli"},"content":"employee, to indicate the associated timetables."},{"lineNumber":455,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":456,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d Add events on anyone\u0027s timetable"},{"lineNumber":457,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":458,"author":{"gitID":"crizyli"},"content":"`addEvent` command is used to add an event on one employee\u0027s timetable. The implementation mainly touches 3 objects in"},{"lineNumber":459,"author":{"gitID":"crizyli"},"content":"the logic component: +"},{"lineNumber":460,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":461,"author":{"gitID":"crizyli"},"content":". Command: TestAddEventCommand"},{"lineNumber":462,"author":{"gitID":"crizyli"},"content":". CommandParser: TestAddEventCommandParser"},{"lineNumber":463,"author":{"gitID":"crizyli"},"content":". AddressBookParser"},{"lineNumber":464,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":465,"author":{"gitID":"crizyli"},"content":"The details of implementation of `addEvent` command are as follow:"},{"lineNumber":466,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":467,"author":{"gitID":"crizyli"},"content":". `AddressBookParser` is used to let the application accept `addEvent` command."},{"lineNumber":468,"author":{"gitID":"crizyli"},"content":". `TestAddEventCommandParser` is used to extracts information of the event to be added from user input."},{"lineNumber":469,"author":{"gitID":"crizyli"},"content":". `TestAddEventCommand` is used to perform the addition of the event to one\u0027s timetable with Google Calendar API."},{"lineNumber":470,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":471,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":472,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":473,"author":{"gitID":"-"},"content":""},{"lineNumber":474,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":475,"author":{"gitID":"-"},"content":""},{"lineNumber":476,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":477,"author":{"gitID":"-"},"content":""},{"lineNumber":478,"author":{"gitID":"Yoochard"},"content":"\u003d\u003d\u003d UI optimisation"},{"lineNumber":479,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":480,"author":{"gitID":"Yoochard"},"content":"* Different tags are performed in different colours"},{"lineNumber":481,"author":{"gitID":"Yoochard"},"content":"* Adjust font size to Helvetica and Times New Roman for clearer visual effect"},{"lineNumber":482,"author":{"gitID":"Yoochard"},"content":"* Alert words when user types in an illegal command will be in red colour"},{"lineNumber":483,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":484,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":485,"author":{"gitID":"-"},"content":""},{"lineNumber":486,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":487,"author":{"gitID":"-"},"content":""},{"lineNumber":488,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":489,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":490,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":491,"author":{"gitID":"-"},"content":""},{"lineNumber":492,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":493,"author":{"gitID":"-"},"content":""},{"lineNumber":494,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":495,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":496,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":497,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":498,"author":{"gitID":"-"},"content":""},{"lineNumber":499,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":500,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":501,"author":{"gitID":"-"},"content":""},{"lineNumber":502,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":503,"author":{"gitID":"-"},"content":""},{"lineNumber":504,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":505,"author":{"gitID":"-"},"content":""},{"lineNumber":506,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":507,"author":{"gitID":"-"},"content":""},{"lineNumber":508,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":509,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":510,"author":{"gitID":"-"},"content":""},{"lineNumber":511,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":512,"author":{"gitID":"-"},"content":""},{"lineNumber":513,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":514,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":515,"author":{"gitID":"-"},"content":""},{"lineNumber":516,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":517,"author":{"gitID":"-"},"content":""},{"lineNumber":518,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":519,"author":{"gitID":"-"},"content":""},{"lineNumber":520,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":521,"author":{"gitID":"-"},"content":""},{"lineNumber":522,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":523,"author":{"gitID":"-"},"content":""},{"lineNumber":524,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":525,"author":{"gitID":"-"},"content":""},{"lineNumber":526,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":527,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":528,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":529,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":530,"author":{"gitID":"-"},"content":""},{"lineNumber":531,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":532,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":533,"author":{"gitID":"-"},"content":""},{"lineNumber":534,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":535,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":536,"author":{"gitID":"-"},"content":""},{"lineNumber":537,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":538,"author":{"gitID":"-"},"content":""},{"lineNumber":539,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":540,"author":{"gitID":"-"},"content":""},{"lineNumber":541,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":542,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":543,"author":{"gitID":"-"},"content":""},{"lineNumber":544,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":545,"author":{"gitID":"-"},"content":""},{"lineNumber":546,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":547,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":548,"author":{"gitID":"-"},"content":""},{"lineNumber":549,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":550,"author":{"gitID":"-"},"content":""},{"lineNumber":551,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":552,"author":{"gitID":"-"},"content":""},{"lineNumber":553,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":554,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":555,"author":{"gitID":"-"},"content":""},{"lineNumber":556,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":557,"author":{"gitID":"-"},"content":""},{"lineNumber":558,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":559,"author":{"gitID":"-"},"content":""},{"lineNumber":560,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":561,"author":{"gitID":"-"},"content":""},{"lineNumber":562,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":563,"author":{"gitID":"-"},"content":""},{"lineNumber":564,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":565,"author":{"gitID":"-"},"content":""},{"lineNumber":566,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":567,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":568,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":569,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":570,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":571,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":572,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":573,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":574,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":575,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":576,"author":{"gitID":"-"},"content":""},{"lineNumber":577,"author":{"gitID":"-"},"content":""},{"lineNumber":578,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":579,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":580,"author":{"gitID":"-"},"content":""},{"lineNumber":581,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":582,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":583,"author":{"gitID":"-"},"content":""},{"lineNumber":584,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":585,"author":{"gitID":"-"},"content":""},{"lineNumber":586,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":587,"author":{"gitID":"-"},"content":""},{"lineNumber":588,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":589,"author":{"gitID":"-"},"content":""},{"lineNumber":590,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":591,"author":{"gitID":"-"},"content":""},{"lineNumber":592,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":593,"author":{"gitID":"-"},"content":""},{"lineNumber":594,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":595,"author":{"gitID":"-"},"content":""},{"lineNumber":596,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":597,"author":{"gitID":"-"},"content":""},{"lineNumber":598,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":599,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":600,"author":{"gitID":"-"},"content":""},{"lineNumber":601,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":602,"author":{"gitID":"-"},"content":""},{"lineNumber":603,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":604,"author":{"gitID":"-"},"content":""},{"lineNumber":605,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":606,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":607,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":608,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":609,"author":{"gitID":"-"},"content":""},{"lineNumber":610,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":611,"author":{"gitID":"-"},"content":""},{"lineNumber":612,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":613,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":614,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":615,"author":{"gitID":"-"},"content":""},{"lineNumber":616,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":617,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":618,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":619,"author":{"gitID":"-"},"content":""},{"lineNumber":620,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":621,"author":{"gitID":"-"},"content":""},{"lineNumber":622,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":623,"author":{"gitID":"-"},"content":""},{"lineNumber":624,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":625,"author":{"gitID":"-"},"content":""},{"lineNumber":626,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":627,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":628,"author":{"gitID":"-"},"content":""},{"lineNumber":629,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":630,"author":{"gitID":"-"},"content":""},{"lineNumber":631,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":632,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":633,"author":{"gitID":"-"},"content":""},{"lineNumber":634,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":635,"author":{"gitID":"-"},"content":""},{"lineNumber":636,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":637,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":638,"author":{"gitID":"-"},"content":""},{"lineNumber":639,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."},{"lineNumber":640,"author":{"gitID":"-"},"content":"+"},{"lineNumber":641,"author":{"gitID":"-"},"content":"****"},{"lineNumber":642,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":643,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":644,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":645,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":646,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":647,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":648,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":649,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":650,"author":{"gitID":"-"},"content":"****"},{"lineNumber":651,"author":{"gitID":"-"},"content":""},{"lineNumber":652,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":653,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":654,"author":{"gitID":"-"},"content":""},{"lineNumber":655,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":656,"author":{"gitID":"-"},"content":""},{"lineNumber":657,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":658,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":659,"author":{"gitID":"-"},"content":""},{"lineNumber":660,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."},{"lineNumber":661,"author":{"gitID":"-"},"content":"+"},{"lineNumber":662,"author":{"gitID":"-"},"content":"****"},{"lineNumber":663,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":664,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":665,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":666,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":667,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":668,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."},{"lineNumber":669,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":670,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":671,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":672,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":673,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":674,"author":{"gitID":"-"},"content":"****"},{"lineNumber":675,"author":{"gitID":"-"},"content":""},{"lineNumber":676,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":677,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":678,"author":{"gitID":"-"},"content":""},{"lineNumber":679,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":680,"author":{"gitID":"-"},"content":""},{"lineNumber":681,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":682,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":683,"author":{"gitID":"-"},"content":""},{"lineNumber":684,"author":{"gitID":"-"},"content":". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":685,"author":{"gitID":"-"},"content":"+"},{"lineNumber":686,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":687,"author":{"gitID":"-"},"content":"+"},{"lineNumber":688,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":689,"author":{"gitID":"-"},"content":"+"},{"lineNumber":690,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":691,"author":{"gitID":"-"},"content":"+"},{"lineNumber":692,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":693,"author":{"gitID":"-"},"content":"+"},{"lineNumber":694,"author":{"gitID":"-"},"content":"****"},{"lineNumber":695,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":696,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":697,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":698,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":699,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":700,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":701,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":702,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":703,"author":{"gitID":"-"},"content":"****"},{"lineNumber":704,"author":{"gitID":"-"},"content":""},{"lineNumber":705,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":706,"author":{"gitID":"-"},"content":"+"},{"lineNumber":707,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":708,"author":{"gitID":"-"},"content":"+"},{"lineNumber":709,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":710,"author":{"gitID":"-"},"content":"+"},{"lineNumber":711,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":712,"author":{"gitID":"-"},"content":"+"},{"lineNumber":713,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":714,"author":{"gitID":"-"},"content":"+"},{"lineNumber":715,"author":{"gitID":"-"},"content":"****"},{"lineNumber":716,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":717,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":718,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":719,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":720,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":721,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":722,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":723,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":724,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":725,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":726,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":727,"author":{"gitID":"-"},"content":"****"},{"lineNumber":728,"author":{"gitID":"-"},"content":""},{"lineNumber":729,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."},{"lineNumber":730,"author":{"gitID":"-"},"content":"+"},{"lineNumber":731,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":732,"author":{"gitID":"-"},"content":"+"},{"lineNumber":733,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":734,"author":{"gitID":"-"},"content":"+"},{"lineNumber":735,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":736,"author":{"gitID":"-"},"content":"+"},{"lineNumber":737,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":738,"author":{"gitID":"-"},"content":"+"},{"lineNumber":739,"author":{"gitID":"-"},"content":"****"},{"lineNumber":740,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":741,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":742,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."},{"lineNumber":743,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":744,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."},{"lineNumber":745,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."},{"lineNumber":746,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":747,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."},{"lineNumber":748,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":749,"author":{"gitID":"-"},"content":"****"},{"lineNumber":750,"author":{"gitID":"-"},"content":""},{"lineNumber":751,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":752,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":753,"author":{"gitID":"-"},"content":""},{"lineNumber":754,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."},{"lineNumber":755,"author":{"gitID":"-"},"content":""},{"lineNumber":756,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":757,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":758,"author":{"gitID":"-"},"content":""},{"lineNumber":759,"author":{"gitID":"-"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."},{"lineNumber":760,"author":{"gitID":"-"},"content":"+"},{"lineNumber":761,"author":{"gitID":"-"},"content":"****"},{"lineNumber":762,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":763,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":764,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":765,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":766,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":767,"author":{"gitID":"-"},"content":"****"},{"lineNumber":768,"author":{"gitID":"-"},"content":""},{"lineNumber":769,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":770,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":771,"author":{"gitID":"-"},"content":""},{"lineNumber":772,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":773,"author":{"gitID":"-"},"content":""},{"lineNumber":774,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":775,"author":{"gitID":"-"},"content":""},{"lineNumber":776,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":777,"author":{"gitID":"-"},"content":"Edits the remark for a person specified in the `INDEX`. +"},{"lineNumber":778,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":779,"author":{"gitID":"-"},"content":""},{"lineNumber":780,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":781,"author":{"gitID":"-"},"content":""},{"lineNumber":782,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":783,"author":{"gitID":"-"},"content":"Edits the remark for the first person to `Likes to drink coffee.`"},{"lineNumber":784,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":785,"author":{"gitID":"-"},"content":"Removes the remark for the first person."},{"lineNumber":786,"author":{"gitID":"-"},"content":""},{"lineNumber":787,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":788,"author":{"gitID":"-"},"content":""},{"lineNumber":789,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":790,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":791,"author":{"gitID":"-"},"content":""},{"lineNumber":792,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":793,"author":{"gitID":"-"},"content":""},{"lineNumber":794,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":795,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":796,"author":{"gitID":"-"},"content":""},{"lineNumber":797,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":798,"author":{"gitID":"-"},"content":""},{"lineNumber":799,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":800,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":801,"author":{"gitID":"-"},"content":""},{"lineNumber":802,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":803,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":804,"author":{"gitID":"-"},"content":""},{"lineNumber":805,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":806,"author":{"gitID":"-"},"content":""},{"lineNumber":807,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":808,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":809,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":810,"author":{"gitID":"-"},"content":""},{"lineNumber":811,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":812,"author":{"gitID":"-"},"content":""},{"lineNumber":813,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":814,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":815,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":816,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":817,"author":{"gitID":"-"},"content":""},{"lineNumber":818,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":819,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":820,"author":{"gitID":"-"},"content":""},{"lineNumber":821,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":822,"author":{"gitID":"-"},"content":""},{"lineNumber":823,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":824,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":825,"author":{"gitID":"-"},"content":""},{"lineNumber":826,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":827,"author":{"gitID":"-"},"content":""},{"lineNumber":828,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":829,"author":{"gitID":"-"},"content":""},{"lineNumber":830,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":831,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":832,"author":{"gitID":"-"},"content":""},{"lineNumber":833,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":834,"author":{"gitID":"-"},"content":""},{"lineNumber":835,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":836,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":837,"author":{"gitID":"-"},"content":""},{"lineNumber":838,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":839,"author":{"gitID":"-"},"content":""},{"lineNumber":840,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":841,"author":{"gitID":"-"},"content":""},{"lineNumber":842,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":843,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":844,"author":{"gitID":"-"},"content":""},{"lineNumber":845,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":846,"author":{"gitID":"-"},"content":""},{"lineNumber":847,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":848,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":849,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":850,"author":{"gitID":"-"},"content":""},{"lineNumber":851,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":852,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":853,"author":{"gitID":"-"},"content":""},{"lineNumber":854,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":855,"author":{"gitID":"-"},"content":""},{"lineNumber":856,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":857,"author":{"gitID":"-"},"content":""},{"lineNumber":858,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":859,"author":{"gitID":"-"},"content":""},{"lineNumber":860,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":861,"author":{"gitID":"-"},"content":""},{"lineNumber":862,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":863,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":864,"author":{"gitID":"-"},"content":""},{"lineNumber":865,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":866,"author":{"gitID":"-"},"content":""},{"lineNumber":867,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":868,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":869,"author":{"gitID":"-"},"content":""},{"lineNumber":870,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":871,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":872,"author":{"gitID":"-"},"content":""},{"lineNumber":873,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":874,"author":{"gitID":"-"},"content":""},{"lineNumber":875,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":876,"author":{"gitID":"-"},"content":""},{"lineNumber":877,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":878,"author":{"gitID":"-"},"content":""},{"lineNumber":879,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":880,"author":{"gitID":"-"},"content":""},{"lineNumber":881,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":882,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":883,"author":{"gitID":"-"},"content":""},{"lineNumber":884,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":885,"author":{"gitID":"-"},"content":""},{"lineNumber":886,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":887,"author":{"gitID":"-"},"content":""},{"lineNumber":888,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":889,"author":{"gitID":"-"},"content":""},{"lineNumber":890,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":891,"author":{"gitID":"-"},"content":""},{"lineNumber":892,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":893,"author":{"gitID":"-"},"content":""},{"lineNumber":894,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":895,"author":{"gitID":"-"},"content":""},{"lineNumber":896,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":897,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":898,"author":{"gitID":"-"},"content":""},{"lineNumber":899,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":900,"author":{"gitID":"-"},"content":""},{"lineNumber":901,"author":{"gitID":"IzHoBX"},"content":"* is a manger"},{"lineNumber":902,"author":{"gitID":"IzHoBX"},"content":"* has a need to keep track of a significant number of subordinate employees"},{"lineNumber":903,"author":{"gitID":"-"},"content":"* need to assign work to employees and keep track of it"},{"lineNumber":904,"author":{"gitID":"IzHoBX"},"content":"* prefer desktop apps over mobile apps"},{"lineNumber":905,"author":{"gitID":"IzHoBX"},"content":"* can type fast, i.e. \u003e45 words per minute"},{"lineNumber":906,"author":{"gitID":"-"},"content":"* prefers typing over mouse input"},{"lineNumber":907,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":908,"author":{"gitID":"-"},"content":""},{"lineNumber":909,"author":{"gitID":"-"},"content":"*Value proposition*: keep track of employees and their work easily through a single app"},{"lineNumber":910,"author":{"gitID":"-"},"content":""},{"lineNumber":911,"author":{"gitID":"-"},"content":"*Feature Contribution*："},{"lineNumber":912,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":913,"author":{"gitID":"IzHoBX"},"content":". Li Yufei +"},{"lineNumber":914,"author":{"gitID":"crizyli"},"content":"* (minor) be able to lock the application and unlock it and must use the same password"},{"lineNumber":915,"author":{"gitID":"crizyli"},"content":"* (major) each employee has his own timetable and manager can add events on anyone\u0027s timetable"},{"lineNumber":916,"author":{"gitID":"IzHoBX"},"content":". Yang Yuqing"},{"lineNumber":917,"author":{"gitID":"-"},"content":"* (minor) be able to sort the employees by existing field (ie. name, phone, email, address, rate)"},{"lineNumber":918,"author":{"gitID":"-"},"content":"* (major) UI optimization (may change)"},{"lineNumber":919,"author":{"gitID":"IzHoBX"},"content":". Ho Bing Xuan"},{"lineNumber":920,"author":{"gitID":"IzHoBX"},"content":"* (minor) add Rating features"},{"lineNumber":921,"author":{"gitID":"IzHoBX"},"content":"* (major) notification feature for timetable entry"},{"lineNumber":922,"author":{"gitID":"-"},"content":". Gilbert Emerson"},{"lineNumber":923,"author":{"gitID":"-"},"content":"* (minor) enhance on the Find feature, able to find by multiple keywords and also in multiple fields"},{"lineNumber":924,"author":{"gitID":"-"},"content":"* (major) add Review feature"},{"lineNumber":925,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":926,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":927,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":928,"author":{"gitID":"-"},"content":""},{"lineNumber":929,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":930,"author":{"gitID":"-"},"content":""},{"lineNumber":931,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":932,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":933,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":934,"author":{"gitID":"-"},"content":"|`* * *`|new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":935,"author":{"gitID":"-"},"content":""},{"lineNumber":936,"author":{"gitID":"-"},"content":"|`* * *`|user |add a new person | include employee that have just entered the company"},{"lineNumber":937,"author":{"gitID":"-"},"content":""},{"lineNumber":938,"author":{"gitID":"IzHoBX"},"content":"|`* * *`|user |have a dedicated timetable for each employee| trace progress of that person"},{"lineNumber":939,"author":{"gitID":"-"},"content":""},{"lineNumber":940,"author":{"gitID":"-"},"content":"|`* * *`|user |add a timetable entry on anyone\u0027s timetable | assign jobs to employee"},{"lineNumber":941,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":942,"author":{"gitID":"IzHoBX"},"content":"|`* * *`|user |edit a timetable entry |update timetable entry information"},{"lineNumber":943,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":944,"author":{"gitID":"-"},"content":"|`* * *`|user |delete a timetable entry | remove a job or event that is canceled"},{"lineNumber":945,"author":{"gitID":"-"},"content":""},{"lineNumber":946,"author":{"gitID":"-"},"content":"|`* * *`|user |give employee a rating |evaluate their performance"},{"lineNumber":947,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":948,"author":{"gitID":"-"},"content":"|`* * *`|user |change employee\u0027s rating | update my rating record when the performance of an employee changes"},{"lineNumber":949,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":950,"author":{"gitID":"-"},"content":"|`* * *`|user |add notes on a timetable entry or on a person | include more details about the entry"},{"lineNumber":951,"author":{"gitID":"-"},"content":""},{"lineNumber":952,"author":{"gitID":"IzHoBX"},"content":"|`* * *`|user |search employees by specific criteria (e.g. name and tags) | search employees more easily"},{"lineNumber":953,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":954,"author":{"gitID":"IzHoBX"},"content":"|`* * *`|user |identify a person with name when carrying out commands | save time by not having to browse through a long list"},{"lineNumber":955,"author":{"gitID":"-"},"content":""},{"lineNumber":956,"author":{"gitID":"-"},"content":"|`* *`|user |sort employees by name |locate an employee easily"},{"lineNumber":957,"author":{"gitID":"-"},"content":""},{"lineNumber":958,"author":{"gitID":"-"},"content":"|`* *`|user |sort employees by their rating |give them bonus salaries accordingly"},{"lineNumber":959,"author":{"gitID":"-"},"content":""},{"lineNumber":960,"author":{"gitID":"-"},"content":"|`* *`|user |sort employees by their salaries |see their salary conditions"},{"lineNumber":961,"author":{"gitID":"-"},"content":""},{"lineNumber":962,"author":{"gitID":"-"},"content":"|`* *`|user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"},{"lineNumber":963,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":964,"author":{"gitID":"-"},"content":"|`* *`|user |have my own timetable |manage my own time"},{"lineNumber":965,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":966,"author":{"gitID":"IzHoBX"},"content":"|`* *`|user |start composing an email with a command |send an email to a specific person faster"},{"lineNumber":967,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":968,"author":{"gitID":"-"},"content":"|`* *`|user |mass adding timetable entry to many employees\u0027 timetable at once | save time by not having to add the event to person by person"},{"lineNumber":969,"author":{"gitID":"-"},"content":""},{"lineNumber":970,"author":{"gitID":"-"},"content":"|`* *`|user |be notified for any deadline for the timetable entry of my employees | be aware of employees who are late in submitting their work"},{"lineNumber":971,"author":{"gitID":"-"},"content":""},{"lineNumber":972,"author":{"gitID":"-"},"content":"|`* *`|user |export my employees tracker |share information with another user"},{"lineNumber":973,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":974,"author":{"gitID":"-"},"content":"|`* *`|user |import my employees tracker |obtain information from another user"},{"lineNumber":975,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":976,"author":{"gitID":"IzHoBX"},"content":"|`*`|user |see timetable entries happening in other departments |be aware of the progress of other departments"},{"lineNumber":977,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":978,"author":{"gitID":"IzHoBX"},"content":"|`*`|user |view to-do-list |see my own upcoming jobs/events"},{"lineNumber":979,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":980,"author":{"gitID":"IzHoBX"},"content":"|`*`|user |export a list of people into excel sheet |do collective operations easily on other platform"},{"lineNumber":981,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":982,"author":{"gitID":"IzHoBX"},"content":"|`*`|user |login |have personalized privileges/window scheme"},{"lineNumber":983,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":984,"author":{"gitID":"-"},"content":"|`*`|user |change the window scheme/theme/skin | have personalised experience in the app"},{"lineNumber":985,"author":{"gitID":"-"},"content":""},{"lineNumber":986,"author":{"gitID":"-"},"content":"|`*`|user |know employee\u0027s location |search their location on the map"},{"lineNumber":987,"author":{"gitID":"-"},"content":""},{"lineNumber":988,"author":{"gitID":"-"},"content":"|`*`|user |lock the employees tracker |leave my app open while making unauthorized people cannot access it"},{"lineNumber":989,"author":{"gitID":"-"},"content":""},{"lineNumber":990,"author":{"gitID":"-"},"content":"|`*`|user |unlock the employees tracker |continue to use the app after leaving it locked"},{"lineNumber":991,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":992,"author":{"gitID":"-"},"content":"|`*`|user |write a review to an employee that has ever worked below me| information his/her current manager of his/her performance"},{"lineNumber":993,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":994,"author":{"gitID":"-"},"content":""},{"lineNumber":995,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":996,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":997,"author":{"gitID":"-"},"content":""},{"lineNumber":998,"author":{"gitID":"-"},"content":"(For all use cases below, the *System* is the `Employees Tracker` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":999,"author":{"gitID":"-"},"content":""},{"lineNumber":1000,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1001,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d Use case: Add a timetable entry on anyone\u0027s timetable"},{"lineNumber":1002,"author":{"gitID":"-"},"content":""},{"lineNumber":1003,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1004,"author":{"gitID":"-"},"content":""},{"lineNumber":1005,"author":{"gitID":"Yoochard"},"content":"1. User requests to list employees"},{"lineNumber":1006,"author":{"gitID":"-"},"content":"2.   shows a list of employees"},{"lineNumber":1007,"author":{"gitID":"-"},"content":"3. User requests to add a entry to an employee\u0027s timetable"},{"lineNumber":1008,"author":{"gitID":"-"},"content":"4. Employees Tracker adds the entry"},{"lineNumber":1009,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1010,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1011,"author":{"gitID":"-"},"content":""},{"lineNumber":1012,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1013,"author":{"gitID":"-"},"content":""},{"lineNumber":1014,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1015,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1016,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1017,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1018,"author":{"gitID":"-"},"content":""},{"lineNumber":1019,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1020,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1021,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1022,"author":{"gitID":"-"},"content":"** 3a1. Employees Tracker shows an error message."},{"lineNumber":1023,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1024,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1025,"author":{"gitID":"-"},"content":""},{"lineNumber":1026,"author":{"gitID":"crizyli"},"content":"[discrete]"},{"lineNumber":1027,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Give employee a rating"},{"lineNumber":1028,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":1029,"author":{"gitID":"Yoochard"},"content":"*MSS*"},{"lineNumber":1030,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":1031,"author":{"gitID":"Yoochard"},"content":"1. User requests to list employees"},{"lineNumber":1032,"author":{"gitID":"-"},"content":"2. Employees Tracker shows a list of employees"},{"lineNumber":1033,"author":{"gitID":"-"},"content":"3. User requests to give an employee a rating"},{"lineNumber":1034,"author":{"gitID":"-"},"content":"4. Employees Tracker add the rating"},{"lineNumber":1035,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1036,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1037,"author":{"gitID":"-"},"content":""},{"lineNumber":1038,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1039,"author":{"gitID":"-"},"content":""},{"lineNumber":1040,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1041,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1042,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1043,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1044,"author":{"gitID":"-"},"content":""},{"lineNumber":1045,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1046,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1047,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1048,"author":{"gitID":"-"},"content":"** 3a1. Employees Tracker shows an error message."},{"lineNumber":1049,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1050,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1051,"author":{"gitID":"-"},"content":""},{"lineNumber":1052,"author":{"gitID":"crizyli"},"content":"* 3b. The given rating is not an integer."},{"lineNumber":1053,"author":{"gitID":"crizyli"},"content":"+"},{"lineNumber":1054,"author":{"gitID":"crizyli"},"content":"[none]"},{"lineNumber":1055,"author":{"gitID":"-"},"content":"** 3b1. Employees Tracker shows an error message."},{"lineNumber":1056,"author":{"gitID":"crizyli"},"content":"+"},{"lineNumber":1057,"author":{"gitID":"crizyli"},"content":"Use case resumes at step 2."},{"lineNumber":1058,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":1059,"author":{"gitID":"crizyli"},"content":"* 4a. The person has already been rated."},{"lineNumber":1060,"author":{"gitID":"crizyli"},"content":"+"},{"lineNumber":1061,"author":{"gitID":"crizyli"},"content":"[none]"},{"lineNumber":1062,"author":{"gitID":"-"},"content":"** 4a1. Employees Tracker updates the rating for the person with the new rating."},{"lineNumber":1063,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1064,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1065,"author":{"gitID":"-"},"content":""},{"lineNumber":1066,"author":{"gitID":"crizyli"},"content":"[discrete]"},{"lineNumber":1067,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d Use case: Sort the employees by their rating"},{"lineNumber":1068,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":1069,"author":{"gitID":"crizyli"},"content":"*MSS*"},{"lineNumber":1070,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":1071,"author":{"gitID":"-"},"content":"1. User requests to list employees sorted by their ratings"},{"lineNumber":1072,"author":{"gitID":"-"},"content":"2. Employees Tracker accesses the list of all employees"},{"lineNumber":1073,"author":{"gitID":"-"},"content":"3. Employees Tracker sorts the employees in the list by their ratings"},{"lineNumber":1074,"author":{"gitID":"-"},"content":"4. Employees Tracker shows the sorted list"},{"lineNumber":1075,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1076,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1077,"author":{"gitID":"-"},"content":""},{"lineNumber":1078,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1079,"author":{"gitID":"-"},"content":""},{"lineNumber":1080,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1081,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1082,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1083,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1084,"author":{"gitID":"-"},"content":""},{"lineNumber":1085,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1086,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use Case: Mass adding timetable entry to many employees\u0027 timetable at once"},{"lineNumber":1087,"author":{"gitID":"-"},"content":""},{"lineNumber":1088,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1089,"author":{"gitID":"-"},"content":""},{"lineNumber":1090,"author":{"gitID":"-"},"content":"1. User requests to list all employees"},{"lineNumber":1091,"author":{"gitID":"-"},"content":"2. Employees Tracker shows a list of all employees"},{"lineNumber":1092,"author":{"gitID":"-"},"content":"3. User requests to add timetable entry to many employees"},{"lineNumber":1093,"author":{"gitID":"-"},"content":"4. Employees Tracker add the entry to many employees"},{"lineNumber":1094,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1095,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1096,"author":{"gitID":"-"},"content":""},{"lineNumber":1097,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1098,"author":{"gitID":"-"},"content":""},{"lineNumber":1099,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1100,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1101,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1102,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1103,"author":{"gitID":"-"},"content":""},{"lineNumber":1104,"author":{"gitID":"-"},"content":"* 3a. The index range given is invalid."},{"lineNumber":1105,"author":{"gitID":"crizyli"},"content":"+"},{"lineNumber":1106,"author":{"gitID":"crizyli"},"content":"[none]"},{"lineNumber":1107,"author":{"gitID":"-"},"content":"** 3a1. Employees Tracker shows an error message."},{"lineNumber":1108,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1109,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1110,"author":{"gitID":"-"},"content":""},{"lineNumber":1111,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1112,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use Case: Write a review to an employee that has ever worked below me"},{"lineNumber":1113,"author":{"gitID":"-"},"content":""},{"lineNumber":1114,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1115,"author":{"gitID":"-"},"content":""},{"lineNumber":1116,"author":{"gitID":"-"},"content":"1. User requests to list all employees"},{"lineNumber":1117,"author":{"gitID":"-"},"content":"2. Employees Tracker shows a list of all employees"},{"lineNumber":1118,"author":{"gitID":"-"},"content":"3. User requests to add review to an employee"},{"lineNumber":1119,"author":{"gitID":"-"},"content":"4. Employees Tracker add the review to the employee"},{"lineNumber":1120,"author":{"gitID":"crizyli"},"content":"+"},{"lineNumber":1121,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1122,"author":{"gitID":"-"},"content":""},{"lineNumber":1123,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1124,"author":{"gitID":"-"},"content":""},{"lineNumber":1125,"author":{"gitID":"crizyli"},"content":"[none]"},{"lineNumber":1126,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1127,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1128,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1129,"author":{"gitID":"-"},"content":""},{"lineNumber":1130,"author":{"gitID":"-"},"content":"* 3a. The index given is invalid."},{"lineNumber":1131,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1132,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1133,"author":{"gitID":"-"},"content":"** 3a1. Employees Tracker shows an error message."},{"lineNumber":1134,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1135,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1136,"author":{"gitID":"-"},"content":""},{"lineNumber":1137,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1138,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use Case: Export Employees Tracker"},{"lineNumber":1139,"author":{"gitID":"-"},"content":""},{"lineNumber":1140,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1141,"author":{"gitID":"-"},"content":""},{"lineNumber":1142,"author":{"gitID":"-"},"content":"1. User requests export Employees Tracker into a directory"},{"lineNumber":1143,"author":{"gitID":"-"},"content":"2. Employees Tracker export the Employees Tracker data in a file to the directory specified"},{"lineNumber":1144,"author":{"gitID":"crizyli"},"content":"+"},{"lineNumber":1145,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1146,"author":{"gitID":"-"},"content":""},{"lineNumber":1147,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1148,"author":{"gitID":"-"},"content":""},{"lineNumber":1149,"author":{"gitID":"crizyli"},"content":"[none]"},{"lineNumber":1150,"author":{"gitID":"-"},"content":"* 1a. The directory is invalid."},{"lineNumber":1151,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1152,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1153,"author":{"gitID":"-"},"content":"** 1a1. Employees Tracker shows an error message."},{"lineNumber":1154,"author":{"gitID":"crizyli"},"content":"+"},{"lineNumber":1155,"author":{"gitID":"crizyli"},"content":"Use case ends."},{"lineNumber":1156,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":1157,"author":{"gitID":"crizyli"},"content":"[discrete]"},{"lineNumber":1158,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use Case: Import Employees Tracker"},{"lineNumber":1159,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":1160,"author":{"gitID":"crizyli"},"content":"*MSS*"},{"lineNumber":1161,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":1162,"author":{"gitID":"-"},"content":"1. User requests import Employees Tracker file from a directory"},{"lineNumber":1163,"author":{"gitID":"-"},"content":"2. Employees Tracker import the Employees Tracker data from the file in the directory specified"},{"lineNumber":1164,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1165,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1166,"author":{"gitID":"-"},"content":""},{"lineNumber":1167,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1168,"author":{"gitID":"-"},"content":""},{"lineNumber":1169,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1170,"author":{"gitID":"-"},"content":"* 1a. The directory is invalid."},{"lineNumber":1171,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1172,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1173,"author":{"gitID":"-"},"content":"** 1a1. Employees Tracker shows an error message."},{"lineNumber":1174,"author":{"gitID":"crizyli"},"content":"+"},{"lineNumber":1175,"author":{"gitID":"crizyli"},"content":"Use case ends."},{"lineNumber":1176,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":1177,"author":{"gitID":"IzHoBX"},"content":"[discrete]"},{"lineNumber":1178,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Use case: edit timetable entry"},{"lineNumber":1179,"author":{"gitID":"-"},"content":""},{"lineNumber":1180,"author":{"gitID":"IzHoBX"},"content":"*MSS*"},{"lineNumber":1181,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1182,"author":{"gitID":"IzHoBX"},"content":"1. User requests to list all persons."},{"lineNumber":1183,"author":{"gitID":"IzHoBX"},"content":"2. User requests to view the timetable of a person."},{"lineNumber":1184,"author":{"gitID":"-"},"content":"3. Employees Tracker shows the timetable of that person."},{"lineNumber":1185,"author":{"gitID":"IzHoBX"},"content":"4. User requests to update the information of an entry in the timetable."},{"lineNumber":1186,"author":{"gitID":"-"},"content":"5. Employees Tracker updates the new information for that timetable entry."},{"lineNumber":1187,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1188,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1189,"author":{"gitID":"-"},"content":""},{"lineNumber":1190,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1191,"author":{"gitID":"-"},"content":""},{"lineNumber":1192,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1193,"author":{"gitID":"IzHoBX"},"content":"* 1a. The list is empty."},{"lineNumber":1194,"author":{"gitID":"IzHoBX"},"content":"+"},{"lineNumber":1195,"author":{"gitID":"IzHoBX"},"content":"Use case ends."},{"lineNumber":1196,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1197,"author":{"gitID":"IzHoBX"},"content":"* 2a. The given index is invalid."},{"lineNumber":1198,"author":{"gitID":"IzHoBX"},"content":"+"},{"lineNumber":1199,"author":{"gitID":"IzHoBX"},"content":"[none]"},{"lineNumber":1200,"author":{"gitID":"-"},"content":"** 2a1. Employees Tracker shows an error message."},{"lineNumber":1201,"author":{"gitID":"IzHoBX"},"content":"+"},{"lineNumber":1202,"author":{"gitID":"IzHoBX"},"content":"Use case resumes at step 2."},{"lineNumber":1203,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1204,"author":{"gitID":"IzHoBX"},"content":"* 2b. The person has no timetable entry."},{"lineNumber":1205,"author":{"gitID":"IzHoBX"},"content":"+"},{"lineNumber":1206,"author":{"gitID":"IzHoBX"},"content":"Use case ends."},{"lineNumber":1207,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1208,"author":{"gitID":"IzHoBX"},"content":"* 4a. The event name provided by user doesn\u0027t exist."},{"lineNumber":1209,"author":{"gitID":"IzHoBX"},"content":"+"},{"lineNumber":1210,"author":{"gitID":"IzHoBX"},"content":"[none]"},{"lineNumber":1211,"author":{"gitID":"-"},"content":"** 4a1. Employees Tracker shows an error message"},{"lineNumber":1212,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1213,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1214,"author":{"gitID":"-"},"content":""},{"lineNumber":1215,"author":{"gitID":"IzHoBX"},"content":"* 4b. The new information given by user doesn\u0027t follow command format"},{"lineNumber":1216,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1217,"author":{"gitID":"IzHoBX"},"content":"[none]"},{"lineNumber":1218,"author":{"gitID":"-"},"content":"** 4b1. Employees Tracker shows an error message"},{"lineNumber":1219,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1220,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1221,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1222,"author":{"gitID":"-"},"content":"* 5a. Employees Tracker couldn\u0027t write to save file."},{"lineNumber":1223,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1224,"author":{"gitID":"IzHoBX"},"content":"[none]"},{"lineNumber":1225,"author":{"gitID":"-"},"content":"** 5a1. Employees Tracker shows error message and requests user to resolve the error."},{"lineNumber":1226,"author":{"gitID":"IzHoBX"},"content":"** 5a2. User resolves the error."},{"lineNumber":1227,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1228,"author":{"gitID":"-"},"content":"Use case resumes at step 5."},{"lineNumber":1229,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1230,"author":{"gitID":"IzHoBX"},"content":"[discrete]"},{"lineNumber":1231,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Use case: delete a timetable entry"},{"lineNumber":1232,"author":{"gitID":"-"},"content":""},{"lineNumber":1233,"author":{"gitID":"IzHoBX"},"content":"*MSS*"},{"lineNumber":1234,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1235,"author":{"gitID":"IzHoBX"},"content":"1. User requests to list all persons."},{"lineNumber":1236,"author":{"gitID":"IzHoBX"},"content":"2. User requests to view the timetable of a person."},{"lineNumber":1237,"author":{"gitID":"-"},"content":"3. Employees Tracker shows the timetable of that person."},{"lineNumber":1238,"author":{"gitID":"IzHoBX"},"content":"4. User requests to delete an entry in that person\u0027s timetable."},{"lineNumber":1239,"author":{"gitID":"-"},"content":"5. Employees Tracker deletes the timetable entry."},{"lineNumber":1240,"author":{"gitID":"Yoochard"},"content":"+"},{"lineNumber":1241,"author":{"gitID":"Yoochard"},"content":"Use case ends."},{"lineNumber":1242,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":1243,"author":{"gitID":"IzHoBX"},"content":"*Extensions*"},{"lineNumber":1244,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1245,"author":{"gitID":"IzHoBX"},"content":"[none]"},{"lineNumber":1246,"author":{"gitID":"IzHoBX"},"content":"* 1a. The list is empty."},{"lineNumber":1247,"author":{"gitID":"IzHoBX"},"content":"+"},{"lineNumber":1248,"author":{"gitID":"IzHoBX"},"content":"Use case ends."},{"lineNumber":1249,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1250,"author":{"gitID":"IzHoBX"},"content":"* 2a. The given index is invalid."},{"lineNumber":1251,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1252,"author":{"gitID":"IzHoBX"},"content":"[none]"},{"lineNumber":1253,"author":{"gitID":"-"},"content":"** 2a1. Employees Tracker shows an error message."},{"lineNumber":1254,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1255,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1256,"author":{"gitID":"-"},"content":""},{"lineNumber":1257,"author":{"gitID":"IzHoBX"},"content":"* 2b. The person has no timetable entry."},{"lineNumber":1258,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1259,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1260,"author":{"gitID":"-"},"content":""},{"lineNumber":1261,"author":{"gitID":"IzHoBX"},"content":"* 4a. The event name provided by user doesn\u0027t exist."},{"lineNumber":1262,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1263,"author":{"gitID":"IzHoBX"},"content":"[none]"},{"lineNumber":1264,"author":{"gitID":"-"},"content":"** 4a1. Employees Tracker shows an error message"},{"lineNumber":1265,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1266,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1267,"author":{"gitID":"-"},"content":""},{"lineNumber":1268,"author":{"gitID":"-"},"content":"* 5a. Employees Tracker couldn\u0027t write to save file."},{"lineNumber":1269,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1270,"author":{"gitID":"IzHoBX"},"content":"[none]"},{"lineNumber":1271,"author":{"gitID":"-"},"content":"** 5a1. Employees Tracker shows error message and requests user to resolve the error."},{"lineNumber":1272,"author":{"gitID":"IzHoBX"},"content":"** 5a2. User resolves the error."},{"lineNumber":1273,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1274,"author":{"gitID":"-"},"content":"Use case resumes at step 5."},{"lineNumber":1275,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1276,"author":{"gitID":"IzHoBX"},"content":"[discrete]"},{"lineNumber":1277,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Use case: start composing email"},{"lineNumber":1278,"author":{"gitID":"-"},"content":""},{"lineNumber":1279,"author":{"gitID":"IzHoBX"},"content":"*MSS*"},{"lineNumber":1280,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1281,"author":{"gitID":"IzHoBX"},"content":"1. User requests to list all persons."},{"lineNumber":1282,"author":{"gitID":"IzHoBX"},"content":"2. User requests to email a person in the list."},{"lineNumber":1283,"author":{"gitID":"-"},"content":"3. Employees Tracker opens up a webpage for composing email to that person."},{"lineNumber":1284,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1285,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1286,"author":{"gitID":"-"},"content":""},{"lineNumber":1287,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1288,"author":{"gitID":"-"},"content":""},{"lineNumber":1289,"author":{"gitID":"IzHoBX"},"content":"[none]"},{"lineNumber":1290,"author":{"gitID":"IzHoBX"},"content":"* 1a. The list is empty."},{"lineNumber":1291,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1292,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1293,"author":{"gitID":"-"},"content":""},{"lineNumber":1294,"author":{"gitID":"IzHoBX"},"content":"* 2a. The given index is invalid."},{"lineNumber":1295,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1296,"author":{"gitID":"IzHoBX"},"content":"[none]"},{"lineNumber":1297,"author":{"gitID":"-"},"content":"** 2a1. Employees Tracker shows an error message."},{"lineNumber":1298,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1299,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1300,"author":{"gitID":"-"},"content":""},{"lineNumber":1301,"author":{"gitID":"IzHoBX"},"content":"* 3a. The computer has no access to internet."},{"lineNumber":1302,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1303,"author":{"gitID":"IzHoBX"},"content":"[none]"},{"lineNumber":1304,"author":{"gitID":"-"},"content":"** 3a1. Employees Tracker shows error message."},{"lineNumber":1305,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1306,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1307,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1308,"author":{"gitID":"IzHoBX"},"content":"[discrete]"},{"lineNumber":1309,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Use case: export a list of people as Excel spreadsheet"},{"lineNumber":1310,"author":{"gitID":"-"},"content":""},{"lineNumber":1311,"author":{"gitID":"IzHoBX"},"content":"*MSS*"},{"lineNumber":1312,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":1313,"author":{"gitID":"IzHoBX"},"content":"1. User requests to list all persons, or perform a search."},{"lineNumber":1314,"author":{"gitID":"IzHoBX"},"content":"2. User requests to export the list of persons as excel sheet and save it in a save file path."},{"lineNumber":1315,"author":{"gitID":"-"},"content":"3. Employees Tracker exports the list of persons as excel sheet."},{"lineNumber":1316,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1317,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1318,"author":{"gitID":"-"},"content":""},{"lineNumber":1319,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1320,"author":{"gitID":"-"},"content":""},{"lineNumber":1321,"author":{"gitID":"IzHoBX"},"content":"[none]"},{"lineNumber":1322,"author":{"gitID":"IzHoBX"},"content":"* 1a. The list is empty."},{"lineNumber":1323,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1324,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1325,"author":{"gitID":"-"},"content":""},{"lineNumber":1326,"author":{"gitID":"IzHoBX"},"content":"* 2a. The given save file path is invalid."},{"lineNumber":1327,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1328,"author":{"gitID":"IzHoBX"},"content":"[none]"},{"lineNumber":1329,"author":{"gitID":"-"},"content":"** 2a1. Employees Tracker shows an error message."},{"lineNumber":1330,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1331,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1332,"author":{"gitID":"-"},"content":""},{"lineNumber":1333,"author":{"gitID":"-"},"content":"* 3a. Employees Tracker couldn\u0027t write to save file."},{"lineNumber":1334,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1335,"author":{"gitID":"IzHoBX"},"content":"[none]"},{"lineNumber":1336,"author":{"gitID":"-"},"content":"** 3a1. Employees Tracker shows error message and requests user to resolve the error."},{"lineNumber":1337,"author":{"gitID":"IzHoBX"},"content":"** 3a2. User resolves the error."},{"lineNumber":1338,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1339,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1340,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1341,"author":{"gitID":"IzHoBX"},"content":"[discrete]"},{"lineNumber":1342,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Use case: login"},{"lineNumber":1343,"author":{"gitID":"-"},"content":""},{"lineNumber":1344,"author":{"gitID":"IzHoBX"},"content":"*MSS*"},{"lineNumber":1345,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1346,"author":{"gitID":"-"},"content":"1. User starts the Employees Tracker program."},{"lineNumber":1347,"author":{"gitID":"-"},"content":"2. Employees Tracker requests user to enter username and password."},{"lineNumber":1348,"author":{"gitID":"IzHoBX"},"content":"3. User enters his username and password"},{"lineNumber":1349,"author":{"gitID":"-"},"content":"4. Employees Tracker shows the content."},{"lineNumber":1350,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1351,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1352,"author":{"gitID":"-"},"content":""},{"lineNumber":1353,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1354,"author":{"gitID":"-"},"content":""},{"lineNumber":1355,"author":{"gitID":"IzHoBX"},"content":"[none]"},{"lineNumber":1356,"author":{"gitID":"IzHoBX"},"content":"* 3a. The user enters an invalid username or wrong password."},{"lineNumber":1357,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1358,"author":{"gitID":"IzHoBX"},"content":"[none]"},{"lineNumber":1359,"author":{"gitID":"-"},"content":"** 3a1. Employees Tracker shows an error message."},{"lineNumber":1360,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1361,"author":{"gitID":"-"},"content":"Use case resumes at step 1."},{"lineNumber":1362,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1363,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1364,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Lock the employees tracker"},{"lineNumber":1365,"author":{"gitID":"-"},"content":""},{"lineNumber":1366,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1367,"author":{"gitID":"-"},"content":""},{"lineNumber":1368,"author":{"gitID":"-"},"content":"1. User requests to lock the employees tracker by entering \"lock\" and password"},{"lineNumber":1369,"author":{"gitID":"-"},"content":"2. Employees Tracker is locked unless user unlocks it."},{"lineNumber":1370,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1371,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1372,"author":{"gitID":"-"},"content":"* 2a. When employees tracker is locked, user are required to unlock the employees tracker before any instruction."},{"lineNumber":1373,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1374,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1375,"author":{"gitID":"-"},"content":""},{"lineNumber":1376,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1377,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Unlock the employees tracker"},{"lineNumber":1378,"author":{"gitID":"-"},"content":""},{"lineNumber":1379,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1380,"author":{"gitID":"-"},"content":""},{"lineNumber":1381,"author":{"gitID":"-"},"content":"1. User requests to unlock the employees tracker by entering \"unlock\" and the password set earlier"},{"lineNumber":1382,"author":{"gitID":"-"},"content":"2. Employees Tracker unlocked. Use case ends."},{"lineNumber":1383,"author":{"gitID":"-"},"content":""},{"lineNumber":1384,"author":{"gitID":"Yoochard"},"content":"*Extensions*"},{"lineNumber":1385,"author":{"gitID":"-"},"content":""},{"lineNumber":1386,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1387,"author":{"gitID":"Yoochard"},"content":"* 1a. The given password is incorrect, which means different from the one set earlier"},{"lineNumber":1388,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1389,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1390,"author":{"gitID":"-"},"content":"** 1a1. Employees Tracker shows an error message and requires to re-enter password"},{"lineNumber":1391,"author":{"gitID":"Yoochard"},"content":"+"},{"lineNumber":1392,"author":{"gitID":"Yoochard"},"content":"Use case resumes at step 1"},{"lineNumber":1393,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":1394,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1395,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Change an employee\u0027s rating"},{"lineNumber":1396,"author":{"gitID":"-"},"content":""},{"lineNumber":1397,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1398,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":1399,"author":{"gitID":"Yoochard"},"content":"1. User requests to list employees"},{"lineNumber":1400,"author":{"gitID":"-"},"content":"2. Employees Tracker shows a list of employees"},{"lineNumber":1401,"author":{"gitID":"Yoochard"},"content":"3. User requests to change the rating of one of the employees from the list"},{"lineNumber":1402,"author":{"gitID":"-"},"content":"4. Employees Tracker changes the rating of the employee."},{"lineNumber":1403,"author":{"gitID":"Yoochard"},"content":"+"},{"lineNumber":1404,"author":{"gitID":"Yoochard"},"content":"Use case ends."},{"lineNumber":1405,"author":{"gitID":"-"},"content":""},{"lineNumber":1406,"author":{"gitID":"Yoochard"},"content":"*Extensions*"},{"lineNumber":1407,"author":{"gitID":"-"},"content":""},{"lineNumber":1408,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1409,"author":{"gitID":"-"},"content":"* 3a. The employee does not exist in employees tracker."},{"lineNumber":1410,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1411,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1412,"author":{"gitID":"-"},"content":"** 3a1. Employees Tracker shows an error message."},{"lineNumber":1413,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1414,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1415,"author":{"gitID":"-"},"content":""},{"lineNumber":1416,"author":{"gitID":"Yoochard"},"content":"* 3b. The rate is out of bound."},{"lineNumber":1417,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1418,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1419,"author":{"gitID":"-"},"content":"** 3b1. Employees Tracker shows an error message"},{"lineNumber":1420,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1421,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1422,"author":{"gitID":"-"},"content":""},{"lineNumber":1423,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1424,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Change the window scheme/theme/skin"},{"lineNumber":1425,"author":{"gitID":"-"},"content":""},{"lineNumber":1426,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1427,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":1428,"author":{"gitID":"Yoochard"},"content":"1. User requests to change the scheme/theme/skin on the User Interface"},{"lineNumber":1429,"author":{"gitID":"-"},"content":"2. Employees Tracker changes the scheme/theme/skin"},{"lineNumber":1430,"author":{"gitID":"Yoochard"},"content":"+"},{"lineNumber":1431,"author":{"gitID":"Yoochard"},"content":"Use case ends."},{"lineNumber":1432,"author":{"gitID":"-"},"content":""},{"lineNumber":1433,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1434,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1435,"author":{"gitID":"-"},"content":""},{"lineNumber":1436,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1437,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 persons without a noticeable sluggishness (i.e. response time \u003e 500ms) in performance for typical usage."},{"lineNumber":1438,"author":{"gitID":"-"},"content":".  A user with above average typing speed (i.e. ≥ 45 words per minute) for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1439,"author":{"gitID":"-"},"content":".  The app should be used only by one user."},{"lineNumber":1440,"author":{"gitID":"-"},"content":".  Only the owner can view the data in the app"},{"lineNumber":1441,"author":{"gitID":"-"},"content":".  The app should be able to apply to people who are generally managing ≤ 200 other people"},{"lineNumber":1442,"author":{"gitID":"-"},"content":".  Should not consume memory more than 2GB"},{"lineNumber":1443,"author":{"gitID":"-"},"content":".  Should be able to be run easily by non-technical user"},{"lineNumber":1444,"author":{"gitID":"-"},"content":".  The save file of the app should be cross-compatible"},{"lineNumber":1445,"author":{"gitID":"-"},"content":".  The app should be used only by one user."},{"lineNumber":1446,"author":{"gitID":"-"},"content":".  Only the owner can view the data in the app"},{"lineNumber":1447,"author":{"gitID":"-"},"content":".  The app should be able to response the command within 500ms"},{"lineNumber":1448,"author":{"gitID":"-"},"content":".  The app should be able to apply to people who are generally managing ≤ 200 other people"},{"lineNumber":1449,"author":{"gitID":"IzHoBX"},"content":".  Users should prefer typing over mouse input or other input methods."},{"lineNumber":1450,"author":{"gitID":"IzHoBX"},"content":".  Users should be comfortable using CLI apps."},{"lineNumber":1451,"author":{"gitID":"IzHoBX"},"content":".  The app should not have flow flaws when running."},{"lineNumber":1452,"author":{"gitID":"IzHoBX"},"content":".  The app may utilise third party libraries, API and plug-ins."},{"lineNumber":1453,"author":{"gitID":"IzHoBX"},"content":".  The app should be able to access the Internet."},{"lineNumber":1454,"author":{"gitID":"IzHoBX"},"content":".  The app should be able to perform basic commands without internet access."},{"lineNumber":1455,"author":{"gitID":"Yoochard"},"content":".  This application should work well both on 32-bit and 64-bit environments."},{"lineNumber":1456,"author":{"gitID":"Yoochard"},"content":".  Should be easy to use by new users"},{"lineNumber":1457,"author":{"gitID":"Yoochard"},"content":".  This application should be stable and maintainable"},{"lineNumber":1458,"author":{"gitID":"Yoochard"},"content":".  This application is open source"},{"lineNumber":1459,"author":{"gitID":"-"},"content":""},{"lineNumber":1460,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1461,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1462,"author":{"gitID":"-"},"content":""},{"lineNumber":1463,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1464,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1465,"author":{"gitID":"-"},"content":""},{"lineNumber":1466,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1467,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1468,"author":{"gitID":"-"},"content":""},{"lineNumber":1469,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1470,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1471,"author":{"gitID":"-"},"content":""},{"lineNumber":1472,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1473,"author":{"gitID":"-"},"content":""},{"lineNumber":1474,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1475,"author":{"gitID":"-"},"content":""},{"lineNumber":1476,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1477,"author":{"gitID":"-"},"content":""},{"lineNumber":1478,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1479,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1480,"author":{"gitID":"-"},"content":""},{"lineNumber":1481,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1482,"author":{"gitID":"-"},"content":""},{"lineNumber":1483,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1484,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1485,"author":{"gitID":"-"},"content":""},{"lineNumber":1486,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1487,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1488,"author":{"gitID":"-"},"content":""},{"lineNumber":1489,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1490,"author":{"gitID":"-"},"content":""},{"lineNumber":1491,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1492,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1493,"author":{"gitID":"-"},"content":""},{"lineNumber":1494,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1495,"author":{"gitID":"-"},"content":""},{"lineNumber":1496,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1497,"author":{"gitID":"-"},"content":""},{"lineNumber":1498,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1499,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1500,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1501,"author":{"gitID":"-"},"content":""},{"lineNumber":1502,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1503,"author":{"gitID":"-"},"content":""},{"lineNumber":1504,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1505,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1506,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1507,"author":{"gitID":"-"},"content":""},{"lineNumber":1508,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1509,"author":{"gitID":"-"},"content":""},{"lineNumber":1510,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":1511,"author":{"gitID":"-"},"content":""},{"lineNumber":1512,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":1513,"author":{"gitID":"-"},"content":""},{"lineNumber":1514,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":1515,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1516,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1517,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1518,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1519,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1520,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1521,"author":{"gitID":"-"},"content":""},{"lineNumber":1522,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1523,"author":{"gitID":"-"},"content":""},{"lineNumber":1524,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1525,"author":{"gitID":"-"},"content":""},{"lineNumber":1526,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1527,"author":{"gitID":"-"},"content":""},{"lineNumber":1528,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1529,"author":{"gitID":"-"},"content":""},{"lineNumber":1530,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"crizyli":93,"Yoochard":37,"IzHoBX":164,"-":1236}},{"path":"src/test/java/seedu/address/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitID":"Yoochard"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"Yoochard"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"Yoochard"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"Yoochard"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":30,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":143,"author":{"gitID":"Yoochard"},"content":"        assertFalse(((NewResultAvailableEvent) eventsCollectorRule.eventsCollector.getMostRecent()).isSuccessful);"},{"lineNumber":144,"author":{"gitID":"Yoochard"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":145,"author":{"gitID":"Yoochard"},"content":"        eventsCollectorRule.eventsCollector.reset();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":157,"author":{"gitID":"Yoochard"},"content":"        assertTrue(((NewResultAvailableEvent) eventsCollectorRule.eventsCollector.getMostRecent()).isSuccessful);"},{"lineNumber":158,"author":{"gitID":"Yoochard"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":159,"author":{"gitID":"Yoochard"},"content":"        eventsCollectorRule.eventsCollector.reset();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":11,"-":160}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_BOB;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":46,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":47,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":53,"author":{"gitID":"IzHoBX"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":54,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":59,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":65,"author":{"gitID":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":66,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":70,"author":{"gitID":"IzHoBX"},"content":"                + ADDRESS_DESC_BOB + RATING_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":71,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandSuccess(command, index, BOB);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":78,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"},{"lineNumber":84,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":89,"author":{"gitID":"IzHoBX"},"content":"        //showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":91,"author":{"gitID":"IzHoBX"},"content":"        //assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":95,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":98,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":99,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":100,"author":{"gitID":"IzHoBX"},"content":"        //showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":102,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":103,"author":{"gitID":"IzHoBX"},"content":"        //Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":108,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":109,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        selectPerson(index);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":117,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":122,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":123,"author":{"gitID":"IzHoBX"},"content":"        //String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":126,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":127,"author":{"gitID":"IzHoBX"},"content":"        // String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":131,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":132,"author":{"gitID":"IzHoBX"},"content":"        //Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":135,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":136,"author":{"gitID":"IzHoBX"},"content":"        //String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":139,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":140,"author":{"gitID":"IzHoBX"},"content":"        //EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":143,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"},{"lineNumber":144,"author":{"gitID":"IzHoBX"},"content":"        //Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":147,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"},{"lineNumber":148,"author":{"gitID":"IzHoBX"},"content":"        //Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":151,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"},{"lineNumber":152,"author":{"gitID":"IzHoBX"},"content":"        //Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":155,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() +"},{"lineNumber":156,"author":{"gitID":"IzHoBX"},"content":"        // INVALID_ADDRESS_DESC,"},{"lineNumber":157,"author":{"gitID":"IzHoBX"},"content":"        //Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":160,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"},{"lineNumber":161,"author":{"gitID":"IzHoBX"},"content":"        //Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":164,"author":{"gitID":"IzHoBX"},"content":"        //executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":165,"author":{"gitID":"IzHoBX"},"content":"        //assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":167,"author":{"gitID":"IzHoBX"},"content":"        //assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":169,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":170,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":174,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":175,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":201,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":205,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":209,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":236,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":240,"author":{"gitID":"Yoochard"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":244,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":266,"author":{"gitID":"Yoochard"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":2,"Yoochard":2,"IzHoBX":42,"-":223}},{"path":"src/test/java/seedu/address/ui/BrowserPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertPanelDisplaysPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private PersonCard selectionChangedPersonCardStub;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        selectionChangedPersonCardStub \u003d new PersonCard(ALICE, 0);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(selectionChangedPersonCardStub);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void display() throws Exception {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // default web page"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // associated web page of a person \u0026 person card detail"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        postNow(selectionChangedEventStub);"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"        URL expectedPersonUrl \u003d new URL(\"https://calendar.google.com/calendar/embed?src\u003d\""},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":"                + \"8nfr293d26bcmd9oubia86re4k%40group.calendar.google.com\u0026ctz\u003dAsia%2FSingapore\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertPanelDisplay(new PersonCardHandle(selectionChangedPersonCardStub.getRoot()), browserPanelHandle);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * {@code expectedId}."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private void assertPanelDisplay(PersonCardHandle expectedPersonCard, BrowserPanelHandle browserPanelHandle) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertPanelDisplaysPerson(expectedPersonCard, browserPanelHandle);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":2,"-":63}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"    private static final String VALID_CALENDARID \u003d \"null\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getPersonList().size());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":82,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":84,"author":{"gitID":"crizyli"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_CALENDARID);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":91,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":93,"author":{"gitID":"crizyli"},"content":"                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_CALENDARID);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":100,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":102,"author":{"gitID":"crizyli"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_CALENDARID);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":134,"author":{"gitID":"-"},"content":"                builder.withPerson(new PersonBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":147,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":4,"-":143}},{"path":"src/test/java/seedu/address/logic/parser/UnlockCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.UnlockCommand;"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":" * Test scope: similar to {@code UnlockCommandParserTest}."},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":" * @see UnlockCommandParserTest"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"public class UnlockCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"    private UnlockCommandParser parser \u003d new UnlockCommandParser();"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"    public void parse_validArgs_returnsLockCommand() {"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"        // no agrs provided command"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"        assertParseSuccess(parser, \"  \", new UnlockCommand(\"nopassword\"));"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"        // agrs provided command"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"        assertParseSuccess(parser, \" 1234\", new UnlockCommand(\"1234\"));"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":21,"-":4}},{"path":"src/test/java/seedu/address/logic/parser/SortCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Yoochard"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":6,"author":{"gitID":"Yoochard"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":8,"author":{"gitID":"Yoochard"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":9,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":10,"author":{"gitID":"Yoochard"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Yoochard"},"content":" * Test scope: To test SortCommandParser."},{"lineNumber":12,"author":{"gitID":"Yoochard"},"content":" * @see DeleteCommandParserTest"},{"lineNumber":13,"author":{"gitID":"Yoochard"},"content":" */"},{"lineNumber":14,"author":{"gitID":"Yoochard"},"content":"public class SortCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"Yoochard"},"content":"    private SortCommandParser parser \u003d new SortCommandParser();"},{"lineNumber":16,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":17,"author":{"gitID":"Yoochard"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"Yoochard"},"content":"    public void no_arguments_throwsParseException() {"},{"lineNumber":19,"author":{"gitID":"Yoochard"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":20,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"Yoochard"},"content":"}"}],"authorContributionMap":{"Yoochard":19,"-":2}},{"path":"src/test/java/seedu/address/logic/parser/LockCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.LockCommand;"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":" * Test scope: similar to {@code LockCommandParserTest}."},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":" * @see LockCommandParserTest"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"public class LockCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"    private LockCommandParser parser \u003d new LockCommandParser();"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"    public void parse_validArgs_returnsLockCommand() {"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"        // no agrs provided command"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"        assertParseSuccess(parser, \"\", new LockCommand());"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"        // agrs provided command"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"        assertParseSuccess(parser, \"1234\", new LockCommand(\"1234\"));"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":21,"-":4}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":"    /*@Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags().build();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":75,"author":{"gitID":"IzHoBX"},"content":"    }*/"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"IzHoBX":2,"-":131}},{"path":"src/test/java/seedu/address/logic/parser/RateCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.RateCommand;"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"public class RateCommandParserTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, RateCommand.MESSAGE_USAGE);"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":"    private RateCommandParser parser \u003d new RateCommandParser();"},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"    public void parse_oneIntegerArg_failure() {"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":"    public void parse_nonIntegerArg_failure() {"},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":"        assertParseFailure(parser, \"a b\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"        assertParseFailure(parser, \"1 b\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"        assertParseFailure(parser, \"b 1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"    public void parse_indexZeroOrLess_failure() {"},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"        assertParseFailure(parser, \"0 5\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"        assertParseFailure(parser, \"-1 5\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":"    public void parse_ratingOutOfBound_failure() {"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"        assertParseFailure(parser, \"1 6\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"        assertParseFailure(parser, \"1 0\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"        assertParseFailure(parser, \"1 -1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":36,"-":5}},{"path":"src/test/java/seedu/address/logic/commands/RateCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"public class RateCommandTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"        Person editedPerson \u003d new PersonBuilder().withRating(\"1\").withEmail(\"alice@example.com\").build();"},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"        EditCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().build();"},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"        descriptor.setRating(new Rating(\"1\"));"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":"        RateCommand rateCommand \u003d new RateCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"        rateCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"        String expectedMessage \u003d String.format(RateCommand.MESSAGE_RATE_PERSON_SUCCESS, editedPerson);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"        assertCommandSuccess(rateCommand, model, expectedMessage, expectedModel);"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":15,"-":24}},{"path":"src/test/java/seedu/address/logic/commands/UnlockCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":" * Contains integration tests (interaction with the Model) for {@code UnlockCommand}."},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"public class UnlockCommandTest {"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"        UnlockCommand firstUnlockCommand \u003d new UnlockCommand(\"nopassword\");"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"        UnlockCommand secondUnlockCommand \u003d new UnlockCommand(\"12345\");"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"        // same object -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"        assertTrue(firstUnlockCommand.equals(firstUnlockCommand));"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"        // same values -\u003e returns true"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"        UnlockCommand secondUnlockCommandcopy \u003d new UnlockCommand(\"12345\");"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"        assertTrue(secondUnlockCommand.equals(secondUnlockCommandcopy));"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"        // different types -\u003e returns false"},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"        assertFalse(firstUnlockCommand.equals(1));"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"        // null -\u003e returns false"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"        assertFalse(firstUnlockCommand.equals(null));"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":"        // different value -\u003e returns false"},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"        assertFalse(firstUnlockCommand.equals(secondUnlockCommand));"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"    public void unlockSuccess() {"},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":"        LockCommand testLockCommand \u003d new LockCommand(\"1234\");"},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"        testLockCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"        testLockCommand.execute();"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":"        UnlockCommand testUnlockCommand \u003d new UnlockCommand(\"1234\");"},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":"        testUnlockCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":"        String expectedMessage \u003d UnlockCommand.MESSAGE_SUCCESS;"},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":"        CommandResult commandResult \u003d testUnlockCommand.execute();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":58,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":60,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"crizyli"},"content":"    public void unlockFail() {"},{"lineNumber":62,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":63,"author":{"gitID":"crizyli"},"content":"        LockCommand testLockCommand \u003d new LockCommand(\"123\");"},{"lineNumber":64,"author":{"gitID":"crizyli"},"content":"        testLockCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":65,"author":{"gitID":"crizyli"},"content":"        testLockCommand.execute();"},{"lineNumber":66,"author":{"gitID":"crizyli"},"content":"        UnlockCommand testUnlockCommand \u003d new UnlockCommand(\"1234\");"},{"lineNumber":67,"author":{"gitID":"crizyli"},"content":"        testUnlockCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":68,"author":{"gitID":"crizyli"},"content":"        String expectedMessage \u003d UnlockCommand.MESSAGE_INCORRECT_PASSWORD;"},{"lineNumber":69,"author":{"gitID":"crizyli"},"content":"        CommandResult commandResult \u003d testUnlockCommand.execute();"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":72,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":74,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":54,"-":20}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":"    public static final String VALID_RATING_AMY \u003d \"-1\";"},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":"    public static final String VALID_RATING_BOB \u003d \"5\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":54,"author":{"gitID":"IzHoBX"},"content":"    public static final String RATING_DESC_BOB \u003d \" \" + PREFIX_RATING + VALID_RATING_BOB;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":104,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"IzHoBX":4,"-":156}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.timetableentry.TimetableEntry;"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.timetableentry.exceptions.DuplicateTimetableEntryException;"},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.timetableentry.exceptions.TimetableEntryNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"IzHoBX"},"content":"        @Override"},{"lineNumber":104,"author":{"gitID":"IzHoBX"},"content":"        public Person getPerson(int index) throws IndexOutOfBoundsException {"},{"lineNumber":105,"author":{"gitID":"IzHoBX"},"content":"            return null;"},{"lineNumber":106,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":108,"author":{"gitID":"IzHoBX"},"content":"        @Override"},{"lineNumber":109,"author":{"gitID":"IzHoBX"},"content":"        public void deleteTimetableEntry(String id) throws TimetableEntryNotFoundException {"},{"lineNumber":110,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":111,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":113,"author":{"gitID":"IzHoBX"},"content":"        @Override"},{"lineNumber":114,"author":{"gitID":"IzHoBX"},"content":"        public void addTimetableEntry(TimetableEntry e) throws DuplicateTimetableEntryException {"},{"lineNumber":115,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":116,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":141,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"Yoochard"},"content":"        @Override"},{"lineNumber":152,"author":{"gitID":"Yoochard"},"content":"        public void sort(String field) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":154,"author":{"gitID":"Yoochard"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":4,"IzHoBX":18,"-":173}},{"path":"src/test/java/seedu/address/logic/commands/LockCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":" * Contains integration tests (interaction with the Model) for {@code LockCommand}."},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"public class LockCommandTest {"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"        LockCommand firstLockCommand \u003d new LockCommand();"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"        LockCommand secondLockCommand \u003d new LockCommand(\"1234\");"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"        LockCommand thirdLockCommand \u003d new LockCommand(\"123456\");"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"        // same object -\u003e returns true"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"        assertTrue(firstLockCommand.equals(firstLockCommand));"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"        // same values -\u003e returns true"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"        LockCommand secondLockCommandcopy \u003d new LockCommand(\"1234\");"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"        assertTrue(secondLockCommand.equals(secondLockCommandcopy));"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"        // different types -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"        assertFalse(firstLockCommand.equals(1));"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"        // null -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":"        assertFalse(firstLockCommand.equals(null));"},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"        // different value -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"        assertFalse(thirdLockCommand.equals(secondLockCommand));"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":"    public void lockSuccess() {"},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"        LockCommand testLockCommand \u003d new LockCommand(\"1234\");"},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"        testLockCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":"        String expectedMessage \u003d LockCommand.MESSAGE_SUCCESS;"},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":"        CommandResult commandResult \u003d testLockCommand.execute();"},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":56,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":58,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":59,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":60,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":44,"-":16}},{"path":"src/test/java/seedu/address/logic/commands/TestAddEventCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"//import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"//import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"//import seedu.address.logic.CommandHistory;"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"//import seedu.address.logic.UndoRedoStack;"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"public class TestAddEventCommandTest {"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"    private final Person testPerson \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"            .withTags(\"friends\")"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"            .withCalendarId(\"ck6s71ditb731dfepeporbnfb0@group.calendar.google.com\")"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"            .build();"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"    private Model model;"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"    public void setUp() {"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"            ab.addPerson(testPerson);"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"            e.printStackTrace();"},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"        model \u003d new ModelManager(ab, new UserPrefs());"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":"    /*@Test"},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":"    public void execute_addEvent_success() throws Exception {"},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"        TestAddEventCommand command \u003d new TestAddEventCommand(INDEX_FIRST_PERSON, \"Test Event\","},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"                \"NUS\", \"2018-05-01T12:00:00\", \"2018-05-01T12:30:00\","},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":"                \"Test add event command\");"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"        String expectedMessage \u003d TestAddEventCommand.MESSAGE_SUCCESS;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"    }*/"},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":40,"-":11}},{"path":"src/test/java/seedu/address/model/person/RatingTest.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":"import static seedu.address.model.person.Rating.DEFAULT_NULL_RATING;"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"import com.vdurmont.emoji.EmojiParser;"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"public class RatingTest {"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"    public void constructorTest_noRatingSpecified_nullRating() {"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":"        Rating r \u003d new Rating();"},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"        assertEquals((Integer) DEFAULT_NULL_RATING, (Integer) r.value);"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"    public void equalTest_notEqual() {"},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"        Rating a \u003d new Rating();"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"        Rating b \u003d new Rating(5 + \"\");"},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":"        assertNotEquals(a, b);"},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"    public void equalTest_equal() {"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"        Rating a \u003d new Rating(5 + \"\");"},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":"        Rating b \u003d new Rating(5 + \"\");"},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"        assertEquals(a, b);"},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":"    public void toStringTest() {"},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":"        Rating r \u003d new Rating(\"123\");"},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":"        assertEquals(r.toString(), \"123\");"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"    public void getRatingDisplayTest() {"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":"        Rating r \u003d new Rating();"},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":"        assertEquals(r.INVALID_RATING_DISPLAY, r.getRatingDisplay());"},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":44,"author":{"gitID":"IzHoBX"},"content":"        Rating a \u003d new Rating(1 + \"\");"},{"lineNumber":45,"author":{"gitID":"IzHoBX"},"content":"        assertEquals(a.getRatingDisplay(), EmojiParser.parseToUnicode(a.RATING_DISPLAY));"},{"lineNumber":46,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":46,"-":1}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class XmlAdaptedPersonTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"    private static final String VALID_CALENDARID \u003d \"null\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":"                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"                        VALID_TAGS, VALID_CALENDARID);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":"                VALID_TAGS, VALID_CALENDARID);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":62,"author":{"gitID":"crizyli"},"content":"                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"},{"lineNumber":63,"author":{"gitID":"crizyli"},"content":"                        VALID_CALENDARID);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":70,"author":{"gitID":"crizyli"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":71,"author":{"gitID":"crizyli"},"content":"                VALID_TAGS, VALID_CALENDARID);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":79,"author":{"gitID":"crizyli"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"},{"lineNumber":80,"author":{"gitID":"crizyli"},"content":"                        VALID_CALENDARID);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":87,"author":{"gitID":"crizyli"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"},{"lineNumber":88,"author":{"gitID":"crizyli"},"content":"                VALID_TAGS, VALID_CALENDARID);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":96,"author":{"gitID":"crizyli"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS,"},{"lineNumber":97,"author":{"gitID":"crizyli"},"content":"                        VALID_CALENDARID);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":104,"author":{"gitID":"crizyli"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"},{"lineNumber":105,"author":{"gitID":"crizyli"},"content":"                VALID_TAGS, VALID_CALENDARID);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":115,"author":{"gitID":"crizyli"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags,"},{"lineNumber":116,"author":{"gitID":"crizyli"},"content":"                        VALID_CALENDARID);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":19,"-":101}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"import java.util.LinkedList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.timetableentry.TimetableEntry;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":78,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"IzHoBX"},"content":"        @Override"},{"lineNumber":97,"author":{"gitID":"IzHoBX"},"content":"        public LinkedList\u003cTimetableEntry\u003e getTimetableEntriesList() {"},{"lineNumber":98,"author":{"gitID":"IzHoBX"},"content":"            return null;"},{"lineNumber":99,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":101,"author":{"gitID":"IzHoBX"},"content":"        @Override"},{"lineNumber":102,"author":{"gitID":"IzHoBX"},"content":"        public int getNextId() {"},{"lineNumber":103,"author":{"gitID":"IzHoBX"},"content":"            return 0;"},{"lineNumber":104,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"IzHoBX":12,"-":95}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"        descriptor.setRating(person.getRating());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"IzHoBX"},"content":"     * Sets the {@code Rating} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":77,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"IzHoBX"},"content":"    public EditPersonDescriptorBuilder withRating(String rating) {"},{"lineNumber":79,"author":{"gitID":"IzHoBX"},"content":"        descriptor.setRating(new Rating(rating));"},{"lineNumber":80,"author":{"gitID":"IzHoBX"},"content":"        return this;"},{"lineNumber":81,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"IzHoBX":9,"-":87}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"    public static final String DEFAULT_CALENDARID \u003d \"null\";"},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"    public static final String DEFAULT_RATING \u003d \"-1\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"    private Rating rating;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"    private String calendarId;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":"        rating \u003d new Rating(DEFAULT_RATING);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"        calendarId \u003d this.DEFAULT_CALENDARID;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":54,"author":{"gitID":"IzHoBX"},"content":"        rating \u003d personToCopy.getRating();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":56,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"crizyli"},"content":"    public PersonBuilder withCalendarId(String calendarId) {"},{"lineNumber":103,"author":{"gitID":"crizyli"},"content":"        this.calendarId \u003d calendarId;"},{"lineNumber":104,"author":{"gitID":"crizyli"},"content":"        return this;"},{"lineNumber":105,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":107,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"IzHoBX"},"content":"     * Sets the {@code Rating} of the {@code Person} that we are building."},{"lineNumber":109,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"IzHoBX"},"content":"    public PersonBuilder withRating(String rating) {"},{"lineNumber":111,"author":{"gitID":"IzHoBX"},"content":"        this.rating \u003d new Rating(rating);"},{"lineNumber":112,"author":{"gitID":"IzHoBX"},"content":"        return this;"},{"lineNumber":113,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return new Person(name, phone, email, address, rating, tags, calendarId);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":9,"IzHoBX":13,"-":97}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_BOB;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"            .withTags(\"friends\")"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"            .withCalendarId(\"8nfr293d26bcmd9oubia86re4k%40group.calendar.google.com\")"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            .withRating(\"5\")"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":"    public static final Person ALICE_DEFAULT \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .withTags(\"friends\").withRating(\"-1\")"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"            .withCalendarId(\"8nfr293d26bcmd9oubia86re4k%40group.calendar.google.com\")"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"            .build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"            .withTags(\"owesMoney\", \"friends\")"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":"            .withCalendarId(\"8nfr293d26bcmd9oubia86re4k%40group.calendar.google.com\")"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            .withRating(\"-1\")"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"            .build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\")"},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"            .withCalendarId(\"8nfr293d26bcmd9oubia86re4k%40group.calendar.google.com\")"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            .withRating(\"-1\")"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":"            .build();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\")"},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":"            .withCalendarId(\"8nfr293d26bcmd9oubia86re4k%40group.calendar.google.com\")"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            .withRating(\"-1\")"},{"lineNumber":57,"author":{"gitID":"crizyli"},"content":"            .build();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":59,"author":{"gitID":"crizyli"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\")"},{"lineNumber":60,"author":{"gitID":"crizyli"},"content":"            .withCalendarId(\"8nfr293d26bcmd9oubia86re4k%40group.calendar.google.com\")"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            .withRating(\"-1\")"},{"lineNumber":62,"author":{"gitID":"crizyli"},"content":"            .build();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":64,"author":{"gitID":"crizyli"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\")"},{"lineNumber":65,"author":{"gitID":"crizyli"},"content":"            .withCalendarId(\"8nfr293d26bcmd9oubia86re4k%40group.calendar.google.com\")"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            .withRating(\"-1\")"},{"lineNumber":67,"author":{"gitID":"crizyli"},"content":"            .build();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":69,"author":{"gitID":"crizyli"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\")"},{"lineNumber":70,"author":{"gitID":"crizyli"},"content":"            .withCalendarId(\"8nfr293d26bcmd9oubia86re4k%40group.calendar.google.com\")"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            .withRating(\"-1\")"},{"lineNumber":72,"author":{"gitID":"crizyli"},"content":"            .build();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":76,"author":{"gitID":"crizyli"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\")"},{"lineNumber":77,"author":{"gitID":"crizyli"},"content":"            .withCalendarId(\"8nfr293d26bcmd9oubia86re4k%40group.calendar.google.com\")"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            .withRating(\"-1\")"},{"lineNumber":79,"author":{"gitID":"crizyli"},"content":"            .build();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":81,"author":{"gitID":"crizyli"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\")"},{"lineNumber":82,"author":{"gitID":"crizyli"},"content":"            .withCalendarId(\"8nfr293d26bcmd9oubia86re4k%40group.calendar.google.com\")"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            .withRating(\"-1\")"},{"lineNumber":84,"author":{"gitID":"crizyli"},"content":"            .build();"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":88,"author":{"gitID":"IzHoBX"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withRating(VALID_RATING_BOB).withTags"},{"lineNumber":89,"author":{"gitID":"IzHoBX"},"content":"                    (VALID_TAG_FRIEND).build();"},{"lineNumber":90,"author":{"gitID":"IzHoBX"},"content":"    public static final Person AMY_DEFAULT \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":91,"author":{"gitID":"IzHoBX"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags"},{"lineNumber":92,"author":{"gitID":"IzHoBX"},"content":"                    (VALID_TAG_FRIEND).build();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":94,"author":{"gitID":"IzHoBX"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withRating(\"5\")"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":96,"author":{"gitID":"IzHoBX"},"content":"    public static final Person BOB_DEFAULT \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":97,"author":{"gitID":"IzHoBX"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":28,"IzHoBX":10,"-":84}},{"path":"src/test/java/guitests/guihandles/ResultDisplayHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Yoochard"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * A handler for the {@code ResultDisplay} of the UI"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ResultDisplayHandle extends NodeHandle\u003cTextArea\u003e {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String RESULT_DISPLAY_ID \u003d \"#resultDisplay\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle(TextArea resultDisplayNode) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        super(resultDisplayNode);"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Returns the text in the result display."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public String getText() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return getRootNode().getText();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":25,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"Yoochard"},"content":"     * Returns the list of style classes present in the result display."},{"lineNumber":27,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"Yoochard"},"content":"    public List\u003cString\u003e getStyleClass() {"},{"lineNumber":29,"author":{"gitID":"Yoochard"},"content":"        return getRootNode().getStyleClass();"},{"lineNumber":30,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":9,"-":22}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Label addressLabel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public String getAddress() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return addressLabel.getText();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":72,"author":{"gitID":"Yoochard"},"content":"    public List\u003cString\u003e getTagStyleClasses(String tag) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":75,"author":{"gitID":"Yoochard"},"content":"                .filter(label -\u003e label.getText().equals(tag))"},{"lineNumber":76,"author":{"gitID":"Yoochard"},"content":"                .map(Label::getStyleClass)"},{"lineNumber":77,"author":{"gitID":"Yoochard"},"content":"                .findFirst()"},{"lineNumber":78,"author":{"gitID":"Yoochard"},"content":"                .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag.\"));"},{"lineNumber":79,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":7,"-":73}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":37,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":110,"author":{"gitID":"Yoochard"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser, true));"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":117,"author":{"gitID":"Yoochard"},"content":"            raise(new NewResultAvailableEvent(e.getMessage(), false));"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":128,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":2,"-":149}},{"path":"src/main/java/seedu/address/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.GridPane;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.paint.Color;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"    //default dummy page."},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"    private static final String SEARCH_PAGE_URL \u003d"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"            \"https://calendar.google.com/calendar/embed?src\u003d\u0026ctz\u003dAsia%2FSingapore\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String[] TAG_COLOR_STYLES \u003d {\"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\"};"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private GridPane browserPanel;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"IzHoBX"},"content":"    private Label rating;"},{"lineNumber":50,"author":{"gitID":"IzHoBX"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private Label review;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public BrowserPanel() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":59,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        loadDefaultPage();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":63,"author":{"gitID":"IzHoBX"},"content":"        System.setProperty(\"sun.net.http.allowRestrictedHeaders\", \"true\");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private void loadPersonPage(Person person) {"},{"lineNumber":67,"author":{"gitID":"crizyli"},"content":"        loadPage(person.getPersonUrl());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void loadPage(String url) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private void loadDefaultPage() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"crizyli"},"content":"    public static String getSearchPageUrl() {"},{"lineNumber":83,"author":{"gitID":"crizyli"},"content":"        return SEARCH_PAGE_URL;"},{"lineNumber":84,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void freeResources() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        browser \u003d null;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        name \u003d null;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        phone \u003d null;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        address \u003d null;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        email \u003d null;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        rating \u003d null;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        review \u003d null;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        tags \u003d null;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Person person \u003d event.getNewSelection().person;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":108,"author":{"gitID":"IzHoBX"},"content":"        rating.setText(person.getRatingDisplay());"},{"lineNumber":109,"author":{"gitID":"IzHoBX"},"content":"        rating.setTextFill(Color.RED);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        review.setText(person.getReview().value);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        review.setWrapText(true);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        tags.getChildren().clear();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        //person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        initTags(person);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        loadPersonPage(event.getNewSelection().person);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Creates the tag labels for {@code person}."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    private void initTags(Person person) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            tagLabel.getStyleClass().add(getTagColorStyleFor(tag.tagName));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Returns the color style for {@code tagName}\u0027s label."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    private String getTagColorStyleFor(String tagName) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // we use the hash code of the tag name to generate a random color, so that the color remain consistent"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // between different runs of the program while still making it random enough between tags."},{"lineNumber":135,"author":{"gitID":"-"},"content":"        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"},{"lineNumber":136,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":9,"IzHoBX":5,"-":123}},{"path":"src/main/java/seedu/address/ui/ResultDisplay.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleStringProperty;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.beans.property.StringProperty;"},{"lineNumber":10,"author":{"gitID":"Yoochard"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the header of the application."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":23,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private TextArea resultDisplay;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public ResultDisplay() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        resultDisplay.textProperty().bind(displayed);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e displayed.setValue(event.message));"},{"lineNumber":42,"author":{"gitID":"Yoochard"},"content":"        if (event.isSuccessful) {"},{"lineNumber":43,"author":{"gitID":"Yoochard"},"content":"            setStyleToIndicateCommandSuccess();"},{"lineNumber":44,"author":{"gitID":"Yoochard"},"content":"        } else {"},{"lineNumber":45,"author":{"gitID":"Yoochard"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":46,"author":{"gitID":"Yoochard"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":49,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"Yoochard"},"content":"     * Sets the {@code ResultDisplay} style to indicate a failed command."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":53,"author":{"gitID":"Yoochard"},"content":"        ObservableList\u003cString\u003e styleClass \u003d resultDisplay.getStyleClass();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"Yoochard"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":58,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":60,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"Yoochard"},"content":"     * Sets the {@code ResultDisplay} style to use the default style."},{"lineNumber":62,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"Yoochard"},"content":"    private void setStyleToIndicateCommandSuccess() {"},{"lineNumber":64,"author":{"gitID":"Yoochard"},"content":"        resultDisplay.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":20,"-":47}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":"import javafx.scene.paint.Color;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":17,"author":{"gitID":"Yoochard"},"content":"    private static final String[] TAG_COLOR_STYLES \u003d {\"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\"};"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":"    private Label rating;"},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":53,"author":{"gitID":"IzHoBX"},"content":"        rating.setText(person.getRatingDisplay());"},{"lineNumber":54,"author":{"gitID":"IzHoBX"},"content":"        rating.setTextFill(Color.RED);"},{"lineNumber":55,"author":{"gitID":"Yoochard"},"content":"        initTags(person);"},{"lineNumber":56,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":58,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"Yoochard"},"content":"     * Creates the tag labels for {@code person}."},{"lineNumber":60,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"Yoochard"},"content":"    private void initTags(Person person) {"},{"lineNumber":62,"author":{"gitID":"Yoochard"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":63,"author":{"gitID":"Yoochard"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":64,"author":{"gitID":"Yoochard"},"content":"            tagLabel.getStyleClass().add(getTagColorStyleFor(tag.tagName));"},{"lineNumber":65,"author":{"gitID":"Yoochard"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":66,"author":{"gitID":"Yoochard"},"content":"        });"},{"lineNumber":67,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":69,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"Yoochard"},"content":"     * Returns the color style for {@code tagName}\u0027s label."},{"lineNumber":71,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"Yoochard"},"content":"    private String getTagColorStyleFor(String tagName) {"},{"lineNumber":73,"author":{"gitID":"Yoochard"},"content":"        // we use the hash code of the tag name to generate a random color, so that the color remain consistent"},{"lineNumber":74,"author":{"gitID":"Yoochard"},"content":"        // between different runs of the program while still making it random enough between tags."},{"lineNumber":75,"author":{"gitID":"Yoochard"},"content":"        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":22,"IzHoBX":5,"-":68}},{"path":"src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Indicates that a new result is available."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class NewResultAvailableEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public final String message;"},{"lineNumber":11,"author":{"gitID":"Yoochard"},"content":"    public final boolean isSuccessful;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"Yoochard"},"content":"    public NewResultAvailableEvent(String message, boolean isSuccessful) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        this.message \u003d message;"},{"lineNumber":15,"author":{"gitID":"Yoochard"},"content":"        this.isSuccessful \u003d isSuccessful;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":3,"-":20}},{"path":"src/main/java/seedu/address/commons/events/model/TimetableEntryDeletedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":" * Indicates timetable entry added/removed*/"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"public class TimetableEntryDeletedEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"    public final String id;"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"    public TimetableEntryDeletedEvent(String id) {"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"        this.id \u003d id;"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"        return \"timetable entry deleted: \" + id;"},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":16,"-":3}},{"path":"src/main/java/seedu/address/commons/events/model/TimetableEntryAddedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.timetableentry.TimetableEntry;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":" * Indicates timetable entry added/removed*/"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":"public class TimetableEntryAddedEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":"    public final TimetableEntry timetableEntry;"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"    public TimetableEntryAddedEvent(TimetableEntry timetableEntry) {"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"        this.timetableEntry \u003d timetableEntry;"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"        return \"timetable entry added: \" + timetableEntry.toString();"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":16,"-":4}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"//import seedu.address.logic.CreateNewCalendar;"},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.CreateNewCalendar;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"IzHoBX"},"content":"            String calendarId;"},{"lineNumber":53,"author":{"gitID":"IzHoBX"},"content":"            try {"},{"lineNumber":54,"author":{"gitID":"IzHoBX"},"content":"                calendarId \u003d CreateNewCalendar.execute(name.fullName);"},{"lineNumber":55,"author":{"gitID":"IzHoBX"},"content":"            } catch (IOException e) { //not signed in"},{"lineNumber":56,"author":{"gitID":"IzHoBX"},"content":"                calendarId \u003d \"\";"},{"lineNumber":57,"author":{"gitID":"IzHoBX"},"content":"            }"},{"lineNumber":58,"author":{"gitID":"IzHoBX"},"content":"            //String calendarId \u003d \"\";"},{"lineNumber":59,"author":{"gitID":"crizyli"},"content":"            Person person \u003d new Person(name, phone, email, address, tagList, calendarId);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":2,"IzHoBX":9,"-":64}},{"path":"src/main/java/seedu/address/logic/CreateNewCalendar.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import java.io.InputStream;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import java.io.InputStreamReader;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"import com.google.api.client.auth.oauth2.Credential;"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"import com.google.api.client.http.HttpTransport;"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"import com.google.api.client.json.JsonFactory;"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"import com.google.api.client.json.jackson2.JacksonFactory;"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"import com.google.api.client.util.store.FileDataStoreFactory;"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"import com.google.api.services.calendar.CalendarScopes;"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"import com.google.api.services.calendar.model.Calendar;"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":" * Adds an event to a person."},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"public class CreateNewCalendar {"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"    /** Application name. */"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"    private static final String APPLICATION_NAME \u003d \"Employees Tracker\";"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"    /** Directory to store user credentials for this application. */"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"    private static final java.io.File DATA_STORE_DIR \u003d new java.io.File("},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"            System.getProperty(\"user.home\"), \".credentials/calendar-java-quickstart\");"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"    /** Global instance of the {@link FileDataStoreFactory}. */"},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"    private static FileDataStoreFactory dataStoreFactory;"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"    /** Global instance of the JSON factory. */"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"    private static final JsonFactory JSON_FACTORY \u003d"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":"            JacksonFactory.getDefaultInstance();"},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"    /** Global instance of the HTTP transport. */"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"    private static HttpTransport httpTransport;"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"    /** Global instance of the scopes required by this quickstart."},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"     *"},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":"     * If modifying these scopes, delete your previously saved credentials"},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":"     * at ~/.credentials/calendar-java-quickstart"},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"    private static final List\u003cString\u003e SCOPES \u003d"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":"            Arrays.asList(CalendarScopes.CALENDAR);"},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":"    static {"},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"crizyli"},"content":"            httpTransport \u003d GoogleNetHttpTransport.newTrustedTransport();"},{"lineNumber":57,"author":{"gitID":"crizyli"},"content":"            dataStoreFactory \u003d new FileDataStoreFactory(DATA_STORE_DIR);"},{"lineNumber":58,"author":{"gitID":"crizyli"},"content":"        } catch (Throwable t) {"},{"lineNumber":59,"author":{"gitID":"crizyli"},"content":"            t.printStackTrace();"},{"lineNumber":60,"author":{"gitID":"crizyli"},"content":"            System.exit(1);"},{"lineNumber":61,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":64,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":65,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"crizyli"},"content":"     * Creates an authorized Credential object."},{"lineNumber":67,"author":{"gitID":"crizyli"},"content":"     * @return an authorized Credential object."},{"lineNumber":68,"author":{"gitID":"crizyli"},"content":"     * @throws IOException"},{"lineNumber":69,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"crizyli"},"content":"    public static Credential authorize() throws IOException {"},{"lineNumber":71,"author":{"gitID":"crizyli"},"content":"        // Load client secrets."},{"lineNumber":72,"author":{"gitID":"crizyli"},"content":"        InputStream in \u003d"},{"lineNumber":73,"author":{"gitID":"crizyli"},"content":"                CreateNewCalendar.class.getResourceAsStream(\"/client_secret.json\");"},{"lineNumber":74,"author":{"gitID":"crizyli"},"content":"        GoogleClientSecrets clientSecrets \u003d"},{"lineNumber":75,"author":{"gitID":"crizyli"},"content":"                GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(in));"},{"lineNumber":76,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":77,"author":{"gitID":"crizyli"},"content":"        // Build flow and trigger user authorization request."},{"lineNumber":78,"author":{"gitID":"crizyli"},"content":"        GoogleAuthorizationCodeFlow flow \u003d"},{"lineNumber":79,"author":{"gitID":"crizyli"},"content":"                new GoogleAuthorizationCodeFlow.Builder("},{"lineNumber":80,"author":{"gitID":"crizyli"},"content":"                        httpTransport, JSON_FACTORY, clientSecrets, SCOPES)"},{"lineNumber":81,"author":{"gitID":"crizyli"},"content":"                        .setDataStoreFactory(dataStoreFactory)"},{"lineNumber":82,"author":{"gitID":"crizyli"},"content":"                        .setAccessType(\"offline\")"},{"lineNumber":83,"author":{"gitID":"crizyli"},"content":"                        .build();"},{"lineNumber":84,"author":{"gitID":"crizyli"},"content":"        Credential credential \u003d new AuthorizationCodeInstalledApp("},{"lineNumber":85,"author":{"gitID":"crizyli"},"content":"                flow, new LocalServerReceiver()).authorize(\"user\");"},{"lineNumber":86,"author":{"gitID":"crizyli"},"content":"        System.out.println("},{"lineNumber":87,"author":{"gitID":"crizyli"},"content":"                \"Credentials saved to \" + DATA_STORE_DIR.getAbsolutePath());"},{"lineNumber":88,"author":{"gitID":"crizyli"},"content":"        return credential;"},{"lineNumber":89,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":91,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"crizyli"},"content":"     * Build and return an authorized Calendar client service."},{"lineNumber":93,"author":{"gitID":"crizyli"},"content":"     * @return an authorized Calendar client service"},{"lineNumber":94,"author":{"gitID":"crizyli"},"content":"     * @throws IOException"},{"lineNumber":95,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"crizyli"},"content":"    public static com.google.api.services.calendar.Calendar"},{"lineNumber":97,"author":{"gitID":"crizyli"},"content":"        getCalendarService() throws IOException {"},{"lineNumber":98,"author":{"gitID":"crizyli"},"content":"        Credential credential \u003d authorize();"},{"lineNumber":99,"author":{"gitID":"crizyli"},"content":"        return new com.google.api.services.calendar.Calendar.Builder("},{"lineNumber":100,"author":{"gitID":"crizyli"},"content":"                httpTransport, JSON_FACTORY, credential)"},{"lineNumber":101,"author":{"gitID":"crizyli"},"content":"                .setApplicationName(APPLICATION_NAME)"},{"lineNumber":102,"author":{"gitID":"crizyli"},"content":"                .build();"},{"lineNumber":103,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":105,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"crizyli"},"content":"     * Create a new calendar for person with personName."},{"lineNumber":107,"author":{"gitID":"crizyli"},"content":"     *"},{"lineNumber":108,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"IzHoBX"},"content":"    public static String execute(String personName) throws IOException {"},{"lineNumber":110,"author":{"gitID":"crizyli"},"content":"        // Build a new authorized API client service."},{"lineNumber":111,"author":{"gitID":"crizyli"},"content":"        // Note: Do not confuse this class with the"},{"lineNumber":112,"author":{"gitID":"crizyli"},"content":"        //   com.google.api.services.calendar.model.Calendar class."},{"lineNumber":113,"author":{"gitID":"crizyli"},"content":"        com.google.api.services.calendar.Calendar service \u003d"},{"lineNumber":114,"author":{"gitID":"crizyli"},"content":"                null;"},{"lineNumber":115,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":116,"author":{"gitID":"crizyli"},"content":"        service \u003d getCalendarService();"},{"lineNumber":117,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":118,"author":{"gitID":"crizyli"},"content":"        // Create a new calendar"},{"lineNumber":119,"author":{"gitID":"crizyli"},"content":"        com.google.api.services.calendar.model.Calendar calendar \u003d new Calendar();"},{"lineNumber":120,"author":{"gitID":"crizyli"},"content":"        calendar.setSummary(personName);"},{"lineNumber":121,"author":{"gitID":"crizyli"},"content":"        calendar.setTimeZone(\"Asia/Singapore\");"},{"lineNumber":122,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":123,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":124,"author":{"gitID":"crizyli"},"content":"        // Insert the new calendar"},{"lineNumber":125,"author":{"gitID":"crizyli"},"content":"        String calendarId \u003d \"primary\";"},{"lineNumber":126,"author":{"gitID":"crizyli"},"content":"        Calendar createdCalendar \u003d service.calendars().insert(calendar).execute();"},{"lineNumber":127,"author":{"gitID":"crizyli"},"content":"        calendarId \u003d createdCalendar.getId();"},{"lineNumber":128,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":129,"author":{"gitID":"crizyli"},"content":"        return calendarId;"},{"lineNumber":130,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":132,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":130,"IzHoBX":2}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.LockCommand;"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.RateCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ReviewCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":24,"author":{"gitID":"Yoochard"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.TestAddEventCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.UnlockCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"IzHoBX"},"content":"        case RateCommand.COMMAND_WORD:"},{"lineNumber":64,"author":{"gitID":"IzHoBX"},"content":"            return new RateCommandParser().parse(arguments);"},{"lineNumber":65,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        case ReviewCommand.COMMAND_WORD:"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            return new ReviewCommandParser().parse(arguments);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"crizyli"},"content":"        case TestAddEventCommand.COMMAND_WORD:"},{"lineNumber":100,"author":{"gitID":"crizyli"},"content":"            return new TestAddEventCommandParser().parse(arguments);"},{"lineNumber":101,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":102,"author":{"gitID":"Yoochard"},"content":"        case SortCommand.COMMAND_WORD:"},{"lineNumber":103,"author":{"gitID":"Yoochard"},"content":"            return new SortCommandParser().parse(arguments);"},{"lineNumber":104,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":105,"author":{"gitID":"crizyli"},"content":"        case LockCommand.COMMAND_WORD:"},{"lineNumber":106,"author":{"gitID":"crizyli"},"content":"            return new LockCommandParser().parse(arguments);"},{"lineNumber":107,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":108,"author":{"gitID":"crizyli"},"content":"        case UnlockCommand.COMMAND_WORD:"},{"lineNumber":109,"author":{"gitID":"crizyli"},"content":"            return new UnlockCommandParser().parse(arguments);"},{"lineNumber":110,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":12,"Yoochard":4,"IzHoBX":4,"-":96}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"    public static final Prefix PREFIX_RATING \u003d new Prefix(\"r/\");"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"title/\");"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"loca/\");"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"    public static final Prefix PREFIX_STARTTIME \u003d new Prefix(\"stime/\");"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"    public static final Prefix PREFIX_ENDTIME \u003d new Prefix(\"etime/\");"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"    public static final Prefix PREFIX_DESCCRIPTION \u003d new Prefix(\"descrip/\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":5,"IzHoBX":1,"-":14}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":22,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"IzHoBX"},"content":"     * Parses a {@code String rating} into an {@code Rating}."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":123,"author":{"gitID":"IzHoBX"},"content":"     * @throws IllegalValueException if the given {@code rating} is invalid."},{"lineNumber":124,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"IzHoBX"},"content":"    public static Rating parseRating(String rating) throws IllegalValueException {"},{"lineNumber":126,"author":{"gitID":"IzHoBX"},"content":"        requireNonNull(rating);"},{"lineNumber":127,"author":{"gitID":"IzHoBX"},"content":"        Integer trimmedRating \u003d Integer.parseInt(rating.trim());"},{"lineNumber":128,"author":{"gitID":"IzHoBX"},"content":"        if (!Rating.isValidInputRating(trimmedRating)) {"},{"lineNumber":129,"author":{"gitID":"IzHoBX"},"content":"            throw new IllegalValueException(Rating.MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":130,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"IzHoBX"},"content":"        return new Rating(trimmedRating.toString());"},{"lineNumber":132,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":134,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"IzHoBX"},"content":"     * Parses a {@code Optional\u003cString\u003e value} into an {@code Optional\u003cRating\u003e} if {@code address} is present."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"IzHoBX"},"content":"    public static Optional\u003cRating\u003e parseRating(Optional\u003cString\u003e value) throws IllegalValueException {"},{"lineNumber":139,"author":{"gitID":"IzHoBX"},"content":"        requireNonNull(value);"},{"lineNumber":140,"author":{"gitID":"IzHoBX"},"content":"        return value.isPresent() ? Optional.of(parseRating(value.get())) : Optional.empty();"},{"lineNumber":141,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":172,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"IzHoBX":21,"-":172}},{"path":"src/main/java/seedu/address/logic/parser/RateCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.RateCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":" * Parses input arguments and creates a new RateCommand object"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":"public class RateCommandParser implements Parser\u003cRateCommand\u003e {"},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"     * Parses the given {@code String} of arguments in the context of the RateCommand"},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"     * and returns an RateCommand object for execution."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"    public RateCommand parse(String args) throws ParseException {"},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"        requireNonNull(args);"},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"        Scanner sc \u003d new Scanner(args);"},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"        if (!sc.hasNextInt()) {"},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RateCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":"        Index index;"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"            index \u003d ParserUtil.parseIndex(((Integer) sc.nextInt()).toString());"},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RateCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":"        if (!sc.hasNextInt()) {"},{"lineNumber":44,"author":{"gitID":"IzHoBX"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RateCommand.MESSAGE_USAGE));"},{"lineNumber":45,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"IzHoBX"},"content":"        Integer rating \u003d sc.nextInt();"},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":48,"author":{"gitID":"IzHoBX"},"content":"        if (!Rating.isValidInputRating(rating)) {"},{"lineNumber":49,"author":{"gitID":"IzHoBX"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RateCommand.MESSAGE_USAGE));"},{"lineNumber":50,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":52,"author":{"gitID":"IzHoBX"},"content":"        EditCommand.EditPersonDescriptor editPersonDescriptor \u003d new EditCommand.EditPersonDescriptor();"},{"lineNumber":53,"author":{"gitID":"IzHoBX"},"content":"        editPersonDescriptor.setRating(new Rating(rating.toString()));"},{"lineNumber":54,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":55,"author":{"gitID":"IzHoBX"},"content":"        return new RateCommand(index, editPersonDescriptor);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"IzHoBX":39,"-":34}},{"path":"src/main/java/seedu/address/logic/parser/UnlockCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.UnlockCommand;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":" * Parses arguments for the UnlockCommand\u0027"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"public class UnlockCommandParser implements Parser\u003cUnlockCommand\u003e {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":13,"author":{"gitID":"-"},"content":"     * and returns an FindCommand object for execution."},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"    public UnlockCommand parse(String args) throws ParseException {"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"        return trimmedArgs.isEmpty() ? new UnlockCommand(\"nopassword\") : new UnlockCommand(trimmedArgs);"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":11,"IzHoBX":3,"-":7}},{"path":"src/main/java/seedu/address/logic/parser/SortCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"Yoochard"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":5,"author":{"gitID":"Yoochard"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"Yoochard"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"Yoochard"},"content":" * By Yang Yuqing"},{"lineNumber":10,"author":{"gitID":"Yoochard"},"content":" * Parses input arguments and creates a new SortCommand object"},{"lineNumber":11,"author":{"gitID":"Yoochard"},"content":" */"},{"lineNumber":12,"author":{"gitID":"Yoochard"},"content":"public class SortCommandParser implements Parser\u003cSortCommand\u003e {"},{"lineNumber":13,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"Yoochard"},"content":"     * Parses the given {@code String} of arguments in the context of the Sort"},{"lineNumber":15,"author":{"gitID":"Yoochard"},"content":"     * and returns an SortCommand object for execution."},{"lineNumber":16,"author":{"gitID":"Yoochard"},"content":"     * @throws ParseException if the input field does not conform the expected format"},{"lineNumber":17,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"Yoochard"},"content":"    public SortCommand parse(String args) throws ParseException {"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":21,"author":{"gitID":"Yoochard"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":22,"author":{"gitID":"Yoochard"},"content":"        }"},{"lineNumber":23,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":24,"author":{"gitID":"Yoochard"},"content":"        return new SortCommand(trimmedArgs);"},{"lineNumber":25,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Yoochard"},"content":"}"}],"authorContributionMap":{"crizyli":2,"Yoochard":21,"-":3}},{"path":"src/main/java/seedu/address/logic/parser/TestAddEventCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCCRIPTION;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"import java.util.Scanner;"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.TestAddEventCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":" * Parses input arguments and creates a new TestAddEventCommand object"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"public class TestAddEventCommandParser implements Parser\u003cTestAddEventCommand\u003e {"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"     * Parses the given {@code String} of arguments in the context of the TestAddEventCommand"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"     * and returns a TestAddEventCommand object for execution."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"    public TestAddEventCommand parse(String args) throws ParseException {"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"        requireNonNull(args);"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"        Scanner sc \u003d new Scanner(args);"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"        if (!sc.hasNextInt()) {"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TestAddEventCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"        Index index;"},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"            index \u003d ParserUtil.parseIndex(((Integer) sc.nextInt()).toString());"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TestAddEventCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"        String temp \u003d args.trim();"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"        int i;"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":"        for (i \u003d 0; i \u003c temp.length(); i++) {"},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"            if (temp.charAt(i) \u003d\u003d 32) {"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"                break;"},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":"            }"},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"        String behindArgs \u003d temp.substring(i);"},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"        System.out.println(behindArgs);"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":"                ArgumentTokenizer.tokenize(behindArgs, PREFIX_TITLE, PREFIX_LOCATION, PREFIX_STARTTIME,"},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":"                        PREFIX_ENDTIME, PREFIX_DESCCRIPTION);"},{"lineNumber":56,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":57,"author":{"gitID":"crizyli"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_LOCATION, PREFIX_STARTTIME, PREFIX_ENDTIME,"},{"lineNumber":58,"author":{"gitID":"crizyli"},"content":"                PREFIX_DESCCRIPTION)"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":64,"author":{"gitID":"crizyli"},"content":"        String title \u003d argMultimap.getValue(PREFIX_TITLE).get();"},{"lineNumber":65,"author":{"gitID":"crizyli"},"content":"        String location \u003d argMultimap.getValue(PREFIX_LOCATION).get();"},{"lineNumber":66,"author":{"gitID":"crizyli"},"content":"        String stime \u003d argMultimap.getValue(PREFIX_STARTTIME).get();"},{"lineNumber":67,"author":{"gitID":"crizyli"},"content":"        String etime \u003d argMultimap.getValue(PREFIX_ENDTIME).get();"},{"lineNumber":68,"author":{"gitID":"crizyli"},"content":"        String decription \u003d argMultimap.getValue(PREFIX_DESCCRIPTION).get();"},{"lineNumber":69,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":70,"author":{"gitID":"crizyli"},"content":"        return new TestAddEventCommand(index, title, location, stime, etime, decription);"},{"lineNumber":71,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":54,"-":28}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"                        PREFIX_RATING, PREFIX_TAG);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"},{"lineNumber":54,"author":{"gitID":"IzHoBX"},"content":"            ParserUtil.parseRating(argMultimap.getValue(PREFIX_RATING)).ifPresent(editPersonDescriptor::setRating);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"IzHoBX":4,"-":78}},{"path":"src/main/java/seedu/address/logic/commands/SortCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"Yoochard"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":3,"author":{"gitID":"Yoochard"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":4,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":5,"author":{"gitID":"Yoochard"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"Yoochard"},"content":" * By Yang Yuqing"},{"lineNumber":7,"author":{"gitID":"Yoochard"},"content":" * Sorts the employees by any field"},{"lineNumber":8,"author":{"gitID":"Yoochard"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":10,"author":{"gitID":"Yoochard"},"content":"public class SortCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":12,"author":{"gitID":"Yoochard"},"content":"    public static final String COMMAND_WORD \u003d \"sort\";"},{"lineNumber":13,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":14,"author":{"gitID":"Yoochard"},"content":"    public static final String[] SORT_FIELD_LIST \u003d {\"name\", \"phone\", \"email\", \"address\", \"tag\", \"rate\"};"},{"lineNumber":15,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":16,"author":{"gitID":"Yoochard"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts the list of employees by a specific field  \""},{"lineNumber":17,"author":{"gitID":"Yoochard"},"content":"            + \"Parameters: FIELD\\n\""},{"lineNumber":18,"author":{"gitID":"Yoochard"},"content":"            + \"Example: \" + COMMAND_WORD + \" name\";"},{"lineNumber":19,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":20,"author":{"gitID":"Yoochard"},"content":"    public static final String MESSAGE_SORT_EMPLOYEE_SUCCESS \u003d \"Employees has been sorted.\";"},{"lineNumber":21,"author":{"gitID":"Yoochard"},"content":"    public static final String MESSAGE_SORT_INVALID_FIELD \u003d \"Your input field is invalid, please check again.\";"},{"lineNumber":22,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":23,"author":{"gitID":"Yoochard"},"content":"    private final String sortField;"},{"lineNumber":24,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":25,"author":{"gitID":"Yoochard"},"content":"    public SortCommand(String field) {"},{"lineNumber":26,"author":{"gitID":"Yoochard"},"content":"        this.sortField \u003d field;"},{"lineNumber":27,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":29,"author":{"gitID":"Yoochard"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"Yoochard"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":31,"author":{"gitID":"Yoochard"},"content":"        switch (sortField) {"},{"lineNumber":32,"author":{"gitID":"Yoochard"},"content":"        case \"name\":"},{"lineNumber":33,"author":{"gitID":"Yoochard"},"content":"        case \"phone\":"},{"lineNumber":34,"author":{"gitID":"Yoochard"},"content":"        case \"email\":"},{"lineNumber":35,"author":{"gitID":"Yoochard"},"content":"        case \"address\":"},{"lineNumber":36,"author":{"gitID":"Yoochard"},"content":"        case \"tag\":"},{"lineNumber":37,"author":{"gitID":"Yoochard"},"content":"        case \"rate\":"},{"lineNumber":38,"author":{"gitID":"Yoochard"},"content":"            model.sort(sortField);"},{"lineNumber":39,"author":{"gitID":"Yoochard"},"content":"            break;"},{"lineNumber":40,"author":{"gitID":"Yoochard"},"content":"        default:"},{"lineNumber":41,"author":{"gitID":"Yoochard"},"content":"            throw new CommandException(MESSAGE_SORT_INVALID_FIELD);"},{"lineNumber":42,"author":{"gitID":"Yoochard"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"Yoochard"},"content":"        return new CommandResult(MESSAGE_SORT_EMPLOYEE_SUCCESS);"},{"lineNumber":44,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Yoochard"},"content":"}"}],"authorContributionMap":{"Yoochard":45}},{"path":"src/main/java/seedu/address/logic/commands/LockCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.person.HideAllPersonPredicate;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":" * Locks the app with a password"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":" * */"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"public class LockCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"    public static final String COMMAND_WORD \u003d \"lock\";"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lock the address book. \";"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been locked!\";"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"    private String password;"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"    private final HideAllPersonPredicate predicate \u003d new HideAllPersonPredicate();"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"    public LockCommand() {"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"        this.password \u003d null;"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"    public LockCommand(String keyword) {"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"        this.password \u003d keyword;"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"    public CommandResult execute() {"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"        LogicManager.lock();"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"        if (this.password !\u003d null) {"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"            LogicManager.setPassword(this.password);"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"        } else {"},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"            LogicManager.setPassword(\"nopassword\");"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":"    public String getPassword() {"},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"        return password;"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":"        if (this.password \u003d\u003d null \u0026\u0026 other instanceof LockCommand \u0026\u0026 ((LockCommand) other).getPassword() \u003d\u003d null) {"},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"            return true;"},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":"        if (this.password \u003d\u003d null \u0026\u0026 other instanceof LockCommand \u0026\u0026 ((LockCommand) other).getPassword() !\u003d null) {"},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":"            return false;"},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":57,"author":{"gitID":"crizyli"},"content":"        if (this.password !\u003d null \u0026\u0026 other instanceof LockCommand \u0026\u0026 ((LockCommand) other).getPassword() \u003d\u003d null) {"},{"lineNumber":58,"author":{"gitID":"crizyli"},"content":"            return false;"},{"lineNumber":59,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":61,"author":{"gitID":"crizyli"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":62,"author":{"gitID":"crizyli"},"content":"                || (other instanceof LockCommand // instanceof handles nulls"},{"lineNumber":63,"author":{"gitID":"crizyli"},"content":"                \u0026\u0026 this.password.compareTo(((LockCommand) other).getPassword()) \u003d\u003d 0); // state check"},{"lineNumber":64,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":62,"IzHoBX":3}},{"path":"src/main/java/seedu/address/logic/parser/LockCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.LockCommand;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":" * Parse arguments for LockCommand"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"public class LockCommandParser implements Parser\u003cLockCommand\u003e {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":13,"author":{"gitID":"-"},"content":"     * and returns an FindCommand object for execution."},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"    public LockCommand parse(String args) throws ParseException {"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"        return trimmedArgs.isEmpty() ? new LockCommand() : new LockCommand(trimmedArgs);"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":11,"IzHoBX":3,"-":8}},{"path":"src/main/java/seedu/address/logic/parser/ReviewCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ReviewCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Review;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new Review object"},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class ReviewCommandParser implements Parser\u003cReviewCommand\u003e {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the ReviewCommand"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * and returns a ReviewCommand object for execution."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public ReviewCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"        requireNonNull(args);"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"        Scanner sc \u003d new Scanner(args);"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"        if (!sc.hasNextInt()) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReviewCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"        Index index;"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"            index \u003d ParserUtil.parseIndex(((Integer) sc.nextInt()).toString());"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReviewCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        if (!sc.hasNext()) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReviewCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        sb.append(sc.next());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        while (sc.hasNext()) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            sb.append(\" \" + sc.next());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        String review \u003d sb.toString();"},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":48,"author":{"gitID":"IzHoBX"},"content":"        EditCommand.EditPersonDescriptor editPersonDescriptor \u003d new EditCommand.EditPersonDescriptor();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        editPersonDescriptor.setReview(new Review(review));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new ParseException(ReviewCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return new ReviewCommand(index, editPersonDescriptor);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":8,"IzHoBX":3,"-":46}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Review;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":36,"author":{"gitID":"-"},"content":" */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":49,"author":{"gitID":"IzHoBX"},"content":"            + \"[\" + PREFIX_RATING + \"RATING] \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":113,"author":{"gitID":"IzHoBX"},"content":"        Rating updatedRating \u003d editPersonDescriptor.getRating().orElse(personToEdit.getRating());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Review updatedReview \u003d editPersonDescriptor.getReview().orElse(personToEdit.getReview());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        Person person \u003d new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedRating,"},{"lineNumber":118,"author":{"gitID":"IzHoBX"},"content":"                updatedTags, personToEdit.getCalendarId());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        person.setReview(updatedReview);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return person;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":153,"author":{"gitID":"IzHoBX"},"content":"        private Rating rating;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        private Review review;"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":160,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":161,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":167,"author":{"gitID":"IzHoBX"},"content":"            setRating(toCopy.rating);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            setReview(toCopy.review);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":173,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":174,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.rating,"},{"lineNumber":177,"author":{"gitID":"-"},"content":"                    this.review, this.tags);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"IzHoBX"},"content":"        public void setRating(Rating rating) {"},{"lineNumber":213,"author":{"gitID":"IzHoBX"},"content":"            this.rating \u003d rating;"},{"lineNumber":214,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":216,"author":{"gitID":"IzHoBX"},"content":"        public Optional\u003cRating\u003e getRating() {"},{"lineNumber":217,"author":{"gitID":"IzHoBX"},"content":"            return Optional.ofNullable(rating);"},{"lineNumber":218,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"        public void setReview(Review review) {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"            this.review \u003d review;"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"        public Optional\u003cReview\u003e getReview() {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(review);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":229,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":230,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":231,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":237,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":238,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":239,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":240,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":248,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":253,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":255,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":258,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":261,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":262,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":263,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":264,"author":{"gitID":"IzHoBX"},"content":"                    \u0026\u0026 getRating().equals(e.getRating())"},{"lineNumber":265,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getReview().equals(e.getReview())"},{"lineNumber":266,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"IzHoBX":16,"-":253}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":"import java.util.Calendar;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"import java.util.Timer;"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"import java.util.TimerTask;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.events.model.TimetableEntryAddedEvent;"},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.events.model.TimetableEntryDeletedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.UnlockCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.timetableentry.TimetableEntryTime;"},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.storage.TimetableEntryTimeParserUtil;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"    private static boolean isLocked \u003d false;"},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"    private static String password;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"    private HashMap\u003cTimerTask, Boolean\u003e timetableEntriesStatus;"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"    private HashMap\u003cString, TimerTask\u003e scheduledTimerTasks;"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"        isLocked \u003d false;"},{"lineNumber":48,"author":{"gitID":"IzHoBX"},"content":"        timetableEntriesStatus \u003d new HashMap\u003c\u003e();"},{"lineNumber":49,"author":{"gitID":"IzHoBX"},"content":"        scheduledTimerTasks \u003d new HashMap\u003c\u003e();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"crizyli"},"content":"            Command command;"},{"lineNumber":57,"author":{"gitID":"crizyli"},"content":"            CommandResult result \u003d new CommandResult(\"\");"},{"lineNumber":58,"author":{"gitID":"crizyli"},"content":"            if (isLocked) {"},{"lineNumber":59,"author":{"gitID":"crizyli"},"content":"                command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                command.setData(model, history, undoRedoStack);"},{"lineNumber":61,"author":{"gitID":"crizyli"},"content":"                if (command instanceof UnlockCommand) {"},{"lineNumber":62,"author":{"gitID":"crizyli"},"content":"                    UnlockCommand unlockCommand \u003d (UnlockCommand) command;"},{"lineNumber":63,"author":{"gitID":"crizyli"},"content":"                    result \u003d unlockCommand.execute();"},{"lineNumber":64,"author":{"gitID":"crizyli"},"content":"                } else {"},{"lineNumber":65,"author":{"gitID":"crizyli"},"content":"                    result \u003d new CommandResult(\"Addressbook has been locked, please unlock it first!\");"},{"lineNumber":66,"author":{"gitID":"crizyli"},"content":"                }"},{"lineNumber":67,"author":{"gitID":"crizyli"},"content":"            } else {"},{"lineNumber":68,"author":{"gitID":"crizyli"},"content":"                command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                command.setData(model, history, undoRedoStack);"},{"lineNumber":70,"author":{"gitID":"crizyli"},"content":"                result \u003d command.execute();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                undoRedoStack.push(command);"},{"lineNumber":72,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":73,"author":{"gitID":"crizyli"},"content":"            }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":90,"author":{"gitID":"crizyli"},"content":"    public static String getPassword() {"},{"lineNumber":91,"author":{"gitID":"crizyli"},"content":"        return password;"},{"lineNumber":92,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":94,"author":{"gitID":"crizyli"},"content":"    public static void setPassword(String psw) {"},{"lineNumber":95,"author":{"gitID":"crizyli"},"content":"        password \u003d psw;"},{"lineNumber":96,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":98,"author":{"gitID":"crizyli"},"content":"    public static void unLock() {"},{"lineNumber":99,"author":{"gitID":"crizyli"},"content":"        isLocked \u003d false;"},{"lineNumber":100,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":102,"author":{"gitID":"crizyli"},"content":"    public static void lock() {"},{"lineNumber":103,"author":{"gitID":"crizyli"},"content":"        isLocked \u003d true;"},{"lineNumber":104,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":106,"author":{"gitID":"crizyli"},"content":"    public static boolean isLocked() {"},{"lineNumber":107,"author":{"gitID":"crizyli"},"content":"        return isLocked;"},{"lineNumber":108,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":110,"author":{"gitID":"IzHoBX"},"content":"    @Subscribe"},{"lineNumber":111,"author":{"gitID":"IzHoBX"},"content":"    private void handleTimetableEntryAddedEvent(TimetableEntryAddedEvent event) {"},{"lineNumber":112,"author":{"gitID":"IzHoBX"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":113,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":114,"author":{"gitID":"IzHoBX"},"content":"        TimetableEntryTime parsedTime \u003d TimetableEntryTimeParserUtil.parseTime(event.timetableEntry.getEndDate());"},{"lineNumber":115,"author":{"gitID":"IzHoBX"},"content":"        Calendar c \u003d Calendar.getInstance();"},{"lineNumber":116,"author":{"gitID":"IzHoBX"},"content":"        c.set(parsedTime.getYear(), parsedTime.getMonth(), parsedTime.getDate(), parsedTime.getHour(),"},{"lineNumber":117,"author":{"gitID":"IzHoBX"},"content":"                parsedTime.getMinute());"},{"lineNumber":118,"author":{"gitID":"IzHoBX"},"content":"        Timer timer \u003d new Timer();"},{"lineNumber":119,"author":{"gitID":"IzHoBX"},"content":"        TimerTask task \u003d new TimerTask() {"},{"lineNumber":120,"author":{"gitID":"IzHoBX"},"content":"            @Override"},{"lineNumber":121,"author":{"gitID":"IzHoBX"},"content":"            public void run() {"},{"lineNumber":122,"author":{"gitID":"IzHoBX"},"content":"                if (timetableEntriesStatus.get(this)) {"},{"lineNumber":123,"author":{"gitID":"IzHoBX"},"content":"                    System.out.println(\"An event ended at: \" + (new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\")).format"},{"lineNumber":124,"author":{"gitID":"IzHoBX"},"content":"                            (Calendar.getInstance().getTimeInMillis()));"},{"lineNumber":125,"author":{"gitID":"IzHoBX"},"content":"                } else {"},{"lineNumber":126,"author":{"gitID":"IzHoBX"},"content":"                    System.out.println(\"A cancelled event ended at: \" + (new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\"))"},{"lineNumber":127,"author":{"gitID":"IzHoBX"},"content":"                            .format(Calendar.getInstance().getTimeInMillis()));"},{"lineNumber":128,"author":{"gitID":"IzHoBX"},"content":"                }"},{"lineNumber":129,"author":{"gitID":"IzHoBX"},"content":"            }"},{"lineNumber":130,"author":{"gitID":"IzHoBX"},"content":"        };"},{"lineNumber":131,"author":{"gitID":"IzHoBX"},"content":"        long duration \u003d c.getTimeInMillis() - System.currentTimeMillis();"},{"lineNumber":132,"author":{"gitID":"IzHoBX"},"content":"        if (duration \u003e\u003d 0) {"},{"lineNumber":133,"author":{"gitID":"IzHoBX"},"content":"            timer.schedule(task, duration);"},{"lineNumber":134,"author":{"gitID":"IzHoBX"},"content":"        } else {"},{"lineNumber":135,"author":{"gitID":"IzHoBX"},"content":"            task.run();"},{"lineNumber":136,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"IzHoBX"},"content":"        timetableEntriesStatus.put(task, false);"},{"lineNumber":138,"author":{"gitID":"IzHoBX"},"content":"        scheduledTimerTasks.put(event.timetableEntry.getId(), task);"},{"lineNumber":139,"author":{"gitID":"IzHoBX"},"content":"        System.out.println(\"An event scheduled at \" + c.getTime() + \" \" + (c.getTimeInMillis() - System"},{"lineNumber":140,"author":{"gitID":"IzHoBX"},"content":"                .currentTimeMillis()));"},{"lineNumber":141,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":142,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":144,"author":{"gitID":"IzHoBX"},"content":"    @Subscribe"},{"lineNumber":145,"author":{"gitID":"IzHoBX"},"content":"    private void handleTimetableEntryDeletedEvent(TimetableEntryDeletedEvent event) {"},{"lineNumber":146,"author":{"gitID":"IzHoBX"},"content":"        TimerTask associatedTimerTask \u003d scheduledTimerTasks.get(event.id);"},{"lineNumber":147,"author":{"gitID":"IzHoBX"},"content":"        timetableEntriesStatus.put(associatedTimerTask, false);"},{"lineNumber":148,"author":{"gitID":"IzHoBX"},"content":"        scheduledTimerTasks.remove(event.id);"},{"lineNumber":149,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":36,"IzHoBX":60,"-":54}},{"path":"src/main/java/seedu/address/logic/commands/UnlockCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":" * Unlocks the addressbook"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"public class UnlockCommand extends Command {"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"    public static final String COMMAND_WORD \u003d \"unlock\";"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Unlock the address book. \";"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been unlocked!\";"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_INCORRECT_PASSWORD \u003d \"Incorrect unlock password!\";"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"    private String password;"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"    public UnlockCommand(String keyword) {"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"        this.password \u003d keyword;"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"    public CommandResult execute() {"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"        if (this.password.compareTo(LogicManager.getPassword()) \u003d\u003d 0) {"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"            LogicManager.unLock();"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"        } else {"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"            return new CommandResult(MESSAGE_INCORRECT_PASSWORD);"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"    public String getPassword() {"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"        return password;"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"    public boolean equals(Object other) {"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":"                || (other instanceof UnlockCommand // instanceof handles nulls"},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":"                \u0026\u0026 this.password.equals(((UnlockCommand) other).getPassword())); // state check"},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":41,"IzHoBX":3}},{"path":"src/main/java/seedu/address/storage/TimetableEntryTimeParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.timetableentry.TimetableEntryTime;"},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":" * Parses timetable endtime to separated fields of time."},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":"public class TimetableEntryTimeParserUtil {"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"    private static final int YEAR_BEGIN_INDEX \u003d 0 + 13;"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":"    private static final int MONTH_BEGIN_INDEX \u003d 5 + 13;"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"    private static final int DAY_BEGIN_INDEX \u003d 8 + 13;"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"    private static final int HOUR_BEGIN_INDEX \u003d 11 + 13;"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"    private static final int MINUTE_BEGIN_INDEX \u003d 14 + 13;"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"    private static final int SECOND_BEGIN_INDEX \u003d 17 + 13;"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"    private static final int YEAR_END_INDEX \u003d 4 + 13;"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"    private static final int MONTH_END_INDEX \u003d 7 + 13;"},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"    private static final int DAY_END_INDEX \u003d 10 + 13;"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"    private static final int HOUR_END_INDEX \u003d 13 + 13;"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"    private static final int MINUTE_END_INDEX \u003d 16 + 13;"},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"    private static final int SECOND_END_INDEX \u003d 19 + 13;"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":"    //the menu of Month in Calendar is zero based"},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":"    private static final int MONTH_INDEX_OFFSET \u003d -1;"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"    private static final int TIMEZONE_HOUR_OFFSET \u003d 0;"},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"     * Parses the input time string into time fields."},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":"     *"},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"     * @params input that a string containing time information in the format"},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"     * {\"dateTime\":\"YYYY-MM-DDTHH:MM:SS.000+08:00\","},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"     * \"timeZone\":\"Asia/Singapore\"}\u003c"},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":"     * @return TimetableEntryTime containing the parsed time fields."},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":"    public static TimetableEntryTime parseTime(String input) {"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"        TimetableEntryTime tet \u003d new TimetableEntryTime(Integer.parseInt(input.substring(YEAR_BEGIN_INDEX,"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"                YEAR_END_INDEX)),"},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"                Integer.parseInt(input.substring(MONTH_BEGIN_INDEX, MONTH_END_INDEX)) + MONTH_INDEX_OFFSET,"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"                Integer.parseInt(input.substring(DAY_BEGIN_INDEX, DAY_END_INDEX)),"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":"                Integer.parseInt(input.substring(HOUR_BEGIN_INDEX, HOUR_END_INDEX)) + TIMEZONE_HOUR_OFFSET,"},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":"                Integer.parseInt(input.substring(MINUTE_BEGIN_INDEX, MINUTE_END_INDEX)),"},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":"                Integer.parseInt(input.substring(SECOND_BEGIN_INDEX, SECOND_END_INDEX)));"},{"lineNumber":44,"author":{"gitID":"IzHoBX"},"content":"        System.out.println(\"ParsedTime: \" + tet.getYear() + \" \" + tet.getMonth() + \" \" + tet.getDate() + \" \""},{"lineNumber":45,"author":{"gitID":"IzHoBX"},"content":"                + tet.getHour() + \" \" + tet.getMinute() + \" \" + tet.getSeconds());"},{"lineNumber":46,"author":{"gitID":"IzHoBX"},"content":"        return tet;"},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":48}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Review;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"    private String calendarId;"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"    @XmlElement"},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"    private String rating;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private String review;"},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":"    @XmlElement"},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":"    private int id;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":56,"author":{"gitID":"IzHoBX"},"content":"     * To retain until XmlAdaptedPersonTest is updated."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"crizyli"},"content":"    public XmlAdaptedPerson(String name, String phone, String email, String address, List\u003cXmlAdaptedTag\u003e tagged,"},{"lineNumber":59,"author":{"gitID":"crizyli"},"content":"                            String calendarId) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"crizyli"},"content":"        this.calendarId \u003d calendarId;"},{"lineNumber":68,"author":{"gitID":"IzHoBX"},"content":"        this.id \u003d Person.UNINITIALISED_ID;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"IzHoBX"},"content":"    public XmlAdaptedPerson(String name,"},{"lineNumber":75,"author":{"gitID":"IzHoBX"},"content":"                            String phone,"},{"lineNumber":76,"author":{"gitID":"IzHoBX"},"content":"                            String email,"},{"lineNumber":77,"author":{"gitID":"IzHoBX"},"content":"                            String address,"},{"lineNumber":78,"author":{"gitID":"IzHoBX"},"content":"                            String rating,"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                            String review,"},{"lineNumber":80,"author":{"gitID":"IzHoBX"},"content":"                            List\u003cXmlAdaptedTag\u003e tagged,"},{"lineNumber":81,"author":{"gitID":"IzHoBX"},"content":"                            int id) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":86,"author":{"gitID":"IzHoBX"},"content":"        this.rating \u003d rating;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        this.review \u003d review;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"IzHoBX"},"content":"        this.id \u003d id;"},{"lineNumber":92,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":104,"author":{"gitID":"IzHoBX"},"content":"        rating \u003d source.getRating().value.toString();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        review \u003d source.getReview().value;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"crizyli"},"content":"        calendarId \u003d source.getCalendarId();"},{"lineNumber":111,"author":{"gitID":"IzHoBX"},"content":"        id \u003d source.getId();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"IzHoBX"},"content":"        if (this.rating \u003d\u003d null) {"},{"lineNumber":158,"author":{"gitID":"IzHoBX"},"content":"            this.rating \u003d (new Rating()).toString();"},{"lineNumber":159,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"IzHoBX"},"content":"        if (!Rating.isValidRating(this.rating)) {"},{"lineNumber":161,"author":{"gitID":"IzHoBX"},"content":"            throw new IllegalValueException(Rating.MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":162,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":164,"author":{"gitID":"IzHoBX"},"content":"        final Rating rating \u003d new Rating(this.rating);"},{"lineNumber":165,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        if (this.review \u003d\u003d null) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            this.review \u003d (new Review()).toString();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        if (!Review.isValidReview(this.review)) {"},{"lineNumber":170,"author":{"gitID":"IzHoBX"},"content":"            throw new IllegalValueException(Rating.MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":171,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        final Review review \u003d new Review(this.review);"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"IzHoBX"},"content":"        Person person \u003d new Person(name, phone, email, address, rating, tags, calendarId, id);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        person.setReview(review);"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        return person;"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":194,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":195,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":196,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(address, otherPerson.address)"},{"lineNumber":197,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":5,"IzHoBX":32,"-":162}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.timetableentry.TimetableEntry;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"    @XmlElement"},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"    private List\u003cXmlAdaptedTimetableEntry\u003e timetableEntries;"},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"    @XmlElement"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"    private Integer nextId;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"        timetableEntries \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"        nextId \u003d 0;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":48,"author":{"gitID":"IzHoBX"},"content":"        for (TimetableEntry t: src.getTimetableEntriesList()) {"},{"lineNumber":49,"author":{"gitID":"IzHoBX"},"content":"            timetableEntries.add(new XmlAdaptedTimetableEntry(t.getCalendarId(), t.getId(), t.getEndDate(),"},{"lineNumber":50,"author":{"gitID":"IzHoBX"},"content":"                    t.getOwnerId()));"},{"lineNumber":51,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"IzHoBX"},"content":"        nextId \u003d src.getNextId();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag}."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            addressBook.addTag(t.toModelType());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        for (XmlAdaptedPerson p : persons) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            addressBook.addPerson(p.toModelType());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"IzHoBX"},"content":"        for (XmlAdaptedTimetableEntry t : timetableEntries) {"},{"lineNumber":70,"author":{"gitID":"IzHoBX"},"content":"            addressBook.addTimetableEntry(t.toModelType());"},{"lineNumber":71,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"IzHoBX"},"content":"        addressBook.setNextId(nextId);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlSerializableAddressBook)) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"},{"lineNumber":87,"author":{"gitID":"IzHoBX"},"content":"        return persons.equals(otherAb.persons)"},{"lineNumber":88,"author":{"gitID":"IzHoBX"},"content":"                \u0026\u0026 tags.equals(otherAb.tags)"},{"lineNumber":89,"author":{"gitID":"IzHoBX"},"content":"                \u0026\u0026 timetableEntries.equals(otherAb.timetableEntries);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"IzHoBX":19,"-":72}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return new Person[] {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":23,"author":{"gitID":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"                getTagSet(\"friends\"), \"null\"),"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":26,"author":{"gitID":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"                getTagSet(\"colleagues\", \"friends\"), \"null\"),"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":29,"author":{"gitID":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"                getTagSet(\"neighbours\"), \"null\"),"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"                getTagSet(\"family\"), \"primary\"),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"                getTagSet(\"classmates\"), \"null\"),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"                getTagSet(\"colleagues\"), \"null\")"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":6,"-":61}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedTimetableEntry.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.timetableentry.TimetableEntry;"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":" * JAXB-friendly adapted version of the TimetableEntry."},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":"public class XmlAdaptedTimetableEntry {"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"    private String calendarId;"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":"    private String endDate;"},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"    private String ownerId;"},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"    private String id;"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"     * Constructs an XmlAdaptedTimetableEntry."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"    public XmlAdaptedTimetableEntry() {}"},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"     * Constructs a {@code XmlAdaptedTimetableEntry} with the given timetable entry details."},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"    public XmlAdaptedTimetableEntry(String calendarId, String id, String endDate, String ownerId) {"},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"        this.calendarId \u003d calendarId;"},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"        this.id \u003d id;"},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"        this.endDate \u003d endDate;"},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":"        this.ownerId \u003d ownerId;"},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"     * Converts a given TimetableEntry into this class for JAXB use."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":"    public XmlAdaptedTimetableEntry(TimetableEntry source) {"},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":"        this.calendarId \u003d source.getCalendarId();"},{"lineNumber":44,"author":{"gitID":"IzHoBX"},"content":"        this.endDate \u003d source.getEndDate();"},{"lineNumber":45,"author":{"gitID":"IzHoBX"},"content":"        this.ownerId \u003d source.getOwnerId();"},{"lineNumber":46,"author":{"gitID":"IzHoBX"},"content":"        this.id \u003d source.getId();"},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":49,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"IzHoBX"},"content":"     * Converts this jaxb-friendly adapted timetable entry object into the model\u0027s TimetableEntry object."},{"lineNumber":51,"author":{"gitID":"IzHoBX"},"content":"     *"},{"lineNumber":52,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"IzHoBX"},"content":"    public TimetableEntry toModelType() {"},{"lineNumber":54,"author":{"gitID":"IzHoBX"},"content":"        return new TimetableEntry(calendarId, id, endDate, ownerId);"},{"lineNumber":55,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":51,"-":5}},{"path":"src/main/java/seedu/address/model/person/HideAllPersonPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"* For hiding persons during lock"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"*/"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"public class HideAllPersonPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"    public HideAllPersonPredicate() {}"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"    public boolean test(Person person) {"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"        return false;"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"    public boolean equals(Object other) {"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"        return false;"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":19,"IzHoBX":3,"-":1}},{"path":"src/main/java/seedu/address/logic/commands/RateCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":" * Updates the rating of an existing person in the address book."},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"public class RateCommand extends UndoableCommand {"},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"    public static final String COMMAND_WORD \u003d \"rate\";"},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Rate the person identified \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"            + \"Parameters: INDEX must be positive integer \""},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"            + \"RATING (must be 1, 2, 3, 4, or 5) \\n\""},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"            + \"5\";"},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"    public static final String MESSAGE_RATE_PERSON_SUCCESS \u003d \"Rated Person: %1$s\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":"    private final EditCommand.EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"IzHoBX"},"content":"    public RateCommand(Index index, EditCommand.EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":50,"author":{"gitID":"IzHoBX"},"content":"        this.editPersonDescriptor \u003d new EditCommand.EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":63,"author":{"gitID":"IzHoBX"},"content":"        return new CommandResult(String.format(MESSAGE_RATE_PERSON_SUCCESS, editedPerson));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"IzHoBX"},"content":"    private static Person createEditedPerson(Person personToEdit,"},{"lineNumber":83,"author":{"gitID":"IzHoBX"},"content":"                                             EditCommand.EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":84,"author":{"gitID":"IzHoBX"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":85,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":86,"author":{"gitID":"IzHoBX"},"content":"        Rating updatedRating \u003d editPersonDescriptor.getRating().orElse(new Rating());"},{"lineNumber":87,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Person person \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"},{"lineNumber":89,"author":{"gitID":"IzHoBX"},"content":"                personToEdit.getAddress(), updatedRating, personToEdit.getTags(), personToEdit.getCalendarId());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        person.setReview(personToEdit.getReview());"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return person;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":103,"author":{"gitID":"IzHoBX"},"content":"        if (!(other instanceof RateCommand)) {"},{"lineNumber":104,"author":{"gitID":"IzHoBX"},"content":"            return false;"},{"lineNumber":105,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":107,"author":{"gitID":"IzHoBX"},"content":"        // state check"},{"lineNumber":108,"author":{"gitID":"IzHoBX"},"content":"        RateCommand e \u003d (RateCommand) other;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":39,"-":74}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Yoochard"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"Yoochard"},"content":"import java.util.Comparator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":19,"author":{"gitID":"-"},"content":" *"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":21,"author":{"gitID":"-"},"content":" *"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * @see Person#equals(Object)"},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public boolean contains(Person toCheck) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Adds a person to the list."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void add(Person toAdd) throws DuplicatePersonException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the replacement is equivalent to another existing person in the list."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void setPerson(Person target, Person editedPerson)"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (!target.equals(editedPerson) \u0026\u0026 internalList.contains(editedPerson)) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        internalList.set(index, editedPerson);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public boolean remove(Person toRemove) throws PersonNotFoundException {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        if (!personFoundAndDeleted) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return personFoundAndDeleted;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void setPersons(UniquePersonList replacement) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        requireAllNonNull(persons);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        final UniquePersonList replacement \u003d new UniquePersonList();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        for (final Person person : persons) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            replacement.add(person);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        setPersons(replacement);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e asObservableList() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                        \u0026\u0026 this.internalList.equals(((UniquePersonList) other).internalList));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"Yoochard"},"content":"     * Sorts existing persons, check sort field here"},{"lineNumber":118,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"Yoochard"},"content":"    public void sort(String field) {"},{"lineNumber":120,"author":{"gitID":"Yoochard"},"content":"        switch (field) {"},{"lineNumber":121,"author":{"gitID":"Yoochard"},"content":"        case \"name\":"},{"lineNumber":122,"author":{"gitID":"Yoochard"},"content":"            sortByName();"},{"lineNumber":123,"author":{"gitID":"Yoochard"},"content":"            break;"},{"lineNumber":124,"author":{"gitID":"Yoochard"},"content":"        case \"phone\":"},{"lineNumber":125,"author":{"gitID":"Yoochard"},"content":"            sortByPhone();"},{"lineNumber":126,"author":{"gitID":"Yoochard"},"content":"            break;"},{"lineNumber":127,"author":{"gitID":"Yoochard"},"content":"        case \"email\":"},{"lineNumber":128,"author":{"gitID":"Yoochard"},"content":"            sortByEmail();"},{"lineNumber":129,"author":{"gitID":"Yoochard"},"content":"            break;"},{"lineNumber":130,"author":{"gitID":"Yoochard"},"content":"        case \"address\":"},{"lineNumber":131,"author":{"gitID":"Yoochard"},"content":"            sortByAddress();"},{"lineNumber":132,"author":{"gitID":"Yoochard"},"content":"            break;"},{"lineNumber":133,"author":{"gitID":"Yoochard"},"content":"        case \"tag\":"},{"lineNumber":134,"author":{"gitID":"Yoochard"},"content":"            sortByTag();"},{"lineNumber":135,"author":{"gitID":"Yoochard"},"content":"            break;"},{"lineNumber":136,"author":{"gitID":"Yoochard"},"content":"        case \"rate\":"},{"lineNumber":137,"author":{"gitID":"Yoochard"},"content":"            sortByRate();"},{"lineNumber":138,"author":{"gitID":"Yoochard"},"content":"            break;"},{"lineNumber":139,"author":{"gitID":"Yoochard"},"content":"        default:"},{"lineNumber":140,"author":{"gitID":"Yoochard"},"content":"            throw new AssertionError(\"Sort field should be name, phone, email, tag, address or rate.\");"},{"lineNumber":141,"author":{"gitID":"Yoochard"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"Yoochard"},"content":"     * Specific sort method for every field, sort by name"},{"lineNumber":145,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"Yoochard"},"content":"    public void sortByName() {"},{"lineNumber":147,"author":{"gitID":"Yoochard"},"content":"        Collections.sort(internalList, new Comparator\u003cPerson\u003e() {"},{"lineNumber":148,"author":{"gitID":"Yoochard"},"content":"            public int compare(Person p1, Person p2) {"},{"lineNumber":149,"author":{"gitID":"Yoochard"},"content":"                int num \u003d p1.getName().toString().compareToIgnoreCase(p2.getName().toString());"},{"lineNumber":150,"author":{"gitID":"Yoochard"},"content":"                return num;"},{"lineNumber":151,"author":{"gitID":"Yoochard"},"content":"            }"},{"lineNumber":152,"author":{"gitID":"Yoochard"},"content":"        });"},{"lineNumber":153,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":155,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"Yoochard"},"content":"     * when the input field is phone, sort by phone"},{"lineNumber":157,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"Yoochard"},"content":"    public void sortByPhone() {"},{"lineNumber":159,"author":{"gitID":"Yoochard"},"content":"        Collections.sort(internalList, new Comparator\u003cPerson\u003e() {"},{"lineNumber":160,"author":{"gitID":"Yoochard"},"content":"            public int compare(Person p1, Person p2) {"},{"lineNumber":161,"author":{"gitID":"Yoochard"},"content":"                int num \u003d p1.getPhone().toString().compareToIgnoreCase(p2.getPhone().toString());"},{"lineNumber":162,"author":{"gitID":"Yoochard"},"content":"                return num;"},{"lineNumber":163,"author":{"gitID":"Yoochard"},"content":"            }"},{"lineNumber":164,"author":{"gitID":"Yoochard"},"content":"        });"},{"lineNumber":165,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":167,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"Yoochard"},"content":"     * when the input field is email, sort by email"},{"lineNumber":169,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"Yoochard"},"content":"    public void sortByEmail() {"},{"lineNumber":171,"author":{"gitID":"Yoochard"},"content":"        Collections.sort(internalList, new Comparator\u003cPerson\u003e() {"},{"lineNumber":172,"author":{"gitID":"Yoochard"},"content":"            public int compare(Person p1, Person p2) {"},{"lineNumber":173,"author":{"gitID":"Yoochard"},"content":"                int num \u003d p1.getEmail().toString().compareToIgnoreCase(p2.getEmail().toString());"},{"lineNumber":174,"author":{"gitID":"Yoochard"},"content":"                return num;"},{"lineNumber":175,"author":{"gitID":"Yoochard"},"content":"            }"},{"lineNumber":176,"author":{"gitID":"Yoochard"},"content":"        });"},{"lineNumber":177,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":179,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"Yoochard"},"content":"     * when the input field is address, sort by address"},{"lineNumber":181,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":182,"author":{"gitID":"Yoochard"},"content":"    public void sortByAddress() {"},{"lineNumber":183,"author":{"gitID":"Yoochard"},"content":"        Collections.sort(internalList, new Comparator\u003cPerson\u003e() {"},{"lineNumber":184,"author":{"gitID":"Yoochard"},"content":"            public int compare(Person p1, Person p2) {"},{"lineNumber":185,"author":{"gitID":"Yoochard"},"content":"                int num \u003d p1.getAddress().toString().compareToIgnoreCase(p2.getAddress().toString());"},{"lineNumber":186,"author":{"gitID":"Yoochard"},"content":"                return num;"},{"lineNumber":187,"author":{"gitID":"Yoochard"},"content":"            }"},{"lineNumber":188,"author":{"gitID":"Yoochard"},"content":"        });"},{"lineNumber":189,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":191,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"Yoochard"},"content":"     * when the input field is tag, sort by tag"},{"lineNumber":193,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"Yoochard"},"content":"    public void sortByTag() {"},{"lineNumber":195,"author":{"gitID":"Yoochard"},"content":"        Collections.sort(internalList, new Comparator\u003cPerson\u003e() {"},{"lineNumber":196,"author":{"gitID":"Yoochard"},"content":"            public int compare(Person p1, Person p2) {"},{"lineNumber":197,"author":{"gitID":"Yoochard"},"content":"                int num \u003d p1.getTags().toString().compareToIgnoreCase(p2.getTags().toString());"},{"lineNumber":198,"author":{"gitID":"Yoochard"},"content":"                return num;"},{"lineNumber":199,"author":{"gitID":"Yoochard"},"content":"            }"},{"lineNumber":200,"author":{"gitID":"Yoochard"},"content":"        });"},{"lineNumber":201,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":203,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"Yoochard"},"content":"     * when the input field is rate, sort by rate in descending order"},{"lineNumber":205,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":206,"author":{"gitID":"Yoochard"},"content":"    public void sortByRate() {"},{"lineNumber":207,"author":{"gitID":"Yoochard"},"content":"        Collections.sort(internalList, new Comparator\u003cPerson\u003e() {"},{"lineNumber":208,"author":{"gitID":"Yoochard"},"content":"            public int compare(Person p1, Person p2) {"},{"lineNumber":209,"author":{"gitID":"Yoochard"},"content":"                int num \u003d p2.getRating().toString().compareToIgnoreCase(p1.getRating().toString());"},{"lineNumber":210,"author":{"gitID":"Yoochard"},"content":"                return num;"},{"lineNumber":211,"author":{"gitID":"Yoochard"},"content":"            }"},{"lineNumber":212,"author":{"gitID":"Yoochard"},"content":"        });"},{"lineNumber":213,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":101,"IzHoBX":1,"-":117}},{"path":"src/main/java/seedu/address/logic/commands/TestAddEventCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"import java.io.InputStream;"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"import java.io.InputStreamReader;"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"import com.google.api.client.auth.oauth2.Credential;"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"import com.google.api.client.http.HttpTransport;"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"import com.google.api.client.json.JsonFactory;"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"import com.google.api.client.json.jackson2.JacksonFactory;"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"import com.google.api.client.util.DateTime;"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"import com.google.api.client.util.store.FileDataStoreFactory;"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"import com.google.api.services.calendar.CalendarScopes;"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"import com.google.api.services.calendar.model.Event;"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"import com.google.api.services.calendar.model.EventDateTime;"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.timetableentry.TimetableEntry;"},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.timetableentry.exceptions.DuplicateTimetableEntryException;"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":" * Adds an event to a person."},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"public class TestAddEventCommand extends UndoableCommand {"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"    public static final String COMMAND_WORD \u003d \"addEvent\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"            + \": Add an event to the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":"            + PREFIX_TITLE + \"TITLE \""},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"            + PREFIX_LOCATION + \"LOCATION \""},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"            + PREFIX_STARTTIME + \"STARTTIME \""},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":"            + PREFIX_ENDTIME + \"ENDTIME \""},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 title/test event loca/NUS, Singapore stime/2017-03-19T08:00:00\""},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"            + \" etime/2017-03-19T10:00:00 descrip/this is a test event\";"},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Event added!\";"},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":"    /** Directory to store user credentials for this application. */"},{"lineNumber":56,"author":{"gitID":"crizyli"},"content":"    private static final java.io.File DATA_STORE_DIR \u003d new java.io.File("},{"lineNumber":57,"author":{"gitID":"crizyli"},"content":"            System.getProperty(\"user.home\"), \".credentials/calendar-java-quickstart\");"},{"lineNumber":58,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":59,"author":{"gitID":"crizyli"},"content":"    /** Global instance of the {@link FileDataStoreFactory}. */"},{"lineNumber":60,"author":{"gitID":"crizyli"},"content":"    private static FileDataStoreFactory dataStoreFactory;"},{"lineNumber":61,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":62,"author":{"gitID":"crizyli"},"content":"    /** Global instance of the JSON factory. */"},{"lineNumber":63,"author":{"gitID":"crizyli"},"content":"    private static final JsonFactory JSON_FACTORY \u003d"},{"lineNumber":64,"author":{"gitID":"crizyli"},"content":"            JacksonFactory.getDefaultInstance();"},{"lineNumber":65,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":66,"author":{"gitID":"crizyli"},"content":"    /** Global instance of the HTTP transport. */"},{"lineNumber":67,"author":{"gitID":"crizyli"},"content":"    private static HttpTransport httpTransport;"},{"lineNumber":68,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":69,"author":{"gitID":"crizyli"},"content":"    /** Global instance of the scopes required by this quickstart."},{"lineNumber":70,"author":{"gitID":"crizyli"},"content":"     *"},{"lineNumber":71,"author":{"gitID":"crizyli"},"content":"     * If modifying these scopes, delete your previously saved credentials"},{"lineNumber":72,"author":{"gitID":"crizyli"},"content":"     * at ~/.credentials/calendar-java-quickstart"},{"lineNumber":73,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"crizyli"},"content":"    private static final List\u003cString\u003e SCOPES \u003d"},{"lineNumber":75,"author":{"gitID":"crizyli"},"content":"            Arrays.asList(CalendarScopes.CALENDAR);"},{"lineNumber":76,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":77,"author":{"gitID":"crizyli"},"content":"    /** Application name. */"},{"lineNumber":78,"author":{"gitID":"crizyli"},"content":"    private static final String APPLICATION_NAME \u003d \"Employees Tracker\";"},{"lineNumber":79,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":80,"author":{"gitID":"crizyli"},"content":"    static {"},{"lineNumber":81,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":82,"author":{"gitID":"crizyli"},"content":"            httpTransport \u003d GoogleNetHttpTransport.newTrustedTransport();"},{"lineNumber":83,"author":{"gitID":"crizyli"},"content":"            dataStoreFactory \u003d new FileDataStoreFactory(DATA_STORE_DIR);"},{"lineNumber":84,"author":{"gitID":"crizyli"},"content":"        } catch (Throwable t) {"},{"lineNumber":85,"author":{"gitID":"crizyli"},"content":"            t.printStackTrace();"},{"lineNumber":86,"author":{"gitID":"crizyli"},"content":"            System.exit(1);"},{"lineNumber":87,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":90,"author":{"gitID":"crizyli"},"content":"    private final Index targetIndex;"},{"lineNumber":91,"author":{"gitID":"crizyli"},"content":"    private final String title;"},{"lineNumber":92,"author":{"gitID":"crizyli"},"content":"    private final String location;"},{"lineNumber":93,"author":{"gitID":"crizyli"},"content":"    private final String startTime;"},{"lineNumber":94,"author":{"gitID":"crizyli"},"content":"    private final String endTime;"},{"lineNumber":95,"author":{"gitID":"crizyli"},"content":"    private final String description;"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"crizyli"},"content":"    public TestAddEventCommand(Index index, String title, String location, String startTime,"},{"lineNumber":101,"author":{"gitID":"crizyli"},"content":"                               String endTime, String description) {"},{"lineNumber":102,"author":{"gitID":"crizyli"},"content":"        this.title \u003d title;"},{"lineNumber":103,"author":{"gitID":"crizyli"},"content":"        this.location \u003d location;"},{"lineNumber":104,"author":{"gitID":"crizyli"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":105,"author":{"gitID":"crizyli"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":106,"author":{"gitID":"crizyli"},"content":"        this.description \u003d description;"},{"lineNumber":107,"author":{"gitID":"crizyli"},"content":"        this.targetIndex \u003d index;"},{"lineNumber":108,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":110,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":111,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"crizyli"},"content":"     * Creates an authorized Credential object."},{"lineNumber":113,"author":{"gitID":"crizyli"},"content":"     * @return an authorized Credential object."},{"lineNumber":114,"author":{"gitID":"crizyli"},"content":"     * @throws IOException"},{"lineNumber":115,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"crizyli"},"content":"    public static Credential authorize() throws IOException {"},{"lineNumber":117,"author":{"gitID":"crizyli"},"content":"        // Load client secrets."},{"lineNumber":118,"author":{"gitID":"crizyli"},"content":"        InputStream in \u003d"},{"lineNumber":119,"author":{"gitID":"crizyli"},"content":"                TestAddEventCommand.class.getResourceAsStream(\"/client_secret.json\");"},{"lineNumber":120,"author":{"gitID":"crizyli"},"content":"        GoogleClientSecrets clientSecrets \u003d"},{"lineNumber":121,"author":{"gitID":"crizyli"},"content":"                GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(in));"},{"lineNumber":122,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":123,"author":{"gitID":"crizyli"},"content":"        // Build flow and trigger user authorization request."},{"lineNumber":124,"author":{"gitID":"crizyli"},"content":"        GoogleAuthorizationCodeFlow flow \u003d"},{"lineNumber":125,"author":{"gitID":"crizyli"},"content":"                new GoogleAuthorizationCodeFlow.Builder("},{"lineNumber":126,"author":{"gitID":"crizyli"},"content":"                        httpTransport, JSON_FACTORY, clientSecrets, SCOPES)"},{"lineNumber":127,"author":{"gitID":"crizyli"},"content":"                        .setDataStoreFactory(dataStoreFactory)"},{"lineNumber":128,"author":{"gitID":"crizyli"},"content":"                        .setAccessType(\"offline\")"},{"lineNumber":129,"author":{"gitID":"crizyli"},"content":"                        .build();"},{"lineNumber":130,"author":{"gitID":"crizyli"},"content":"        Credential credential \u003d new AuthorizationCodeInstalledApp("},{"lineNumber":131,"author":{"gitID":"crizyli"},"content":"                flow, new LocalServerReceiver()).authorize(\"user\");"},{"lineNumber":132,"author":{"gitID":"crizyli"},"content":"        System.out.println("},{"lineNumber":133,"author":{"gitID":"crizyli"},"content":"                \"Credentials saved to \" + DATA_STORE_DIR.getAbsolutePath());"},{"lineNumber":134,"author":{"gitID":"crizyli"},"content":"        return credential;"},{"lineNumber":135,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":137,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"crizyli"},"content":"     * Build and return an authorized Calendar client service."},{"lineNumber":139,"author":{"gitID":"crizyli"},"content":"     * @return an authorized Calendar client service"},{"lineNumber":140,"author":{"gitID":"crizyli"},"content":"     * @throws IOException"},{"lineNumber":141,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"crizyli"},"content":"    public static com.google.api.services.calendar.Calendar"},{"lineNumber":143,"author":{"gitID":"crizyli"},"content":"        getCalendarService() throws IOException {"},{"lineNumber":144,"author":{"gitID":"crizyli"},"content":"        Credential credential \u003d authorize();"},{"lineNumber":145,"author":{"gitID":"crizyli"},"content":"        return new com.google.api.services.calendar.Calendar.Builder("},{"lineNumber":146,"author":{"gitID":"crizyli"},"content":"                httpTransport, JSON_FACTORY, credential)"},{"lineNumber":147,"author":{"gitID":"crizyli"},"content":"                .setApplicationName(APPLICATION_NAME)"},{"lineNumber":148,"author":{"gitID":"crizyli"},"content":"                .build();"},{"lineNumber":149,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":151,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":152,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":153,"author":{"gitID":"IzHoBX"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":156,"author":{"gitID":"crizyli"},"content":"        Person personToAddEvent \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":157,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":158,"author":{"gitID":"crizyli"},"content":"        // Build a new authorized API client service."},{"lineNumber":159,"author":{"gitID":"crizyli"},"content":"        // Note: Do not confuse this class with the"},{"lineNumber":160,"author":{"gitID":"crizyli"},"content":"        //   com.google.api.services.calendar.model.Calendar class."},{"lineNumber":161,"author":{"gitID":"crizyli"},"content":"        com.google.api.services.calendar.Calendar service \u003d"},{"lineNumber":162,"author":{"gitID":"crizyli"},"content":"                null;"},{"lineNumber":163,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":164,"author":{"gitID":"crizyli"},"content":"            service \u003d getCalendarService();"},{"lineNumber":165,"author":{"gitID":"crizyli"},"content":"        } catch (IOException e) {"},{"lineNumber":166,"author":{"gitID":"crizyli"},"content":"            e.printStackTrace();"},{"lineNumber":167,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":169,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":170,"author":{"gitID":"crizyli"},"content":"        Event event \u003d new Event()"},{"lineNumber":171,"author":{"gitID":"crizyli"},"content":"                .setSummary(title)"},{"lineNumber":172,"author":{"gitID":"crizyli"},"content":"                .setLocation(location)"},{"lineNumber":173,"author":{"gitID":"crizyli"},"content":"                .setDescription(description);"},{"lineNumber":174,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":175,"author":{"gitID":"crizyli"},"content":"        String startTimeFormat \u003d startTime + \"+08:00\";"},{"lineNumber":176,"author":{"gitID":"crizyli"},"content":"        DateTime startDateTime \u003d new DateTime(startTimeFormat);"},{"lineNumber":177,"author":{"gitID":"crizyli"},"content":"        EventDateTime start \u003d new EventDateTime()"},{"lineNumber":178,"author":{"gitID":"crizyli"},"content":"                .setDateTime(startDateTime)"},{"lineNumber":179,"author":{"gitID":"crizyli"},"content":"                .setTimeZone(\"Asia/Singapore\");"},{"lineNumber":180,"author":{"gitID":"crizyli"},"content":"        event.setStart(start);"},{"lineNumber":181,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":182,"author":{"gitID":"crizyli"},"content":"        String endTimeFormat \u003d endTime + \"+08:00\";"},{"lineNumber":183,"author":{"gitID":"crizyli"},"content":"        DateTime endDateTime \u003d new DateTime(endTimeFormat);"},{"lineNumber":184,"author":{"gitID":"crizyli"},"content":"        EventDateTime end \u003d new EventDateTime()"},{"lineNumber":185,"author":{"gitID":"crizyli"},"content":"                .setDateTime(endDateTime)"},{"lineNumber":186,"author":{"gitID":"crizyli"},"content":"                .setTimeZone(\"Asia/Singapore\");"},{"lineNumber":187,"author":{"gitID":"crizyli"},"content":"        event.setEnd(end);"},{"lineNumber":188,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":189,"author":{"gitID":"crizyli"},"content":"        String[] recurrence \u003d new String[] {\"RRULE:FREQ\u003dDAILY;COUNT\u003d1\"};"},{"lineNumber":190,"author":{"gitID":"crizyli"},"content":"        //event.setRecurrence(Arrays.asList(recurrence));"},{"lineNumber":191,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":192,"author":{"gitID":"crizyli"},"content":"        /*EventAttendee[] attendees \u003d new EventAttendee[] {"},{"lineNumber":193,"author":{"gitID":"crizyli"},"content":"                new EventAttendee().setEmail(\"jjjsss@example.com\"),"},{"lineNumber":194,"author":{"gitID":"crizyli"},"content":"                new EventAttendee().setEmail(\"dzzzssss@example.com\"),"},{"lineNumber":195,"author":{"gitID":"crizyli"},"content":"        };"},{"lineNumber":196,"author":{"gitID":"crizyli"},"content":"        event.setAttendees(Arrays.asList(attendees));"},{"lineNumber":197,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":198,"author":{"gitID":"crizyli"},"content":"        EventReminder[] reminderOverrides \u003d new EventReminder[] {"},{"lineNumber":199,"author":{"gitID":"crizyli"},"content":"                new EventReminder().setMethod(\"email\").setMinutes(24 * 60),"},{"lineNumber":200,"author":{"gitID":"crizyli"},"content":"                new EventReminder().setMethod(\"popup\").setMinutes(10),"},{"lineNumber":201,"author":{"gitID":"crizyli"},"content":"        };"},{"lineNumber":202,"author":{"gitID":"crizyli"},"content":"        Event.Reminders reminders \u003d new Event.Reminders()"},{"lineNumber":203,"author":{"gitID":"crizyli"},"content":"                .setUseDefault(false)"},{"lineNumber":204,"author":{"gitID":"crizyli"},"content":"                .setOverrides(Arrays.asList(reminderOverrides));"},{"lineNumber":205,"author":{"gitID":"crizyli"},"content":"        event.setReminders(reminders);*/"},{"lineNumber":206,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":207,"author":{"gitID":"crizyli"},"content":"        String calendarId \u003d personToAddEvent.getCalendarId();"},{"lineNumber":208,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":209,"author":{"gitID":"crizyli"},"content":"            event \u003d service.events().insert(calendarId, event).execute();"},{"lineNumber":210,"author":{"gitID":"crizyli"},"content":"        } catch (IOException e) {"},{"lineNumber":211,"author":{"gitID":"crizyli"},"content":"            e.printStackTrace();"},{"lineNumber":212,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"IzHoBX"},"content":"        TimetableEntry timetableEntry \u003d new TimetableEntry(calendarId, event.getId(), event.getEnd().toString(),"},{"lineNumber":214,"author":{"gitID":"IzHoBX"},"content":"                model.getPerson(targetIndex.getZeroBased()).getId().toString());"},{"lineNumber":215,"author":{"gitID":"IzHoBX"},"content":"        try {"},{"lineNumber":216,"author":{"gitID":"IzHoBX"},"content":"            model.addTimetableEntry(timetableEntry);"},{"lineNumber":217,"author":{"gitID":"IzHoBX"},"content":"        } catch (DuplicateTimetableEntryException e) {"},{"lineNumber":218,"author":{"gitID":"IzHoBX"},"content":"            throw new CommandException(\"Duplicated event\");"},{"lineNumber":219,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"crizyli"},"content":"        System.out.printf(\"Event created: %s\\n\", event.getHtmlLink());"},{"lineNumber":221,"author":{"gitID":"crizyli"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":222,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":224,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":203,"IzHoBX":11,"-":10}},{"path":"src/main/java/seedu/address/model/person/CalendarId.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":" * Represents a Person\u0027s calendarId"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"public class CalendarId {"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"    public final String value;"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"    public CalendarId(String calendarId) {"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"        this.value \u003d calendarId;"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"    public String toString() {"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"        return value;"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":18}},{"path":"src/main/java/seedu/address/model/person/Review.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s review in the address book."},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidReview(String)}"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Review {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_REVIEW_CONSTRAINTS \u003d"},{"lineNumber":11,"author":{"gitID":"-"},"content":"            \"Person addresses can take any values, and it should not be blank\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String REVIEW_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private static final String DEFAULT_INVALID_REVIEW \u003d \"-\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Constructs a {@code Review} for a new person who hasn\u0027t been assigned a review."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public Review() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        value \u003d DEFAULT_INVALID_REVIEW;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * Constructs a {@code Review}."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @param review A valid review."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public Review(String review) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(isValidReview(review), MESSAGE_REVIEW_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        value \u003d review.trim();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person review."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static boolean isValidReview(String test) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return test.matches(REVIEW_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                || (other instanceof Review // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Review) other).value)); // state check"},{"lineNumber":51,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":53,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"IzHoBX"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitID":"IzHoBX"},"content":"        return value.hashCode();"},{"lineNumber":56,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"IzHoBX":8,"-":49}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":""},{"lineNumber":2,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"    public static final int UNINITIALISED_ID \u003d -1;"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"    private Rating rating;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Review review;"},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"    private int id;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"    private final String calendarId;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * All fields except Rating is not provided"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, String calendarId) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"        this.calendarId \u003d calendarId;"},{"lineNumber":45,"author":{"gitID":"IzHoBX"},"content":"        this.rating \u003d new Rating();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.review \u003d new Review();"},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":"        this.id \u003d UNINITIALISED_ID;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"IzHoBX"},"content":"     * Only rating specified, calendarId not specified"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Note: To remove when test cases are integrated to Calendar feature"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"IzHoBX"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Rating rating, Set\u003cTag\u003e tags) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this.calendarId \u003d \"\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        this.rating \u003d rating;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        this.review \u003d new Review();"},{"lineNumber":65,"author":{"gitID":"IzHoBX"},"content":"        this.id \u003d UNINITIALISED_ID;"},{"lineNumber":66,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"IzHoBX"},"content":"    * All fields specified except id not specified"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    */"},{"lineNumber":71,"author":{"gitID":"crizyli"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Rating rating, Set\u003cTag\u003e tags,"},{"lineNumber":72,"author":{"gitID":"crizyli"},"content":"                  String calendarId) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":80,"author":{"gitID":"crizyli"},"content":"        this.calendarId \u003d calendarId;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        this.rating \u003d rating;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        this.review \u003d new Review();"},{"lineNumber":83,"author":{"gitID":"IzHoBX"},"content":"        this.id \u003d UNINITIALISED_ID;"},{"lineNumber":84,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    * All fields specified"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    */"},{"lineNumber":89,"author":{"gitID":"crizyli"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Rating rating, Set\u003cTag\u003e tags,"},{"lineNumber":90,"author":{"gitID":"IzHoBX"},"content":"                  String calendarId, Integer id) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":98,"author":{"gitID":"crizyli"},"content":"        this.calendarId \u003d calendarId;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        this.rating \u003d rating;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        this.review \u003d new Review();"},{"lineNumber":101,"author":{"gitID":"IzHoBX"},"content":"        this.id \u003d id;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"IzHoBX"},"content":"    public Rating getRating() {"},{"lineNumber":117,"author":{"gitID":"IzHoBX"},"content":"        return rating;"},{"lineNumber":118,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public Review getReview() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return review;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"IzHoBX"},"content":"    public String getRatingDisplay() {"},{"lineNumber":125,"author":{"gitID":"IzHoBX"},"content":"        return rating.getRatingDisplay();"},{"lineNumber":126,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"IzHoBX"},"content":"    public void setId(int id) {"},{"lineNumber":133,"author":{"gitID":"IzHoBX"},"content":"        this.id \u003d id;"},{"lineNumber":134,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":136,"author":{"gitID":"IzHoBX"},"content":"    public Integer getId() {"},{"lineNumber":137,"author":{"gitID":"IzHoBX"},"content":"        return id;"},{"lineNumber":138,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":140,"author":{"gitID":"crizyli"},"content":"    public String getCalendarId() {"},{"lineNumber":141,"author":{"gitID":"crizyli"},"content":"        return calendarId;"},{"lineNumber":142,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"crizyli"},"content":"    public String getPersonUrl() {"},{"lineNumber":153,"author":{"gitID":"crizyli"},"content":"        return \"https://calendar.google.com/calendar/embed?src\u003d\""},{"lineNumber":154,"author":{"gitID":"crizyli"},"content":"                + calendarId.replaceAll(\"@\", \"%40\") + \"\u0026ctz\u003dAsia%2FSingapore\";"},{"lineNumber":155,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":157,"author":{"gitID":"IzHoBX"},"content":"    public void setRating(String newRating) {"},{"lineNumber":158,"author":{"gitID":"IzHoBX"},"content":"        rating \u003d new Rating(newRating);"},{"lineNumber":159,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    public void setReview(Review review) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        this.review \u003d review;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":177,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":179,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":192,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":193,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":194,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":195,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":196,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":197,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":198,"author":{"gitID":"IzHoBX"},"content":"                .append(\" Rating: \")"},{"lineNumber":199,"author":{"gitID":"IzHoBX"},"content":"                .append(getRatingDisplay())"},{"lineNumber":200,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":205,"author":{"gitID":"IzHoBX"},"content":"    public boolean isInitialized() {"},{"lineNumber":206,"author":{"gitID":"IzHoBX"},"content":"        return id !\u003d UNINITIALISED_ID;"},{"lineNumber":207,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":17,"IzHoBX":42,"-":149}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":"import java.util.LinkedList;"},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.timetableentry.TimetableEntry;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"     * Returns an unmodifiable view of the timetable entry list."},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"    LinkedList\u003cTimetableEntry\u003e getTimetableEntriesList();"},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"    int getNextId();"},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"IzHoBX":11,"-":24}},{"path":"src/main/java/seedu/address/logic/commands/ReviewCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Review;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Updates the review of an existing person in the address book."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class ReviewCommand extends UndoableCommand {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"review\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Review the person identified \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + \"REVIEW \\n\""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + \"This person is very hardworking\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_REVIEW_PERSON_SUCCESS \u003d \"Reviewed Person: %1$s\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"Both INDEX and REVIEW must be provided.\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"    private final EditCommand.EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public ReviewCommand(Index index, EditCommand.EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":51,"author":{"gitID":"IzHoBX"},"content":"        this.editPersonDescriptor \u003d new EditCommand.EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_REVIEW_PERSON_SUCCESS, editedPerson));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"IzHoBX"},"content":"    private static Person createEditedPerson(Person personToEdit,"},{"lineNumber":84,"author":{"gitID":"IzHoBX"},"content":"                                             EditCommand.EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":85,"author":{"gitID":"IzHoBX"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":86,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        Review updatedReview \u003d editPersonDescriptor.getReview().orElse(new Review());"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Person person \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                personToEdit.getAddress(), personToEdit.getRating(), personToEdit.getTags());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        person.setReview(updatedReview);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return person;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        if (!(other instanceof ReviewCommand)) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        ReviewCommand e \u003d (ReviewCommand) other;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":12,"-":102}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"import java.util.LinkedList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.timetableentry.TimetableEntry;"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.timetableentry.exceptions.DuplicateTimetableEntryException;"},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.timetableentry.exceptions.TimetableEntryNotFoundException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"    private LinkedList\u003cTimetableEntry\u003e timetableEntries;"},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":"    private int nextId;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":46,"author":{"gitID":"IzHoBX"},"content":"        timetableEntries \u003d new LinkedList\u003c\u003e();"},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":"        nextId \u003d 0;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"IzHoBX"},"content":"    public void setTimetableEntriesList(LinkedList\u003cTimetableEntry\u003e timetableEntriesList) {"},{"lineNumber":71,"author":{"gitID":"IzHoBX"},"content":"        this.timetableEntries \u003d timetableEntriesList;"},{"lineNumber":72,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":83,"author":{"gitID":"IzHoBX"},"content":"        setTimetableEntriesList(newData.getTimetableEntriesList());"},{"lineNumber":84,"author":{"gitID":"IzHoBX"},"content":"        this.nextId \u003d newData.getNextId();"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":106,"author":{"gitID":"IzHoBX"},"content":"        if (!person.isInitialized()) {"},{"lineNumber":107,"author":{"gitID":"IzHoBX"},"content":"            person.setId(nextId);"},{"lineNumber":108,"author":{"gitID":"IzHoBX"},"content":"            nextId++;"},{"lineNumber":109,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":131,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":138,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":149,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        Person toReturn \u003d new Person("},{"lineNumber":152,"author":{"gitID":"IzHoBX"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(), person.getRating(),"},{"lineNumber":153,"author":{"gitID":"IzHoBX"},"content":"                correctTagReferences, person.getCalendarId(), person.getId());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        toReturn.setReview(person.getReview());"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        return toReturn;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"IzHoBX"},"content":"    //// timetable entry level operations"},{"lineNumber":177,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"IzHoBX"},"content":"     * Adds a timetable entry to the address book."},{"lineNumber":179,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"IzHoBX"},"content":"    public void addTimetableEntry(TimetableEntry timetableEntry) throws DuplicateTimetableEntryException {"},{"lineNumber":181,"author":{"gitID":"IzHoBX"},"content":"        if (timetableEntries.contains(timetableEntry)) {"},{"lineNumber":182,"author":{"gitID":"IzHoBX"},"content":"            throw new DuplicateTimetableEntryException();"},{"lineNumber":183,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"IzHoBX"},"content":"        timetableEntries.add(timetableEntry);"},{"lineNumber":185,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":187,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"IzHoBX"},"content":"     * Removes a timetable entry to the address book."},{"lineNumber":189,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"IzHoBX"},"content":"    public void removeTimetableEntry(String timetableEntryId) throws TimetableEntryNotFoundException {"},{"lineNumber":191,"author":{"gitID":"IzHoBX"},"content":"        boolean found \u003d false;"},{"lineNumber":192,"author":{"gitID":"IzHoBX"},"content":"        for (TimetableEntry t: timetableEntries) {"},{"lineNumber":193,"author":{"gitID":"IzHoBX"},"content":"            if (t.getId().equals(timetableEntryId)) {"},{"lineNumber":194,"author":{"gitID":"IzHoBX"},"content":"                timetableEntries.remove(t);"},{"lineNumber":195,"author":{"gitID":"IzHoBX"},"content":"                found \u003d true;"},{"lineNumber":196,"author":{"gitID":"IzHoBX"},"content":"            }"},{"lineNumber":197,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"IzHoBX"},"content":"        if (!found) {"},{"lineNumber":199,"author":{"gitID":"IzHoBX"},"content":"            throw new TimetableEntryNotFoundException();"},{"lineNumber":200,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":207,"author":{"gitID":"IzHoBX"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags, \""},{"lineNumber":208,"author":{"gitID":"IzHoBX"},"content":"                + timetableEntries.size() + \" timetable entries\";"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":223,"author":{"gitID":"IzHoBX"},"content":"    public LinkedList\u003cTimetableEntry\u003e getTimetableEntriesList() {"},{"lineNumber":224,"author":{"gitID":"IzHoBX"},"content":"        return timetableEntries;"},{"lineNumber":225,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":230,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":231,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":232,"author":{"gitID":"IzHoBX"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags))"},{"lineNumber":233,"author":{"gitID":"IzHoBX"},"content":"                \u0026\u0026 this.timetableEntries.equals(((AddressBook) other).timetableEntries);"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":242,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":243,"author":{"gitID":"IzHoBX"},"content":"    public int getNextId() {"},{"lineNumber":244,"author":{"gitID":"IzHoBX"},"content":"        return nextId;"},{"lineNumber":245,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":247,"author":{"gitID":"IzHoBX"},"content":"    public void setNextId(int nextId) {"},{"lineNumber":248,"author":{"gitID":"IzHoBX"},"content":"        this.nextId \u003d nextId;"},{"lineNumber":249,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":251,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":252,"author":{"gitID":"Yoochard"},"content":"    /** sort the existing persons in specific field*/"},{"lineNumber":253,"author":{"gitID":"Yoochard"},"content":"    public void sort(String field) {"},{"lineNumber":254,"author":{"gitID":"Yoochard"},"content":"        persons.sort(field);"},{"lineNumber":255,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":4,"IzHoBX":67,"-":185}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.events.model.TimetableEntryAddedEvent;"},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.events.model.TimetableEntryDeletedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.timetableentry.TimetableEntry;"},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.timetableentry.exceptions.DuplicateTimetableEntryException;"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.timetableentry.exceptions.TimetableEntryNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":26,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"IzHoBX"},"content":"    public synchronized void deleteTimetableEntry(String id) throws TimetableEntryNotFoundException {"},{"lineNumber":75,"author":{"gitID":"IzHoBX"},"content":"        addressBook.removeTimetableEntry(id);"},{"lineNumber":76,"author":{"gitID":"IzHoBX"},"content":"        indicateTimetableEntriesDeleted(id);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"IzHoBX"},"content":"    private void indicateTimetableEntriesDeleted(String id) {"},{"lineNumber":81,"author":{"gitID":"IzHoBX"},"content":"        raise(new TimetableEntryDeletedEvent(id));"},{"lineNumber":82,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":84,"author":{"gitID":"IzHoBX"},"content":"    private void indicateTimetableEntryAdded(TimetableEntry e) {"},{"lineNumber":85,"author":{"gitID":"IzHoBX"},"content":"        raise(new TimetableEntryAddedEvent(e));"},{"lineNumber":86,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":88,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":89,"author":{"gitID":"IzHoBX"},"content":"    public void addTimetableEntry(TimetableEntry e) throws DuplicateTimetableEntryException {"},{"lineNumber":90,"author":{"gitID":"IzHoBX"},"content":"        addressBook.addTimetableEntry(e);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":92,"author":{"gitID":"IzHoBX"},"content":"        indicateTimetableEntryAdded(e);"},{"lineNumber":93,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"IzHoBX"},"content":"    public Person getPerson(int index) throws IndexOutOfBoundsException {"},{"lineNumber":113,"author":{"gitID":"IzHoBX"},"content":"        return addressBook.getPersonList().get(index);"},{"lineNumber":114,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"Yoochard"},"content":"    @Override"},{"lineNumber":134,"author":{"gitID":"Yoochard"},"content":"    public void sort(String field) {"},{"lineNumber":135,"author":{"gitID":"Yoochard"},"content":"        addressBook.sort(field);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":3,"IzHoBX":28,"-":127}},{"path":"src/main/java/seedu/address/model/person/Rating.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":"import com.vdurmont.emoji.EmojiParser;"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":" * Represents a Person\u0027s rating in the address book."},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRating(String)}"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"public class Rating {"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"    public static final String MESSAGE_RATING_CONSTRAINTS \u003d \"Rating must be 1, 2, 3, 4 or 5\";"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"    public static final String RATING_VALIDATION_REGEX \u003d \"-?\\\\d*\";"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"    public static final int DEFAULT_NULL_RATING \u003d -1;"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":"    public static final String INVALID_RATING_DISPLAY \u003d \"-\";"},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"    public static final String RATING_DISPLAY \u003d \":star2: \";"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"    public final Integer value;"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"     * Constructs a {@code Rating} for a new person who hasn\u0027t been assigned a rating."},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":"    public Rating() {"},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":"        value \u003d DEFAULT_NULL_RATING;"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"     * Constructs a {@code Rating}."},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":"     *"},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"     * @param rating A valid rating."},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"    public Rating(String rating) {"},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"        checkArgument(isValidRating(rating), MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":"        value \u003d Integer.parseInt(rating);"},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"     * Returns true if a given string is a valid person rating."},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"    public static boolean isValidRating(String test) {"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":"        return test.matches(RATING_VALIDATION_REGEX);"},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":44,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"IzHoBX"},"content":"     * Returns true if a given string is a valid input of person rating."},{"lineNumber":46,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":"    public static boolean isValidInputRating(int test) {"},{"lineNumber":48,"author":{"gitID":"IzHoBX"},"content":"        return test \u003e 0 \u0026\u0026 test \u003c\u003d 5;"},{"lineNumber":49,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":51,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"IzHoBX"},"content":"    public String toString() {"},{"lineNumber":53,"author":{"gitID":"IzHoBX"},"content":"        return value.toString();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":59,"author":{"gitID":"IzHoBX"},"content":"                || ((other instanceof Rating) // instanceof handles nulls"},{"lineNumber":60,"author":{"gitID":"IzHoBX"},"content":"                \u0026\u0026 this.value \u003d\u003d ((Rating) other).value); // state check"},{"lineNumber":61,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":63,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"IzHoBX"},"content":"    public int hashCode() {"},{"lineNumber":65,"author":{"gitID":"IzHoBX"},"content":"        return value.hashCode();"},{"lineNumber":66,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":68,"author":{"gitID":"IzHoBX"},"content":"    public String getRatingDisplay() {"},{"lineNumber":69,"author":{"gitID":"IzHoBX"},"content":"        if (value \u003d\u003d -1) {"},{"lineNumber":70,"author":{"gitID":"IzHoBX"},"content":"            return INVALID_RATING_DISPLAY;"},{"lineNumber":71,"author":{"gitID":"IzHoBX"},"content":"        } else {"},{"lineNumber":72,"author":{"gitID":"IzHoBX"},"content":"            return convertRatingToStars(value);"},{"lineNumber":73,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":76,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"IzHoBX"},"content":"     * Converts numerical rating into respective number of stars"},{"lineNumber":78,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"IzHoBX"},"content":"    private String convertRatingToStars(int rating) {"},{"lineNumber":80,"author":{"gitID":"IzHoBX"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":81,"author":{"gitID":"IzHoBX"},"content":"        while (rating-- \u003e 0) {"},{"lineNumber":82,"author":{"gitID":"IzHoBX"},"content":"            sb.append(RATING_DISPLAY);"},{"lineNumber":83,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"IzHoBX"},"content":"        return EmojiParser.parseToUnicode(sb.toString());"},{"lineNumber":85,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":79,"-":7}},{"path":"src/main/java/seedu/address/model/timetableentry/TimetableEntryTime.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.model.timetableentry;"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":" * Container for different time fields"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"public class TimetableEntryTime {"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"    private int year;"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":"    private int month;"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"    private int date;"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":"    private int hour;"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"    private int minute;"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"    private int seconds;"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"    public TimetableEntryTime(int year, int month, int date, int hour, int minute, int seconds) {"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":"        this.year \u003d year;"},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"        this.month \u003d month;"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"        this.date \u003d date;"},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"        this.hour \u003d hour;"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"        this.minute \u003d minute;"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"        this.seconds \u003d seconds;"},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":"    public int getYear() {"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"        return year;"},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"    public int getMonth() {"},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":"        return month;"},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"    public int getDate() {"},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"        return date;"},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":"    public int getHour() {"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"        return hour;"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"    public int getMinute() {"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":"        return minute;"},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":44,"author":{"gitID":"IzHoBX"},"content":"    public int getSeconds() {"},{"lineNumber":45,"author":{"gitID":"IzHoBX"},"content":"        return seconds;"},{"lineNumber":46,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":47}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.timetableentry.TimetableEntry;"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.timetableentry.exceptions.DuplicateTimetableEntryException;"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.timetableentry.exceptions.TimetableEntryNotFoundException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"    /** Returns a person given an index*/"},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"    Person getPerson(int index) throws IndexOutOfBoundsException;"},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":"    /** Deletes a timetable entry given its id. */"},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":"    void deleteTimetableEntry(String id) throws TimetableEntryNotFoundException;"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"    /** Adds the given person */"},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"    void addTimetableEntry(TimetableEntry e) throws DuplicateTimetableEntryException;"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":41,"author":{"gitID":"Yoochard"},"content":"    /** Sort existing employees by any field in alphabetical order */"},{"lineNumber":42,"author":{"gitID":"Yoochard"},"content":"    void sort(String field);"},{"lineNumber":43,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":3,"IzHoBX":12,"-":48}},{"path":"src/main/java/seedu/address/model/timetableentry/TimetableEntry.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.model.timetableentry;"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":" * Represents a timetable entry added to Employees Tracker"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"public class TimetableEntry {"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"    private String calendarId;"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":"    private String id;"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"    private String endDate;"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":"    private String ownerId;"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"    public TimetableEntry(String calendarId, String id, String endDate, String ownerId) {"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"        this.calendarId \u003d calendarId;"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"        this.id \u003d id;"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":"        this.endDate \u003d endDate;"},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"        this.ownerId \u003d ownerId;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"    public String getCalendarId() {"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"        return calendarId;"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":"    public String getId() {"},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":"        return id;"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"    public String getEndDate() {"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"        return endDate;"},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"    public String getOwnerId() {"},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"        return ownerId;"},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"crizyli":4,"IzHoBX":28,"-":2}},{"path":"src/main/java/seedu/address/model/timetableentry/exceptions/DuplicateTimetableEntryException.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.model.timetableentry.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Signals that the operation will result in duplicate Person objects."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":"public class DuplicateTimetableEntryException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"    public DuplicateTimetableEntryException() {"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":"        super(\"Operation would result in duplicate timetable entries\");"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":6,"-":6}},{"path":"src/main/java/seedu/address/model/timetableentry/exceptions/TimetableEntryNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.model.timetableentry.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Signals that the operation is unable to find the specified person."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"public class TimetableEntryNotFoundException extends Exception {}"}],"authorContributionMap":{"IzHoBX":2,"-":4}}]
