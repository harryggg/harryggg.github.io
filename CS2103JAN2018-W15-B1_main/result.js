var resultJson = [{"path":"src/test/java/seedu/address/logic/parser/UnlockCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.UnlockCommand;"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":" * Test scope: similar to {@code UnlockCommandParserTest}."},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":" * @see UnlockCommandParserTest"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"public class UnlockCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"    private UnlockCommandParser parser \u003d new UnlockCommandParser();"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"    public void parse_validArgs_returnsLockCommand() {"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"        // no agrs provided command"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"        assertParseSuccess(parser, \"  \", new UnlockCommand(\"nopassword\"));"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"        // agrs provided command"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"        assertParseSuccess(parser, \" 1234\", new UnlockCommand(\"1234\"));"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":21,"-":4}},{"path":"src/test/java/seedu/address/logic/parser/LockCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.LockCommand;"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":" * Test scope: similar to {@code LockCommandParserTest}."},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":" * @see LockCommandParserTest"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"public class LockCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"    private LockCommandParser parser \u003d new LockCommandParser();"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"    public void parse_validArgs_returnsLockCommand() {"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"        // no agrs provided command"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"        assertParseSuccess(parser, \"\", new LockCommand());"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"        // agrs provided command"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"        assertParseSuccess(parser, \"1234\", new LockCommand(\"1234\"));"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":21,"-":4}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"    public static final String VALID_RATING_AMY \u003d \"-1\";"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":"    public static final String VALID_RATING_BOB \u003d \"-1\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":102,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"IzHoBX":2,"-":156}},{"path":"src/test/java/seedu/address/logic/commands/UnlockCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":" * Contains integration tests (interaction with the Model) for {@code UnlockCommand}."},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"public class UnlockCommandTest {"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"        UnlockCommand firstUnlockCommand \u003d new UnlockCommand(\"nopassword\");"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"        UnlockCommand secondUnlockCommand \u003d new UnlockCommand(\"12345\");"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"        // same object -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"        assertTrue(firstUnlockCommand.equals(firstUnlockCommand));"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"        // same values -\u003e returns true"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"        UnlockCommand secondUnlockCommandcopy \u003d new UnlockCommand(\"12345\");"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"        assertTrue(secondUnlockCommand.equals(secondUnlockCommandcopy));"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"        // different types -\u003e returns false"},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"        assertFalse(firstUnlockCommand.equals(1));"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"        // null -\u003e returns false"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"        assertFalse(firstUnlockCommand.equals(null));"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":"        // different value -\u003e returns false"},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"        assertFalse(firstUnlockCommand.equals(secondUnlockCommand));"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"    public void unlockSuccess() {"},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":"        LockCommand testLockCommand \u003d new LockCommand(\"1234\");"},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"        testLockCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"        testLockCommand.execute();"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":"        UnlockCommand testUnlockCommand \u003d new UnlockCommand(\"1234\");"},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":"        testUnlockCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":"        String expectedMessage \u003d UnlockCommand.MESSAGE_SUCCESS;"},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":"        CommandResult commandResult \u003d testUnlockCommand.execute();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":58,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":60,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"crizyli"},"content":"    public void unlockFail() {"},{"lineNumber":62,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":63,"author":{"gitID":"crizyli"},"content":"        LockCommand testLockCommand \u003d new LockCommand(\"123\");"},{"lineNumber":64,"author":{"gitID":"crizyli"},"content":"        testLockCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":65,"author":{"gitID":"crizyli"},"content":"        testLockCommand.execute();"},{"lineNumber":66,"author":{"gitID":"crizyli"},"content":"        UnlockCommand testUnlockCommand \u003d new UnlockCommand(\"1234\");"},{"lineNumber":67,"author":{"gitID":"crizyli"},"content":"        testUnlockCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":68,"author":{"gitID":"crizyli"},"content":"        String expectedMessage \u003d UnlockCommand.MESSAGE_INCORRECT_PASSWORD;"},{"lineNumber":69,"author":{"gitID":"crizyli"},"content":"        CommandResult commandResult \u003d testUnlockCommand.execute();"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":72,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":74,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":54,"-":20}},{"path":"src/test/java/seedu/address/logic/commands/LockCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":" * Contains integration tests (interaction with the Model) for {@code LockCommand}."},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"public class LockCommandTest {"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"        LockCommand firstLockCommand \u003d new LockCommand();"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"        LockCommand secondLockCommand \u003d new LockCommand(\"1234\");"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"        LockCommand thirdLockCommand \u003d new LockCommand(\"123456\");"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"        // same object -\u003e returns true"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"        assertTrue(firstLockCommand.equals(firstLockCommand));"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"        // same values -\u003e returns true"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"        LockCommand secondLockCommandcopy \u003d new LockCommand(\"1234\");"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"        assertTrue(secondLockCommand.equals(secondLockCommandcopy));"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"        // different types -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"        assertFalse(firstLockCommand.equals(1));"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"        // null -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":"        assertFalse(firstLockCommand.equals(null));"},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"        // different value -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"        assertFalse(thirdLockCommand.equals(secondLockCommand));"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":"    public void lockSuccess() {"},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"        LockCommand testLockCommand \u003d new LockCommand(\"1234\");"},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"        testLockCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":"        String expectedMessage \u003d LockCommand.MESSAGE_SUCCESS;"},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":"        CommandResult commandResult \u003d testLockCommand.execute();"},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":56,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":58,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":59,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":60,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":44,"-":16}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"Yoochard"},"content":"        @Override"},{"lineNumber":133,"author":{"gitID":"Yoochard"},"content":"        public void sort(String field) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":135,"author":{"gitID":"Yoochard"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":4,"-":172}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"    public static final String DEFAULT_RATING \u003d \"-1\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"    private Rating rating;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"        rating \u003d new Rating(DEFAULT_RATING);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":51,"author":{"gitID":"IzHoBX"},"content":"        rating \u003d personToCopy.getRating();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"IzHoBX"},"content":"     * Sets the {@code Rating} of the {@code Person} that we are building."},{"lineNumber":97,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"IzHoBX"},"content":"    public PersonBuilder withRating(String rating) {"},{"lineNumber":99,"author":{"gitID":"IzHoBX"},"content":"        this.rating \u003d new Rating(rating);"},{"lineNumber":100,"author":{"gitID":"IzHoBX"},"content":"        return this;"},{"lineNumber":101,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":104,"author":{"gitID":"IzHoBX"},"content":"        return new Person(name, phone, email, address, rating, tags);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"IzHoBX":14,"-":93}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_AMY;"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"            .withTags(\"friends\").withRating(\"-1\").build();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":"            .withTags(\"owesMoney\", \"friends\").withRating(\"-1\").build();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withRating(\"-1\").build();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withRating(\"-1\").build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withRating(\"-1\").build();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":44,"author":{"gitID":"IzHoBX"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withRating(\"-1\").build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":46,"author":{"gitID":"IzHoBX"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withRating(\"-1\").build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":50,"author":{"gitID":"IzHoBX"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withRating(\"-1\").build();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":52,"author":{"gitID":"IzHoBX"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withRating(\"-1\").build();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":56,"author":{"gitID":"IzHoBX"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withRating(VALID_RATING_AMY).withTags"},{"lineNumber":57,"author":{"gitID":"IzHoBX"},"content":"                    (VALID_TAG_FRIEND).build();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":59,"author":{"gitID":"IzHoBX"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withRating(VALID_RATING_BOB)"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"IzHoBX":14,"-":70}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"    private Label rating;"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":52,"author":{"gitID":"IzHoBX"},"content":"        rating.setText(person.getRatingDisplay());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"IzHoBX":3,"-":70}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.LockCommand;"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.RateCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":23,"author":{"gitID":"Yoochard"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.UnlockCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"IzHoBX"},"content":"        case RateCommand.COMMAND_WORD:"},{"lineNumber":62,"author":{"gitID":"IzHoBX"},"content":"            return new RateCommandParser().parse(arguments);"},{"lineNumber":63,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"Yoochard"},"content":"        case SortCommand.COMMAND_WORD:"},{"lineNumber":95,"author":{"gitID":"Yoochard"},"content":"            return new SortCommandParser().parse(arguments);"},{"lineNumber":96,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":97,"author":{"gitID":"crizyli"},"content":"        case LockCommand.COMMAND_WORD:"},{"lineNumber":98,"author":{"gitID":"crizyli"},"content":"            return new LockCommandParser().parse(arguments);"},{"lineNumber":99,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":100,"author":{"gitID":"crizyli"},"content":"        case UnlockCommand.COMMAND_WORD:"},{"lineNumber":101,"author":{"gitID":"crizyli"},"content":"            return new UnlockCommandParser().parse(arguments);"},{"lineNumber":102,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":8,"Yoochard":4,"IzHoBX":4,"-":92}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"    public static final Prefix PREFIX_RATING \u003d new Prefix(\"r/\");"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"IzHoBX":1,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":22,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"IzHoBX"},"content":"     * Parses a {@code String rating} into an {@code Rating}."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":123,"author":{"gitID":"IzHoBX"},"content":"     * @throws IllegalValueException if the given {@code rating} is invalid."},{"lineNumber":124,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"IzHoBX"},"content":"    public static Rating parseRating(String rating) throws IllegalValueException {"},{"lineNumber":126,"author":{"gitID":"IzHoBX"},"content":"        requireNonNull(rating);"},{"lineNumber":127,"author":{"gitID":"IzHoBX"},"content":"        String trimmedRating \u003d rating.trim();"},{"lineNumber":128,"author":{"gitID":"IzHoBX"},"content":"        if (!Rating.isValidRating(trimmedRating)) {"},{"lineNumber":129,"author":{"gitID":"IzHoBX"},"content":"            throw new IllegalValueException(Rating.MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":130,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"IzHoBX"},"content":"        return new Rating(trimmedRating);"},{"lineNumber":132,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":134,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"IzHoBX"},"content":"     * Parses a {@code Optional\u003cString\u003e value} into an {@code Optional\u003cRating\u003e} if {@code address} is present."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"IzHoBX"},"content":"    public static Optional\u003cRating\u003e parseRating(Optional\u003cString\u003e value) throws IllegalValueException {"},{"lineNumber":139,"author":{"gitID":"IzHoBX"},"content":"        requireNonNull(value);"},{"lineNumber":140,"author":{"gitID":"IzHoBX"},"content":"        return value.isPresent() ? Optional.of(parseRating(value.get())) : Optional.empty();"},{"lineNumber":141,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":172,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"IzHoBX":21,"-":172}},{"path":"src/main/java/seedu/address/logic/parser/SortCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"Yoochard"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":5,"author":{"gitID":"Yoochard"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"Yoochard"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"Yoochard"},"content":" * By Yang Yuqing"},{"lineNumber":10,"author":{"gitID":"Yoochard"},"content":" * Parses input arguments and creates a new SortCommand object"},{"lineNumber":11,"author":{"gitID":"Yoochard"},"content":" */"},{"lineNumber":12,"author":{"gitID":"Yoochard"},"content":"public class SortCommandParser implements Parser\u003cSortCommand\u003e {"},{"lineNumber":13,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"Yoochard"},"content":"     * Parses the given {@code String} of arguments in the context of the Sort"},{"lineNumber":15,"author":{"gitID":"Yoochard"},"content":"     * and returns an SortCommand object for execution."},{"lineNumber":16,"author":{"gitID":"Yoochard"},"content":"     * @throws ParseException if the input field does not conform the expected format"},{"lineNumber":17,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"Yoochard"},"content":"    public SortCommand parse(String args) throws ParseException {"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":21,"author":{"gitID":"Yoochard"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":22,"author":{"gitID":"Yoochard"},"content":"        }"},{"lineNumber":23,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":24,"author":{"gitID":"Yoochard"},"content":"        return new SortCommand(trimmedArgs);"},{"lineNumber":25,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Yoochard"},"content":"}"}],"authorContributionMap":{"crizyli":2,"Yoochard":21,"-":3}},{"path":"src/main/java/seedu/address/logic/parser/UnlockCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.UnlockCommand;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":" * Parses arguments for the UnlockCommand\u0027"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"public class UnlockCommandParser implements Parser\u003cUnlockCommand\u003e {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":13,"author":{"gitID":"-"},"content":"     * and returns an FindCommand object for execution."},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"    public UnlockCommand parse(String args) throws ParseException {"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"        return trimmedArgs.isEmpty() ? new UnlockCommand(\"nopassword\") : new UnlockCommand(trimmedArgs);"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":11,"IzHoBX":3,"-":7}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"                        PREFIX_RATING, PREFIX_TAG);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"},{"lineNumber":54,"author":{"gitID":"IzHoBX"},"content":"            ParserUtil.parseRating(argMultimap.getValue(PREFIX_RATING)).ifPresent(editPersonDescriptor::setRating);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"IzHoBX":4,"-":78}},{"path":"src/main/java/seedu/address/logic/commands/SortCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"Yoochard"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":3,"author":{"gitID":"Yoochard"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":4,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":5,"author":{"gitID":"Yoochard"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"Yoochard"},"content":" * By Yang Yuqing"},{"lineNumber":7,"author":{"gitID":"Yoochard"},"content":" * Sorts the employees by any field"},{"lineNumber":8,"author":{"gitID":"Yoochard"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":10,"author":{"gitID":"Yoochard"},"content":"public class SortCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":12,"author":{"gitID":"Yoochard"},"content":"    public static final String COMMAND_WORD \u003d \"sort\";"},{"lineNumber":13,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":14,"author":{"gitID":"Yoochard"},"content":"    public static final String[] SORT_FIELD_LIST \u003d {\"name\", \"phone\", \"email\", \"address\", \"tag\", \"rate\"};"},{"lineNumber":15,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":16,"author":{"gitID":"Yoochard"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts the list of employees by a specific field  \""},{"lineNumber":17,"author":{"gitID":"Yoochard"},"content":"            + \"Parameters: FIELD\\n\""},{"lineNumber":18,"author":{"gitID":"Yoochard"},"content":"            + \"Example: \" + COMMAND_WORD + \" name\";"},{"lineNumber":19,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":20,"author":{"gitID":"Yoochard"},"content":"    public static final String MESSAGE_SORT_EMPLOYEE_SUCCESS \u003d \"Employees has been sorted.\";"},{"lineNumber":21,"author":{"gitID":"Yoochard"},"content":"    public static final String MESSAGE_SORT_INVALID_FIELD \u003d \"Your field is invalid, please check again.\";"},{"lineNumber":22,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":23,"author":{"gitID":"Yoochard"},"content":"    private final String sortField;"},{"lineNumber":24,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":25,"author":{"gitID":"Yoochard"},"content":"    public SortCommand(String field) {"},{"lineNumber":26,"author":{"gitID":"Yoochard"},"content":"        this.sortField \u003d field;"},{"lineNumber":27,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":29,"author":{"gitID":"Yoochard"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"Yoochard"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":31,"author":{"gitID":"Yoochard"},"content":"        switch (sortField) {"},{"lineNumber":32,"author":{"gitID":"Yoochard"},"content":"        case \"name\":"},{"lineNumber":33,"author":{"gitID":"Yoochard"},"content":"        case \"phone\":"},{"lineNumber":34,"author":{"gitID":"Yoochard"},"content":"        case \"email\":"},{"lineNumber":35,"author":{"gitID":"Yoochard"},"content":"        case \"address\":"},{"lineNumber":36,"author":{"gitID":"Yoochard"},"content":"        case \"tag\":"},{"lineNumber":37,"author":{"gitID":"Yoochard"},"content":"        case \"rate\":"},{"lineNumber":38,"author":{"gitID":"Yoochard"},"content":"            model.sort(sortField);"},{"lineNumber":39,"author":{"gitID":"Yoochard"},"content":"            break;"},{"lineNumber":40,"author":{"gitID":"Yoochard"},"content":"        default:"},{"lineNumber":41,"author":{"gitID":"Yoochard"},"content":"            throw new CommandException(MESSAGE_SORT_INVALID_FIELD);"},{"lineNumber":42,"author":{"gitID":"Yoochard"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"Yoochard"},"content":"        return new CommandResult(MESSAGE_SORT_EMPLOYEE_SUCCESS);"},{"lineNumber":44,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Yoochard"},"content":"}"}],"authorContributionMap":{"Yoochard":45}},{"path":"src/main/java/seedu/address/logic/commands/LockCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.person.HideAllPersonPredicate;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":" * Locks the app with a password"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":" * */"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"public class LockCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"    public static final String COMMAND_WORD \u003d \"lock\";"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lock the address book. \";"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been locked!\";"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"    private String password;"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"    private final HideAllPersonPredicate predicate \u003d new HideAllPersonPredicate();"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"    public LockCommand() {"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"        this.password \u003d null;"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"    public LockCommand(String keyword) {"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"        this.password \u003d keyword;"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"    public CommandResult execute() {"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"        LogicManager.lock();"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"        if (this.password !\u003d null) {"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"            LogicManager.setPassword(this.password);"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"        } else {"},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"            LogicManager.setPassword(\"nopassword\");"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":"    public String getPassword() {"},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"        return password;"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":"        if (this.password \u003d\u003d null \u0026\u0026 other instanceof LockCommand \u0026\u0026 ((LockCommand) other).getPassword() \u003d\u003d null) {"},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"            return true;"},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":"        if (this.password \u003d\u003d null \u0026\u0026 other instanceof LockCommand \u0026\u0026 ((LockCommand) other).getPassword() !\u003d null) {"},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":"            return false;"},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":57,"author":{"gitID":"crizyli"},"content":"        if (this.password !\u003d null \u0026\u0026 other instanceof LockCommand \u0026\u0026 ((LockCommand) other).getPassword() \u003d\u003d null) {"},{"lineNumber":58,"author":{"gitID":"crizyli"},"content":"            return false;"},{"lineNumber":59,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":61,"author":{"gitID":"crizyli"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":62,"author":{"gitID":"crizyli"},"content":"                || (other instanceof LockCommand // instanceof handles nulls"},{"lineNumber":63,"author":{"gitID":"crizyli"},"content":"                \u0026\u0026 this.password.compareTo(((LockCommand) other).getPassword()) \u003d\u003d 0); // state check"},{"lineNumber":64,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":62,"IzHoBX":3}},{"path":"src/main/java/seedu/address/logic/parser/LockCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.LockCommand;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":" * Parse arguments for LockCommand"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"public class LockCommandParser implements Parser\u003cLockCommand\u003e {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":13,"author":{"gitID":"-"},"content":"     * and returns an FindCommand object for execution."},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"    public LockCommand parse(String args) throws ParseException {"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"        return trimmedArgs.isEmpty() ? new LockCommand() : new LockCommand(trimmedArgs);"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":11,"IzHoBX":3,"-":8}},{"path":"src/main/java/seedu/address/logic/parser/RateCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.RateCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":" * Parses input arguments and creates a new RateCommand object"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":"public class RateCommandParser implements Parser\u003cRateCommand\u003e {"},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"     * Parses the given {@code String} of arguments in the context of the RateCommand"},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"     * and returns an RateCommand object for execution."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"    public RateCommand parse(String args) throws ParseException {"},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"        requireNonNull(args);"},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"        Scanner sc \u003d new Scanner(args);"},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"        if (!sc.hasNextInt()) {"},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RateCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":"        Index index;"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"            index \u003d ParserUtil.parseIndex(((Integer) sc.nextInt()).toString());"},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RateCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":"        if (!sc.hasNextInt()) {"},{"lineNumber":44,"author":{"gitID":"IzHoBX"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RateCommand.MESSAGE_USAGE));"},{"lineNumber":45,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"IzHoBX"},"content":"        Integer rating \u003d sc.nextInt();"},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":48,"author":{"gitID":"IzHoBX"},"content":"        RateCommand.EditPersonDescriptor editPersonDescriptor \u003d new RateCommand.EditPersonDescriptor();"},{"lineNumber":49,"author":{"gitID":"IzHoBX"},"content":"        editPersonDescriptor.setRating(new Rating(rating.toString()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"IzHoBX"},"content":"        return new RateCommand(index, editPersonDescriptor);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"IzHoBX":33,"-":39}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.UnlockCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"    private static boolean isLocked \u003d false;"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"    private static String password;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"        isLocked \u003d false;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"            Command command;"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":"            CommandResult result \u003d new CommandResult(\"\");"},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":"            if (isLocked) {"},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"                command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                command.setData(model, history, undoRedoStack);"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":"                if (command instanceof UnlockCommand) {"},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"                    UnlockCommand unlockCommand \u003d (UnlockCommand) command;"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"                    result \u003d unlockCommand.execute();"},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":"                } else {"},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":"                    result \u003d new CommandResult(\"Addressbook has been locked, please unlock it first!\");"},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"                }"},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"            } else {"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":"                command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                command.setData(model, history, undoRedoStack);"},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":"                result \u003d command.execute();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                undoRedoStack.push(command);"},{"lineNumber":56,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":57,"author":{"gitID":"crizyli"},"content":"            }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":74,"author":{"gitID":"crizyli"},"content":"    public static String getPassword() {"},{"lineNumber":75,"author":{"gitID":"crizyli"},"content":"        return password;"},{"lineNumber":76,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":78,"author":{"gitID":"crizyli"},"content":"    public static void setPassword(String psw) {"},{"lineNumber":79,"author":{"gitID":"crizyli"},"content":"        password \u003d psw;"},{"lineNumber":80,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":82,"author":{"gitID":"crizyli"},"content":"    public static void unLock() {"},{"lineNumber":83,"author":{"gitID":"crizyli"},"content":"        isLocked \u003d false;"},{"lineNumber":84,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":86,"author":{"gitID":"crizyli"},"content":"    public static void lock() {"},{"lineNumber":87,"author":{"gitID":"crizyli"},"content":"        isLocked \u003d true;"},{"lineNumber":88,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":90,"author":{"gitID":"crizyli"},"content":"    public static boolean isLocked() {"},{"lineNumber":91,"author":{"gitID":"crizyli"},"content":"        return isLocked;"},{"lineNumber":92,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":94,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":36,"IzHoBX":5,"-":54}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":35,"author":{"gitID":"-"},"content":" */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":48,"author":{"gitID":"IzHoBX"},"content":"            + \"[\" + PREFIX_RATING + \"RATING] \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":112,"author":{"gitID":"IzHoBX"},"content":"        Rating updatedRating \u003d editPersonDescriptor.getRating().orElse(personToEdit.getRating());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"IzHoBX"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedRating,"},{"lineNumber":116,"author":{"gitID":"IzHoBX"},"content":"                updatedTags);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":148,"author":{"gitID":"IzHoBX"},"content":"        private Rating rating;"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":154,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":155,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":161,"author":{"gitID":"IzHoBX"},"content":"            setRating(toCopy.rating);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":166,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":167,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":169,"author":{"gitID":"IzHoBX"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.rating, this.tags);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"IzHoBX"},"content":"        public void setRating(Rating rating) {"},{"lineNumber":205,"author":{"gitID":"IzHoBX"},"content":"            this.rating \u003d rating;"},{"lineNumber":206,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":208,"author":{"gitID":"IzHoBX"},"content":"        public Optional\u003cRating\u003e getRating() {"},{"lineNumber":209,"author":{"gitID":"IzHoBX"},"content":"            return Optional.ofNullable(rating);"},{"lineNumber":210,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":213,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":214,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":215,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":221,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":222,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":223,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":224,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":232,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":234,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":237,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":238,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":239,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":242,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":245,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":246,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":247,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":248,"author":{"gitID":"IzHoBX"},"content":"                    \u0026\u0026 getRating().equals(e.getRating())"},{"lineNumber":249,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"IzHoBX":18,"-":234}},{"path":"src/main/java/seedu/address/logic/commands/UnlockCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":" * Unlocks the addressbook"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"public class UnlockCommand extends Command {"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"    public static final String COMMAND_WORD \u003d \"unlock\";"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Unlock the address book. \";"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been unlocked!\";"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_INCORRECT_PASSWORD \u003d \"Incorrect unlock password!\";"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"    private String password;"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"    public UnlockCommand(String keyword) {"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"        this.password \u003d keyword;"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"    public CommandResult execute() {"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"        if (this.password.compareTo(LogicManager.getPassword()) \u003d\u003d 0) {"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"            LogicManager.unLock();"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"        } else {"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"            return new CommandResult(MESSAGE_INCORRECT_PASSWORD);"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"    public String getPassword() {"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"        return password;"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"    public boolean equals(Object other) {"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":"                || (other instanceof UnlockCommand // instanceof handles nulls"},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":"                \u0026\u0026 this.password.equals(((UnlockCommand) other).getPassword())); // state check"},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":41,"IzHoBX":3}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":"    private String rating;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":49,"author":{"gitID":"IzHoBX"},"content":"     * To retain until XmlAdaptedPersonTest is updated."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(String name, String phone, String email, String address, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"IzHoBX"},"content":"    public XmlAdaptedPerson(String name,"},{"lineNumber":65,"author":{"gitID":"IzHoBX"},"content":"                            String phone,"},{"lineNumber":66,"author":{"gitID":"IzHoBX"},"content":"                            String email,"},{"lineNumber":67,"author":{"gitID":"IzHoBX"},"content":"                            String address,"},{"lineNumber":68,"author":{"gitID":"IzHoBX"},"content":"                            String rating,"},{"lineNumber":69,"author":{"gitID":"IzHoBX"},"content":"                            List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":74,"author":{"gitID":"IzHoBX"},"content":"        this.rating \u003d rating;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":90,"author":{"gitID":"IzHoBX"},"content":"        rating \u003d source.getRating().value.toString();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"IzHoBX"},"content":"        if (this.rating \u003d\u003d null) {"},{"lineNumber":141,"author":{"gitID":"IzHoBX"},"content":"            this.rating \u003d (new Rating()).toString();"},{"lineNumber":142,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"IzHoBX"},"content":"        if (!Rating.isValidRating(this.rating)) {"},{"lineNumber":144,"author":{"gitID":"IzHoBX"},"content":"            throw new IllegalValueException(Rating.MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":145,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"IzHoBX"},"content":"        final Rating rating \u003d new Rating(this.rating);"},{"lineNumber":147,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":149,"author":{"gitID":"IzHoBX"},"content":"        return new Person(name, phone, email, address, rating, tags);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":165,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":166,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(address, otherPerson.address)"},{"lineNumber":167,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"IzHoBX":20,"-":149}},{"path":"src/main/java/seedu/address/model/person/HideAllPersonPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"* For hiding persons during lock"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"*/"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"public class HideAllPersonPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"    public HideAllPersonPredicate() {}"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"    public boolean test(Person person) {"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"        return false;"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"    public boolean equals(Object other) {"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"        return false;"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":19,"IzHoBX":3,"-":1}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Yoochard"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"Yoochard"},"content":"import java.util.Comparator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":19,"author":{"gitID":"-"},"content":" *"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":21,"author":{"gitID":"-"},"content":" *"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * @see Person#equals(Object)"},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public boolean contains(Person toCheck) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Adds a person to the list."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void add(Person toAdd) throws DuplicatePersonException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the replacement is equivalent to another existing person in the list."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void setPerson(Person target, Person editedPerson)"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (!target.equals(editedPerson) \u0026\u0026 internalList.contains(editedPerson)) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        internalList.set(index, editedPerson);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public boolean remove(Person toRemove) throws PersonNotFoundException {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        if (!personFoundAndDeleted) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return personFoundAndDeleted;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void setPersons(UniquePersonList replacement) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        requireAllNonNull(persons);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        final UniquePersonList replacement \u003d new UniquePersonList();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        for (final Person person : persons) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            replacement.add(person);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        setPersons(replacement);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e asObservableList() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                        \u0026\u0026 this.internalList.equals(((UniquePersonList) other).internalList));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"Yoochard"},"content":"     * Sorts existing persons, check sort field here"},{"lineNumber":118,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"Yoochard"},"content":"    public void sort(String field) {"},{"lineNumber":120,"author":{"gitID":"Yoochard"},"content":"        switch (field) {"},{"lineNumber":121,"author":{"gitID":"Yoochard"},"content":"        case \"name\":"},{"lineNumber":122,"author":{"gitID":"Yoochard"},"content":"            sortByName();"},{"lineNumber":123,"author":{"gitID":"Yoochard"},"content":"            break;"},{"lineNumber":124,"author":{"gitID":"Yoochard"},"content":"        case \"phone\":"},{"lineNumber":125,"author":{"gitID":"Yoochard"},"content":"            sortByPhone();"},{"lineNumber":126,"author":{"gitID":"Yoochard"},"content":"            break;"},{"lineNumber":127,"author":{"gitID":"Yoochard"},"content":"        case \"email\":"},{"lineNumber":128,"author":{"gitID":"Yoochard"},"content":"            sortByEmail();"},{"lineNumber":129,"author":{"gitID":"Yoochard"},"content":"            break;"},{"lineNumber":130,"author":{"gitID":"Yoochard"},"content":"        case \"address\":"},{"lineNumber":131,"author":{"gitID":"Yoochard"},"content":"            sortByAddress();"},{"lineNumber":132,"author":{"gitID":"Yoochard"},"content":"            break;"},{"lineNumber":133,"author":{"gitID":"Yoochard"},"content":"        case \"tag\":"},{"lineNumber":134,"author":{"gitID":"Yoochard"},"content":"            sortByTag();"},{"lineNumber":135,"author":{"gitID":"Yoochard"},"content":"            break;"},{"lineNumber":136,"author":{"gitID":"Yoochard"},"content":"        case \"rate\":"},{"lineNumber":137,"author":{"gitID":"Yoochard"},"content":"            sortByRate();"},{"lineNumber":138,"author":{"gitID":"Yoochard"},"content":"            break;"},{"lineNumber":139,"author":{"gitID":"Yoochard"},"content":"        default:"},{"lineNumber":140,"author":{"gitID":"Yoochard"},"content":"            throw new AssertionError(\"Sort field should be name, phone, email, tag, address or rate.\");"},{"lineNumber":141,"author":{"gitID":"Yoochard"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"Yoochard"},"content":"     * Specific sort method for every field, sort by name"},{"lineNumber":145,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"Yoochard"},"content":"    public void sortByName() {"},{"lineNumber":147,"author":{"gitID":"Yoochard"},"content":"        Collections.sort(internalList, new Comparator\u003cPerson\u003e() {"},{"lineNumber":148,"author":{"gitID":"Yoochard"},"content":"            public int compare(Person p1, Person p2) {"},{"lineNumber":149,"author":{"gitID":"Yoochard"},"content":"                int num \u003d p1.getName().toString().compareToIgnoreCase(p2.getName().toString());"},{"lineNumber":150,"author":{"gitID":"Yoochard"},"content":"                return num;"},{"lineNumber":151,"author":{"gitID":"Yoochard"},"content":"            }"},{"lineNumber":152,"author":{"gitID":"Yoochard"},"content":"        });"},{"lineNumber":153,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":155,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"Yoochard"},"content":"     * when the input field is phone, sort by phone"},{"lineNumber":157,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"Yoochard"},"content":"    public void sortByPhone() {"},{"lineNumber":159,"author":{"gitID":"Yoochard"},"content":"        Collections.sort(internalList, new Comparator\u003cPerson\u003e() {"},{"lineNumber":160,"author":{"gitID":"Yoochard"},"content":"            public int compare(Person p1, Person p2) {"},{"lineNumber":161,"author":{"gitID":"Yoochard"},"content":"                int num \u003d p1.getPhone().toString().compareToIgnoreCase(p2.getPhone().toString());"},{"lineNumber":162,"author":{"gitID":"Yoochard"},"content":"                return num;"},{"lineNumber":163,"author":{"gitID":"Yoochard"},"content":"            }"},{"lineNumber":164,"author":{"gitID":"Yoochard"},"content":"        });"},{"lineNumber":165,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":167,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"Yoochard"},"content":"     * when the input field is email, sort by email"},{"lineNumber":169,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"Yoochard"},"content":"    public void sortByEmail() {"},{"lineNumber":171,"author":{"gitID":"Yoochard"},"content":"        Collections.sort(internalList, new Comparator\u003cPerson\u003e() {"},{"lineNumber":172,"author":{"gitID":"Yoochard"},"content":"            public int compare(Person p1, Person p2) {"},{"lineNumber":173,"author":{"gitID":"Yoochard"},"content":"                int num \u003d p1.getEmail().toString().compareToIgnoreCase(p2.getEmail().toString());"},{"lineNumber":174,"author":{"gitID":"Yoochard"},"content":"                return num;"},{"lineNumber":175,"author":{"gitID":"Yoochard"},"content":"            }"},{"lineNumber":176,"author":{"gitID":"Yoochard"},"content":"        });"},{"lineNumber":177,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":179,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"Yoochard"},"content":"     * when the input field is address, sort by address"},{"lineNumber":181,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":182,"author":{"gitID":"Yoochard"},"content":"    public void sortByAddress() {"},{"lineNumber":183,"author":{"gitID":"Yoochard"},"content":"        Collections.sort(internalList, new Comparator\u003cPerson\u003e() {"},{"lineNumber":184,"author":{"gitID":"Yoochard"},"content":"            public int compare(Person p1, Person p2) {"},{"lineNumber":185,"author":{"gitID":"Yoochard"},"content":"                int num \u003d p1.getAddress().toString().compareToIgnoreCase(p2.getAddress().toString());"},{"lineNumber":186,"author":{"gitID":"Yoochard"},"content":"                return num;"},{"lineNumber":187,"author":{"gitID":"Yoochard"},"content":"            }"},{"lineNumber":188,"author":{"gitID":"Yoochard"},"content":"        });"},{"lineNumber":189,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":191,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"Yoochard"},"content":"     * when the input field is tag, sort by tag"},{"lineNumber":193,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"Yoochard"},"content":"    public void sortByTag() {"},{"lineNumber":195,"author":{"gitID":"Yoochard"},"content":"        Collections.sort(internalList, new Comparator\u003cPerson\u003e() {"},{"lineNumber":196,"author":{"gitID":"Yoochard"},"content":"            public int compare(Person p1, Person p2) {"},{"lineNumber":197,"author":{"gitID":"Yoochard"},"content":"                int num \u003d p1.getTags().toString().compareToIgnoreCase(p2.getTags().toString());"},{"lineNumber":198,"author":{"gitID":"Yoochard"},"content":"                return num;"},{"lineNumber":199,"author":{"gitID":"Yoochard"},"content":"            }"},{"lineNumber":200,"author":{"gitID":"Yoochard"},"content":"        });"},{"lineNumber":201,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":203,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"Yoochard"},"content":"     * when the input field is rate, sort by rate in descending order"},{"lineNumber":205,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":206,"author":{"gitID":"Yoochard"},"content":"    public void sortByRate() {"},{"lineNumber":207,"author":{"gitID":"Yoochard"},"content":"        Collections.sort(internalList, new Comparator\u003cPerson\u003e() {"},{"lineNumber":208,"author":{"gitID":"Yoochard"},"content":"            public int compare(Person p1, Person p2) {"},{"lineNumber":209,"author":{"gitID":"Yoochard"},"content":"                int num \u003d p2.getRating().toString().compareToIgnoreCase(p1.getRating().toString());"},{"lineNumber":210,"author":{"gitID":"Yoochard"},"content":"                return num;"},{"lineNumber":211,"author":{"gitID":"Yoochard"},"content":"            }"},{"lineNumber":212,"author":{"gitID":"Yoochard"},"content":"        });"},{"lineNumber":213,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":101,"IzHoBX":1,"-":117}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"    private Rating rating;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"        this.rating \u003d new Rating();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Rating rating, Set\u003cTag\u003e tags) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":48,"author":{"gitID":"IzHoBX"},"content":"        this.rating \u003d rating;"},{"lineNumber":49,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"IzHoBX"},"content":"    public Rating getRating() {"},{"lineNumber":64,"author":{"gitID":"IzHoBX"},"content":"        return rating;"},{"lineNumber":65,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":67,"author":{"gitID":"IzHoBX"},"content":"    public String getRatingDisplay() {"},{"lineNumber":68,"author":{"gitID":"IzHoBX"},"content":"        return rating.getRatingDisplay();"},{"lineNumber":69,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":116,"author":{"gitID":"IzHoBX"},"content":"                .append(\" Rating: \")"},{"lineNumber":117,"author":{"gitID":"IzHoBX"},"content":"                .append(getRatingDisplay())"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"IzHoBX"},"content":"    public void setRating(String newRating) {"},{"lineNumber":124,"author":{"gitID":"IzHoBX"},"content":"        rating \u003d new Rating(newRating);"},{"lineNumber":125,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"IzHoBX":19,"-":107}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":93,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":114,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":132,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":135,"author":{"gitID":"IzHoBX"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(), person.getRating(),"},{"lineNumber":136,"author":{"gitID":"IzHoBX"},"content":"                correctTagReferences);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":179,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"Yoochard"},"content":"    /** sort the existing persons in specific field*/"},{"lineNumber":189,"author":{"gitID":"Yoochard"},"content":"    public void sort(String field) {"},{"lineNumber":190,"author":{"gitID":"Yoochard"},"content":"        persons.sort(field);"},{"lineNumber":191,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":4,"IzHoBX":2,"-":186}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":21,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"Yoochard"},"content":"    @Override"},{"lineNumber":102,"author":{"gitID":"Yoochard"},"content":"    public void sort(String field) {"},{"lineNumber":103,"author":{"gitID":"Yoochard"},"content":"        addressBook.sort(field);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":3,"-":123}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"Yoochard"},"content":"    /** Sort existing employees by any field in alphabetical order */"},{"lineNumber":30,"author":{"gitID":"Yoochard"},"content":"    void sort(String field);"},{"lineNumber":31,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":3,"-":48}},{"path":"src/main/java/seedu/address/model/person/Rating.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":" * Represents a Person\u0027s rating in the address book."},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRating(String)}"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"public class Rating {"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":"    public static final String MESSAGE_RATING_CONSTRAINTS \u003d \"Rating must be an integer\";"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"    public static final String RATING_VALIDATION_REGEX \u003d \"-?\\\\d*\";"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"    private static final String INVALID_RATING_DISPLAY \u003d \"-\";"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"    private static final String RATING_DISPLAY \u003d \"*\";"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"    private static final int DEFAULT_INVALID_RATING \u003d -1;"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"    public final Integer value;"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"     * Constructs a {@code Rating} for a new person who hasn\u0027t been assigned a rating."},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"    public Rating() {"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"        value \u003d DEFAULT_INVALID_RATING;"},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"     * Constructs a {@code Rating}."},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"     * @param rating A valid rating."},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"    public Rating(String rating) {"},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"        checkArgument(isValidRating(rating), MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"        value \u003d Integer.parseInt(rating);"},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":"     * Returns true if a given string is a valid person rating."},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"    public static boolean isValidRating(String test) {"},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"        return test.matches(RATING_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"IzHoBX"},"content":"        return value.toString();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"IzHoBX"},"content":"                || (other instanceof Rating) // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"IzHoBX"},"content":"                \u0026\u0026 this.value \u003d\u003d ((Rating) other).value; // state check"},{"lineNumber":52,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":54,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"IzHoBX"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"IzHoBX"},"content":"        return value.hashCode();"},{"lineNumber":57,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":59,"author":{"gitID":"IzHoBX"},"content":"    public String getRatingDisplay() {"},{"lineNumber":60,"author":{"gitID":"IzHoBX"},"content":"        if (value \u003d\u003d -1) {"},{"lineNumber":61,"author":{"gitID":"IzHoBX"},"content":"            return INVALID_RATING_DISPLAY;"},{"lineNumber":62,"author":{"gitID":"IzHoBX"},"content":"        } else {"},{"lineNumber":63,"author":{"gitID":"IzHoBX"},"content":"            return convertRatingToStars(value);"},{"lineNumber":64,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":67,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"IzHoBX"},"content":"     * Converts numerical rating into respective number of stars"},{"lineNumber":69,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"IzHoBX"},"content":"    private String convertRatingToStars(int rating) {"},{"lineNumber":71,"author":{"gitID":"IzHoBX"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":72,"author":{"gitID":"IzHoBX"},"content":"        while (rating-- \u003e 0) {"},{"lineNumber":73,"author":{"gitID":"IzHoBX"},"content":"            sb.append(RATING_DISPLAY);"},{"lineNumber":74,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"IzHoBX"},"content":"        return sb.toString();"},{"lineNumber":76,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":69,"-":8}},{"path":"src/main/java/seedu/address/logic/commands/RateCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":" * Updates the rating of an existing person in the address book."},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"public class RateCommand extends UndoableCommand {"},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"    public static final String COMMAND_WORD \u003d \"rate\";"},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Rate the person identified \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"            + \"RATING \\n\""},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"            + \"5\";"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":"    public static final String MESSAGE_RATE_PERSON_SUCCESS \u003d \"Rated Person: %1$s\";"},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"Both INDEX and RATING must be provided.\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"IzHoBX"},"content":"    public RateCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":74,"author":{"gitID":"IzHoBX"},"content":"        return new CommandResult(String.format(MESSAGE_RATE_PERSON_SUCCESS, editedPerson));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"IzHoBX"},"content":"        Rating updatedRating \u003d editPersonDescriptor.getRating().orElse(new Rating());"},{"lineNumber":97,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":98,"author":{"gitID":"IzHoBX"},"content":"        return new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(), personToEdit"},{"lineNumber":99,"author":{"gitID":"IzHoBX"},"content":"                .getAddress(), updatedRating, personToEdit.getTags());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":110,"author":{"gitID":"IzHoBX"},"content":"        if (!(other instanceof RateCommand)) {"},{"lineNumber":111,"author":{"gitID":"IzHoBX"},"content":"            return false;"},{"lineNumber":112,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":114,"author":{"gitID":"IzHoBX"},"content":"        // state check"},{"lineNumber":115,"author":{"gitID":"IzHoBX"},"content":"        RateCommand e \u003d (RateCommand) other;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":130,"author":{"gitID":"IzHoBX"},"content":"        private Rating rating;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":137,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":138,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":143,"author":{"gitID":"IzHoBX"},"content":"            setRating(toCopy.rating);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":150,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":152,"author":{"gitID":"IzHoBX"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.rating, this"},{"lineNumber":153,"author":{"gitID":"IzHoBX"},"content":"                    .tags);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"IzHoBX"},"content":"        public void setRating(Rating rating) {"},{"lineNumber":189,"author":{"gitID":"IzHoBX"},"content":"            this.rating \u003d rating;"},{"lineNumber":190,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":192,"author":{"gitID":"IzHoBX"},"content":"        public Optional\u003cRating\u003e getRating() {"},{"lineNumber":193,"author":{"gitID":"IzHoBX"},"content":"            return Optional.ofNullable(rating);"},{"lineNumber":194,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":197,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":198,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":199,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":205,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":206,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":207,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":208,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":221,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":223,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":226,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":229,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":230,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":231,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":232,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"IzHoBX":40,"-":195}}]
