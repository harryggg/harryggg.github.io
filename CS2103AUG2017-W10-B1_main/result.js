var resultJson = [{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getMidIndex;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class DeleteCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        ReadOnlyPerson deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        /* Case: delete the last person in the list -\u003e deleted */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandSuccess(lastPersonIndex);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: undo deleting the last person in the list -\u003e last person restored */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":47,"author":{"gitID":"donjar"},"content":"        expectedResultMessage \u003d UndoCommand.getSuccessMessage(1);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        removePerson(modelBeforeDeletingLast, lastPersonIndex);"},{"lineNumber":53,"author":{"gitID":"donjar"},"content":"        expectedResultMessage \u003d RedoCommand.getSuccessMessage(1);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: delete the middle person in the list -\u003e deleted */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Index middlePersonIndex \u003d getMidIndex(getModel());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"},{"lineNumber":69,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        selectPerson(selectedIndex);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":101,"author":{"gitID":"-"},"content":"                getModel().getAddressBook().getPersonList().size() + 1);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Removes the {@code ReadOnlyPerson} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * @return the removed person"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    private ReadOnlyPerson removePerson(Model model, Index index) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        ReadOnlyPerson targetPerson \u003d getPerson(model, index);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            model.deletePerson(targetPerson);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"targetPerson is retrieved from model.\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return targetPerson;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        ReadOnlyPerson deletedPerson \u003d removePerson(expectedModel, toDelete);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":140,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"donjar"},"content":"     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":183,"author":{"gitID":"donjar"},"content":"     * 4. Asserts that the browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"donjar":4,"-":193}},{"path":"src/test/java/systemtests/ClearCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ClearCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void clear() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        final Model defaultModel \u003d getModel();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"},{"lineNumber":22,"author":{"gitID":"-"},"content":"         * spaces -\u003e cleared"},{"lineNumber":23,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        /* Case: undo clearing address book -\u003e original address book restored */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":29,"author":{"gitID":"donjar"},"content":"        String expectedResultMessage \u003d UndoCommand.getSuccessMessage(1);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedResultMessage, defaultModel);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        /* Case: redo clearing address book -\u003e cleared */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":35,"author":{"gitID":"donjar"},"content":"        expectedResultMessage \u003d RedoCommand.getSuccessMessage(1);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before clearing -\u003e entire address book cleared */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: clear empty address book -\u003e cleared */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":64,"author":{"gitID":"donjar"},"content":"     * Also verifies that the command box has the default style class."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @see ClearCommandSystemTest#assertCommandSuccess(String)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"donjar"},"content":"     * Also verifies that the browser url, selected card remains unchanged, and the command box has the"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"donjar":4,"-":95}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.FACEBOOK_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.FACEBOOK_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INSTAGRAM_DESC_AMY;"},{"lineNumber":11,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INSTAGRAM_DESC_BOB;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":23,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TWIITER_DESC_AMY;"},{"lineNumber":24,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TWIITER_DESC_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":34,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_USERNAME_AMY;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":71,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        ReadOnlyPerson toAdd \u003d AMY;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":74,"author":{"gitID":"kenpaxtonlim"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \""},{"lineNumber":75,"author":{"gitID":"kenpaxtonlim"},"content":"                + FACEBOOK_DESC_AMY + \" \" + TWIITER_DESC_AMY + \" \" + INSTAGRAM_DESC_AMY;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":80,"author":{"gitID":"donjar"},"content":"        String expectedResultMessage \u003d UndoCommand.getSuccessMessage(1);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":86,"author":{"gitID":"donjar"},"content":"        expectedResultMessage \u003d RedoCommand.getSuccessMessage(1);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":91,"author":{"gitID":"kenpaxtonlim"},"content":"                + TAG_DESC_FRIEND + FACEBOOK_DESC_AMY + TWIITER_DESC_AMY + INSTAGRAM_DESC_AMY;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // This test will fail is a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(ReadOnlyPerson)"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":99,"author":{"gitID":"kenpaxtonlim"},"content":"                + FACEBOOK_DESC_AMY + TWIITER_DESC_AMY + INSTAGRAM_DESC_AMY"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":105,"author":{"gitID":"kenpaxtonlim"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND)"},{"lineNumber":106,"author":{"gitID":"kenpaxtonlim"},"content":"                .withSocialMedia(VALID_USERNAME_AMY, VALID_USERNAME_AMY, VALID_USERNAME_AMY)"},{"lineNumber":107,"author":{"gitID":"kenpaxtonlim"},"content":"                .build();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":109,"author":{"gitID":"kenpaxtonlim"},"content":"                + TAG_DESC_FRIEND + FACEBOOK_DESC_AMY + TWIITER_DESC_AMY + INSTAGRAM_DESC_AMY;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":114,"author":{"gitID":"kenpaxtonlim"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND)"},{"lineNumber":115,"author":{"gitID":"kenpaxtonlim"},"content":"                .withSocialMedia(VALID_USERNAME_AMY, VALID_USERNAME_AMY, VALID_USERNAME_AMY)"},{"lineNumber":116,"author":{"gitID":"kenpaxtonlim"},"content":"                .build();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":118,"author":{"gitID":"kenpaxtonlim"},"content":"                + TAG_DESC_FRIEND + FACEBOOK_DESC_AMY + TWIITER_DESC_AMY + INSTAGRAM_DESC_AMY;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":123,"author":{"gitID":"kenpaxtonlim"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND)"},{"lineNumber":124,"author":{"gitID":"kenpaxtonlim"},"content":"                .withSocialMedia(VALID_USERNAME_AMY, VALID_USERNAME_AMY, VALID_USERNAME_AMY)"},{"lineNumber":125,"author":{"gitID":"kenpaxtonlim"},"content":"                .build();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":127,"author":{"gitID":"kenpaxtonlim"},"content":"                + TAG_DESC_FRIEND + FACEBOOK_DESC_AMY + TWIITER_DESC_AMY + INSTAGRAM_DESC_AMY;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":132,"author":{"gitID":"kenpaxtonlim"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND)"},{"lineNumber":133,"author":{"gitID":"kenpaxtonlim"},"content":"                .withSocialMedia(VALID_USERNAME_AMY, VALID_USERNAME_AMY, VALID_USERNAME_AMY)"},{"lineNumber":134,"author":{"gitID":"kenpaxtonlim"},"content":"                .build();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":136,"author":{"gitID":"kenpaxtonlim"},"content":"                + TAG_DESC_FRIEND + FACEBOOK_DESC_AMY + TWIITER_DESC_AMY + INSTAGRAM_DESC_AMY;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assert getModel().getFilteredPersonList().size()"},{"lineNumber":142,"author":{"gitID":"-"},"content":"                \u003c getModel().getAddressBook().getPersonList().size();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d 0;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":153,"author":{"gitID":"kenpaxtonlim"},"content":"                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB + FACEBOOK_DESC_BOB + TWIITER_DESC_BOB + INSTAGRAM_DESC_BOB;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assert getPersonListPanel().isAnyCardSelected();"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":202,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC;"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and verifies that the command box displays"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * an empty string, the result display box displays the success message of executing {@code AddCommand} with the"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * details of {@code toAdd}, and the model related components equal to the current model added with {@code toAdd}."},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":212,"author":{"gitID":"donjar"},"content":"     * Also verifies that the command box has the default style class,"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * the browser url and selected card remains unchanged."},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(ReadOnlyPerson toAdd) {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(ReadOnlyPerson)}. Executes {@code command}"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(ReadOnlyPerson)"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, ReadOnlyPerson toAdd) {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, ReadOnlyPerson)} except that the result"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * display box displays {@code expectedResultMessage} and the model related components equal to"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * {@code expectedModel}."},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, ReadOnlyPerson)"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":255,"author":{"gitID":"donjar"},"content":"     * Also verifies that the browser url, selected card remains unchanged, and the command box has the"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kenpaxtonlim":28,"donjar":4,"-":235}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.GOOGLE_SEARCH_URL_PREFIX;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.GOOGLE_SEARCH_URL_SUFFIX;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":38,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":39,"author":{"gitID":"-"},"content":" */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initializeStage();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"500poundbear"},"content":"        // waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d getModel().getFilteredPersonList().size();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assert getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assert getPersonListPanel().getSelectedCardIndex() \u003d\u003d index.getZeroBased();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":133,"author":{"gitID":"kenpaxtonlim"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"donjar"},"content":"     * Calls {@code BrowserPanelHandle} and {@code PersonListPanelHandle} to remember their current state."},{"lineNumber":138,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            expectedUrl \u003d new URL(GOOGLE_SEARCH_URL_PREFIX + selectedCardName.replaceAll(\" \", \"+\")"},{"lineNumber":165,"author":{"gitID":"-"},"content":"                    + GOOGLE_SEARCH_URL_SUFFIX);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":180,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":187,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":194,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":201,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":206,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":215,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"500poundbear":2,"kenpaxtonlim":1,"donjar":1,"-":215}},{"path":"src/test/java/seedu/address/ui/ResultDisplayTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":11,"author":{"gitID":"donjar"},"content":"import seedu.address.ui.testutil.LogicStub;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class ResultDisplayTest extends GuiUnitTest {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final NewResultAvailableEvent NEW_RESULT_EVENT_STUB \u003d new NewResultAvailableEvent(\"Stub\");"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private ResultDisplayHandle resultDisplayHandle;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":21,"author":{"gitID":"donjar"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay(new LogicStub());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(resultDisplay);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"},{"lineNumber":25,"author":{"gitID":"-"},"content":"                ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        // default result text"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertEquals(\"\", resultDisplayHandle.getText());"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // new result received"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        postNow(NEW_RESULT_EVENT_STUB);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(NEW_RESULT_EVENT_STUB.message, resultDisplayHandle.getText());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"donjar":2,"-":37}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class SelectCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"},{"lineNumber":24,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":25,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, INDEX_FIRST_PERSON);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        /* Case: select the last card in the person list -\u003e selected */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Index personCount \u003d Index.fromOneBased(getTypicalPersons().size());"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, personCount);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        /* Case: select the middle card in the person list -\u003e selected */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(personCount.getOneBased() / 2);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"},{"lineNumber":57,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":58,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assert validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":79,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":83,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        /* Case: select from empty address book -\u003e rejected */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d 0;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * box displays the success message of executing select command with the {@code expectedSelectedCardIndex}"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * of the selected person, and the model related components equal to the current model."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":101,"author":{"gitID":"donjar"},"content":"     * Also verifies that the command box has the default style class remains unchanged. The resulting"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * browser url and selected card will be verified if the current selected card and the card at"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex} are different."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":110,"author":{"gitID":"-"},"content":"                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":130,"author":{"gitID":"donjar"},"content":"     * Also verifies that the browser url, selected card remains unchanged, and the command box has the"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"donjar":2,"-":140}},{"path":"src/test/java/seedu/address/ui/PersonListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":19,"author":{"gitID":"donjar"},"content":"import seedu.address.ui.testutil.LogicStub;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class PersonListPanelTest extends GuiUnitTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final ObservableList\u003cReadOnlyPerson\u003e TYPICAL_PERSONS \u003d"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            FXCollections.observableList(getTypicalPersons());"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_PERSON);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private PersonListPanelHandle personListPanelHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":31,"author":{"gitID":"donjar"},"content":"        PersonListPanel personListPanel \u003d new PersonListPanel(new LogicStub(TYPICAL_PERSONS));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personListPanel);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            ReadOnlyPerson expectedPerson \u003d TYPICAL_PERSONS.get(i);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(expectedPerson, actualCard);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void handleJumpToListRequestEvent() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        postNow(JUMP_TO_SECOND_EVENT);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        PersonCardHandle expectedCard \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        PersonCardHandle selectedCard \u003d personListPanelHandle.getHandleToSelectedCard();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCardEquals(expectedCard, selectedCard);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"donjar":2,"-":57}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class FindCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":29,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":30,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":38,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":39,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":67,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assert !getModel().getAddressBook().getPersonList().contains(BENSON);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* Case: find person not in address book -\u003e 0 persons found */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        /* Case: find phone number of person in address book -\u003e 0 persons found */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /* Case: find address of person in address book -\u003e 0 persons found */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        /* Case: find email of person in address book -\u003e 0 persons found */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        /* Case: find tags of person in address book -\u003e 0 persons found */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /* Case: find while a person is selected -\u003e selected card deselected */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assert !getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        /* Case: find person in empty address book -\u003e 0 persons found */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d 0;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":164,"author":{"gitID":"donjar"},"content":"     * Also verifies that the command box has the default style class, and the"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":170,"author":{"gitID":"-"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"donjar"},"content":"     * Also verifies that the browser url, selected card remains unchanged, and the command box has the"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"donjar":2,"-":192}},{"path":"src/test/java/systemtests/SocialMediaCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"500poundbear"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":11,"author":{"gitID":"kenpaxtonlim"},"content":"import seedu.address.logic.commands.SocialMediaCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"kenpaxtonlim"},"content":"//@@author kenpaxtonlim"},{"lineNumber":16,"author":{"gitID":"kenpaxtonlim"},"content":"public class SocialMediaCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":17,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"kenpaxtonlim"},"content":"    public void socialmedia() {"},{"lineNumber":19,"author":{"gitID":"kenpaxtonlim"},"content":"        /* Case: show facebook of first person in list -\u003e shown */"},{"lineNumber":20,"author":{"gitID":"kenpaxtonlim"},"content":"        String command \u003d SocialMediaCommand.COMMAND_WORD + \" \" + SocialMediaCommand.TYPE_FACEBOOK"},{"lineNumber":21,"author":{"gitID":"kenpaxtonlim"},"content":"                + \" \" + INDEX_FIRST_PERSON.getOneBased();"},{"lineNumber":22,"author":{"gitID":"kenpaxtonlim"},"content":"        assertCommandSuccess(command, INDEX_FIRST_PERSON, SocialMediaCommand.TYPE_FACEBOOK);"},{"lineNumber":23,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":24,"author":{"gitID":"kenpaxtonlim"},"content":"        /* Case: show twitter of first person in list -\u003e shown */"},{"lineNumber":25,"author":{"gitID":"kenpaxtonlim"},"content":"        command \u003d SocialMediaCommand.COMMAND_WORD + \" \" + SocialMediaCommand.TYPE_TWITTER"},{"lineNumber":26,"author":{"gitID":"kenpaxtonlim"},"content":"                + \" \" + INDEX_FIRST_PERSON.getOneBased();"},{"lineNumber":27,"author":{"gitID":"kenpaxtonlim"},"content":"        assertCommandSuccess(command, INDEX_FIRST_PERSON, SocialMediaCommand.TYPE_TWITTER);"},{"lineNumber":28,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":29,"author":{"gitID":"kenpaxtonlim"},"content":"        /* Case: show instagram of first person in list -\u003e shown */"},{"lineNumber":30,"author":{"gitID":"kenpaxtonlim"},"content":"        command \u003d SocialMediaCommand.COMMAND_WORD + \" \" + SocialMediaCommand.TYPE_INSTAGRAM"},{"lineNumber":31,"author":{"gitID":"kenpaxtonlim"},"content":"                + \" \" + INDEX_FIRST_PERSON.getOneBased();"},{"lineNumber":32,"author":{"gitID":"kenpaxtonlim"},"content":"        assertCommandSuccess(command, INDEX_FIRST_PERSON, SocialMediaCommand.TYPE_INSTAGRAM);"},{"lineNumber":33,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":34,"author":{"gitID":"kenpaxtonlim"},"content":"        /* Case: undo previous showing of social media -\u003e rejected */"},{"lineNumber":35,"author":{"gitID":"kenpaxtonlim"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":36,"author":{"gitID":"kenpaxtonlim"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":37,"author":{"gitID":"kenpaxtonlim"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":38,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":39,"author":{"gitID":"kenpaxtonlim"},"content":"        /* Case: redo showing instagram of first person in list -\u003e rejected */"},{"lineNumber":40,"author":{"gitID":"kenpaxtonlim"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":41,"author":{"gitID":"kenpaxtonlim"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":42,"author":{"gitID":"kenpaxtonlim"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":43,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":44,"author":{"gitID":"kenpaxtonlim"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":45,"author":{"gitID":"kenpaxtonlim"},"content":"        int invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":46,"author":{"gitID":"kenpaxtonlim"},"content":"        command \u003d SocialMediaCommand.COMMAND_WORD + \" \" + SocialMediaCommand.TYPE_INSTAGRAM + \" \" + invalidIndex;"},{"lineNumber":47,"author":{"gitID":"kenpaxtonlim"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":48,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":49,"author":{"gitID":"kenpaxtonlim"},"content":"        /* Case: invalid social media type -\u003e rejected */"},{"lineNumber":50,"author":{"gitID":"kenpaxtonlim"},"content":"        command \u003d SocialMediaCommand.COMMAND_WORD + \" \" + \"abc\" + \" \" + invalidIndex;"},{"lineNumber":51,"author":{"gitID":"kenpaxtonlim"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, SocialMediaCommand.MESSAGE_USAGE));"},{"lineNumber":52,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":54,"author":{"gitID":"kenpaxtonlim"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"kenpaxtonlim"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":56,"author":{"gitID":"kenpaxtonlim"},"content":"     * box displays the success message of executing select command with the {@code expectedSelectedCardIndex}"},{"lineNumber":57,"author":{"gitID":"kenpaxtonlim"},"content":"     * of the selected person, and the model related components equal to the current model."},{"lineNumber":58,"author":{"gitID":"kenpaxtonlim"},"content":"     * These verifications are done by"},{"lineNumber":59,"author":{"gitID":"kenpaxtonlim"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":60,"author":{"gitID":"kenpaxtonlim"},"content":"     * Also verifies that the command box has the default style class remains unchanged. The resulting"},{"lineNumber":61,"author":{"gitID":"kenpaxtonlim"},"content":"     * browser url and selected card will be verified if the current selected card and the card at"},{"lineNumber":62,"author":{"gitID":"kenpaxtonlim"},"content":"     * {@code expectedSelectedCardIndex} are different."},{"lineNumber":63,"author":{"gitID":"kenpaxtonlim"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":64,"author":{"gitID":"kenpaxtonlim"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":65,"author":{"gitID":"kenpaxtonlim"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"kenpaxtonlim"},"content":"    private void assertCommandSuccess(String command, Index index, String type) {"},{"lineNumber":67,"author":{"gitID":"kenpaxtonlim"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":68,"author":{"gitID":"kenpaxtonlim"},"content":"        String expectedResultMessage \u003d SocialMediaCommand.MESSAGE_SUCCESS;"},{"lineNumber":69,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":70,"author":{"gitID":"kenpaxtonlim"},"content":"        executeCommand(command);"},{"lineNumber":71,"author":{"gitID":"kenpaxtonlim"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":72,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":73,"author":{"gitID":"kenpaxtonlim"},"content":"        String url \u003d \"\";"},{"lineNumber":74,"author":{"gitID":"kenpaxtonlim"},"content":"        switch (type) {"},{"lineNumber":75,"author":{"gitID":"kenpaxtonlim"},"content":"        case SocialMediaCommand.TYPE_FACEBOOK:"},{"lineNumber":76,"author":{"gitID":"kenpaxtonlim"},"content":"            url \u003d SocialMediaCommand.URL_FACEBOOK"},{"lineNumber":77,"author":{"gitID":"kenpaxtonlim"},"content":"                    + expectedModel.getFilteredPersonList().get(index.getZeroBased()).getSocialMedia().facebook;"},{"lineNumber":78,"author":{"gitID":"kenpaxtonlim"},"content":"            break;"},{"lineNumber":79,"author":{"gitID":"kenpaxtonlim"},"content":"        case SocialMediaCommand.TYPE_TWITTER:"},{"lineNumber":80,"author":{"gitID":"kenpaxtonlim"},"content":"            url \u003d SocialMediaCommand.URL_TWITTER"},{"lineNumber":81,"author":{"gitID":"kenpaxtonlim"},"content":"                    + expectedModel.getFilteredPersonList().get(index.getZeroBased()).getSocialMedia().twitter;"},{"lineNumber":82,"author":{"gitID":"kenpaxtonlim"},"content":"            break;"},{"lineNumber":83,"author":{"gitID":"kenpaxtonlim"},"content":"        case SocialMediaCommand.TYPE_INSTAGRAM:"},{"lineNumber":84,"author":{"gitID":"kenpaxtonlim"},"content":"            url \u003d SocialMediaCommand.URL_INSTAGRAM"},{"lineNumber":85,"author":{"gitID":"kenpaxtonlim"},"content":"                    + expectedModel.getFilteredPersonList().get(index.getZeroBased()).getSocialMedia().instagram;"},{"lineNumber":86,"author":{"gitID":"kenpaxtonlim"},"content":"            break;"},{"lineNumber":87,"author":{"gitID":"kenpaxtonlim"},"content":"        default:"},{"lineNumber":88,"author":{"gitID":"kenpaxtonlim"},"content":"            throw new AssertionError();"},{"lineNumber":89,"author":{"gitID":"kenpaxtonlim"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":91,"author":{"gitID":"kenpaxtonlim"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":92,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":94,"author":{"gitID":"kenpaxtonlim"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"kenpaxtonlim"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":96,"author":{"gitID":"kenpaxtonlim"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":97,"author":{"gitID":"kenpaxtonlim"},"content":"     * These verifications are done by"},{"lineNumber":98,"author":{"gitID":"kenpaxtonlim"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":99,"author":{"gitID":"kenpaxtonlim"},"content":"     * Also verifies that the browser url remains unchanged, and the command box has the"},{"lineNumber":100,"author":{"gitID":"kenpaxtonlim"},"content":"     * error style."},{"lineNumber":101,"author":{"gitID":"kenpaxtonlim"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":102,"author":{"gitID":"kenpaxtonlim"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"kenpaxtonlim"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":104,"author":{"gitID":"kenpaxtonlim"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":105,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":106,"author":{"gitID":"kenpaxtonlim"},"content":"        executeCommand(command);"},{"lineNumber":107,"author":{"gitID":"kenpaxtonlim"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":108,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"kenpaxtonlim"},"content":"}"}],"authorContributionMap":{"500poundbear":1,"kenpaxtonlim":96,"-":12}},{"path":"src/test/java/seedu/address/ui/PersonCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":15,"author":{"gitID":"donjar"},"content":"import seedu.address.ui.testutil.LogicStub;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class PersonCardTest extends GuiUnitTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        // no tags"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        Person personWithNoTags \u003d new PersonBuilder().withTags(new String[0]).build();"},{"lineNumber":23,"author":{"gitID":"donjar"},"content":"        PersonCard personCard \u003d new PersonCard(personWithNoTags, 1, true, new LogicStub());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithNoTags, 1);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // with tags"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        Person personWithTags \u003d new PersonBuilder().build();"},{"lineNumber":29,"author":{"gitID":"donjar"},"content":"        personCard \u003d new PersonCard(personWithTags, 2, true, new LogicStub());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithTags, 2);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // changes made to Person reflects on card"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            personWithTags.setName(ALICE.getName());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            personWithTags.setAddress(ALICE.getAddress());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            personWithTags.setEmail(ALICE.getEmail());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            personWithTags.setPhone(ALICE.getPhone());"},{"lineNumber":39,"author":{"gitID":"500poundbear"},"content":"            personWithTags.setRemark(ALICE.getRemark());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            personWithTags.setTags(ALICE.getTags());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithTags, 2);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":48,"author":{"gitID":"donjar"},"content":"        PersonCard personCard \u003d new PersonCard(person, 0, true, new LogicStub());"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // same person, same index -\u003e returns true"},{"lineNumber":51,"author":{"gitID":"donjar"},"content":"        PersonCard copy \u003d new PersonCard(person, 0, true, new LogicStub());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(copy));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(personCard));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(null));"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(0));"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // different person, same index -\u003e returns false"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Person differentPerson \u003d new PersonBuilder().withName(\"differentName\").build();"},{"lineNumber":65,"author":{"gitID":"donjar"},"content":"        assertFalse(personCard.equals(new PersonCard(differentPerson, 0, true, new LogicStub())));"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // same person, different index -\u003e returns false"},{"lineNumber":68,"author":{"gitID":"donjar"},"content":"        assertFalse(personCard.equals(new PersonCard(person, 1, true, new LogicStub())));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * {@code expectedId}."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    private void assertCardDisplay(PersonCard personCard, ReadOnlyPerson expectedPerson, int expectedId) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // verify id is displayed correctly"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // verify person details are displayed correctly"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCardDisplaysPerson(expectedPerson, personCardHandle);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"500poundbear":1,"donjar":7,"-":78}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":27,"author":{"gitID":"kenpaxtonlim"},"content":"        assertEquals(expectedCard.getSocialMedia(), actualCard.getSocialMedia());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(ReadOnlyPerson expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"},{"lineNumber":38,"author":{"gitID":"500poundbear"},"content":"        assertEquals(expectedPerson.getRemark().value, actualCard.getRemark());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                actualCard.getTags());"},{"lineNumber":41,"author":{"gitID":"kenpaxtonlim"},"content":"        assertEquals(expectedPerson.getSocialMedia().toString(), actualCard.getSocialMedia());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, ReadOnlyPerson... persons) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cReadOnlyPerson\u003e persons) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new ReadOnlyPerson[0]));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"500poundbear":1,"kenpaxtonlim":2,"-":73}},{"path":"src/test/java/seedu/address/ui/testutil/UiPartRule.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.concurrent.TimeoutException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.Parent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiPart;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Provides an isolated stage to test an individual {@code UiPart}."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class UiPartRule extends StageRule {"},{"lineNumber":15,"author":{"gitID":"donjar"},"content":"    private static final String[] CSS_FILES \u003d {\"view/pimp.css\"};"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void setUiPart(final UiPart\u003c? extends Parent\u003e uiPart) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            FxToolkit.setupScene(() -\u003e {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"                Scene scene \u003d new Scene(uiPart.getRoot());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"                scene.getStylesheets().setAll(CSS_FILES);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"                return scene;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            });"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            FxToolkit.showStage();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Timeout should not happen.\", te);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"donjar":1,"-":28}},{"path":"src/test/java/seedu/address/ui/BrowserPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.GOOGLE_SEARCH_URL_PREFIX;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.GOOGLE_SEARCH_URL_SUFFIX;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":20,"author":{"gitID":"donjar"},"content":"import seedu.address.ui.testutil.LogicStub;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"donjar"},"content":"        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent("},{"lineNumber":31,"author":{"gitID":"donjar"},"content":"                new PersonCard(ALICE, 0, true, new LogicStub()));"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void display() throws Exception {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // default web page"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // associated web page of a person"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        postNow(selectionChangedEventStub);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        URL expectedPersonUrl \u003d new URL(GOOGLE_SEARCH_URL_PREFIX"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                + ALICE.getName().fullName.replaceAll(\" \", \"+\") + GOOGLE_SEARCH_URL_SUFFIX);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"donjar":3,"-":50}},{"path":"src/test/java/seedu/address/commons/core/ConfigTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ConfigTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":17,"author":{"gitID":"donjar"},"content":"        String defaultConfigAsString \u003d \"App title : Personal Information Management Program\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"                + \"Current log level : INFO\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"                + \"Preference file Location : preferences.json\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"donjar":1,"-":31}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"donjar"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"donjar"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Logic logic \u003d new LogicManager(model);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(invalidCommand);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(deleteCommand);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void execute_validCommand_success() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(listCommand);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        logic.getFilteredPersonList().remove(0);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Also confirms that {@code expectedModel} is as specified."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     *      - {@code expectedModel}\u0027s address book was saved to the storage file."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                                           String expectedMessage, Model expectedModel) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, null);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, e.getClass());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * {@code HistoryCommand}."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    private void assertHistoryCorrect(String... expectedCommands) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            String expectedMessage \u003d String.format("},{"lineNumber":120,"author":{"gitID":"donjar"},"content":"                    HistoryCommand.MESSAGE_SUCCESS,"},{"lineNumber":121,"author":{"gitID":"donjar"},"content":"                    HistoryCommand.getHistoryText(Arrays.asList(expectedCommands)));"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        } catch (ParseException | CommandException e) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"donjar":4,"-":123}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.FACEBOOK_DESC_AMY;"},{"lineNumber":10,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.FACEBOOK_DESC_BOB;"},{"lineNumber":11,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INSTAGRAM_DESC_AMY;"},{"lineNumber":12,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INSTAGRAM_DESC_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":24,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TWIITER_DESC_AMY;"},{"lineNumber":25,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TWIITER_DESC_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":32,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_USERNAME_BOB;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":36,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":71,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":74,"author":{"gitID":"kenpaxtonlim"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \""},{"lineNumber":75,"author":{"gitID":"kenpaxtonlim"},"content":"                + FACEBOOK_DESC_BOB + \" \" + TWIITER_DESC_BOB + \" \" + INSTAGRAM_DESC_BOB;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":77,"author":{"gitID":"kenpaxtonlim"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":78,"author":{"gitID":"kenpaxtonlim"},"content":"                .withSocialMedia(VALID_USERNAME_BOB, VALID_USERNAME_BOB, VALID_USERNAME_BOB).build();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":83,"author":{"gitID":"donjar"},"content":"        String expectedResultMessage \u003d UndoCommand.getSuccessMessage(1);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":88,"author":{"gitID":"donjar"},"content":"        expectedResultMessage \u003d RedoCommand.getSuccessMessage(1);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":90,"author":{"gitID":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":94,"author":{"gitID":"kenpaxtonlim"},"content":"        index \u003d INDEX_SECOND_PERSON;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        ReadOnlyPerson personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":124,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":125,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":134,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":135,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        selectPerson(index);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":140,"author":{"gitID":"kenpaxtonlim"},"content":"                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND + FACEBOOK_DESC_AMY + TWIITER_DESC_AMY + INSTAGRAM_DESC_AMY;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":149,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":153,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":158,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":162,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":166,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"},{"lineNumber":170,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"},{"lineNumber":174,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"},{"lineNumber":186,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":194,"author":{"gitID":"kenpaxtonlim"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND"},{"lineNumber":195,"author":{"gitID":"kenpaxtonlim"},"content":"                + FACEBOOK_DESC_BOB + TWIITER_DESC_BOB + INSTAGRAM_DESC_BOB;"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":200,"author":{"gitID":"kenpaxtonlim"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + FACEBOOK_DESC_BOB + TWIITER_DESC_BOB + INSTAGRAM_DESC_BOB;"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, ReadOnlyPerson, Index)} except that"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, ReadOnlyPerson, Index)"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, ReadOnlyPerson editedPerson) {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, ReadOnlyPerson editedPerson,"},{"lineNumber":223,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":224,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":228,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":232,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":236,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":255,"author":{"gitID":"donjar"},"content":"     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":262,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":275,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":277,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":278,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":279,"author":{"gitID":"donjar"},"content":"     * 4. Asserts that the browser url, selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":280,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":281,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":282,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":284,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kenpaxtonlim":18,"donjar":4,"-":271}},{"path":"src/test/java/seedu/address/logic/parser/RedoCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"donjar"},"content":"// @@author donjar"},{"lineNumber":2,"author":{"gitID":"donjar"},"content":""},{"lineNumber":3,"author":{"gitID":"donjar"},"content":"package seedu.address.logic.parser;"},{"lineNumber":4,"author":{"gitID":"donjar"},"content":""},{"lineNumber":5,"author":{"gitID":"donjar"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"donjar"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":7,"author":{"gitID":"donjar"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":8,"author":{"gitID":"donjar"},"content":""},{"lineNumber":9,"author":{"gitID":"donjar"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"donjar"},"content":""},{"lineNumber":11,"author":{"gitID":"donjar"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":12,"author":{"gitID":"donjar"},"content":""},{"lineNumber":13,"author":{"gitID":"donjar"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"donjar"},"content":" * Test scope: similar to {@code DeleteCommandParserTest}."},{"lineNumber":15,"author":{"gitID":"donjar"},"content":" * @see DeleteCommandParserTest"},{"lineNumber":16,"author":{"gitID":"donjar"},"content":" */"},{"lineNumber":17,"author":{"gitID":"donjar"},"content":"public class RedoCommandParserTest {"},{"lineNumber":18,"author":{"gitID":"donjar"},"content":""},{"lineNumber":19,"author":{"gitID":"donjar"},"content":"    private RedoCommandParser parser \u003d new RedoCommandParser();"},{"lineNumber":20,"author":{"gitID":"donjar"},"content":""},{"lineNumber":21,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"donjar"},"content":"    public void parse_validArgs_returnsRedoCommand() {"},{"lineNumber":23,"author":{"gitID":"donjar"},"content":"        assertParseSuccess(parser, \"12\", new RedoCommand(12));"},{"lineNumber":24,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"donjar"},"content":""},{"lineNumber":26,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"donjar"},"content":"    public void parse_emptyArgs_returnsRedoCommand() {"},{"lineNumber":28,"author":{"gitID":"donjar"},"content":"        assertParseSuccess(parser, \"\", new RedoCommand(1));"},{"lineNumber":29,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"donjar"},"content":""},{"lineNumber":31,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"donjar"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":33,"author":{"gitID":"donjar"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, RedoCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"donjar"},"content":"}"}],"authorContributionMap":{"donjar":35}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":9,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":10,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":11,"author":{"gitID":"500poundbear"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"kenpaxtonlim"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"kenpaxtonlim"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":25,"author":{"gitID":"kenpaxtonlim"},"content":"import seedu.address.logic.commands.AddRemoveTagsCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":32,"author":{"gitID":"donjar"},"content":"import seedu.address.logic.commands.FindRegexCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":36,"author":{"gitID":"kenpaxtonlim"},"content":"import seedu.address.logic.commands.QuickHelpCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":38,"author":{"gitID":"500poundbear"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":40,"author":{"gitID":"donjar"},"content":"import seedu.address.logic.commands.SizeCommand;"},{"lineNumber":41,"author":{"gitID":"kenpaxtonlim"},"content":"import seedu.address.logic.commands.SocialMediaCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":43,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":46,"author":{"gitID":"donjar"},"content":"import seedu.address.model.person.NameMatchesRegexPredicate;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":48,"author":{"gitID":"500poundbear"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":49,"author":{"gitID":"kenpaxtonlim"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"kenpaxtonlim"},"content":"    //@@author kenpaxtonlim"},{"lineNumber":68,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"kenpaxtonlim"},"content":"    public void parseCommand_add_alias() throws Exception {"},{"lineNumber":70,"author":{"gitID":"kenpaxtonlim"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":71,"author":{"gitID":"kenpaxtonlim"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommandAlias(person));"},{"lineNumber":72,"author":{"gitID":"kenpaxtonlim"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":73,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"kenpaxtonlim"},"content":"    //@@author"},{"lineNumber":75,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"kenpaxtonlim"},"content":"    //@@author kenpaxtonlim"},{"lineNumber":83,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"kenpaxtonlim"},"content":"    public void parseCommand_clear_alias() throws Exception {"},{"lineNumber":85,"author":{"gitID":"kenpaxtonlim"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"},{"lineNumber":86,"author":{"gitID":"kenpaxtonlim"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":87,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"kenpaxtonlim"},"content":"    //@@author"},{"lineNumber":89,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":93,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"kenpaxtonlim"},"content":"    //@@author kenpaxtonlim"},{"lineNumber":98,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"kenpaxtonlim"},"content":"    public void parseCommand_delete_alias() throws Exception {"},{"lineNumber":100,"author":{"gitID":"kenpaxtonlim"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":101,"author":{"gitID":"kenpaxtonlim"},"content":"                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":102,"author":{"gitID":"kenpaxtonlim"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":103,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"kenpaxtonlim"},"content":"    //@@author"},{"lineNumber":105,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":111,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"kenpaxtonlim"},"content":"    //@@author kenpaxtonlim"},{"lineNumber":116,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"kenpaxtonlim"},"content":"    public void parseCommand_edit_alias() throws Exception {"},{"lineNumber":118,"author":{"gitID":"kenpaxtonlim"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":119,"author":{"gitID":"kenpaxtonlim"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":120,"author":{"gitID":"kenpaxtonlim"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""},{"lineNumber":121,"author":{"gitID":"kenpaxtonlim"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":122,"author":{"gitID":"kenpaxtonlim"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":123,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":125,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"kenpaxtonlim"},"content":"    public void parseCommand_addtags() throws Exception {"},{"lineNumber":127,"author":{"gitID":"kenpaxtonlim"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":128,"author":{"gitID":"kenpaxtonlim"},"content":"        ArrayList\u003cString\u003e tagsList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":129,"author":{"gitID":"kenpaxtonlim"},"content":"        tagsList.add(VALID_TAG_HUSBAND);"},{"lineNumber":130,"author":{"gitID":"kenpaxtonlim"},"content":"        tagsList.add(VALID_TAG_FRIEND);"},{"lineNumber":131,"author":{"gitID":"kenpaxtonlim"},"content":"        Set\u003cTag\u003e tags \u003d ParserUtil.parseTags(tagsList);"},{"lineNumber":132,"author":{"gitID":"kenpaxtonlim"},"content":"        AddRemoveTagsCommand command \u003d (AddRemoveTagsCommand) parser.parseCommand("},{"lineNumber":133,"author":{"gitID":"kenpaxtonlim"},"content":"                AddRemoveTagsCommand.COMMAND_WORD + \" add \" + INDEX_FIRST_PERSON.getOneBased() + \" \""},{"lineNumber":134,"author":{"gitID":"kenpaxtonlim"},"content":"                        + VALID_TAG_HUSBAND + \" \" + VALID_TAG_FRIEND);"},{"lineNumber":135,"author":{"gitID":"kenpaxtonlim"},"content":"        assertEquals(new AddRemoveTagsCommand(true, INDEX_FIRST_PERSON, tags), command);"},{"lineNumber":136,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":138,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"kenpaxtonlim"},"content":"    public void parseCommand_addtags_alias() throws Exception {"},{"lineNumber":140,"author":{"gitID":"kenpaxtonlim"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":141,"author":{"gitID":"kenpaxtonlim"},"content":"        ArrayList\u003cString\u003e tagsList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":142,"author":{"gitID":"kenpaxtonlim"},"content":"        tagsList.add(VALID_TAG_HUSBAND);"},{"lineNumber":143,"author":{"gitID":"kenpaxtonlim"},"content":"        tagsList.add(VALID_TAG_FRIEND);"},{"lineNumber":144,"author":{"gitID":"kenpaxtonlim"},"content":"        Set\u003cTag\u003e tags \u003d ParserUtil.parseTags(tagsList);"},{"lineNumber":145,"author":{"gitID":"kenpaxtonlim"},"content":"        AddRemoveTagsCommand command \u003d (AddRemoveTagsCommand) parser.parseCommand("},{"lineNumber":146,"author":{"gitID":"kenpaxtonlim"},"content":"                AddRemoveTagsCommand.COMMAND_ALIAS + \" add \" + INDEX_FIRST_PERSON.getOneBased() + \" \""},{"lineNumber":147,"author":{"gitID":"kenpaxtonlim"},"content":"                        + VALID_TAG_HUSBAND + \" \" + VALID_TAG_FRIEND);"},{"lineNumber":148,"author":{"gitID":"kenpaxtonlim"},"content":"        assertEquals(new AddRemoveTagsCommand(true, INDEX_FIRST_PERSON, tags), command);"},{"lineNumber":149,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":151,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"kenpaxtonlim"},"content":"    public void parseCommand_removetags() throws Exception {"},{"lineNumber":153,"author":{"gitID":"kenpaxtonlim"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":154,"author":{"gitID":"kenpaxtonlim"},"content":"        ArrayList\u003cString\u003e tagsList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":155,"author":{"gitID":"kenpaxtonlim"},"content":"        tagsList.add(VALID_TAG_HUSBAND);"},{"lineNumber":156,"author":{"gitID":"kenpaxtonlim"},"content":"        tagsList.add(VALID_TAG_FRIEND);"},{"lineNumber":157,"author":{"gitID":"kenpaxtonlim"},"content":"        Set\u003cTag\u003e tags \u003d ParserUtil.parseTags(tagsList);"},{"lineNumber":158,"author":{"gitID":"kenpaxtonlim"},"content":"        AddRemoveTagsCommand command \u003d (AddRemoveTagsCommand) parser.parseCommand("},{"lineNumber":159,"author":{"gitID":"kenpaxtonlim"},"content":"                AddRemoveTagsCommand.COMMAND_WORD + \" remove \" + INDEX_FIRST_PERSON.getOneBased() + \" \""},{"lineNumber":160,"author":{"gitID":"kenpaxtonlim"},"content":"                        + VALID_TAG_HUSBAND + \" \" + VALID_TAG_FRIEND);"},{"lineNumber":161,"author":{"gitID":"kenpaxtonlim"},"content":"        assertEquals(new AddRemoveTagsCommand(false, INDEX_FIRST_PERSON, tags), command);"},{"lineNumber":162,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":164,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":165,"author":{"gitID":"kenpaxtonlim"},"content":"    public void parseCommand_removetags_alias() throws Exception {"},{"lineNumber":166,"author":{"gitID":"kenpaxtonlim"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":167,"author":{"gitID":"kenpaxtonlim"},"content":"        ArrayList\u003cString\u003e tagsList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":168,"author":{"gitID":"kenpaxtonlim"},"content":"        tagsList.add(VALID_TAG_HUSBAND);"},{"lineNumber":169,"author":{"gitID":"kenpaxtonlim"},"content":"        tagsList.add(VALID_TAG_FRIEND);"},{"lineNumber":170,"author":{"gitID":"kenpaxtonlim"},"content":"        Set\u003cTag\u003e tags \u003d ParserUtil.parseTags(tagsList);"},{"lineNumber":171,"author":{"gitID":"kenpaxtonlim"},"content":"        AddRemoveTagsCommand command \u003d (AddRemoveTagsCommand) parser.parseCommand("},{"lineNumber":172,"author":{"gitID":"kenpaxtonlim"},"content":"                AddRemoveTagsCommand.COMMAND_ALIAS + \" remove \" + INDEX_FIRST_PERSON.getOneBased() + \" \""},{"lineNumber":173,"author":{"gitID":"kenpaxtonlim"},"content":"                        + VALID_TAG_HUSBAND + \" \" + VALID_TAG_FRIEND);"},{"lineNumber":174,"author":{"gitID":"kenpaxtonlim"},"content":"        assertEquals(new AddRemoveTagsCommand(false, INDEX_FIRST_PERSON, tags), command);"},{"lineNumber":175,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"kenpaxtonlim"},"content":"    //@@author"},{"lineNumber":177,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"kenpaxtonlim"},"content":"    //@@author kenpaxtonlim"},{"lineNumber":185,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":186,"author":{"gitID":"kenpaxtonlim"},"content":"    public void parseCommand_exit_alias() throws Exception {"},{"lineNumber":187,"author":{"gitID":"kenpaxtonlim"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS) instanceof ExitCommand);"},{"lineNumber":188,"author":{"gitID":"kenpaxtonlim"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS + \" 3\") instanceof ExitCommand);"},{"lineNumber":189,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"kenpaxtonlim"},"content":"    //@@author"},{"lineNumber":191,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":196,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"donjar"},"content":"    // @@author donjar"},{"lineNumber":201,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":202,"author":{"gitID":"donjar"},"content":"    public void parseCommand_findregex() throws Exception {"},{"lineNumber":203,"author":{"gitID":"donjar"},"content":"        FindRegexCommand command \u003d (FindRegexCommand) parser.parseCommand(FindRegexCommand.COMMAND_WORD + \" asdf\");"},{"lineNumber":204,"author":{"gitID":"donjar"},"content":"        assertEquals(new FindRegexCommand(new NameMatchesRegexPredicate(\"asdf\")), command);"},{"lineNumber":205,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"donjar"},"content":""},{"lineNumber":207,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":208,"author":{"gitID":"donjar"},"content":"    public void parseCommand_findregex_alias() throws Exception {"},{"lineNumber":209,"author":{"gitID":"donjar"},"content":"        FindRegexCommand command \u003d (FindRegexCommand) parser.parseCommand(FindRegexCommand.COMMAND_ALIAS + \" asdf\");"},{"lineNumber":210,"author":{"gitID":"donjar"},"content":"        assertEquals(new FindRegexCommand(new NameMatchesRegexPredicate(\"asdf\")), command);"},{"lineNumber":211,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"donjar"},"content":"    // @@author"},{"lineNumber":213,"author":{"gitID":"donjar"},"content":""},{"lineNumber":214,"author":{"gitID":"kenpaxtonlim"},"content":"    //@@author kenpaxtonlim"},{"lineNumber":215,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":216,"author":{"gitID":"kenpaxtonlim"},"content":"    public void parseCommand_find_alias() throws Exception {"},{"lineNumber":217,"author":{"gitID":"kenpaxtonlim"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":218,"author":{"gitID":"kenpaxtonlim"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":219,"author":{"gitID":"kenpaxtonlim"},"content":"                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":220,"author":{"gitID":"kenpaxtonlim"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":221,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"kenpaxtonlim"},"content":"    //@@author"},{"lineNumber":223,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"kenpaxtonlim"},"content":"    //@@author kenpaxtonlim"},{"lineNumber":231,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":232,"author":{"gitID":"kenpaxtonlim"},"content":"    public void parseCommand_help_alias() throws Exception {"},{"lineNumber":233,"author":{"gitID":"kenpaxtonlim"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS) instanceof HelpCommand);"},{"lineNumber":234,"author":{"gitID":"kenpaxtonlim"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS + \" 3\") instanceof HelpCommand);"},{"lineNumber":235,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"kenpaxtonlim"},"content":"    //@@author"},{"lineNumber":237,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":244,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":245,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"kenpaxtonlim"},"content":"    //@@author kenpaxtonlim"},{"lineNumber":252,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":253,"author":{"gitID":"kenpaxtonlim"},"content":"    public void parseCommand_history_alias() throws Exception {"},{"lineNumber":254,"author":{"gitID":"kenpaxtonlim"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"},{"lineNumber":255,"author":{"gitID":"kenpaxtonlim"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"},{"lineNumber":256,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":257,"author":{"gitID":"kenpaxtonlim"},"content":"        try {"},{"lineNumber":258,"author":{"gitID":"kenpaxtonlim"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":259,"author":{"gitID":"kenpaxtonlim"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":260,"author":{"gitID":"kenpaxtonlim"},"content":"        } catch (ParseException pe) {"},{"lineNumber":261,"author":{"gitID":"kenpaxtonlim"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":262,"author":{"gitID":"kenpaxtonlim"},"content":"        }"},{"lineNumber":263,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"kenpaxtonlim"},"content":"    //@@author"},{"lineNumber":265,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"kenpaxtonlim"},"content":"    //@@author kenpaxtonlim"},{"lineNumber":273,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":274,"author":{"gitID":"kenpaxtonlim"},"content":"    public void parseCommand_list_alias() throws Exception {"},{"lineNumber":275,"author":{"gitID":"kenpaxtonlim"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"},{"lineNumber":276,"author":{"gitID":"kenpaxtonlim"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"},{"lineNumber":277,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"kenpaxtonlim"},"content":"    //@@author"},{"lineNumber":279,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":280,"author":{"gitID":"500poundbear"},"content":"    @Test"},{"lineNumber":281,"author":{"gitID":"500poundbear"},"content":"    public void parseCommand_remark() throws Exception {"},{"lineNumber":282,"author":{"gitID":"500poundbear"},"content":"        final String remark \u003d \"This is a remark\";"},{"lineNumber":283,"author":{"gitID":"500poundbear"},"content":"        RemarkCommand command \u003d (RemarkCommand) parser.parseCommand(RemarkCommand.COMMAND_WORD"},{"lineNumber":284,"author":{"gitID":"500poundbear"},"content":"                + \" \" + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_REMARK + \" \""},{"lineNumber":285,"author":{"gitID":"500poundbear"},"content":"                + remark);"},{"lineNumber":286,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":287,"author":{"gitID":"500poundbear"},"content":"        assertEquals(new RemarkCommand(INDEX_FIRST_PERSON, new Remark(remark)), command);"},{"lineNumber":288,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":289,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":292,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":293,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"kenpaxtonlim"},"content":"    //@@author kenpaxtonlim"},{"lineNumber":298,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":299,"author":{"gitID":"kenpaxtonlim"},"content":"    public void parseCommand_select_alias() throws Exception {"},{"lineNumber":300,"author":{"gitID":"kenpaxtonlim"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":301,"author":{"gitID":"kenpaxtonlim"},"content":"                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":302,"author":{"gitID":"kenpaxtonlim"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":303,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":304,"author":{"gitID":"kenpaxtonlim"},"content":"    //@@author"},{"lineNumber":305,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":307,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":308,"author":{"gitID":"donjar"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD + \" 1\") instanceof RedoCommand);"},{"lineNumber":309,"author":{"gitID":"donjar"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD + \" 3\") instanceof RedoCommand);"},{"lineNumber":310,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":313,"author":{"gitID":"kenpaxtonlim"},"content":"    public void parseCommand_redoCommandAlias_returnsRedoCommand() throws Exception {"},{"lineNumber":314,"author":{"gitID":"donjar"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS + \" 1\") instanceof RedoCommand);"},{"lineNumber":315,"author":{"gitID":"donjar"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS + \" 3\") instanceof RedoCommand);"},{"lineNumber":316,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":317,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":319,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":320,"author":{"gitID":"donjar"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD + \" 1\") instanceof UndoCommand);"},{"lineNumber":321,"author":{"gitID":"donjar"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD + \" 3\") instanceof UndoCommand);"},{"lineNumber":322,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":323,"author":{"gitID":"-"},"content":""},{"lineNumber":324,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":325,"author":{"gitID":"kenpaxtonlim"},"content":"    public void parseCommand_undoCommandAlias_returnsUndoCommand() throws Exception {"},{"lineNumber":326,"author":{"gitID":"donjar"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS + \" 1\") instanceof UndoCommand);"},{"lineNumber":327,"author":{"gitID":"donjar"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS + \" 3\") instanceof UndoCommand);"},{"lineNumber":328,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":329,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":330,"author":{"gitID":"donjar"},"content":"    // @@author donjar"},{"lineNumber":331,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":332,"author":{"gitID":"donjar"},"content":"    public void parseCommand_sizeCommandWord_returnsSizeCommand() throws Exception {"},{"lineNumber":333,"author":{"gitID":"donjar"},"content":"        assertTrue(parser.parseCommand(SizeCommand.COMMAND_WORD + \" 1\") instanceof SizeCommand);"},{"lineNumber":334,"author":{"gitID":"donjar"},"content":"        assertTrue(parser.parseCommand(SizeCommand.COMMAND_WORD + \" -1\") instanceof SizeCommand);"},{"lineNumber":335,"author":{"gitID":"donjar"},"content":"        assertTrue(parser.parseCommand(SizeCommand.COMMAND_WORD) instanceof SizeCommand);"},{"lineNumber":336,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":337,"author":{"gitID":"donjar"},"content":""},{"lineNumber":338,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":339,"author":{"gitID":"donjar"},"content":"    public void parseCommand_sizeCommandAlias_returnsSizeCommand() throws Exception {"},{"lineNumber":340,"author":{"gitID":"donjar"},"content":"        assertTrue(parser.parseCommand(SizeCommand.COMMAND_ALIAS + \" 1\") instanceof SizeCommand);"},{"lineNumber":341,"author":{"gitID":"donjar"},"content":"        assertTrue(parser.parseCommand(SizeCommand.COMMAND_ALIAS + \" -1\") instanceof SizeCommand);"},{"lineNumber":342,"author":{"gitID":"donjar"},"content":"        assertTrue(parser.parseCommand(SizeCommand.COMMAND_ALIAS) instanceof SizeCommand);"},{"lineNumber":343,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":344,"author":{"gitID":"donjar"},"content":"    // @@author"},{"lineNumber":345,"author":{"gitID":"donjar"},"content":""},{"lineNumber":346,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":347,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":348,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":349,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":350,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":351,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":354,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":355,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":356,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":357,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":358,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":359,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":360,"author":{"gitID":"kenpaxtonlim"},"content":"    //@@author kenpaxtonlim"},{"lineNumber":361,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":362,"author":{"gitID":"kenpaxtonlim"},"content":"    public void parseCommand_socialmedia() throws Exception {"},{"lineNumber":363,"author":{"gitID":"kenpaxtonlim"},"content":"        SocialMediaCommand command \u003d (SocialMediaCommand) parser.parseCommand("},{"lineNumber":364,"author":{"gitID":"kenpaxtonlim"},"content":"                SocialMediaCommand.COMMAND_WORD + \" \""},{"lineNumber":365,"author":{"gitID":"kenpaxtonlim"},"content":"                        + SocialMediaCommand.TYPE_FACEBOOK + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":366,"author":{"gitID":"kenpaxtonlim"},"content":"        assertEquals(new SocialMediaCommand(INDEX_FIRST_PERSON, SocialMediaCommand.TYPE_FACEBOOK), command);"},{"lineNumber":367,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":368,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":369,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":370,"author":{"gitID":"kenpaxtonlim"},"content":"    public void parseCommand_socialmedia_alias() throws Exception {"},{"lineNumber":371,"author":{"gitID":"kenpaxtonlim"},"content":"        SocialMediaCommand command \u003d (SocialMediaCommand) parser.parseCommand("},{"lineNumber":372,"author":{"gitID":"kenpaxtonlim"},"content":"                SocialMediaCommand.COMMAND_ALIAS + \" \""},{"lineNumber":373,"author":{"gitID":"kenpaxtonlim"},"content":"                        + SocialMediaCommand.TYPE_FACEBOOK + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":374,"author":{"gitID":"kenpaxtonlim"},"content":"        assertEquals(new SocialMediaCommand(INDEX_FIRST_PERSON, SocialMediaCommand.TYPE_FACEBOOK), command);"},{"lineNumber":375,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":376,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":377,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":378,"author":{"gitID":"kenpaxtonlim"},"content":"    public void parseCommand_quickhelp() throws Exception {"},{"lineNumber":379,"author":{"gitID":"kenpaxtonlim"},"content":"        QuickHelpCommand command \u003d (QuickHelpCommand) parser.parseCommand(QuickHelpCommand.COMMAND_WORD);"},{"lineNumber":380,"author":{"gitID":"kenpaxtonlim"},"content":"        assertEquals(new QuickHelpCommand(), command);"},{"lineNumber":381,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":382,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":383,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":384,"author":{"gitID":"kenpaxtonlim"},"content":"    public void parseCommand_quickhelp_alias() throws Exception {"},{"lineNumber":385,"author":{"gitID":"kenpaxtonlim"},"content":"        QuickHelpCommand command \u003d (QuickHelpCommand) parser.parseCommand(QuickHelpCommand.COMMAND_ALIAS);"},{"lineNumber":386,"author":{"gitID":"kenpaxtonlim"},"content":"        assertEquals(new QuickHelpCommand(), command);"},{"lineNumber":387,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":388,"author":{"gitID":"kenpaxtonlim"},"content":"    //@@author"},{"lineNumber":389,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"500poundbear":15,"kenpaxtonlim":193,"donjar":41,"-":140}},{"path":"src/test/java/seedu/address/ui/testutil/LogicStub.java","lines":[{"lineNumber":1,"author":{"gitID":"donjar"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"donjar"},"content":""},{"lineNumber":3,"author":{"gitID":"donjar"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":4,"author":{"gitID":"donjar"},"content":""},{"lineNumber":5,"author":{"gitID":"donjar"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"donjar"},"content":" * This class gives a stub of Logic for use in UI components that depend on Logic."},{"lineNumber":15,"author":{"gitID":"donjar"},"content":" */"},{"lineNumber":16,"author":{"gitID":"donjar"},"content":"public class LogicStub implements Logic {"},{"lineNumber":17,"author":{"gitID":"donjar"},"content":""},{"lineNumber":18,"author":{"gitID":"donjar"},"content":"    // @@author donjar"},{"lineNumber":19,"author":{"gitID":"donjar"},"content":""},{"lineNumber":20,"author":{"gitID":"donjar"},"content":"    private ObservableList\u003cReadOnlyPerson\u003e persons;"},{"lineNumber":21,"author":{"gitID":"donjar"},"content":""},{"lineNumber":22,"author":{"gitID":"donjar"},"content":"    public LogicStub() {"},{"lineNumber":23,"author":{"gitID":"donjar"},"content":"        this.persons \u003d null;"},{"lineNumber":24,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"donjar"},"content":""},{"lineNumber":26,"author":{"gitID":"donjar"},"content":"    public LogicStub(ObservableList\u003cReadOnlyPerson\u003e persons) {"},{"lineNumber":27,"author":{"gitID":"donjar"},"content":"        this.persons \u003d persons;"},{"lineNumber":28,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"donjar"},"content":""},{"lineNumber":30,"author":{"gitID":"donjar"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"donjar"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":32,"author":{"gitID":"donjar"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":33,"author":{"gitID":"donjar"},"content":"        return null;"},{"lineNumber":34,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"donjar"},"content":""},{"lineNumber":36,"author":{"gitID":"donjar"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"donjar"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getAllPersonList() {"},{"lineNumber":38,"author":{"gitID":"donjar"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":39,"author":{"gitID":"donjar"},"content":"        return null;"},{"lineNumber":40,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"donjar"},"content":""},{"lineNumber":42,"author":{"gitID":"donjar"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"donjar"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":44,"author":{"gitID":"donjar"},"content":"        if (persons \u003d\u003d null) {"},{"lineNumber":45,"author":{"gitID":"donjar"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":46,"author":{"gitID":"donjar"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"donjar"},"content":""},{"lineNumber":48,"author":{"gitID":"donjar"},"content":"        return persons;"},{"lineNumber":49,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"donjar"},"content":""},{"lineNumber":51,"author":{"gitID":"donjar"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"donjar"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":53,"author":{"gitID":"donjar"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":54,"author":{"gitID":"donjar"},"content":"        return null;"},{"lineNumber":55,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"donjar"},"content":""},{"lineNumber":57,"author":{"gitID":"donjar"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"donjar"},"content":"    public int getFontSizeChange() {"},{"lineNumber":59,"author":{"gitID":"donjar"},"content":"        return 0;"},{"lineNumber":60,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"donjar"},"content":"}"}],"authorContributionMap":{"donjar":53,"-":8}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":8,"author":{"gitID":"donjar"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_NUMBER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"donjar"},"content":"    // @@author donjar"},{"lineNumber":68,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"donjar"},"content":"    public void parsePositiveInteger_validInput_success() throws Exception {"},{"lineNumber":70,"author":{"gitID":"donjar"},"content":"        // No whitespaces"},{"lineNumber":71,"author":{"gitID":"donjar"},"content":"        assertEquals(1, ParserUtil.parsePositiveInteger(\"1\"));"},{"lineNumber":72,"author":{"gitID":"donjar"},"content":"        assertEquals(12, ParserUtil.parsePositiveInteger(\"12\"));"},{"lineNumber":73,"author":{"gitID":"donjar"},"content":""},{"lineNumber":74,"author":{"gitID":"donjar"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":75,"author":{"gitID":"donjar"},"content":"        assertEquals(1, ParserUtil.parsePositiveInteger(\" 1\"));"},{"lineNumber":76,"author":{"gitID":"donjar"},"content":"        assertEquals(1, ParserUtil.parsePositiveInteger(\"1 \"));"},{"lineNumber":77,"author":{"gitID":"donjar"},"content":"        assertEquals(1, ParserUtil.parsePositiveInteger(\" 1 \"));"},{"lineNumber":78,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"donjar"},"content":""},{"lineNumber":80,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"donjar"},"content":"    public void parsePositiveInteger_zeroInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":82,"author":{"gitID":"donjar"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":83,"author":{"gitID":"donjar"},"content":"        thrown.expectMessage(MESSAGE_INVALID_NUMBER);"},{"lineNumber":84,"author":{"gitID":"donjar"},"content":""},{"lineNumber":85,"author":{"gitID":"donjar"},"content":"        ParserUtil.parsePositiveInteger(\"0\");"},{"lineNumber":86,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"donjar"},"content":""},{"lineNumber":88,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"donjar"},"content":"    public void parsePositiveInteger_negativeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":90,"author":{"gitID":"donjar"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":91,"author":{"gitID":"donjar"},"content":"        thrown.expectMessage(MESSAGE_INVALID_NUMBER);"},{"lineNumber":92,"author":{"gitID":"donjar"},"content":""},{"lineNumber":93,"author":{"gitID":"donjar"},"content":"        ParserUtil.parsePositiveInteger(\"-3\");"},{"lineNumber":94,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"donjar"},"content":""},{"lineNumber":96,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"donjar"},"content":"    public void parsePositiveInteger_nonIntegerInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":98,"author":{"gitID":"donjar"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":99,"author":{"gitID":"donjar"},"content":"        thrown.expectMessage(MESSAGE_INVALID_NUMBER);"},{"lineNumber":100,"author":{"gitID":"donjar"},"content":""},{"lineNumber":101,"author":{"gitID":"donjar"},"content":"        ParserUtil.parsePositiveInteger(\"0.3\");"},{"lineNumber":102,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"donjar"},"content":""},{"lineNumber":104,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"donjar"},"content":"    public void parsePositiveInteger_nonNumberInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":106,"author":{"gitID":"donjar"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":107,"author":{"gitID":"donjar"},"content":"        thrown.expectMessage(MESSAGE_INVALID_NUMBER);"},{"lineNumber":108,"author":{"gitID":"donjar"},"content":""},{"lineNumber":109,"author":{"gitID":"donjar"},"content":"        ParserUtil.parsePositiveInteger(\"afg\");"},{"lineNumber":110,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"donjar"},"content":""},{"lineNumber":112,"author":{"gitID":"donjar"},"content":"    // @@author donjar"},{"lineNumber":113,"author":{"gitID":"donjar"},"content":""},{"lineNumber":114,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"donjar"},"content":"    public void parseName_null_throwsNullPointerException() throws Exception {"},{"lineNumber":116,"author":{"gitID":"donjar"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":117,"author":{"gitID":"donjar"},"content":"        ParserUtil.parseName(null);"},{"lineNumber":118,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"donjar"},"content":""},{"lineNumber":120,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"donjar"},"content":"    public void parseName_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":122,"author":{"gitID":"donjar"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":123,"author":{"gitID":"donjar"},"content":"        ParserUtil.parseName(Optional.of(INVALID_NAME));"},{"lineNumber":124,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"donjar"},"content":""},{"lineNumber":126,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":127,"author":{"gitID":"donjar"},"content":"    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":128,"author":{"gitID":"donjar"},"content":"        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":129,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"donjar"},"content":""},{"lineNumber":131,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"donjar"},"content":"    public void parseName_validValue_returnsName() throws Exception {"},{"lineNumber":133,"author":{"gitID":"donjar"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":134,"author":{"gitID":"donjar"},"content":"        Optional\u003cName\u003e actualName \u003d ParserUtil.parseName(Optional.of(VALID_NAME));"},{"lineNumber":135,"author":{"gitID":"donjar"},"content":""},{"lineNumber":136,"author":{"gitID":"donjar"},"content":"        assertEquals(expectedName, actualName.get());"},{"lineNumber":137,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"donjar"},"content":""},{"lineNumber":139,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"donjar"},"content":"    public void parsePhone_null_throwsNullPointerException() throws Exception {"},{"lineNumber":141,"author":{"gitID":"donjar"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":142,"author":{"gitID":"donjar"},"content":"        ParserUtil.parsePhone(null);"},{"lineNumber":143,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"donjar"},"content":""},{"lineNumber":145,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"donjar"},"content":"    public void parsePhone_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":147,"author":{"gitID":"donjar"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":148,"author":{"gitID":"donjar"},"content":"        ParserUtil.parsePhone(Optional.of(INVALID_PHONE));"},{"lineNumber":149,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"donjar"},"content":""},{"lineNumber":151,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"donjar"},"content":"    public void parsePhone_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":153,"author":{"gitID":"donjar"},"content":"        assertFalse(ParserUtil.parsePhone(Optional.empty()).isPresent());"},{"lineNumber":154,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"donjar"},"content":""},{"lineNumber":156,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":157,"author":{"gitID":"donjar"},"content":"    public void parsePhone_validValue_returnsPhone() throws Exception {"},{"lineNumber":158,"author":{"gitID":"donjar"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":159,"author":{"gitID":"donjar"},"content":"        Optional\u003cPhone\u003e actualPhone \u003d ParserUtil.parsePhone(Optional.of(VALID_PHONE));"},{"lineNumber":160,"author":{"gitID":"donjar"},"content":""},{"lineNumber":161,"author":{"gitID":"donjar"},"content":"        assertEquals(expectedPhone, actualPhone.get());"},{"lineNumber":162,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"donjar"},"content":""},{"lineNumber":164,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":165,"author":{"gitID":"donjar"},"content":"    public void parseAddress_null_throwsNullPointerException() throws Exception {"},{"lineNumber":166,"author":{"gitID":"donjar"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":167,"author":{"gitID":"donjar"},"content":"        ParserUtil.parseAddress(null);"},{"lineNumber":168,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"donjar"},"content":""},{"lineNumber":170,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":171,"author":{"gitID":"donjar"},"content":"    public void parseAddress_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":172,"author":{"gitID":"donjar"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":173,"author":{"gitID":"donjar"},"content":"        ParserUtil.parseAddress(Optional.of(INVALID_ADDRESS));"},{"lineNumber":174,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"donjar"},"content":""},{"lineNumber":176,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":177,"author":{"gitID":"donjar"},"content":"    public void parseAddress_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":178,"author":{"gitID":"donjar"},"content":"        assertFalse(ParserUtil.parseAddress(Optional.empty()).isPresent());"},{"lineNumber":179,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"donjar"},"content":""},{"lineNumber":181,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":182,"author":{"gitID":"donjar"},"content":"    public void parseAddress_validValue_returnsAddress() throws Exception {"},{"lineNumber":183,"author":{"gitID":"donjar"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":184,"author":{"gitID":"donjar"},"content":"        Optional\u003cAddress\u003e actualAddress \u003d ParserUtil.parseAddress(Optional.of(VALID_ADDRESS));"},{"lineNumber":185,"author":{"gitID":"donjar"},"content":""},{"lineNumber":186,"author":{"gitID":"donjar"},"content":"        assertEquals(expectedAddress, actualAddress.get());"},{"lineNumber":187,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"donjar"},"content":""},{"lineNumber":189,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":190,"author":{"gitID":"donjar"},"content":"    public void parseEmail_null_throwsNullPointerException() throws Exception {"},{"lineNumber":191,"author":{"gitID":"donjar"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":192,"author":{"gitID":"donjar"},"content":"        ParserUtil.parseEmail(null);"},{"lineNumber":193,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"donjar"},"content":""},{"lineNumber":195,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":196,"author":{"gitID":"donjar"},"content":"    public void parseEmail_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":197,"author":{"gitID":"donjar"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":198,"author":{"gitID":"donjar"},"content":"        ParserUtil.parseEmail(Optional.of(INVALID_EMAIL));"},{"lineNumber":199,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"donjar"},"content":""},{"lineNumber":201,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":202,"author":{"gitID":"donjar"},"content":"    public void parseEmail_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":203,"author":{"gitID":"donjar"},"content":"        assertFalse(ParserUtil.parseEmail(Optional.empty()).isPresent());"},{"lineNumber":204,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"donjar"},"content":""},{"lineNumber":206,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":207,"author":{"gitID":"donjar"},"content":"    public void parseEmail_validValue_returnsEmail() throws Exception {"},{"lineNumber":208,"author":{"gitID":"donjar"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":209,"author":{"gitID":"donjar"},"content":"        Optional\u003cEmail\u003e actualEmail \u003d ParserUtil.parseEmail(Optional.of(VALID_EMAIL));"},{"lineNumber":210,"author":{"gitID":"donjar"},"content":""},{"lineNumber":211,"author":{"gitID":"donjar"},"content":"        assertEquals(expectedEmail, actualEmail.get());"},{"lineNumber":212,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"donjar"},"content":""},{"lineNumber":214,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":215,"author":{"gitID":"donjar"},"content":"    public void parseTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":216,"author":{"gitID":"donjar"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":217,"author":{"gitID":"donjar"},"content":"        ParserUtil.parseTags(null);"},{"lineNumber":218,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"donjar"},"content":""},{"lineNumber":220,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":221,"author":{"gitID":"donjar"},"content":"    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":222,"author":{"gitID":"donjar"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":223,"author":{"gitID":"donjar"},"content":"        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":224,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"donjar"},"content":""},{"lineNumber":226,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":227,"author":{"gitID":"donjar"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":228,"author":{"gitID":"donjar"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":229,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"donjar"},"content":""},{"lineNumber":231,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":232,"author":{"gitID":"donjar"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":233,"author":{"gitID":"donjar"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":234,"author":{"gitID":"donjar"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":235,"author":{"gitID":"donjar"},"content":""},{"lineNumber":236,"author":{"gitID":"donjar"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":237,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"donjar"},"content":"}"}],"authorContributionMap":{"donjar":173,"-":65}},{"path":"src/test/java/seedu/address/logic/parser/UndoCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"donjar"},"content":"// @@author donjar"},{"lineNumber":2,"author":{"gitID":"donjar"},"content":""},{"lineNumber":3,"author":{"gitID":"donjar"},"content":"package seedu.address.logic.parser;"},{"lineNumber":4,"author":{"gitID":"donjar"},"content":""},{"lineNumber":5,"author":{"gitID":"donjar"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"donjar"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":7,"author":{"gitID":"donjar"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":8,"author":{"gitID":"donjar"},"content":""},{"lineNumber":9,"author":{"gitID":"donjar"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"donjar"},"content":""},{"lineNumber":11,"author":{"gitID":"donjar"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":12,"author":{"gitID":"donjar"},"content":""},{"lineNumber":13,"author":{"gitID":"donjar"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"donjar"},"content":" * Test scope: similar to {@code DeleteCommandParserTest}."},{"lineNumber":15,"author":{"gitID":"donjar"},"content":" * @see DeleteCommandParserTest"},{"lineNumber":16,"author":{"gitID":"donjar"},"content":" */"},{"lineNumber":17,"author":{"gitID":"donjar"},"content":"public class UndoCommandParserTest {"},{"lineNumber":18,"author":{"gitID":"donjar"},"content":""},{"lineNumber":19,"author":{"gitID":"donjar"},"content":"    private UndoCommandParser parser \u003d new UndoCommandParser();"},{"lineNumber":20,"author":{"gitID":"donjar"},"content":""},{"lineNumber":21,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"donjar"},"content":"    public void parse_validArgs_returnsUndoCommand() {"},{"lineNumber":23,"author":{"gitID":"donjar"},"content":"        assertParseSuccess(parser, \"12\", new UndoCommand(12));"},{"lineNumber":24,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"donjar"},"content":""},{"lineNumber":26,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"donjar"},"content":"    public void parse_emptyArgs_returnsUndoCommand() {"},{"lineNumber":28,"author":{"gitID":"donjar"},"content":"        assertParseSuccess(parser, \"\", new UndoCommand(1));"},{"lineNumber":29,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"donjar"},"content":""},{"lineNumber":31,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"donjar"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":33,"author":{"gitID":"donjar"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, UndoCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"donjar"},"content":"}"}],"authorContributionMap":{"donjar":35}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.FACEBOOK_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.FACEBOOK_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INSTAGRAM_DESC_AMY;"},{"lineNumber":11,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INSTAGRAM_DESC_BOB;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":23,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TWIITER_DESC_AMY;"},{"lineNumber":24,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TWIITER_DESC_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":35,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_USERNAME_AMY;"},{"lineNumber":36,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_USERNAME_BOB;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":57,"author":{"gitID":"kenpaxtonlim"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND)"},{"lineNumber":58,"author":{"gitID":"kenpaxtonlim"},"content":"                .withSocialMedia(VALID_USERNAME_BOB, VALID_USERNAME_BOB, VALID_USERNAME_BOB).build();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":62,"author":{"gitID":"kenpaxtonlim"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + FACEBOOK_DESC_BOB"},{"lineNumber":63,"author":{"gitID":"kenpaxtonlim"},"content":"                + TWIITER_DESC_BOB + INSTAGRAM_DESC_BOB, new AddCommand(expectedPerson));"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB"},{"lineNumber":67,"author":{"gitID":"kenpaxtonlim"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + FACEBOOK_DESC_BOB"},{"lineNumber":68,"author":{"gitID":"kenpaxtonlim"},"content":"                + TWIITER_DESC_BOB + INSTAGRAM_DESC_BOB, new AddCommand(expectedPerson));"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"},{"lineNumber":72,"author":{"gitID":"kenpaxtonlim"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + FACEBOOK_DESC_BOB"},{"lineNumber":73,"author":{"gitID":"kenpaxtonlim"},"content":"                + TWIITER_DESC_BOB + INSTAGRAM_DESC_BOB, new AddCommand(expectedPerson));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":77,"author":{"gitID":"kenpaxtonlim"},"content":"                + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + FACEBOOK_DESC_BOB"},{"lineNumber":78,"author":{"gitID":"kenpaxtonlim"},"content":"                + TWIITER_DESC_BOB + INSTAGRAM_DESC_BOB, new AddCommand(expectedPerson));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":83,"author":{"gitID":"kenpaxtonlim"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":84,"author":{"gitID":"kenpaxtonlim"},"content":"                .withSocialMedia(VALID_USERNAME_BOB, VALID_USERNAME_BOB, VALID_USERNAME_BOB)"},{"lineNumber":85,"author":{"gitID":"kenpaxtonlim"},"content":"                .build();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":87,"author":{"gitID":"kenpaxtonlim"},"content":"                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + FACEBOOK_DESC_BOB"},{"lineNumber":88,"author":{"gitID":"kenpaxtonlim"},"content":"                        + TWIITER_DESC_BOB + INSTAGRAM_DESC_BOB,"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":96,"author":{"gitID":"kenpaxtonlim"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags()"},{"lineNumber":97,"author":{"gitID":"kenpaxtonlim"},"content":"                .withSocialMedia(VALID_USERNAME_AMY, VALID_USERNAME_AMY, VALID_USERNAME_AMY)"},{"lineNumber":98,"author":{"gitID":"kenpaxtonlim"},"content":"                .build();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":100,"author":{"gitID":"kenpaxtonlim"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + FACEBOOK_DESC_AMY"},{"lineNumber":101,"author":{"gitID":"kenpaxtonlim"},"content":"                + TWIITER_DESC_AMY + INSTAGRAM_DESC_AMY, new AddCommand(expectedPerson));"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + VALID_NAME_BOB + PHONE_DESC_BOB"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB, expectedMessage);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + VALID_PHONE_BOB"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB, expectedMessage);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                + VALID_EMAIL_BOB + ADDRESS_DESC_BOB, expectedMessage);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_BOB + VALID_ADDRESS_BOB, expectedMessage);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + VALID_NAME_BOB + VALID_PHONE_BOB"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                + VALID_EMAIL_BOB + VALID_ADDRESS_BOB, expectedMessage);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                        + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"},{"lineNumber":141,"author":{"gitID":"-"},"content":"                        + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":145,"author":{"gitID":"-"},"content":"                        + INVALID_ADDRESS_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                        + ADDRESS_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                + INVALID_ADDRESS_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kenpaxtonlim":28,"-":128}},{"path":"src/test/java/seedu/address/logic/parser/FindRegexCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"donjar"},"content":"// @@author donjar"},{"lineNumber":2,"author":{"gitID":"donjar"},"content":""},{"lineNumber":3,"author":{"gitID":"donjar"},"content":"package seedu.address.logic.parser;"},{"lineNumber":4,"author":{"gitID":"donjar"},"content":""},{"lineNumber":5,"author":{"gitID":"donjar"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_REGEX;"},{"lineNumber":6,"author":{"gitID":"donjar"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":7,"author":{"gitID":"donjar"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":8,"author":{"gitID":"donjar"},"content":""},{"lineNumber":9,"author":{"gitID":"donjar"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"donjar"},"content":""},{"lineNumber":11,"author":{"gitID":"donjar"},"content":"import seedu.address.logic.commands.FindRegexCommand;"},{"lineNumber":12,"author":{"gitID":"donjar"},"content":"import seedu.address.model.person.NameMatchesRegexPredicate;"},{"lineNumber":13,"author":{"gitID":"donjar"},"content":""},{"lineNumber":14,"author":{"gitID":"donjar"},"content":"public class FindRegexCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"donjar"},"content":""},{"lineNumber":16,"author":{"gitID":"donjar"},"content":"    private FindRegexCommandParser parser \u003d new FindRegexCommandParser();"},{"lineNumber":17,"author":{"gitID":"donjar"},"content":""},{"lineNumber":18,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"donjar"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":20,"author":{"gitID":"donjar"},"content":"        assertParseFailure(parser, \"(\", String.format(MESSAGE_INVALID_REGEX, FindRegexCommand.MESSAGE_USAGE));"},{"lineNumber":21,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"donjar"},"content":""},{"lineNumber":23,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"donjar"},"content":"    public void parse_validArgs_returnsFindRegexCommand() {"},{"lineNumber":25,"author":{"gitID":"donjar"},"content":"        String[] regexesToTest \u003d new String[] { \"abcd\", \"a   b\", \"^ab$\", \"23(x)\\\\1\" };"},{"lineNumber":26,"author":{"gitID":"donjar"},"content":"        for (String regex : regexesToTest) {"},{"lineNumber":27,"author":{"gitID":"donjar"},"content":"            FindRegexCommand expectedCommand \u003d new FindRegexCommand(new NameMatchesRegexPredicate(regex));"},{"lineNumber":28,"author":{"gitID":"donjar"},"content":"            assertParseSuccess(parser, regex, expectedCommand);"},{"lineNumber":29,"author":{"gitID":"donjar"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"donjar"},"content":""},{"lineNumber":32,"author":{"gitID":"donjar"},"content":"}"}],"authorContributionMap":{"donjar":32}},{"path":"src/test/java/seedu/address/logic/parser/AddRemoveTagsCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":10,"author":{"gitID":"kenpaxtonlim"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"kenpaxtonlim"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":13,"author":{"gitID":"kenpaxtonlim"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":15,"author":{"gitID":"kenpaxtonlim"},"content":"import seedu.address.logic.commands.AddRemoveTagsCommand;"},{"lineNumber":16,"author":{"gitID":"kenpaxtonlim"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":18,"author":{"gitID":"kenpaxtonlim"},"content":"//@@author kenpaxtonlim"},{"lineNumber":19,"author":{"gitID":"kenpaxtonlim"},"content":"public class AddRemoveTagsCommandParserTest {"},{"lineNumber":20,"author":{"gitID":"kenpaxtonlim"},"content":"    private AddRemoveTagsCommandParser parser \u003d new AddRemoveTagsCommandParser();"},{"lineNumber":21,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":22,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"kenpaxtonlim"},"content":"    public void parse_argsSpecified_success() throws Exception {"},{"lineNumber":24,"author":{"gitID":"kenpaxtonlim"},"content":"        ArrayList\u003cString\u003e tagsList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitID":"kenpaxtonlim"},"content":"        tagsList.add(VALID_TAG_HUSBAND);"},{"lineNumber":26,"author":{"gitID":"kenpaxtonlim"},"content":"        tagsList.add(VALID_TAG_FRIEND);"},{"lineNumber":27,"author":{"gitID":"kenpaxtonlim"},"content":"        Set\u003cTag\u003e tags \u003d ParserUtil.parseTags(tagsList);"},{"lineNumber":28,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":29,"author":{"gitID":"kenpaxtonlim"},"content":"        String userInputAdd \u003d \" add \" + INDEX_FIRST_PERSON.getOneBased() + \" \" + VALID_TAG_HUSBAND"},{"lineNumber":30,"author":{"gitID":"kenpaxtonlim"},"content":"                + \" \" + VALID_TAG_FRIEND;"},{"lineNumber":31,"author":{"gitID":"kenpaxtonlim"},"content":"        AddRemoveTagsCommand expectedCommandAdd \u003d new AddRemoveTagsCommand(true, INDEX_FIRST_PERSON, tags);"},{"lineNumber":32,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":33,"author":{"gitID":"kenpaxtonlim"},"content":"        assertParseSuccess(parser, userInputAdd, expectedCommandAdd);"},{"lineNumber":34,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":35,"author":{"gitID":"kenpaxtonlim"},"content":"        String userInputRemove \u003d \" remove \" + INDEX_FIRST_PERSON.getOneBased() + \" \" + VALID_TAG_HUSBAND"},{"lineNumber":36,"author":{"gitID":"kenpaxtonlim"},"content":"                + \" \" + VALID_TAG_FRIEND;"},{"lineNumber":37,"author":{"gitID":"kenpaxtonlim"},"content":"        AddRemoveTagsCommand expectedCommandRemove \u003d new AddRemoveTagsCommand(false, INDEX_FIRST_PERSON, tags);"},{"lineNumber":38,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":39,"author":{"gitID":"kenpaxtonlim"},"content":"        assertParseSuccess(parser, userInputRemove, expectedCommandRemove);"},{"lineNumber":40,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":42,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"kenpaxtonlim"},"content":"    public void parse_noFieldSpecified_failure() throws Exception {"},{"lineNumber":44,"author":{"gitID":"kenpaxtonlim"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddRemoveTagsCommand.MESSAGE_USAGE);"},{"lineNumber":45,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":46,"author":{"gitID":"kenpaxtonlim"},"content":"        assertParseFailure(parser, AddRemoveTagsCommand.COMMAND_WORD, expectedMessage);"},{"lineNumber":47,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"kenpaxtonlim"},"content":"}"}],"authorContributionMap":{"kenpaxtonlim":40,"-":8}},{"path":"src/test/java/seedu/address/logic/parser/SocialMediaCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"kenpaxtonlim"},"content":"import seedu.address.logic.commands.SocialMediaCommand;"},{"lineNumber":11,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":12,"author":{"gitID":"kenpaxtonlim"},"content":"//@@author kenpaxtonlim"},{"lineNumber":13,"author":{"gitID":"kenpaxtonlim"},"content":"public class SocialMediaCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"kenpaxtonlim"},"content":"    private SocialMediaCommandParser parser \u003d new SocialMediaCommandParser();"},{"lineNumber":15,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":16,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"kenpaxtonlim"},"content":"    public void parse_argsSpecified_success() throws Exception {"},{"lineNumber":18,"author":{"gitID":"kenpaxtonlim"},"content":"        String userInputFacebook \u003d \" \" + SocialMediaCommand.TYPE_FACEBOOK + \" \" + INDEX_FIRST_PERSON.getOneBased();"},{"lineNumber":19,"author":{"gitID":"kenpaxtonlim"},"content":"        SocialMediaCommand expectedCommandFacebook \u003d new SocialMediaCommand(INDEX_FIRST_PERSON,"},{"lineNumber":20,"author":{"gitID":"kenpaxtonlim"},"content":"                SocialMediaCommand.TYPE_FACEBOOK);"},{"lineNumber":21,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":22,"author":{"gitID":"kenpaxtonlim"},"content":"        assertParseSuccess(parser, userInputFacebook, expectedCommandFacebook);"},{"lineNumber":23,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":24,"author":{"gitID":"kenpaxtonlim"},"content":"        String userInputTwitter \u003d \" \" + SocialMediaCommand.TYPE_TWITTER + \" \" + INDEX_FIRST_PERSON.getOneBased();"},{"lineNumber":25,"author":{"gitID":"kenpaxtonlim"},"content":"        SocialMediaCommand expectedCommandTwitter \u003d new SocialMediaCommand(INDEX_FIRST_PERSON,"},{"lineNumber":26,"author":{"gitID":"kenpaxtonlim"},"content":"                SocialMediaCommand.TYPE_TWITTER);"},{"lineNumber":27,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":28,"author":{"gitID":"kenpaxtonlim"},"content":"        assertParseSuccess(parser, userInputTwitter, expectedCommandTwitter);"},{"lineNumber":29,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":30,"author":{"gitID":"kenpaxtonlim"},"content":"        String userInputInstagram \u003d \" \" + SocialMediaCommand.TYPE_INSTAGRAM + \" \" + INDEX_FIRST_PERSON.getOneBased();"},{"lineNumber":31,"author":{"gitID":"kenpaxtonlim"},"content":"        SocialMediaCommand expectedCommandInstagram \u003d new SocialMediaCommand(INDEX_FIRST_PERSON,"},{"lineNumber":32,"author":{"gitID":"kenpaxtonlim"},"content":"                SocialMediaCommand.TYPE_INSTAGRAM);"},{"lineNumber":33,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":34,"author":{"gitID":"kenpaxtonlim"},"content":"        assertParseSuccess(parser, userInputInstagram, expectedCommandInstagram);"},{"lineNumber":35,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":37,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"kenpaxtonlim"},"content":"    public void parse_noFieldSpecified_failure() throws Exception {"},{"lineNumber":39,"author":{"gitID":"kenpaxtonlim"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SocialMediaCommand.MESSAGE_USAGE);"},{"lineNumber":40,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":41,"author":{"gitID":"kenpaxtonlim"},"content":"        assertParseFailure(parser, SocialMediaCommand.COMMAND_WORD, expectedMessage);"},{"lineNumber":42,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":44,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"kenpaxtonlim"},"content":"    public void parse_noIndexSpecified_failure() throws Exception {"},{"lineNumber":46,"author":{"gitID":"kenpaxtonlim"},"content":"        String userInput \u003d \" \" + SocialMediaCommand.TYPE_INSTAGRAM;"},{"lineNumber":47,"author":{"gitID":"kenpaxtonlim"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SocialMediaCommand.MESSAGE_USAGE);"},{"lineNumber":48,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":49,"author":{"gitID":"kenpaxtonlim"},"content":"        assertParseFailure(parser, userInput, expectedMessage);"},{"lineNumber":50,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":52,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"kenpaxtonlim"},"content":"    public void parse_noTypeSpecified_failure() throws Exception {"},{"lineNumber":54,"author":{"gitID":"kenpaxtonlim"},"content":"        String userInput \u003d \" \" + INDEX_FIRST_PERSON.getOneBased();"},{"lineNumber":55,"author":{"gitID":"kenpaxtonlim"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SocialMediaCommand.MESSAGE_USAGE);"},{"lineNumber":56,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":57,"author":{"gitID":"kenpaxtonlim"},"content":"        assertParseFailure(parser, userInput, expectedMessage);"},{"lineNumber":58,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"kenpaxtonlim"},"content":"}"}],"authorContributionMap":{"kenpaxtonlim":50,"-":9}},{"path":"src/test/java/seedu/address/logic/parser/SizeCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"donjar"},"content":""},{"lineNumber":7,"author":{"gitID":"donjar"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"donjar"},"content":""},{"lineNumber":9,"author":{"gitID":"donjar"},"content":"import seedu.address.logic.commands.SizeCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Test scope: similar to {@code DeleteCommandParserTest}."},{"lineNumber":13,"author":{"gitID":"-"},"content":" * @see DeleteCommandParserTest"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"donjar"},"content":"public class SizeCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"donjar"},"content":""},{"lineNumber":17,"author":{"gitID":"donjar"},"content":"    private SizeCommandParser parser \u003d new SizeCommandParser();"},{"lineNumber":18,"author":{"gitID":"donjar"},"content":""},{"lineNumber":19,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"donjar"},"content":"    public void parse_validArgs_returnsSizeCommand() {"},{"lineNumber":21,"author":{"gitID":"donjar"},"content":"        assertParseSuccess(parser, \"1\", new SizeCommand(1));"},{"lineNumber":22,"author":{"gitID":"donjar"},"content":"        assertParseSuccess(parser, \"-1\", new SizeCommand(-1));"},{"lineNumber":23,"author":{"gitID":"donjar"},"content":"        assertParseSuccess(parser, \"\", new SizeCommand());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":28,"author":{"gitID":"donjar"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SizeCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"donjar"},"content":"}"}],"authorContributionMap":{"donjar":16,"-":14}},{"path":"src/test/java/seedu/address/logic/parser/RemarkCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"500poundbear"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"500poundbear"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"500poundbear"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":13,"author":{"gitID":"500poundbear"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":14,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":15,"author":{"gitID":"500poundbear"},"content":"public class RemarkCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"500poundbear"},"content":"    private RemarkCommandParser parser \u003d new RemarkCommandParser();"},{"lineNumber":17,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":18,"author":{"gitID":"500poundbear"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"500poundbear"},"content":"    public void parse_indexSpecified_failure() throws Exception {"},{"lineNumber":20,"author":{"gitID":"500poundbear"},"content":"        final String remark \u003d \"Some remark.\";"},{"lineNumber":21,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":22,"author":{"gitID":"500poundbear"},"content":"        // have remarks"},{"lineNumber":23,"author":{"gitID":"500poundbear"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":24,"author":{"gitID":"500poundbear"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_REMARK.toString()"},{"lineNumber":25,"author":{"gitID":"500poundbear"},"content":"                + \" \" + remark;"},{"lineNumber":26,"author":{"gitID":"500poundbear"},"content":"        RemarkCommand expectedCommand \u003d new RemarkCommand(INDEX_FIRST_PERSON, new Remark(remark));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":29,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":30,"author":{"gitID":"500poundbear"},"content":"        // no remarks"},{"lineNumber":31,"author":{"gitID":"500poundbear"},"content":"        userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_REMARK.toString();"},{"lineNumber":32,"author":{"gitID":"500poundbear"},"content":"        expectedCommand \u003d new RemarkCommand(INDEX_FIRST_PERSON, new Remark(\"\"));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"500poundbear"},"content":"    public void parse_noFieldSpecified_failure() throws Exception {"},{"lineNumber":38,"author":{"gitID":"500poundbear"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE);"},{"lineNumber":39,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":40,"author":{"gitID":"500poundbear"},"content":"        assertParseFailure(parser, RemarkCommand.COMMAND_WORD, expectedMessage);"},{"lineNumber":41,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"500poundbear"},"content":"}"}],"authorContributionMap":{"500poundbear":27,"-":15}},{"path":"src/test/java/seedu/address/logic/UndoRedoStackTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.EmptyStackException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoableCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class UndoRedoStackTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommandOne \u003d new DummyCommand();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final DummyUndoableCommand dummyUndoableCommandOne \u003d new DummyUndoableCommand();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final DummyUndoableCommand dummyUndoableCommandTwo \u003d new DummyUndoableCommand();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void push_nonUndoableCommand_redoStackClearedAndCommandNotAdded() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // non-empty redoStack"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        undoRedoStack.push(dummyCommandOne);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // empty redoStack"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        undoRedoStack.push(dummyCommandOne);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void push_undoableCommand_redoStackClearedAndCommandAdded() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // non-empty redoStack"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        undoRedoStack.push(dummyUndoableCommandOne);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertStackStatus(Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandOne),"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                Collections.emptyList());"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // empty redoStack"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        undoRedoStack.push(dummyUndoableCommandOne);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertStackStatus(Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandOne, dummyUndoableCommandOne),"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                Collections.emptyList());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void push_undoCommand_stackRemainsUnchanged() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // non-empty redoStack"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":62,"author":{"gitID":"donjar"},"content":"        undoRedoStack.push(new UndoCommand(2));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // empty redoStack"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":68,"author":{"gitID":"donjar"},"content":"        undoRedoStack.push(new UndoCommand(2));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void push_redoCommand_stackRemainsUnchanged() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // non-empty redoStack"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":77,"author":{"gitID":"donjar"},"content":"        undoRedoStack.push(new RedoCommand(2));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // empty redoStack"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":83,"author":{"gitID":"donjar"},"content":"        undoRedoStack.push(new RedoCommand(2));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void canUndo() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // empty undo stack"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.canUndo());"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // non-empty undo stack"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertTrue(undoRedoStack.canUndo());"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void canRedo() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // empty redo stack"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.canRedo());"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // non-empty redo stack"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.emptyList(), Collections.singletonList(dummyUndoableCommandOne));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertTrue(undoRedoStack.canRedo());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void popUndo() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo),"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                Collections.emptyList());"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // multiple commands in undoStack"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertPopUndoSuccess(dummyUndoableCommandTwo, Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                Collections.singletonList(dummyUndoableCommandTwo));"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // single command in undoStack"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertPopUndoSuccess(dummyUndoableCommandOne, Collections.emptyList(),"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne));"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // no command in undoStack"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertPopUndoFailure(Collections.emptyList(),"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne));"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void popRedo() {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.emptyList(),"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // multiple commands in redoStack"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertPopRedoSuccess(dummyUndoableCommandTwo, Collections.singletonList(dummyUndoableCommandTwo),"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                Collections.singletonList(dummyUndoableCommandOne));"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // single command in redoStack"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertPopRedoSuccess(dummyUndoableCommandOne,"},{"lineNumber":136,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // no command in redoStack"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertPopRedoFailure(Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne),"},{"lineNumber":140,"author":{"gitID":"-"},"content":"                Collections.emptyList());"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne),"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        UndoRedoStack copy \u003d prepareStack(Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne),"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertTrue(undoRedoStack.equals(copy));"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertTrue(undoRedoStack.equals(undoRedoStack));"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.equals(null));"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.equals(1));"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        // different undoStack -\u003e returns false"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        UndoRedoStack differentUndoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandTwo),"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.equals(differentUndoStack));"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        // different redoStack -\u003e returns false"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        UndoRedoStack differentRedoStack \u003d"},{"lineNumber":169,"author":{"gitID":"-"},"content":"                prepareStack(Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne),"},{"lineNumber":170,"author":{"gitID":"-"},"content":"                Collections.singletonList(dummyUndoableCommandTwo));"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.equals(differentRedoStack));"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * Asserts that the result of {@code undoRedoStack#popUndo()} equals {@code expectedCommand}."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * Also asserts that the content of the {@code undoRedoStack#undoStack} equals {@code undoElements},"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * and {@code undoRedoStack#redoStack} equals {@code redoElements}."},{"lineNumber":178,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    private void assertPopUndoSuccess(UndoableCommand expectedCommand, List\u003cUndoableCommand\u003e expectedUndoElements,"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                                      List\u003cUndoableCommand\u003e expectedRedoElements) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, undoRedoStack.popUndo());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertStackStatus(expectedUndoElements, expectedRedoElements);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * Asserts that the result of {@code undoRedoStack#popRedo()} equals {@code expectedCommand}."},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Also asserts that the content of the {@code undoRedoStack#undoStack} equals {@code undoElements},"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * and {@code undoRedoStack#redoStack} equals {@code redoElements}."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    private void assertPopRedoSuccess(UndoableCommand expectedCommand, List\u003cUndoableCommand\u003e expectedUndoElements,"},{"lineNumber":191,"author":{"gitID":"-"},"content":"                                      List\u003cUndoableCommand\u003e expectedRedoElements) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, undoRedoStack.popRedo());"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertStackStatus(expectedUndoElements, expectedRedoElements);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * Asserts that the execution of {@code undoRedoStack#popUndo()} fails and {@code EmptyStackException} is thrown."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * Also asserts that the content of the {@code undoRedoStack#undoStack} equals {@code undoElements},"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * and {@code undoRedoStack#redoStack} equals {@code redoElements}."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    private void assertPopUndoFailure(List\u003cUndoableCommand\u003e expectedUndoElements,"},{"lineNumber":202,"author":{"gitID":"-"},"content":"                                      List\u003cUndoableCommand\u003e expectedRedoElements) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            undoRedoStack.popUndo();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            fail(\"The expected EmptyStackException was not thrown.\");"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        } catch (EmptyStackException ese) {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            assertStackStatus(expectedUndoElements, expectedRedoElements);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * Asserts that the execution of {@code undoRedoStack#popRedo()} fails and {@code EmptyStackException} is thrown."},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * Also asserts that the content of the {@code undoRedoStack#undoStack} equals {@code undoElements},"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * and {@code undoRedoStack#redoStack} equals {@code redoElements}."},{"lineNumber":215,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    private void assertPopRedoFailure(List\u003cUndoableCommand\u003e expectedUndoElements,"},{"lineNumber":217,"author":{"gitID":"-"},"content":"                                      List\u003cUndoableCommand\u003e expectedRedoElements) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            undoRedoStack.popRedo();"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            fail(\"The expected EmptyStackException was not thrown.\");"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        } catch (EmptyStackException ese) {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"            assertStackStatus(expectedUndoElements, expectedRedoElements);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * Asserts that {@code undoRedoStack#undoStack} equals {@code undoElements}, and {@code undoRedoStack#redoStack}"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * equals {@code redoElements}."},{"lineNumber":229,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    private void assertStackStatus(List\u003cUndoableCommand\u003e undoElements, List\u003cUndoableCommand\u003e redoElements) {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertEquals(prepareStack(undoElements, redoElements), undoRedoStack);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    class DummyCommand extends Command {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        public CommandResult execute() {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"    class DummyUndoableCommand extends UndoableCommand {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() {"},{"lineNumber":244,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"donjar":4,"-":243}},{"path":"src/test/java/seedu/address/logic/commands/HistoryCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class HistoryCommandTest {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private HistoryCommand historyCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private CommandHistory history;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        historyCommand \u003d new HistoryCommand();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        historyCommand.setData(model, history, new UndoRedoStack());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void execute() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertCommandResult(historyCommand, HistoryCommand.MESSAGE_NO_HISTORY);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        String command1 \u003d \"clear\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        history.add(command1);"},{"lineNumber":31,"author":{"gitID":"donjar"},"content":"        assertCommandResult(historyCommand, String.format(HistoryCommand.MESSAGE_SUCCESS, \"(1) clear\"));"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        String command2 \u003d \"randomCommand\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        String command3 \u003d \"select 1\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        history.add(command2);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        history.add(command3);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"},{"lineNumber":39,"author":{"gitID":"donjar"},"content":"                \"(1) select 1\\n(2) randomCommand\\n(3) clear\");"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertCommandResult(historyCommand, expectedMessage);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Asserts that the result message from the execution of {@code historyCommand} equals to {@code expectedMessage}"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private void assertCommandResult(HistoryCommand historyCommand, String expectedMessage) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, historyCommand.execute().feedbackToUser);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"donjar":2,"-":48}},{"path":"src/test/java/seedu/address/logic/commands/SizeCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"donjar"},"content":"// @@author donjar"},{"lineNumber":2,"author":{"gitID":"donjar"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"donjar"},"content":""},{"lineNumber":4,"author":{"gitID":"donjar"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"donjar"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"donjar"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"donjar"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"donjar"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"donjar"},"content":""},{"lineNumber":10,"author":{"gitID":"donjar"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"donjar"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"donjar"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"donjar"},"content":""},{"lineNumber":14,"author":{"gitID":"donjar"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":15,"author":{"gitID":"donjar"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":16,"author":{"gitID":"donjar"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"donjar"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"donjar"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":19,"author":{"gitID":"donjar"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"donjar"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitID":"donjar"},"content":""},{"lineNumber":22,"author":{"gitID":"donjar"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"donjar"},"content":" * Contains integration tests (interaction with the Model) for {@code SizeCommand}."},{"lineNumber":24,"author":{"gitID":"donjar"},"content":" */"},{"lineNumber":25,"author":{"gitID":"donjar"},"content":"public class SizeCommandTest {"},{"lineNumber":26,"author":{"gitID":"donjar"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"donjar"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":28,"author":{"gitID":"donjar"},"content":""},{"lineNumber":29,"author":{"gitID":"donjar"},"content":"    private Model model;"},{"lineNumber":30,"author":{"gitID":"donjar"},"content":""},{"lineNumber":31,"author":{"gitID":"donjar"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"donjar"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"donjar"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"donjar"},"content":""},{"lineNumber":36,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"donjar"},"content":"    public void execute_resetSize() {"},{"lineNumber":38,"author":{"gitID":"donjar"},"content":"        SizeCommand sizeCommand \u003d prepareCommand();"},{"lineNumber":39,"author":{"gitID":"donjar"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"donjar"},"content":"            CommandResult commandResult \u003d sizeCommand.execute();"},{"lineNumber":41,"author":{"gitID":"donjar"},"content":""},{"lineNumber":42,"author":{"gitID":"donjar"},"content":"            assertEquals(SizeCommand.MESSAGE_RESET_FONT_SUCCESS, commandResult.feedbackToUser);"},{"lineNumber":43,"author":{"gitID":"donjar"},"content":""},{"lineNumber":44,"author":{"gitID":"donjar"},"content":"            assertEquals(\"FontSizeRefreshRequestEvent\","},{"lineNumber":45,"author":{"gitID":"donjar"},"content":"                    eventsCollectorRule.eventsCollector.getMostRecent().toString());"},{"lineNumber":46,"author":{"gitID":"donjar"},"content":"        } catch (CommandException e) {"},{"lineNumber":47,"author":{"gitID":"donjar"},"content":"            fail(\"This exception should not be thrown.\");"},{"lineNumber":48,"author":{"gitID":"donjar"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"donjar"},"content":""},{"lineNumber":51,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"donjar"},"content":"    public void execute_increaseSize() {"},{"lineNumber":53,"author":{"gitID":"donjar"},"content":"        assertExecutionSuccess(3, String.format(SizeCommand.MESSAGE_CHANGE_FONT_SUCCESS, \"increased\", 3, 3));"},{"lineNumber":54,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"donjar"},"content":""},{"lineNumber":56,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"donjar"},"content":"    public void execute_decreaseSize() {"},{"lineNumber":58,"author":{"gitID":"donjar"},"content":"        assertExecutionSuccess(-3, String.format(SizeCommand.MESSAGE_CHANGE_FONT_SUCCESS, \"decreased\", 3, -3));"},{"lineNumber":59,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"donjar"},"content":""},{"lineNumber":61,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"donjar"},"content":"    public void execute_increaseSizeOutOfBounds() {"},{"lineNumber":63,"author":{"gitID":"donjar"},"content":"        assertExecutionFailure(6);"},{"lineNumber":64,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"donjar"},"content":""},{"lineNumber":66,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"donjar"},"content":"    public void execute_decreaseSizeOutOfBounds() {"},{"lineNumber":68,"author":{"gitID":"donjar"},"content":"        assertExecutionFailure(-6);"},{"lineNumber":69,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"donjar"},"content":""},{"lineNumber":71,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"donjar"},"content":"    public void equals() {"},{"lineNumber":73,"author":{"gitID":"donjar"},"content":"        SizeCommand sizeResetCommand \u003d new SizeCommand();"},{"lineNumber":74,"author":{"gitID":"donjar"},"content":"        SizeCommand sizeIncrementCommand \u003d new SizeCommand(1);"},{"lineNumber":75,"author":{"gitID":"donjar"},"content":"        SizeCommand sizeDecrementCommand \u003d new SizeCommand(-1);"},{"lineNumber":76,"author":{"gitID":"donjar"},"content":""},{"lineNumber":77,"author":{"gitID":"donjar"},"content":"        // same object -\u003e returns true"},{"lineNumber":78,"author":{"gitID":"donjar"},"content":"        assertTrue(sizeResetCommand.equals(sizeResetCommand));"},{"lineNumber":79,"author":{"gitID":"donjar"},"content":""},{"lineNumber":80,"author":{"gitID":"donjar"},"content":"        // same values -\u003e returns true"},{"lineNumber":81,"author":{"gitID":"donjar"},"content":"        SizeCommand sizeResetCommandCopy \u003d new SizeCommand();"},{"lineNumber":82,"author":{"gitID":"donjar"},"content":"        assertTrue(sizeResetCommand.equals(sizeResetCommandCopy));"},{"lineNumber":83,"author":{"gitID":"donjar"},"content":""},{"lineNumber":84,"author":{"gitID":"donjar"},"content":"        // different types -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"donjar"},"content":"        assertFalse(sizeResetCommand.equals(1));"},{"lineNumber":86,"author":{"gitID":"donjar"},"content":""},{"lineNumber":87,"author":{"gitID":"donjar"},"content":"        // null -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"donjar"},"content":"        assertFalse(sizeResetCommand.equals(null));"},{"lineNumber":89,"author":{"gitID":"donjar"},"content":""},{"lineNumber":90,"author":{"gitID":"donjar"},"content":"        // different type -\u003e returns false"},{"lineNumber":91,"author":{"gitID":"donjar"},"content":"        assertFalse(sizeResetCommand.equals(sizeIncrementCommand));"},{"lineNumber":92,"author":{"gitID":"donjar"},"content":""},{"lineNumber":93,"author":{"gitID":"donjar"},"content":"        // different value -\u003e returns false"},{"lineNumber":94,"author":{"gitID":"donjar"},"content":"        assertFalse(sizeDecrementCommand.equals(sizeIncrementCommand));"},{"lineNumber":95,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"donjar"},"content":""},{"lineNumber":97,"author":{"gitID":"donjar"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"donjar"},"content":"     * Returns a {@code SizeCommand} with parameters given."},{"lineNumber":99,"author":{"gitID":"donjar"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"donjar"},"content":"    private SizeCommand prepareCommand() {"},{"lineNumber":101,"author":{"gitID":"donjar"},"content":"        SizeCommand sizeCommand \u003d new SizeCommand();"},{"lineNumber":102,"author":{"gitID":"donjar"},"content":"        sizeCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":103,"author":{"gitID":"donjar"},"content":"        return sizeCommand;"},{"lineNumber":104,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"donjar"},"content":""},{"lineNumber":106,"author":{"gitID":"donjar"},"content":"    private SizeCommand prepareCommand(int change) {"},{"lineNumber":107,"author":{"gitID":"donjar"},"content":"        SizeCommand sizeCommand \u003d new SizeCommand(change);"},{"lineNumber":108,"author":{"gitID":"donjar"},"content":"        sizeCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":109,"author":{"gitID":"donjar"},"content":"        return sizeCommand;"},{"lineNumber":110,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"donjar"},"content":""},{"lineNumber":112,"author":{"gitID":"donjar"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"donjar"},"content":"     * Executes a {@code SizeCommand} with the given {@code change}, and checks that {@code FontSizeRefreshRequestEvent}"},{"lineNumber":114,"author":{"gitID":"donjar"},"content":"     * is raised with the correct size change."},{"lineNumber":115,"author":{"gitID":"donjar"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"donjar"},"content":"    private void assertExecutionSuccess(int change, String message) {"},{"lineNumber":117,"author":{"gitID":"donjar"},"content":"        SizeCommand sizeCommand \u003d prepareCommand(change);"},{"lineNumber":118,"author":{"gitID":"donjar"},"content":"        try {"},{"lineNumber":119,"author":{"gitID":"donjar"},"content":"            CommandResult commandResult \u003d sizeCommand.execute();"},{"lineNumber":120,"author":{"gitID":"donjar"},"content":""},{"lineNumber":121,"author":{"gitID":"donjar"},"content":"            assertEquals(message, commandResult.feedbackToUser);"},{"lineNumber":122,"author":{"gitID":"donjar"},"content":""},{"lineNumber":123,"author":{"gitID":"donjar"},"content":"            assertEquals(\"FontSizeRefreshRequestEvent\","},{"lineNumber":124,"author":{"gitID":"donjar"},"content":"                    eventsCollectorRule.eventsCollector.getMostRecent().toString());"},{"lineNumber":125,"author":{"gitID":"donjar"},"content":"        } catch (CommandException e) {"},{"lineNumber":126,"author":{"gitID":"donjar"},"content":"            fail(\"This exception should not be thrown.\");"},{"lineNumber":127,"author":{"gitID":"donjar"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"donjar"},"content":""},{"lineNumber":130,"author":{"gitID":"donjar"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"donjar"},"content":"     * Executes a {@code SizeCommand} with the given {@code change}, and checks that a {@code CommandException}"},{"lineNumber":132,"author":{"gitID":"donjar"},"content":"     * is thrown."},{"lineNumber":133,"author":{"gitID":"donjar"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"donjar"},"content":"    private void assertExecutionFailure(int change) {"},{"lineNumber":135,"author":{"gitID":"donjar"},"content":"        SizeCommand sizeCommand \u003d prepareCommand(change);"},{"lineNumber":136,"author":{"gitID":"donjar"},"content":"        try {"},{"lineNumber":137,"author":{"gitID":"donjar"},"content":"            sizeCommand.execute();"},{"lineNumber":138,"author":{"gitID":"donjar"},"content":"            fail(\"CommandException should be thrown.\");"},{"lineNumber":139,"author":{"gitID":"donjar"},"content":"        } catch (CommandException e) {"},{"lineNumber":140,"author":{"gitID":"donjar"},"content":"            assertEquals(String.format(SizeCommand.MESSAGE_FAILURE, 0, change), e.getMessage());"},{"lineNumber":141,"author":{"gitID":"donjar"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":142,"author":{"gitID":"donjar"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"donjar"},"content":"}"}],"authorContributionMap":{"donjar":144}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":12,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_USERNAME_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":58,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":59,"author":{"gitID":"kenpaxtonlim"},"content":"        // different social media usernames -\u003e returns false"},{"lineNumber":60,"author":{"gitID":"kenpaxtonlim"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY)"},{"lineNumber":61,"author":{"gitID":"kenpaxtonlim"},"content":"                .withSocialMedia(VALID_USERNAME_BOB, VALID_USERNAME_BOB, VALID_USERNAME_BOB).build();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kenpaxtonlim":5,"-":59}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FACEBOOK;"},{"lineNumber":8,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INSTAGRAM;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TWITTER;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":41,"author":{"gitID":"500poundbear"},"content":"    public static final String VALID_REMARK_AMY \u003d \"Likes chicken\";"},{"lineNumber":42,"author":{"gitID":"500poundbear"},"content":"    public static final String VALID_REMARK_BOB \u003d \"Hates frog and avocados\";"},{"lineNumber":43,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String VALID_USERNAME_AMY \u003d \"amybee123\";"},{"lineNumber":44,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String VALID_USERNAME_BOB \u003d \"bobchoo123\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":56,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String FACEBOOK_DESC_AMY \u003d \" \" + PREFIX_FACEBOOK + VALID_USERNAME_AMY;"},{"lineNumber":57,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String FACEBOOK_DESC_BOB \u003d \" \" + PREFIX_FACEBOOK + VALID_USERNAME_BOB;"},{"lineNumber":58,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String TWIITER_DESC_AMY \u003d \" \" + PREFIX_TWITTER + VALID_USERNAME_AMY;"},{"lineNumber":59,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String TWIITER_DESC_BOB \u003d \" \" + PREFIX_TWITTER + VALID_USERNAME_BOB;"},{"lineNumber":60,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String INSTAGRAM_DESC_AMY \u003d \" \" + PREFIX_INSTAGRAM + VALID_USERNAME_AMY;"},{"lineNumber":61,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String INSTAGRAM_DESC_BOB \u003d \" \" + PREFIX_INSTAGRAM + VALID_USERNAME_BOB;"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":75,"author":{"gitID":"kenpaxtonlim"},"content":"                .withTags(VALID_TAG_FRIEND).withSocialMedia(VALID_USERNAME_AMY, VALID_USERNAME_AMY, VALID_USERNAME_AMY)"},{"lineNumber":76,"author":{"gitID":"kenpaxtonlim"},"content":"                .build();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":79,"author":{"gitID":"kenpaxtonlim"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":80,"author":{"gitID":"kenpaxtonlim"},"content":"                .withSocialMedia(VALID_USERNAME_BOB, VALID_USERNAME_BOB, VALID_USERNAME_BOB).build();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":108,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        List\u003cReadOnlyPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the first person in the {@code model}\u0027s address book."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public static void showFirstPersonOnly(Model model) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        ReadOnlyPerson person \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assert model.getFilteredPersonList().size() \u003d\u003d 1;"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        ReadOnlyPerson firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"500poundbear":2,"kenpaxtonlim":15,"-":126}},{"path":"src/test/java/seedu/address/logic/commands/UndoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"donjar"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"donjar"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class UndoCommandTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":34,"author":{"gitID":"donjar"},"content":"    public void setUp() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":37,"author":{"gitID":"donjar"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        deleteCommandOne.execute();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        deleteCommandTwo.execute();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"donjar"},"content":"    public void execute() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":45,"author":{"gitID":"-"},"content":"                Arrays.asList(deleteCommandOne, deleteCommandTwo), Collections.emptyList());"},{"lineNumber":46,"author":{"gitID":"donjar"},"content":"        UndoCommand undoCommand \u003d new UndoCommand(1);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":48,"author":{"gitID":"donjar"},"content":""},{"lineNumber":49,"author":{"gitID":"donjar"},"content":"        String successMessage \u003d UndoCommand.getSuccessMessage(1);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // multiple commands in undoStack"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":54,"author":{"gitID":"donjar"},"content":"        assertCommandSuccess(undoCommand, model, successMessage, expectedModel);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // single command in undoStack"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":58,"author":{"gitID":"donjar"},"content":"        assertCommandSuccess(undoCommand, model, successMessage, expectedModel);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // no command in undoStack"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"donjar"},"content":""},{"lineNumber":64,"author":{"gitID":"donjar"},"content":"    // @@author donjar"},{"lineNumber":65,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"donjar"},"content":"    public void execute_undoManyTimes() {"},{"lineNumber":67,"author":{"gitID":"donjar"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":68,"author":{"gitID":"donjar"},"content":"                Arrays.asList(deleteCommandOne, deleteCommandTwo), Collections.emptyList());"},{"lineNumber":69,"author":{"gitID":"donjar"},"content":"        UndoCommand undoCommand \u003d new UndoCommand(2);"},{"lineNumber":70,"author":{"gitID":"donjar"},"content":"        undoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":71,"author":{"gitID":"donjar"},"content":""},{"lineNumber":72,"author":{"gitID":"donjar"},"content":"        String successMessage \u003d UndoCommand.getSuccessMessage(2);"},{"lineNumber":73,"author":{"gitID":"donjar"},"content":""},{"lineNumber":74,"author":{"gitID":"donjar"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":75,"author":{"gitID":"donjar"},"content":"        assertCommandSuccess(undoCommand, model, successMessage, expectedModel);"},{"lineNumber":76,"author":{"gitID":"donjar"},"content":""},{"lineNumber":77,"author":{"gitID":"donjar"},"content":"        // no command in undoStack"},{"lineNumber":78,"author":{"gitID":"donjar"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":79,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"donjar"},"content":""},{"lineNumber":81,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"donjar"},"content":"    public void execute_undoTooManyTimes() {"},{"lineNumber":83,"author":{"gitID":"donjar"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":84,"author":{"gitID":"donjar"},"content":"                Arrays.asList(deleteCommandOne, deleteCommandTwo), Collections.emptyList());"},{"lineNumber":85,"author":{"gitID":"donjar"},"content":"        UndoCommand undoCommand \u003d new UndoCommand(3);"},{"lineNumber":86,"author":{"gitID":"donjar"},"content":"        undoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":87,"author":{"gitID":"donjar"},"content":""},{"lineNumber":88,"author":{"gitID":"donjar"},"content":"        String successMessage \u003d UndoCommand.getSuccessMessage(2);"},{"lineNumber":89,"author":{"gitID":"donjar"},"content":""},{"lineNumber":90,"author":{"gitID":"donjar"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":91,"author":{"gitID":"donjar"},"content":"        assertCommandSuccess(undoCommand, model, successMessage, expectedModel);"},{"lineNumber":92,"author":{"gitID":"donjar"},"content":""},{"lineNumber":93,"author":{"gitID":"donjar"},"content":"        // no command in undoStack"},{"lineNumber":94,"author":{"gitID":"donjar"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":95,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"donjar"},"content":"    // @@author"},{"lineNumber":97,"author":{"gitID":"donjar"},"content":""},{"lineNumber":98,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"donjar"},"content":"    public void getSuccessMessage() {"},{"lineNumber":100,"author":{"gitID":"donjar"},"content":"        assertEquals(UndoCommand.getSuccessMessage(1), \"1 command undoed.\");"},{"lineNumber":101,"author":{"gitID":"donjar"},"content":"        assertEquals(UndoCommand.getSuccessMessage(2), \"2 commands undoed.\");"},{"lineNumber":102,"author":{"gitID":"donjar"},"content":"        assertEquals(UndoCommand.getSuccessMessage(12), \"12 commands undoed.\");"},{"lineNumber":103,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"donjar":51,"-":53}},{"path":"src/test/java/seedu/address/logic/commands/FindRegexCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"donjar"},"content":"import seedu.address.model.person.NameMatchesRegexPredicate;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"donjar"},"content":" * Contains integration tests (interaction with the Model) for {@code FindRegexCommand}."},{"lineNumber":28,"author":{"gitID":"donjar"},"content":" */"},{"lineNumber":29,"author":{"gitID":"donjar"},"content":"public class FindRegexCommandTest {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":34,"author":{"gitID":"donjar"},"content":"        NameMatchesRegexPredicate firstPredicate \u003d new NameMatchesRegexPredicate(\"first\");"},{"lineNumber":35,"author":{"gitID":"donjar"},"content":"        NameMatchesRegexPredicate secondPredicate \u003d new NameMatchesRegexPredicate(\"second\");"},{"lineNumber":36,"author":{"gitID":"donjar"},"content":""},{"lineNumber":37,"author":{"gitID":"donjar"},"content":"        FindRegexCommand findFirstCommand \u003d new FindRegexCommand(firstPredicate);"},{"lineNumber":38,"author":{"gitID":"donjar"},"content":"        FindRegexCommand findSecondCommand \u003d new FindRegexCommand(secondPredicate);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":44,"author":{"gitID":"donjar"},"content":"        FindRegexCommand findFirstCommandCopy \u003d new FindRegexCommand(firstPredicate);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"donjar"},"content":"    public void execute_regex_multiplePersonsFound() {"},{"lineNumber":59,"author":{"gitID":"donjar"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"},{"lineNumber":60,"author":{"gitID":"donjar"},"content":"        FindRegexCommand command \u003d prepareCommand(\"Ku[rn]z$\");"},{"lineNumber":61,"author":{"gitID":"donjar"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, FIONA));"},{"lineNumber":62,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"donjar"},"content":""},{"lineNumber":64,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"donjar"},"content":"    public void execute_regex_noPersonFound() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":67,"author":{"gitID":"donjar"},"content":"        FindRegexCommand command \u003d prepareCommand(\"^x+$\");"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"donjar"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"donjar"},"content":"     * Parses {@code userInput} into a {@code FindRegexCommand}."},{"lineNumber":73,"author":{"gitID":"donjar"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"donjar"},"content":"    private FindRegexCommand prepareCommand(String userInput) {"},{"lineNumber":75,"author":{"gitID":"donjar"},"content":"        FindRegexCommand command \u003d new FindRegexCommand(new NameMatchesRegexPredicate(userInput));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     *     - the {@code FilteredList\u003cReadOnlyPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"donjar"},"content":"    private void assertCommandSuccess(FindRegexCommand command, String expectedMessage,"},{"lineNumber":87,"author":{"gitID":"donjar"},"content":"                                      List\u003cReadOnlyPerson\u003e expectedList) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"donjar":26,"-":69}},{"path":"src/test/java/seedu/address/logic/commands/RemarkCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"500poundbear"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_AMY;"},{"lineNumber":6,"author":{"gitID":"500poundbear"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"500poundbear"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":26,"author":{"gitID":"500poundbear"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":27,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":28,"author":{"gitID":"500poundbear"},"content":"//@@author 500poundbear"},{"lineNumber":29,"author":{"gitID":"500poundbear"},"content":"public class RemarkCommandTest {"},{"lineNumber":30,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":31,"author":{"gitID":"500poundbear"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":33,"author":{"gitID":"500poundbear"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"500poundbear"},"content":"    public void execute_addRemark_success() throws Exception {"},{"lineNumber":35,"author":{"gitID":"500poundbear"},"content":"        Person editedPerson \u003d new PersonBuilder("},{"lineNumber":36,"author":{"gitID":"500poundbear"},"content":"                model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()))"},{"lineNumber":37,"author":{"gitID":"500poundbear"},"content":"                .withRemark(\"Hihi\").build();"},{"lineNumber":38,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":39,"author":{"gitID":"500poundbear"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":40,"author":{"gitID":"500poundbear"},"content":"                editedPerson.getRemark().value);"},{"lineNumber":41,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":42,"author":{"gitID":"500poundbear"},"content":"        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS,"},{"lineNumber":43,"author":{"gitID":"500poundbear"},"content":"                editedPerson);"},{"lineNumber":44,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":45,"author":{"gitID":"500poundbear"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":46,"author":{"gitID":"500poundbear"},"content":"                new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"500poundbear"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":48,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":49,"author":{"gitID":"500poundbear"},"content":"        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"},{"lineNumber":50,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":52,"author":{"gitID":"500poundbear"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"500poundbear"},"content":"    public void execute_deleteRemark_success() throws Exception {"},{"lineNumber":54,"author":{"gitID":"500poundbear"},"content":"        Person editedPerson \u003d new Person(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"},{"lineNumber":55,"author":{"gitID":"500poundbear"},"content":"        editedPerson.setRemark(new Remark(\"\"));"},{"lineNumber":56,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":57,"author":{"gitID":"500poundbear"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(INDEX_FIRST_PERSON, editedPerson.getRemark().toString());"},{"lineNumber":58,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":59,"author":{"gitID":"500poundbear"},"content":"        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_DELETE_REMARK_SUCCESS, editedPerson);"},{"lineNumber":60,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":61,"author":{"gitID":"500poundbear"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":62,"author":{"gitID":"500poundbear"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":63,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":64,"author":{"gitID":"500poundbear"},"content":"        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"},{"lineNumber":65,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":67,"author":{"gitID":"500poundbear"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"500poundbear"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() throws Exception {"},{"lineNumber":69,"author":{"gitID":"500poundbear"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":70,"author":{"gitID":"500poundbear"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(outOfBoundIndex, VALID_REMARK_BOB);"},{"lineNumber":71,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":72,"author":{"gitID":"500poundbear"},"content":"        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":73,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":75,"author":{"gitID":"500poundbear"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"500poundbear"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":77,"author":{"gitID":"500poundbear"},"content":"     * but smaller than size of address book"},{"lineNumber":78,"author":{"gitID":"500poundbear"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"500poundbear"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"500poundbear"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() throws Exception {"},{"lineNumber":81,"author":{"gitID":"500poundbear"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":82,"author":{"gitID":"500poundbear"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":83,"author":{"gitID":"500poundbear"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":84,"author":{"gitID":"500poundbear"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":85,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":86,"author":{"gitID":"500poundbear"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(outOfBoundIndex, VALID_REMARK_BOB);"},{"lineNumber":87,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":88,"author":{"gitID":"500poundbear"},"content":"        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":89,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"500poundbear"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"500poundbear"},"content":"    public void equals() {"},{"lineNumber":92,"author":{"gitID":"500poundbear"},"content":"        final RemarkCommand standardCommand \u003d new RemarkCommand(INDEX_FIRST_PERSON,"},{"lineNumber":93,"author":{"gitID":"500poundbear"},"content":"                new Remark(VALID_REMARK_AMY));"},{"lineNumber":94,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":95,"author":{"gitID":"500poundbear"},"content":"        // Returns true with itself"},{"lineNumber":96,"author":{"gitID":"500poundbear"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":97,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":98,"author":{"gitID":"500poundbear"},"content":"        // Returns true with same values"},{"lineNumber":99,"author":{"gitID":"500poundbear"},"content":"        RemarkCommand commandWithSameValues \u003d new RemarkCommand(INDEX_FIRST_PERSON,"},{"lineNumber":100,"author":{"gitID":"500poundbear"},"content":"                new Remark(VALID_REMARK_AMY));"},{"lineNumber":101,"author":{"gitID":"500poundbear"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":102,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":103,"author":{"gitID":"500poundbear"},"content":"        // Returns false with null"},{"lineNumber":104,"author":{"gitID":"500poundbear"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":105,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":106,"author":{"gitID":"500poundbear"},"content":"        // Returns false with different command types"},{"lineNumber":107,"author":{"gitID":"500poundbear"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":108,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":109,"author":{"gitID":"500poundbear"},"content":"        // Returns false with different indexes"},{"lineNumber":110,"author":{"gitID":"500poundbear"},"content":"        RemarkCommand commandWithDifferentIndex \u003d new RemarkCommand(INDEX_SECOND_PERSON,"},{"lineNumber":111,"author":{"gitID":"500poundbear"},"content":"                new Remark(VALID_REMARK_AMY));"},{"lineNumber":112,"author":{"gitID":"500poundbear"},"content":"        assertFalse(standardCommand.equals(commandWithDifferentIndex));"},{"lineNumber":113,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":114,"author":{"gitID":"500poundbear"},"content":"        // Returns false with different remarks"},{"lineNumber":115,"author":{"gitID":"500poundbear"},"content":"        RemarkCommand commandWithDifferentRemarks \u003d new RemarkCommand(INDEX_FIRST_PERSON,"},{"lineNumber":116,"author":{"gitID":"500poundbear"},"content":"                new Remark(VALID_REMARK_BOB));"},{"lineNumber":117,"author":{"gitID":"500poundbear"},"content":"        assertFalse(standardCommand.equals(commandWithDifferentRemarks));"},{"lineNumber":118,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":120,"author":{"gitID":"500poundbear"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"500poundbear"},"content":"     * Returns an {@code RemarkCommand} with parameters {@code index} and {@code remark}."},{"lineNumber":122,"author":{"gitID":"500poundbear"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"500poundbear"},"content":"    private RemarkCommand prepareCommand(Index index, String remark) {"},{"lineNumber":124,"author":{"gitID":"500poundbear"},"content":"        RemarkCommand remarkCommand \u003d new RemarkCommand(index, new Remark(remark));"},{"lineNumber":125,"author":{"gitID":"500poundbear"},"content":"        remarkCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":126,"author":{"gitID":"500poundbear"},"content":"        return remarkCommand;"},{"lineNumber":127,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"500poundbear"},"content":"}"}],"authorContributionMap":{"500poundbear":106,"-":22}},{"path":"src/test/java/seedu/address/logic/commands/StatisticsCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"500poundbear"},"content":"import static seedu.address.logic.commands.StatisticsCommand.MESSAGE_SUCCESS;"},{"lineNumber":6,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":7,"author":{"gitID":"500poundbear"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"500poundbear"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":10,"author":{"gitID":"500poundbear"},"content":"import seedu.address.commons.events.ui.ToggleStatisticsPanelEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"500poundbear"},"content":"//@@author 500poundbear"},{"lineNumber":15,"author":{"gitID":"500poundbear"},"content":"public class StatisticsCommandTest {"},{"lineNumber":16,"author":{"gitID":"500poundbear"},"content":"    @Rule"},{"lineNumber":17,"author":{"gitID":"500poundbear"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":18,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":19,"author":{"gitID":"500poundbear"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"500poundbear"},"content":"    public void execute_statistics_success() throws CommandException {"},{"lineNumber":21,"author":{"gitID":"500poundbear"},"content":"        CommandResult result \u003d new StatisticsCommand().execute();"},{"lineNumber":22,"author":{"gitID":"500poundbear"},"content":"        assertEquals(MESSAGE_SUCCESS, result.feedbackToUser);"},{"lineNumber":23,"author":{"gitID":"500poundbear"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ToggleStatisticsPanelEvent);"},{"lineNumber":24,"author":{"gitID":"500poundbear"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":25,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"500poundbear"},"content":"}"}],"authorContributionMap":{"500poundbear":19,"-":7}},{"path":"src/test/java/seedu/address/logic/commands/RedoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"donjar"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class RedoCommandTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void execute() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":40,"author":{"gitID":"-"},"content":"                Collections.emptyList(), Arrays.asList(deleteCommandTwo, deleteCommandOne));"},{"lineNumber":41,"author":{"gitID":"donjar"},"content":"        RedoCommand redoCommand \u003d new RedoCommand(1);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"donjar"},"content":"        String successMessage \u003d RedoCommand.getSuccessMessage(1);"},{"lineNumber":46,"author":{"gitID":"donjar"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // multiple commands in redoStack"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":49,"author":{"gitID":"donjar"},"content":"        assertCommandSuccess(redoCommand, model, successMessage, expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // single command in redoStack"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":53,"author":{"gitID":"donjar"},"content":"        assertCommandSuccess(redoCommand, model, successMessage, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // no command in redoStack"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"donjar"},"content":""},{"lineNumber":59,"author":{"gitID":"donjar"},"content":"    // @@author donjar"},{"lineNumber":60,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"donjar"},"content":"    public void execute_redoManyTimes() {"},{"lineNumber":62,"author":{"gitID":"donjar"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":63,"author":{"gitID":"donjar"},"content":"                Collections.emptyList(), Arrays.asList(deleteCommandTwo, deleteCommandOne));"},{"lineNumber":64,"author":{"gitID":"donjar"},"content":"        RedoCommand redoCommand \u003d new RedoCommand(2);"},{"lineNumber":65,"author":{"gitID":"donjar"},"content":"        redoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":66,"author":{"gitID":"donjar"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":67,"author":{"gitID":"donjar"},"content":""},{"lineNumber":68,"author":{"gitID":"donjar"},"content":"        String successMessage \u003d RedoCommand.getSuccessMessage(2);"},{"lineNumber":69,"author":{"gitID":"donjar"},"content":""},{"lineNumber":70,"author":{"gitID":"donjar"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":71,"author":{"gitID":"donjar"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":72,"author":{"gitID":"donjar"},"content":"        assertCommandSuccess(redoCommand, model, successMessage, expectedModel);"},{"lineNumber":73,"author":{"gitID":"donjar"},"content":""},{"lineNumber":74,"author":{"gitID":"donjar"},"content":"        // no command in undoStack"},{"lineNumber":75,"author":{"gitID":"donjar"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":76,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"donjar"},"content":""},{"lineNumber":78,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"donjar"},"content":"    public void execute_redoTooManyTimes() {"},{"lineNumber":80,"author":{"gitID":"donjar"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":81,"author":{"gitID":"donjar"},"content":"                Collections.emptyList(), Arrays.asList(deleteCommandTwo, deleteCommandOne));"},{"lineNumber":82,"author":{"gitID":"donjar"},"content":"        RedoCommand redoCommand \u003d new RedoCommand(3);"},{"lineNumber":83,"author":{"gitID":"donjar"},"content":"        redoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":84,"author":{"gitID":"donjar"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":85,"author":{"gitID":"donjar"},"content":""},{"lineNumber":86,"author":{"gitID":"donjar"},"content":"        String successMessage \u003d RedoCommand.getSuccessMessage(2);"},{"lineNumber":87,"author":{"gitID":"donjar"},"content":""},{"lineNumber":88,"author":{"gitID":"donjar"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":89,"author":{"gitID":"donjar"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":90,"author":{"gitID":"donjar"},"content":"        assertCommandSuccess(redoCommand, model, successMessage, expectedModel);"},{"lineNumber":91,"author":{"gitID":"donjar"},"content":""},{"lineNumber":92,"author":{"gitID":"donjar"},"content":"        // no command in undoStack"},{"lineNumber":93,"author":{"gitID":"donjar"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":94,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"donjar"},"content":"    // @@author"},{"lineNumber":96,"author":{"gitID":"donjar"},"content":""},{"lineNumber":97,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"donjar"},"content":"    public void getSuccessMessage() {"},{"lineNumber":99,"author":{"gitID":"donjar"},"content":"        assertEquals(RedoCommand.getSuccessMessage(1), \"1 command redoed.\");"},{"lineNumber":100,"author":{"gitID":"donjar"},"content":"        assertEquals(RedoCommand.getSuccessMessage(2), \"2 commands redoed.\");"},{"lineNumber":101,"author":{"gitID":"donjar"},"content":"        assertEquals(RedoCommand.getSuccessMessage(12), \"12 commands redoed.\");"},{"lineNumber":102,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"donjar":51,"-":52}},{"path":"src/test/java/seedu/address/logic/commands/SocialMediaCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"kenpaxtonlim"},"content":"import seedu.address.commons.events.ui.ChangeBrowserPanelUrlEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"kenpaxtonlim"},"content":"//@@author kenpaxtonlim"},{"lineNumber":28,"author":{"gitID":"kenpaxtonlim"},"content":"public class SocialMediaCommandTest {"},{"lineNumber":29,"author":{"gitID":"kenpaxtonlim"},"content":"    @Rule"},{"lineNumber":30,"author":{"gitID":"kenpaxtonlim"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":31,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":32,"author":{"gitID":"kenpaxtonlim"},"content":"    private Model model;"},{"lineNumber":33,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":34,"author":{"gitID":"kenpaxtonlim"},"content":"    @Before"},{"lineNumber":35,"author":{"gitID":"kenpaxtonlim"},"content":"    public void setUp() {"},{"lineNumber":36,"author":{"gitID":"kenpaxtonlim"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":39,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"kenpaxtonlim"},"content":"    public void execute_validIndexValidType_success() {"},{"lineNumber":41,"author":{"gitID":"kenpaxtonlim"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":42,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":43,"author":{"gitID":"kenpaxtonlim"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON, SocialMediaCommand.TYPE_FACEBOOK);"},{"lineNumber":44,"author":{"gitID":"kenpaxtonlim"},"content":"        assertExecutionSuccess(INDEX_THIRD_PERSON, SocialMediaCommand.TYPE_TWITTER);"},{"lineNumber":45,"author":{"gitID":"kenpaxtonlim"},"content":"        assertExecutionSuccess(lastPersonIndex, SocialMediaCommand.TYPE_INSTAGRAM);"},{"lineNumber":46,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":48,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"kenpaxtonlim"},"content":"    public void execute_invalidIndexValidType_success() {"},{"lineNumber":50,"author":{"gitID":"kenpaxtonlim"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":51,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":52,"author":{"gitID":"kenpaxtonlim"},"content":"        assertExecutionFailure(outOfBoundsIndex, SocialMediaCommand.TYPE_FACEBOOK,"},{"lineNumber":53,"author":{"gitID":"kenpaxtonlim"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":54,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":56,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"kenpaxtonlim"},"content":"    public void execute_validIndexInvalidType_success() {"},{"lineNumber":58,"author":{"gitID":"kenpaxtonlim"},"content":"        assertExecutionFailure(INDEX_FIRST_PERSON, \"abc\", SocialMediaCommand.MESSAGE_INVALID_TYPE);"},{"lineNumber":59,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":61,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"kenpaxtonlim"},"content":"    public void execute_invalidIndexinvalidType_success() {"},{"lineNumber":63,"author":{"gitID":"kenpaxtonlim"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":64,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":65,"author":{"gitID":"kenpaxtonlim"},"content":"        assertExecutionFailure(outOfBoundsIndex, \"abc\","},{"lineNumber":66,"author":{"gitID":"kenpaxtonlim"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":67,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":69,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"kenpaxtonlim"},"content":"    public void equals() {"},{"lineNumber":71,"author":{"gitID":"kenpaxtonlim"},"content":"        SocialMediaCommand command \u003d new SocialMediaCommand(INDEX_FIRST_PERSON, SocialMediaCommand.TYPE_FACEBOOK);"},{"lineNumber":72,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":73,"author":{"gitID":"kenpaxtonlim"},"content":"        // same object -\u003e returns true"},{"lineNumber":74,"author":{"gitID":"kenpaxtonlim"},"content":"        assertTrue(command.equals(command));"},{"lineNumber":75,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":76,"author":{"gitID":"kenpaxtonlim"},"content":"        // same values -\u003e returns true"},{"lineNumber":77,"author":{"gitID":"kenpaxtonlim"},"content":"        SocialMediaCommand firstCommandCopy \u003d new SocialMediaCommand(INDEX_FIRST_PERSON,"},{"lineNumber":78,"author":{"gitID":"kenpaxtonlim"},"content":"                SocialMediaCommand.TYPE_FACEBOOK);"},{"lineNumber":79,"author":{"gitID":"kenpaxtonlim"},"content":"        assertTrue(command.equals(firstCommandCopy));"},{"lineNumber":80,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":81,"author":{"gitID":"kenpaxtonlim"},"content":"        // different types -\u003e returns false"},{"lineNumber":82,"author":{"gitID":"kenpaxtonlim"},"content":"        assertFalse(command.equals(1));"},{"lineNumber":83,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":84,"author":{"gitID":"kenpaxtonlim"},"content":"        // null -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"kenpaxtonlim"},"content":"        assertFalse(command.equals(null));"},{"lineNumber":86,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":87,"author":{"gitID":"kenpaxtonlim"},"content":"        // different person, same social media type -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"kenpaxtonlim"},"content":"        SocialMediaCommand differentPersonCommand \u003d new SocialMediaCommand(INDEX_SECOND_PERSON,"},{"lineNumber":89,"author":{"gitID":"kenpaxtonlim"},"content":"                SocialMediaCommand.TYPE_FACEBOOK);"},{"lineNumber":90,"author":{"gitID":"kenpaxtonlim"},"content":"        assertFalse(command.equals(differentPersonCommand));"},{"lineNumber":91,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":92,"author":{"gitID":"kenpaxtonlim"},"content":"        // same person, different social media typ -\u003e return false"},{"lineNumber":93,"author":{"gitID":"kenpaxtonlim"},"content":"        SocialMediaCommand differentTypeCommand \u003d new SocialMediaCommand(INDEX_FIRST_PERSON,"},{"lineNumber":94,"author":{"gitID":"kenpaxtonlim"},"content":"                SocialMediaCommand.TYPE_TWITTER);"},{"lineNumber":95,"author":{"gitID":"kenpaxtonlim"},"content":"        assertFalse(command.equals(differentTypeCommand));"},{"lineNumber":96,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":98,"author":{"gitID":"kenpaxtonlim"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"kenpaxtonlim"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":100,"author":{"gitID":"kenpaxtonlim"},"content":"     * is raised with the correct index."},{"lineNumber":101,"author":{"gitID":"kenpaxtonlim"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"kenpaxtonlim"},"content":"    private void assertExecutionSuccess(Index index, String type) {"},{"lineNumber":103,"author":{"gitID":"kenpaxtonlim"},"content":"        SocialMediaCommand command \u003d prepareCommand(index, type);"},{"lineNumber":104,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":105,"author":{"gitID":"kenpaxtonlim"},"content":"        try {"},{"lineNumber":106,"author":{"gitID":"kenpaxtonlim"},"content":"            CommandResult commandResult \u003d command.execute();"},{"lineNumber":107,"author":{"gitID":"kenpaxtonlim"},"content":"            assertEquals(SocialMediaCommand.MESSAGE_SUCCESS, commandResult.feedbackToUser);"},{"lineNumber":108,"author":{"gitID":"kenpaxtonlim"},"content":"        } catch (CommandException ce) {"},{"lineNumber":109,"author":{"gitID":"kenpaxtonlim"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":110,"author":{"gitID":"kenpaxtonlim"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":112,"author":{"gitID":"kenpaxtonlim"},"content":"        String url \u003d \"\";"},{"lineNumber":113,"author":{"gitID":"kenpaxtonlim"},"content":"        switch (type) {"},{"lineNumber":114,"author":{"gitID":"kenpaxtonlim"},"content":"        case SocialMediaCommand.TYPE_FACEBOOK:"},{"lineNumber":115,"author":{"gitID":"kenpaxtonlim"},"content":"            url \u003d SocialMediaCommand.URL_FACEBOOK"},{"lineNumber":116,"author":{"gitID":"kenpaxtonlim"},"content":"                    + model.getFilteredPersonList().get(index.getZeroBased()).getSocialMedia().facebook;"},{"lineNumber":117,"author":{"gitID":"kenpaxtonlim"},"content":"            break;"},{"lineNumber":118,"author":{"gitID":"kenpaxtonlim"},"content":"        case SocialMediaCommand.TYPE_TWITTER:"},{"lineNumber":119,"author":{"gitID":"kenpaxtonlim"},"content":"            url \u003d SocialMediaCommand.URL_TWITTER"},{"lineNumber":120,"author":{"gitID":"kenpaxtonlim"},"content":"                    + model.getFilteredPersonList().get(index.getZeroBased()).getSocialMedia().twitter;"},{"lineNumber":121,"author":{"gitID":"kenpaxtonlim"},"content":"            break;"},{"lineNumber":122,"author":{"gitID":"kenpaxtonlim"},"content":"        case SocialMediaCommand.TYPE_INSTAGRAM:"},{"lineNumber":123,"author":{"gitID":"kenpaxtonlim"},"content":"            url \u003d SocialMediaCommand.URL_INSTAGRAM"},{"lineNumber":124,"author":{"gitID":"kenpaxtonlim"},"content":"                    + model.getFilteredPersonList().get(index.getZeroBased()).getSocialMedia().instagram;"},{"lineNumber":125,"author":{"gitID":"kenpaxtonlim"},"content":"            break;"},{"lineNumber":126,"author":{"gitID":"kenpaxtonlim"},"content":"        default:"},{"lineNumber":127,"author":{"gitID":"kenpaxtonlim"},"content":"            throw new AssertionError();"},{"lineNumber":128,"author":{"gitID":"kenpaxtonlim"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":130,"author":{"gitID":"kenpaxtonlim"},"content":"        ChangeBrowserPanelUrlEvent lastEvent \u003d"},{"lineNumber":131,"author":{"gitID":"kenpaxtonlim"},"content":"                (ChangeBrowserPanelUrlEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":132,"author":{"gitID":"kenpaxtonlim"},"content":"        assertEquals(url, lastEvent.url);"},{"lineNumber":133,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":135,"author":{"gitID":"kenpaxtonlim"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"kenpaxtonlim"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":137,"author":{"gitID":"kenpaxtonlim"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":138,"author":{"gitID":"kenpaxtonlim"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"kenpaxtonlim"},"content":"    private void assertExecutionFailure(Index index, String type, String expectedMessage) {"},{"lineNumber":140,"author":{"gitID":"kenpaxtonlim"},"content":"        SocialMediaCommand command \u003d prepareCommand(index, type);"},{"lineNumber":141,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":142,"author":{"gitID":"kenpaxtonlim"},"content":"        try {"},{"lineNumber":143,"author":{"gitID":"kenpaxtonlim"},"content":"            command.execute();"},{"lineNumber":144,"author":{"gitID":"kenpaxtonlim"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":145,"author":{"gitID":"kenpaxtonlim"},"content":"        } catch (CommandException ce) {"},{"lineNumber":146,"author":{"gitID":"kenpaxtonlim"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":147,"author":{"gitID":"kenpaxtonlim"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":148,"author":{"gitID":"kenpaxtonlim"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":151,"author":{"gitID":"kenpaxtonlim"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"kenpaxtonlim"},"content":"     * Returns a {@code SocialMediaCommand} with parameters {@code index} and {@code type}."},{"lineNumber":153,"author":{"gitID":"kenpaxtonlim"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"kenpaxtonlim"},"content":"    private SocialMediaCommand prepareCommand(Index index, String type) {"},{"lineNumber":155,"author":{"gitID":"kenpaxtonlim"},"content":"        SocialMediaCommand command \u003d new SocialMediaCommand(index, type);"},{"lineNumber":156,"author":{"gitID":"kenpaxtonlim"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":157,"author":{"gitID":"kenpaxtonlim"},"content":"        return command;"},{"lineNumber":158,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"kenpaxtonlim"},"content":"}"}],"authorContributionMap":{"kenpaxtonlim":134,"-":25}},{"path":"src/test/java/seedu/address/logic/commands/ToggleAccessDisplayCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"Zzmobie"},"content":"public class ToggleAccessDisplayCommandTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void execute_emptyAddressBook_success() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":19,"author":{"gitID":"Zzmobie"},"content":"        assertCommandSuccess(prepareCommand(model, true), model,"},{"lineNumber":20,"author":{"gitID":"Zzmobie"},"content":"                ToggleAccessDisplayCommand.MESSAGE_SUCCESS + \"on. \", model);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":26,"author":{"gitID":"Zzmobie"},"content":"        assertCommandSuccess(prepareCommand(model, true), model,"},{"lineNumber":27,"author":{"gitID":"Zzmobie"},"content":"                ToggleAccessDisplayCommand.MESSAGE_SUCCESS + \"on. \", model);"},{"lineNumber":28,"author":{"gitID":"Zzmobie"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":30,"author":{"gitID":"Zzmobie"},"content":"    //@@author Zzmobie"},{"lineNumber":31,"author":{"gitID":"Zzmobie"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"Zzmobie"},"content":"    public void execute_toggleOffNonEmptyAddressBook_success() {"},{"lineNumber":33,"author":{"gitID":"Zzmobie"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"Zzmobie"},"content":"        assertCommandSuccess(prepareCommand(model, false), model,"},{"lineNumber":35,"author":{"gitID":"Zzmobie"},"content":"                ToggleAccessDisplayCommand.MESSAGE_SUCCESS + \"off. \", model);"},{"lineNumber":36,"author":{"gitID":"Zzmobie"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Zzmobie"},"content":"    //@@author"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Generates a new {@code ClearCommand} which upon execution, clears the contents in {@code model}."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"Zzmobie"},"content":"    private ToggleAccessDisplayCommand prepareCommand(Model model, boolean isDisplayed) {"},{"lineNumber":43,"author":{"gitID":"Zzmobie"},"content":"        ToggleAccessDisplayCommand command \u003d new ToggleAccessDisplayCommand(isDisplayed);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"kenpaxtonlim"},"content":"}"}],"authorContributionMap":{"Zzmobie":17,"kenpaxtonlim":1,"-":29}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"donjar"},"content":"import seedu.address.model.FontSizeOutOfBoundsException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        public void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"500poundbear"},"content":"        @Override"},{"lineNumber":128,"author":{"gitID":"500poundbear"},"content":"        public ObservableList\u003cReadOnlyPerson\u003e getAllPersonList() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"donjar"},"content":""},{"lineNumber":144,"author":{"gitID":"donjar"},"content":"        // @@author donjar"},{"lineNumber":145,"author":{"gitID":"donjar"},"content":"        @Override"},{"lineNumber":146,"author":{"gitID":"donjar"},"content":"        public int getFontSizeChange() {"},{"lineNumber":147,"author":{"gitID":"donjar"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":148,"author":{"gitID":"donjar"},"content":"            return 0;"},{"lineNumber":149,"author":{"gitID":"donjar"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"donjar"},"content":""},{"lineNumber":151,"author":{"gitID":"donjar"},"content":"        @Override"},{"lineNumber":152,"author":{"gitID":"donjar"},"content":"        public void resetFontSize() {"},{"lineNumber":153,"author":{"gitID":"donjar"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":154,"author":{"gitID":"donjar"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"donjar"},"content":""},{"lineNumber":156,"author":{"gitID":"donjar"},"content":"        @Override"},{"lineNumber":157,"author":{"gitID":"donjar"},"content":"        public int updateFontSize(int change) throws FontSizeOutOfBoundsException {"},{"lineNumber":158,"author":{"gitID":"donjar"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":159,"author":{"gitID":"donjar"},"content":"            return 0;"},{"lineNumber":160,"author":{"gitID":"donjar"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"donjar"},"content":"        // @@author"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":181,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            personsAdded.add(new Person(person));"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"500poundbear":2,"donjar":20,"-":174}},{"path":"src/test/java/seedu/address/model/person/NameTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class NameTest {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public void isValidName() {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":13,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"        // valid name"},{"lineNumber":19,"author":{"gitID":"donjar"},"content":"        // @@author donjar"},{"lineNumber":20,"author":{"gitID":"donjar"},"content":"        assertTrue(Name.isValidName(\"p\")); // one letter"},{"lineNumber":21,"author":{"gitID":"donjar"},"content":"        // @@author"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"},{"lineNumber":27,"author":{"gitID":"donjar"},"content":"        // @@author donjar"},{"lineNumber":28,"author":{"gitID":"donjar"},"content":"        assertTrue(Name.isValidName(\"Nguyễn Nguyễn Nguyễn\")); // Vietnamese name sample"},{"lineNumber":29,"author":{"gitID":"donjar"},"content":"        assertTrue(Name.isValidName(\"习近平\")); // Chinese name sample"},{"lineNumber":30,"author":{"gitID":"donjar"},"content":"        // @@author"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"donjar":7,"-":25}},{"path":"src/test/java/seedu/address/model/person/PhoneTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"donjar"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class PhoneTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void isValidPhone() {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        // invalid phone numbers"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"\")); // empty string"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"        // valid phone numbers"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"donjar"},"content":""},{"lineNumber":28,"author":{"gitID":"donjar"},"content":"    // @@author donjar"},{"lineNumber":29,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"donjar"},"content":"    public void extractPhone() throws IllegalValueException {"},{"lineNumber":31,"author":{"gitID":"donjar"},"content":"        assertEquals(\"93121534\", Phone.extractPhone(\"9312 1534\")); // spaces within digits"},{"lineNumber":32,"author":{"gitID":"donjar"},"content":"        assertEquals(\"93121534\", Phone.extractPhone(\"9312-1534\")); // dashes within digits"},{"lineNumber":33,"author":{"gitID":"donjar"},"content":"        assertEquals(\"93121534\", Phone.extractPhone(\"(9312) 1534\")); // parentheses within digits"},{"lineNumber":34,"author":{"gitID":"donjar"},"content":"        assertEquals(\"1234567890\", Phone.extractPhone(\"(123) 456-7890\")); // complex phone number"},{"lineNumber":35,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"donjar"},"content":"    // @@author"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"donjar":11,"-":26}},{"path":"src/test/java/seedu/address/model/person/RemarkTest.java","lines":[{"lineNumber":1,"author":{"gitID":"500poundbear"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"500poundbear"},"content":"//@@author 500poundbear"},{"lineNumber":9,"author":{"gitID":"500poundbear"},"content":"public class RemarkTest {"},{"lineNumber":10,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":11,"author":{"gitID":"500poundbear"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"500poundbear"},"content":"    public void equals() {"},{"lineNumber":13,"author":{"gitID":"500poundbear"},"content":"        Remark remark \u003d new Remark(\"Hello\");"},{"lineNumber":14,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":15,"author":{"gitID":"500poundbear"},"content":"        // Return true if same object"},{"lineNumber":16,"author":{"gitID":"500poundbear"},"content":"        assertTrue(remark.equals(remark));"},{"lineNumber":17,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":18,"author":{"gitID":"500poundbear"},"content":"        // Returns true if remarks have the same value"},{"lineNumber":19,"author":{"gitID":"500poundbear"},"content":"        Remark remarkSameValue \u003d new Remark(remark.value);"},{"lineNumber":20,"author":{"gitID":"500poundbear"},"content":"        assertTrue(remark.equals(remarkSameValue));"},{"lineNumber":21,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":22,"author":{"gitID":"500poundbear"},"content":"        // Returns false if different type"},{"lineNumber":23,"author":{"gitID":"500poundbear"},"content":"        assertFalse(remark.equals(1));"},{"lineNumber":24,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":25,"author":{"gitID":"500poundbear"},"content":"        // Returns false if null"},{"lineNumber":26,"author":{"gitID":"500poundbear"},"content":"        assertFalse(remark.equals(null));"},{"lineNumber":27,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":28,"author":{"gitID":"500poundbear"},"content":"        // Returns false if different person"},{"lineNumber":29,"author":{"gitID":"500poundbear"},"content":"        Remark differentRemark \u003d new Remark(\"Hey\");"},{"lineNumber":30,"author":{"gitID":"500poundbear"},"content":"        assertFalse(remark.equals(differentRemark));"},{"lineNumber":31,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"500poundbear"},"content":"}"}],"authorContributionMap":{"500poundbear":27,"-":5}},{"path":"src/test/java/seedu/address/model/person/NameMatchesRegexTest.java","lines":[{"lineNumber":1,"author":{"gitID":"donjar"},"content":"// @@author donjar"},{"lineNumber":2,"author":{"gitID":"donjar"},"content":""},{"lineNumber":3,"author":{"gitID":"donjar"},"content":"package seedu.address.model.person;"},{"lineNumber":4,"author":{"gitID":"donjar"},"content":""},{"lineNumber":5,"author":{"gitID":"donjar"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"donjar"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"donjar"},"content":""},{"lineNumber":8,"author":{"gitID":"donjar"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"donjar"},"content":""},{"lineNumber":10,"author":{"gitID":"donjar"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":11,"author":{"gitID":"donjar"},"content":""},{"lineNumber":12,"author":{"gitID":"donjar"},"content":"public class NameMatchesRegexTest {"},{"lineNumber":13,"author":{"gitID":"donjar"},"content":""},{"lineNumber":14,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"donjar"},"content":"    public void equals() {"},{"lineNumber":16,"author":{"gitID":"donjar"},"content":"        String firstRegex \u003d \"^asdf$\";"},{"lineNumber":17,"author":{"gitID":"donjar"},"content":"        String secondRegex \u003d \"a+s\";"},{"lineNumber":18,"author":{"gitID":"donjar"},"content":""},{"lineNumber":19,"author":{"gitID":"donjar"},"content":"        NameMatchesRegexPredicate firstPredicate \u003d new NameMatchesRegexPredicate(firstRegex);"},{"lineNumber":20,"author":{"gitID":"donjar"},"content":"        NameMatchesRegexPredicate secondPredicate \u003d new NameMatchesRegexPredicate(secondRegex);"},{"lineNumber":21,"author":{"gitID":"donjar"},"content":""},{"lineNumber":22,"author":{"gitID":"donjar"},"content":"        // same object -\u003e returns true"},{"lineNumber":23,"author":{"gitID":"donjar"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":24,"author":{"gitID":"donjar"},"content":""},{"lineNumber":25,"author":{"gitID":"donjar"},"content":"        // same values -\u003e returns true"},{"lineNumber":26,"author":{"gitID":"donjar"},"content":"        NameMatchesRegexPredicate firstPredicateCopy \u003d new NameMatchesRegexPredicate(firstRegex);"},{"lineNumber":27,"author":{"gitID":"donjar"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":28,"author":{"gitID":"donjar"},"content":""},{"lineNumber":29,"author":{"gitID":"donjar"},"content":"        // different types -\u003e returns false"},{"lineNumber":30,"author":{"gitID":"donjar"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":31,"author":{"gitID":"donjar"},"content":""},{"lineNumber":32,"author":{"gitID":"donjar"},"content":"        // null -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"donjar"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":34,"author":{"gitID":"donjar"},"content":""},{"lineNumber":35,"author":{"gitID":"donjar"},"content":"        // different person -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"donjar"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":37,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"donjar"},"content":""},{"lineNumber":39,"author":{"gitID":"donjar"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"donjar"},"content":"    public void test_nameContainsKeywords() {"},{"lineNumber":41,"author":{"gitID":"donjar"},"content":"        NameMatchesRegexPredicate predicate \u003d new NameMatchesRegexPredicate(\"^Man[mn]a$\");"},{"lineNumber":42,"author":{"gitID":"donjar"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Manna\").build()));"},{"lineNumber":43,"author":{"gitID":"donjar"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Manma\").build()));"},{"lineNumber":44,"author":{"gitID":"donjar"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Manma Chi\").build()));"},{"lineNumber":45,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"donjar"},"content":"}"}],"authorContributionMap":{"donjar":46}},{"path":"src/test/java/seedu/address/logic/commands/QuickHelpCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":11,"author":{"gitID":"kenpaxtonlim"},"content":"//@@author kenpaxtonlim"},{"lineNumber":12,"author":{"gitID":"kenpaxtonlim"},"content":"public class QuickHelpCommandTest {"},{"lineNumber":13,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":14,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"kenpaxtonlim"},"content":"    public void execute_command_success() {"},{"lineNumber":16,"author":{"gitID":"kenpaxtonlim"},"content":"        QuickHelpCommand command \u003d new QuickHelpCommand();"},{"lineNumber":17,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":18,"author":{"gitID":"kenpaxtonlim"},"content":"        try {"},{"lineNumber":19,"author":{"gitID":"kenpaxtonlim"},"content":"            CommandResult commandResult \u003d command.execute();"},{"lineNumber":20,"author":{"gitID":"kenpaxtonlim"},"content":"            assertEquals(QuickHelpCommand.MESSAGE, commandResult.feedbackToUser);"},{"lineNumber":21,"author":{"gitID":"kenpaxtonlim"},"content":"        } catch (CommandException e) {"},{"lineNumber":22,"author":{"gitID":"kenpaxtonlim"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", e);"},{"lineNumber":23,"author":{"gitID":"kenpaxtonlim"},"content":"        }"},{"lineNumber":24,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":26,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"kenpaxtonlim"},"content":"    public void equals() {"},{"lineNumber":28,"author":{"gitID":"kenpaxtonlim"},"content":"        QuickHelpCommand command \u003d new QuickHelpCommand();"},{"lineNumber":29,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":30,"author":{"gitID":"kenpaxtonlim"},"content":"        // same object -\u003e returns true"},{"lineNumber":31,"author":{"gitID":"kenpaxtonlim"},"content":"        assertTrue(command.equals(command));"},{"lineNumber":32,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":33,"author":{"gitID":"kenpaxtonlim"},"content":"        // same type different objects -\u003e returns true"},{"lineNumber":34,"author":{"gitID":"kenpaxtonlim"},"content":"        assertTrue(command.equals(new QuickHelpCommand()));"},{"lineNumber":35,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":36,"author":{"gitID":"kenpaxtonlim"},"content":"        // different types -\u003e returns false"},{"lineNumber":37,"author":{"gitID":"kenpaxtonlim"},"content":"        assertFalse(command.equals(1));"},{"lineNumber":38,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":39,"author":{"gitID":"kenpaxtonlim"},"content":"        // null -\u003e returns false"},{"lineNumber":40,"author":{"gitID":"kenpaxtonlim"},"content":"        assertFalse(command.equals(null));"},{"lineNumber":41,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"kenpaxtonlim"},"content":"}"}],"authorContributionMap":{"kenpaxtonlim":33,"-":9}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(ReadOnlyPerson person) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":36,"author":{"gitID":"kenpaxtonlim"},"content":"        descriptor.setSocialMedia(person.getSocialMedia());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(Optional.of(name)).ifPresent(descriptor::setName);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"name is expected to be unique.\");"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(Optional.of(phone)).ifPresent(descriptor::setPhone);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"phone is expected to be unique.\");"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(Optional.of(email)).ifPresent(descriptor::setEmail);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"email is expected to be unique.\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            ParserUtil.parseAddress(Optional.of(address)).ifPresent(descriptor::setAddress);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"address is expected to be unique.\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            descriptor.setTags(ParserUtil.parseTags(Arrays.asList(tags)));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tags are expected to be unique.\");"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"kenpaxtonlim"},"content":"    //@@author kenpaxtonlim"},{"lineNumber":101,"author":{"gitID":"kenpaxtonlim"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"kenpaxtonlim"},"content":"     * Sets the {@code SocialMedia} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":103,"author":{"gitID":"kenpaxtonlim"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"kenpaxtonlim"},"content":"    public EditPersonDescriptorBuilder withSocialMedia(String facebook, String twitter, String instagram) {"},{"lineNumber":105,"author":{"gitID":"kenpaxtonlim"},"content":"        descriptor.setSocialMedia(ParserUtil.parseSocialMedia("},{"lineNumber":106,"author":{"gitID":"kenpaxtonlim"},"content":"                Optional.of(facebook), Optional.of(twitter), Optional.of(instagram), true));"},{"lineNumber":107,"author":{"gitID":"kenpaxtonlim"},"content":"        return this;"},{"lineNumber":108,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"kenpaxtonlim"},"content":"    //@@author"},{"lineNumber":110,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kenpaxtonlim":12,"-":102}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FACEBOOK;"},{"lineNumber":6,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INSTAGRAM;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TWITTER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A utility class for Person."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static String getAddCommand(ReadOnlyPerson person) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"kenpaxtonlim"},"content":"    //@@author kenpaxtonlim"},{"lineNumber":28,"author":{"gitID":"kenpaxtonlim"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"kenpaxtonlim"},"content":"     * Returns an add command string using alias for adding the {@code person}."},{"lineNumber":30,"author":{"gitID":"kenpaxtonlim"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"kenpaxtonlim"},"content":"    public static String getAddCommandAlias(ReadOnlyPerson person) {"},{"lineNumber":32,"author":{"gitID":"kenpaxtonlim"},"content":"        return AddCommand.COMMAND_ALIAS + \" \" + getPersonDetails(person);"},{"lineNumber":33,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"kenpaxtonlim"},"content":"    //@@author"},{"lineNumber":35,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static String getPersonDetails(ReadOnlyPerson person) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":46,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":48,"author":{"gitID":"kenpaxtonlim"},"content":"        sb.append(PREFIX_FACEBOOK + person.getSocialMedia().facebook + \" \");"},{"lineNumber":49,"author":{"gitID":"kenpaxtonlim"},"content":"        sb.append(PREFIX_TWITTER + person.getSocialMedia().twitter + \" \");"},{"lineNumber":50,"author":{"gitID":"kenpaxtonlim"},"content":"        sb.append(PREFIX_INSTAGRAM + person.getSocialMedia().instagram + \" \");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kenpaxtonlim":15,"-":38}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"500poundbear"},"content":"import java.util.Date;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"Zzmobie"},"content":"import seedu.address.model.person.AccessCount;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":14,"author":{"gitID":"500poundbear"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":15,"author":{"gitID":"kenpaxtonlim"},"content":"import seedu.address.model.person.SocialMedia;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":27,"author":{"gitID":"500poundbear"},"content":"    public static final String DEFAULT_REMARK \u003d \"\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":30,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String DEFAULT_USERNAME \u003d \"alicepaul123\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Person person;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            Name defaultName \u003d new Name(DEFAULT_NAME);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            Phone defaultPhone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            Email defaultEmail \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            Address defaultAddress \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":40,"author":{"gitID":"500poundbear"},"content":"            Remark defaultRemark \u003d new Remark(DEFAULT_REMARK);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e defaultTags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":42,"author":{"gitID":"500poundbear"},"content":"            Date createdAt \u003d new Date();"},{"lineNumber":43,"author":{"gitID":"kenpaxtonlim"},"content":"            SocialMedia socialMedia \u003d new SocialMedia(DEFAULT_USERNAME, DEFAULT_USERNAME, DEFAULT_USERNAME);"},{"lineNumber":44,"author":{"gitID":"Zzmobie"},"content":"            AccessCount accessCount \u003d new AccessCount(0);"},{"lineNumber":45,"author":{"gitID":"500poundbear"},"content":"            this.person \u003d new Person(defaultName, defaultPhone, defaultEmail, defaultAddress, defaultRemark,"},{"lineNumber":46,"author":{"gitID":"Zzmobie"},"content":"                    defaultTags, createdAt, socialMedia, accessCount);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Default person\u0027s values are invalid.\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public PersonBuilder(ReadOnlyPerson personToCopy) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.person \u003d new Person(personToCopy);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            this.person.setName(new Name(name));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"name is expected to be unique.\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            this.person.setTags(SampleDataUtil.getTagSet(tags));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tags are expected to be unique.\");"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            this.person.setAddress(new Address(address));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"address is expected to be unique.\");"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            this.person.setPhone(new Phone(phone));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"phone is expected to be unique.\");"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            this.person.setEmail(new Email(email));"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"email is expected to be unique.\");"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"500poundbear"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"500poundbear"},"content":"     * Sets the {@code Remark} of the {@code Person} that we are building."},{"lineNumber":121,"author":{"gitID":"500poundbear"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"500poundbear"},"content":"    public PersonBuilder withRemark(String remark) {"},{"lineNumber":123,"author":{"gitID":"500poundbear"},"content":"        this.person.setRemark(new Remark(remark));"},{"lineNumber":124,"author":{"gitID":"500poundbear"},"content":"        return this;"},{"lineNumber":125,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":127,"author":{"gitID":"kenpaxtonlim"},"content":"    //@@author kenpaxtonlim"},{"lineNumber":128,"author":{"gitID":"kenpaxtonlim"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"kenpaxtonlim"},"content":"     * Sets the {@code SocialMedia} of the {@code Person} that we are building."},{"lineNumber":130,"author":{"gitID":"kenpaxtonlim"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"kenpaxtonlim"},"content":"    public PersonBuilder withSocialMedia(String facebook, String twitter, String instagram) {"},{"lineNumber":132,"author":{"gitID":"kenpaxtonlim"},"content":"        this.person.setSocialMedia(new SocialMedia(facebook, twitter, instagram));"},{"lineNumber":133,"author":{"gitID":"kenpaxtonlim"},"content":"        return this;"},{"lineNumber":134,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"kenpaxtonlim"},"content":"    //@@author"},{"lineNumber":136,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":137,"author":{"gitID":"kenpaxtonlim"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"kenpaxtonlim"},"content":"     * Sets the {@code SocialMedia} of the {@code Person} that we are building."},{"lineNumber":139,"author":{"gitID":"kenpaxtonlim"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"500poundbear"},"content":"    public PersonBuilder withCreatedAt(Date createdAt) {"},{"lineNumber":141,"author":{"gitID":"500poundbear"},"content":"        this.person.setCreatedAt(createdAt);"},{"lineNumber":142,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":143,"author":{"gitID":"500poundbear"},"content":"        return this;"},{"lineNumber":144,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        return this.person;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"500poundbear":20,"Zzmobie":3,"kenpaxtonlim":16,"-":111}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_USERNAME_AMY;"},{"lineNumber":14,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_USERNAME_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"500poundbear"},"content":"import java.text.DateFormat;"},{"lineNumber":17,"author":{"gitID":"500poundbear"},"content":"import java.text.ParseException;"},{"lineNumber":18,"author":{"gitID":"500poundbear"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":21,"author":{"gitID":"500poundbear"},"content":"import java.util.Date;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":36,"author":{"gitID":"kenpaxtonlim"},"content":"            .withTags(\"friends\")"},{"lineNumber":37,"author":{"gitID":"kenpaxtonlim"},"content":"            .withSocialMedia(\"alice123\", \"alice123\", \"alice123\")"},{"lineNumber":38,"author":{"gitID":"500poundbear"},"content":"            .withCreatedAt(stringToDate(\"11-12-2016\"))"},{"lineNumber":39,"author":{"gitID":"kenpaxtonlim"},"content":"            .build();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":43,"author":{"gitID":"kenpaxtonlim"},"content":"            .withTags(\"owesMoney\", \"friends\")"},{"lineNumber":44,"author":{"gitID":"kenpaxtonlim"},"content":"            .withSocialMedia(\"benson123\", \"benson123\", \"benson123\")"},{"lineNumber":45,"author":{"gitID":"500poundbear"},"content":"            .withCreatedAt(stringToDate(\"11-05-2017\"))"},{"lineNumber":46,"author":{"gitID":"kenpaxtonlim"},"content":"            .build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":48,"author":{"gitID":"kenpaxtonlim"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\")"},{"lineNumber":49,"author":{"gitID":"Zzmobie"},"content":"            .withSocialMedia(\"carl123\", \"carl123\", \"carl123\").withTags(\"owesLunch\")"},{"lineNumber":50,"author":{"gitID":"500poundbear"},"content":"            .withCreatedAt(stringToDate(\"12-06-2017\"))"},{"lineNumber":51,"author":{"gitID":"kenpaxtonlim"},"content":"            .build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":53,"author":{"gitID":"kenpaxtonlim"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\")"},{"lineNumber":54,"author":{"gitID":"500poundbear"},"content":"            .withSocialMedia(\"\", \"daniel\", \"\")"},{"lineNumber":55,"author":{"gitID":"500poundbear"},"content":"            .withCreatedAt(stringToDate(\"12-06-2017\"))"},{"lineNumber":56,"author":{"gitID":"kenpaxtonlim"},"content":"            .build();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":58,"author":{"gitID":"kenpaxtonlim"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\")"},{"lineNumber":59,"author":{"gitID":"500poundbear"},"content":"            .withSocialMedia(\"\", \"\", \"elle\")"},{"lineNumber":60,"author":{"gitID":"500poundbear"},"content":"            .withCreatedAt(stringToDate(\"12-06-2017\"))"},{"lineNumber":61,"author":{"gitID":"kenpaxtonlim"},"content":"            .build();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":63,"author":{"gitID":"500poundbear"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\")"},{"lineNumber":64,"author":{"gitID":"500poundbear"},"content":"            .withSocialMedia(\"\", \"fiona\", \"\")"},{"lineNumber":65,"author":{"gitID":"500poundbear"},"content":"            .withCreatedAt(stringToDate(\"12-06-2017\"))"},{"lineNumber":66,"author":{"gitID":"500poundbear"},"content":"            .build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":68,"author":{"gitID":"500poundbear"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withRemark(\"Likes to interject with remarks\")"},{"lineNumber":69,"author":{"gitID":"500poundbear"},"content":"            .withSocialMedia(\"george\", \"george\", \"george\")"},{"lineNumber":70,"author":{"gitID":"500poundbear"},"content":"            .withCreatedAt(stringToDate(\"12-06-2017\"))"},{"lineNumber":71,"author":{"gitID":"500poundbear"},"content":"            .build();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":81,"author":{"gitID":"kenpaxtonlim"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND)"},{"lineNumber":82,"author":{"gitID":"kenpaxtonlim"},"content":"            .withSocialMedia(VALID_USERNAME_AMY, VALID_USERNAME_AMY, VALID_USERNAME_AMY)"},{"lineNumber":83,"author":{"gitID":"kenpaxtonlim"},"content":"            .build();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":86,"author":{"gitID":"kenpaxtonlim"},"content":"            .withSocialMedia(VALID_USERNAME_BOB, VALID_USERNAME_BOB, VALID_USERNAME_BOB)"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        for (ReadOnlyPerson person : getTypicalPersons()) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                assert false : \"not possible\";"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public static List\u003cReadOnlyPerson\u003e getTypicalPersons() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":112,"author":{"gitID":"500poundbear"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"500poundbear"},"content":"     * Converts a string in the date format into a date object. Returns the current date if input is invalid."},{"lineNumber":114,"author":{"gitID":"500poundbear"},"content":"     * @param inputString"},{"lineNumber":115,"author":{"gitID":"500poundbear"},"content":"     * @return"},{"lineNumber":116,"author":{"gitID":"500poundbear"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"500poundbear"},"content":"    private static Date stringToDate(String inputString) {"},{"lineNumber":118,"author":{"gitID":"500poundbear"},"content":"        try {"},{"lineNumber":119,"author":{"gitID":"500poundbear"},"content":"            DateFormat dateFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"},{"lineNumber":120,"author":{"gitID":"500poundbear"},"content":"            Date inputDate \u003d dateFormat.parse(inputString);"},{"lineNumber":121,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":122,"author":{"gitID":"500poundbear"},"content":"            return inputDate;"},{"lineNumber":123,"author":{"gitID":"500poundbear"},"content":"        } catch (ParseException e) {"},{"lineNumber":124,"author":{"gitID":"500poundbear"},"content":"            return new Date();"},{"lineNumber":125,"author":{"gitID":"500poundbear"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"500poundbear":35,"Zzmobie":1,"kenpaxtonlim":18,"-":73}},{"path":"src/test/java/guitests/GuiRobot.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.BooleanSupplier;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.testfx.api.FxRobot;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.exceptions.StageNotFoundException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Robot used to simulate user actions on the GUI."},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Extends {@link FxRobot} by adding some customized functionality and workarounds."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class GuiRobot extends FxRobot {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final int PAUSE_FOR_HUMAN_DELAY_MILLISECONDS \u003d 250;"},{"lineNumber":18,"author":{"gitID":"500poundbear"},"content":"    private static final int DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS \u003d 20000;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String PROPERTY_TESTFX_HEADLESS \u003d \"testfx.headless\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final boolean isHeadlessMode;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public GuiRobot() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        String headlessPropertyValue \u003d System.getProperty(PROPERTY_TESTFX_HEADLESS);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        isHeadlessMode \u003d headlessPropertyValue !\u003d null \u0026\u0026 headlessPropertyValue.equals(\"true\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Pauses execution for {@code PAUSE_FOR_HUMAN_DELAY_MILLISECONDS} milliseconds for a human to examine the"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * effects of the test. This method will be disabled when the GUI tests are executed in headless mode to avoid"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * unnecessary delays."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void pauseForHuman() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        if (isHeadlessMode) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        sleep(PAUSE_FOR_HUMAN_DELAY_MILLISECONDS);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Waits for {@code event} to be true by {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS} milliseconds."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @throws EventTimeoutException if the time taken exceeds {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS}"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * milliseconds."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void waitForEvent(BooleanSupplier event) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        waitForEvent(event, DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Waits for {@code event} to be true."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @param timeOut in milliseconds"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * @throws EventTimeoutException if the time taken exceeds {@code timeOut}."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void waitForEvent(BooleanSupplier event, int timeOut) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        int timePassed \u003d 0;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        final int retryInterval \u003d 50;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        while (!event.getAsBoolean()) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            sleep(retryInterval);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            timePassed +\u003d retryInterval;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"            if (timePassed \u003e\u003d timeOut) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                throw new EventTimeoutException();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        pauseForHuman();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Returns true if the window with {@code stageTitle} is currently open."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public boolean isWindowShown(String stageTitle) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return listTargetWindows().stream()"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                .filter(window -\u003e window instanceof Stage \u0026\u0026 ((Stage) window).getTitle().equals(stageTitle))"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                .count() \u003e\u003d 1;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Returns the first stage, ordered by proximity to the current target window, with the stage title."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * The order that the windows are searched are as follows (proximity): current target window,"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * children of the target window, rest of the windows."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * @throws StageNotFoundException if the stage is not found."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public Stage getStage(String stageTitle) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Optional\u003cStage\u003e targetStage \u003d listTargetWindows().stream()"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                .filter(Stage.class::isInstance)    // checks that the window is of type Stage"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                .map(Stage.class::cast)"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                .filter(stage -\u003e stage.getTitle().equals(stageTitle))"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                .findFirst();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return targetStage.orElseThrow(StageNotFoundException::new);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Represents an error which occurs when a timeout occurs when waiting for an event."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private class EventTimeoutException extends RuntimeException {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"500poundbear":1,"-":104}},{"path":"src/test/java/seedu/address/logic/commands/FindTagCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":24,"author":{"gitID":"Zzmobie"},"content":"import seedu.address.model.person.TagContainsKeywordsPredicate;"},{"lineNumber":25,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":26,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":27,"author":{"gitID":"Zzmobie"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"Zzmobie"},"content":" * Contains integration tests (interaction with the Model) for {@code FindTagCommand}."},{"lineNumber":29,"author":{"gitID":"Zzmobie"},"content":" */"},{"lineNumber":30,"author":{"gitID":"Zzmobie"},"content":"public class FindTagCommandTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":35,"author":{"gitID":"Zzmobie"},"content":"        TagContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":36,"author":{"gitID":"Zzmobie"},"content":"                new TagContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":37,"author":{"gitID":"Zzmobie"},"content":"        TagContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":38,"author":{"gitID":"Zzmobie"},"content":"                new TagContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":39,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":40,"author":{"gitID":"Zzmobie"},"content":"        FindTagCommand findFirstTagCommand \u003d new FindTagCommand(firstPredicate);"},{"lineNumber":41,"author":{"gitID":"Zzmobie"},"content":"        FindTagCommand findSecondTagCommand \u003d new FindTagCommand(secondPredicate);"},{"lineNumber":42,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":43,"author":{"gitID":"Zzmobie"},"content":"        // same object -\u003e returns true"},{"lineNumber":44,"author":{"gitID":"Zzmobie"},"content":"        assertTrue(findFirstTagCommand.equals(findFirstTagCommand));"},{"lineNumber":45,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":46,"author":{"gitID":"Zzmobie"},"content":"        // same values -\u003e returns true"},{"lineNumber":47,"author":{"gitID":"Zzmobie"},"content":"        FindTagCommand findFirstTagCommandCopy \u003d new FindTagCommand(firstPredicate);"},{"lineNumber":48,"author":{"gitID":"Zzmobie"},"content":"        assertTrue(findFirstTagCommand.equals(findFirstTagCommandCopy));"},{"lineNumber":49,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":50,"author":{"gitID":"Zzmobie"},"content":"        // different types -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"Zzmobie"},"content":"        assertFalse(findFirstTagCommand.equals(1));"},{"lineNumber":52,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":53,"author":{"gitID":"Zzmobie"},"content":"        // null -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"Zzmobie"},"content":"        assertFalse(findFirstTagCommand.equals(null));"},{"lineNumber":55,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":56,"author":{"gitID":"Zzmobie"},"content":"        // different person -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"Zzmobie"},"content":"        assertFalse(findFirstTagCommand.equals(findSecondTagCommand));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":63,"author":{"gitID":"Zzmobie"},"content":"        FindTagCommand command \u003d prepareCommand(\" \");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"Zzmobie"},"content":"    //@@author Zzmobie"},{"lineNumber":67,"author":{"gitID":"Zzmobie"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"Zzmobie"},"content":"    public void execute_singleKeywords_singlePersonsFound() {"},{"lineNumber":69,"author":{"gitID":"Zzmobie"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"},{"lineNumber":70,"author":{"gitID":"Zzmobie"},"content":"        FindTagCommand command \u003d prepareCommand(\"owesMoney\");"},{"lineNumber":71,"author":{"gitID":"Zzmobie"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(BENSON));"},{"lineNumber":72,"author":{"gitID":"Zzmobie"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":74,"author":{"gitID":"Zzmobie"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"Zzmobie"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":76,"author":{"gitID":"Zzmobie"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"},{"lineNumber":77,"author":{"gitID":"Zzmobie"},"content":"        FindTagCommand command \u003d prepareCommand(\"owesMoney owesLunch\");"},{"lineNumber":78,"author":{"gitID":"Zzmobie"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(BENSON, CARL));"},{"lineNumber":79,"author":{"gitID":"Zzmobie"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":81,"author":{"gitID":"Zzmobie"},"content":"    //@@author"},{"lineNumber":82,"author":{"gitID":"Zzmobie"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"Zzmobie"},"content":"     * Parses {@code userInput} into a {@code FindTagCommand}."},{"lineNumber":84,"author":{"gitID":"Zzmobie"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"Zzmobie"},"content":"    private FindTagCommand prepareCommand(String userInput) {"},{"lineNumber":86,"author":{"gitID":"Zzmobie"},"content":"        FindTagCommand command \u003d"},{"lineNumber":87,"author":{"gitID":"Zzmobie"},"content":"                new FindTagCommand(new TagContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     *     - the {@code FilteredList\u003cReadOnlyPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"Zzmobie"},"content":"    private void assertCommandSuccess(FindTagCommand command,"},{"lineNumber":99,"author":{"gitID":"Zzmobie"},"content":"                                      String expectedMessage, List\u003cReadOnlyPerson\u003e expectedList) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Zzmobie":55,"-":52}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":19,"author":{"gitID":"kenpaxtonlim"},"content":"    private static final String SOCIALMEDIA_FIELD_ID \u003d \"#socialMedia\";"},{"lineNumber":20,"author":{"gitID":"500poundbear"},"content":"    private static final String REMARK_FIELD_ID \u003d \"#remark\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label addressLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":28,"author":{"gitID":"kenpaxtonlim"},"content":"    private final Label socialMediaLabel;"},{"lineNumber":29,"author":{"gitID":"500poundbear"},"content":"    private final Label remarkLabel;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":33,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":41,"author":{"gitID":"kenpaxtonlim"},"content":"        this.socialMediaLabel \u003d getChildNode(SOCIALMEDIA_FIELD_ID);"},{"lineNumber":42,"author":{"gitID":"500poundbear"},"content":"        this.remarkLabel \u003d getChildNode(REMARK_FIELD_ID);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public String getAddress() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return addressLabel.getText();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"kenpaxtonlim"},"content":"    public String getSocialMedia() {"},{"lineNumber":73,"author":{"gitID":"kenpaxtonlim"},"content":"        return socialMediaLabel.getText();"},{"lineNumber":74,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":76,"author":{"gitID":"500poundbear"},"content":"    public String getRemark() {"},{"lineNumber":77,"author":{"gitID":"500poundbear"},"content":"        return remarkLabel.getText();"},{"lineNumber":78,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"500poundbear":8,"kenpaxtonlim":7,"-":71}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"donjar"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"donjar"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"donjar"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"donjar"},"content":"import seedu.address.commons.events.ui.FontSizeRefreshRequestEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"donjar"},"content":"    private static final int DEFAULT_FONT_SIZE \u003d 17;"},{"lineNumber":31,"author":{"gitID":"donjar"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":43,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":45,"author":{"gitID":"donjar"},"content":""},{"lineNumber":46,"author":{"gitID":"donjar"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(e.getMessage()));"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":136,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"donjar"},"content":"    // @@author donjar"},{"lineNumber":160,"author":{"gitID":"donjar"},"content":"    @Subscribe"},{"lineNumber":161,"author":{"gitID":"donjar"},"content":"    private void handleFontSizeChangeEvent(FontSizeRefreshRequestEvent event) {"},{"lineNumber":162,"author":{"gitID":"donjar"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":163,"author":{"gitID":"donjar"},"content":"        refreshFontSizes();"},{"lineNumber":164,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"donjar"},"content":""},{"lineNumber":166,"author":{"gitID":"donjar"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"donjar"},"content":"     * Updates the font size of this card."},{"lineNumber":168,"author":{"gitID":"donjar"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"donjar"},"content":"    private void refreshFontSizes() {"},{"lineNumber":170,"author":{"gitID":"donjar"},"content":"        commandTextField.setStyle(\"-fx-font-size: \" + (DEFAULT_FONT_SIZE + logic.getFontSizeChange()));"},{"lineNumber":171,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"donjar"},"content":"    // @@author"},{"lineNumber":173,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"donjar":22,"-":151}},{"path":"src/main/java/seedu/address/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"kenpaxtonlim"},"content":"import seedu.address.commons.events.ui.ChangeBrowserPanelUrlEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String GOOGLE_SEARCH_URL_PREFIX \u003d \"https://www.google.com.sg/search?safe\u003doff\u0026q\u003d\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String GOOGLE_SEARCH_URL_SUFFIX \u003d \"\u0026cad\u003dh\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public BrowserPanel() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":39,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        loadDefaultPage();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private void loadPersonPage(ReadOnlyPerson person) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        loadPage(GOOGLE_SEARCH_URL_PREFIX + person.getName().fullName.replaceAll(\" \", \"+\")"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                + GOOGLE_SEARCH_URL_SUFFIX);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void loadPage(String url) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private void loadDefaultPage() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void freeResources() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        browser \u003d null;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        loadPersonPage(event.getNewSelection().person);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":75,"author":{"gitID":"kenpaxtonlim"},"content":"    //@@author kenpaxtonlim"},{"lineNumber":76,"author":{"gitID":"kenpaxtonlim"},"content":"    @Subscribe"},{"lineNumber":77,"author":{"gitID":"kenpaxtonlim"},"content":"    private void handleChangeBrowserPanelUrlEvent(ChangeBrowserPanelUrlEvent event) {"},{"lineNumber":78,"author":{"gitID":"kenpaxtonlim"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":79,"author":{"gitID":"kenpaxtonlim"},"content":"        loadPage(event.url);"},{"lineNumber":80,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"kenpaxtonlim"},"content":"    //@@author"},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kenpaxtonlim":9,"-":73}},{"path":"src/main/java/seedu/address/ui/UiManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * The manager of the UI component."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UiManager extends ComponentManager implements Ui {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public UiManager(Logic logic, Config config, UserPrefs prefs) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(config.getAppTitle());"},{"lineNumber":51,"author":{"gitID":"Zzmobie"},"content":"        primaryStage.setMaximized(true);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        //Set the application icon."},{"lineNumber":53,"author":{"gitID":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        mainWindow.hide();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        mainWindow.releaseResources();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        final String content \u003d details + \":\\n\" + cause.toString();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                                               String contentText) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":93,"author":{"gitID":"donjar"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/pimp.css\");"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        alert.showAndWait();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        System.exit(1);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                event.exception);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Zzmobie":1,"donjar":1,"-":119}},{"path":"src/test/java/seedu/address/model/StatisticsTest.java","lines":[{"lineNumber":1,"author":{"gitID":"500poundbear"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":3,"author":{"gitID":"500poundbear"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":10,"author":{"gitID":"500poundbear"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":15,"author":{"gitID":"500poundbear"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":17,"author":{"gitID":"500poundbear"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"500poundbear"},"content":"//@@author 500poundbear"},{"lineNumber":23,"author":{"gitID":"500poundbear"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"500poundbear"},"content":" * Tests for Statistics model"},{"lineNumber":25,"author":{"gitID":"500poundbear"},"content":" */"},{"lineNumber":26,"author":{"gitID":"500poundbear"},"content":"public class StatisticsTest {"},{"lineNumber":27,"author":{"gitID":"500poundbear"},"content":"    private AddressBook addressBook1 \u003d new AddressBookBuilder()"},{"lineNumber":28,"author":{"gitID":"500poundbear"},"content":"            .withPerson(ALICE)"},{"lineNumber":29,"author":{"gitID":"500poundbear"},"content":"            .withPerson(BENSON)"},{"lineNumber":30,"author":{"gitID":"500poundbear"},"content":"            .withPerson(CARL)"},{"lineNumber":31,"author":{"gitID":"500poundbear"},"content":"            .withPerson(DANIEL)"},{"lineNumber":32,"author":{"gitID":"500poundbear"},"content":"            .withPerson(ELLE)"},{"lineNumber":33,"author":{"gitID":"500poundbear"},"content":"            .withPerson(FIONA)"},{"lineNumber":34,"author":{"gitID":"500poundbear"},"content":"            .withPerson(GEORGE)"},{"lineNumber":35,"author":{"gitID":"500poundbear"},"content":"            .build();"},{"lineNumber":36,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":37,"author":{"gitID":"500poundbear"},"content":"    private AddressBook addressBook2 \u003d new AddressBookBuilder()"},{"lineNumber":38,"author":{"gitID":"500poundbear"},"content":"            .withPerson(ELLE)"},{"lineNumber":39,"author":{"gitID":"500poundbear"},"content":"            .withPerson(FIONA)"},{"lineNumber":40,"author":{"gitID":"500poundbear"},"content":"            .withPerson(GEORGE)"},{"lineNumber":41,"author":{"gitID":"500poundbear"},"content":"            .withPerson(ALICE)"},{"lineNumber":42,"author":{"gitID":"500poundbear"},"content":"            .build();"},{"lineNumber":43,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":44,"author":{"gitID":"500poundbear"},"content":"    private ObservableList\u003cReadOnlyPerson\u003e allPersonsList1 \u003d addressBook1.getPersonList();"},{"lineNumber":45,"author":{"gitID":"500poundbear"},"content":"    private ObservableList\u003cReadOnlyPerson\u003e allPersonsList2 \u003d addressBook2.getPersonList();"},{"lineNumber":46,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":47,"author":{"gitID":"500poundbear"},"content":"    private Statistics statistics;"},{"lineNumber":48,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":49,"author":{"gitID":"500poundbear"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"500poundbear"},"content":"    public void getTotalNumberOfPeopleTest() {"},{"lineNumber":51,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":52,"author":{"gitID":"500poundbear"},"content":"        statistics \u003d new Statistics(allPersonsList1, 12, 2017);"},{"lineNumber":53,"author":{"gitID":"500poundbear"},"content":"        assertEquals(statistics.getTotalNumberOfPeople().intValue(), 7);"},{"lineNumber":54,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":55,"author":{"gitID":"500poundbear"},"content":"        statistics \u003d new Statistics(allPersonsList2, 12, 2017);"},{"lineNumber":56,"author":{"gitID":"500poundbear"},"content":"        assertEquals(statistics.getTotalNumberOfPeople().intValue(), 4);"},{"lineNumber":57,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":59,"author":{"gitID":"500poundbear"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"500poundbear"},"content":"    public void getTotalNumberOfNoFacebookRecordsTest() {"},{"lineNumber":61,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":62,"author":{"gitID":"500poundbear"},"content":"        statistics \u003d new Statistics(allPersonsList1, 12, 2015);"},{"lineNumber":63,"author":{"gitID":"500poundbear"},"content":"        assertEquals(statistics.getHasNoFacebook().intValue(), 3);"},{"lineNumber":64,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":65,"author":{"gitID":"500poundbear"},"content":"        statistics \u003d new Statistics(allPersonsList2, 12, 2015);"},{"lineNumber":66,"author":{"gitID":"500poundbear"},"content":"        assertEquals(statistics.getHasNoFacebook().intValue(), 2);"},{"lineNumber":67,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":69,"author":{"gitID":"500poundbear"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"500poundbear"},"content":"    public void getTotalNumberOfNoTwitterRecordsTest() {"},{"lineNumber":71,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":72,"author":{"gitID":"500poundbear"},"content":"        statistics \u003d new Statistics(allPersonsList1, 12, 2015);"},{"lineNumber":73,"author":{"gitID":"500poundbear"},"content":"        assertEquals(statistics.getHasNoTwitter().intValue(), 1);"},{"lineNumber":74,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":75,"author":{"gitID":"500poundbear"},"content":"        statistics \u003d new Statistics(allPersonsList2, 12, 2015);"},{"lineNumber":76,"author":{"gitID":"500poundbear"},"content":"        assertEquals(statistics.getHasNoTwitter().intValue(), 1);"},{"lineNumber":77,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":78,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":80,"author":{"gitID":"500poundbear"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"500poundbear"},"content":"    public void getTotalNumberOfNoInstagramRecordsTest() {"},{"lineNumber":82,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":83,"author":{"gitID":"500poundbear"},"content":"        statistics \u003d new Statistics(allPersonsList1, 12, 2015);"},{"lineNumber":84,"author":{"gitID":"500poundbear"},"content":"        assertEquals(statistics.getHasNoInstagram().intValue(), 2);"},{"lineNumber":85,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":86,"author":{"gitID":"500poundbear"},"content":"        statistics \u003d new Statistics(allPersonsList2, 12, 2015);"},{"lineNumber":87,"author":{"gitID":"500poundbear"},"content":"        assertEquals(statistics.getHasNoInstagram().intValue(), 1);"},{"lineNumber":88,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":89,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":91,"author":{"gitID":"500poundbear"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"500poundbear"},"content":"    public void getNewPersonsAddByMonthTest() {"},{"lineNumber":93,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":94,"author":{"gitID":"500poundbear"},"content":"        statistics \u003d new Statistics(allPersonsList1, 12, 2017);"},{"lineNumber":95,"author":{"gitID":"500poundbear"},"content":"        assertEquals(statistics.getNewPersonsAddByMonth(2),"},{"lineNumber":96,"author":{"gitID":"500poundbear"},"content":"                new ArrayList\u003cInteger\u003e(Arrays.asList(0, 0, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 1,"},{"lineNumber":97,"author":{"gitID":"500poundbear"},"content":"                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)));"},{"lineNumber":98,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":99,"author":{"gitID":"500poundbear"},"content":"        statistics \u003d new Statistics(allPersonsList1, 6, 2017);"},{"lineNumber":100,"author":{"gitID":"500poundbear"},"content":"        assertEquals(statistics.getNewPersonsAddByMonth(2),"},{"lineNumber":101,"author":{"gitID":"500poundbear"},"content":"                new ArrayList\u003cInteger\u003e(Arrays.asList(5, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,"},{"lineNumber":102,"author":{"gitID":"500poundbear"},"content":"                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)));"},{"lineNumber":103,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":104,"author":{"gitID":"500poundbear"},"content":"        statistics \u003d new Statistics(allPersonsList1, 6, 2017);"},{"lineNumber":105,"author":{"gitID":"500poundbear"},"content":"        assertEquals(statistics.getNewPersonsAddByMonth(0),"},{"lineNumber":106,"author":{"gitID":"500poundbear"},"content":"                new ArrayList\u003cInteger\u003e(Arrays.asList(5)));"},{"lineNumber":107,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":108,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":109,"author":{"gitID":"500poundbear"},"content":"        statistics \u003d new Statistics(allPersonsList2, 12, 2017);"},{"lineNumber":110,"author":{"gitID":"500poundbear"},"content":"        assertEquals(statistics.getNewPersonsAddByMonth(1),"},{"lineNumber":111,"author":{"gitID":"500poundbear"},"content":"                new ArrayList\u003cInteger\u003e(Arrays.asList(0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 1)));"},{"lineNumber":112,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":113,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":115,"author":{"gitID":"500poundbear"},"content":"}"}],"authorContributionMap":{"500poundbear":103,"-":12}},{"path":"src/main/java/seedu/address/ui/ResultDisplay.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleStringProperty;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.beans.property.StringProperty;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"donjar"},"content":"import seedu.address.commons.events.ui.FontSizeRefreshRequestEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":16,"author":{"gitID":"donjar"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"donjar"},"content":" * A ui for the display of the results."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"donjar"},"content":"    private static final int DEFAULT_FONT_SIZE \u003d 17;"},{"lineNumber":27,"author":{"gitID":"donjar"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"donjar"},"content":"    private final Logic logic;"},{"lineNumber":31,"author":{"gitID":"donjar"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private TextArea resultDisplay;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"donjar"},"content":"    public ResultDisplay(Logic logic) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":37,"author":{"gitID":"donjar"},"content":"        this.logic \u003d logic;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        resultDisplay.textProperty().bind(displayed);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e displayed.setValue(event.message));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"donjar"},"content":"    // @@author donjar"},{"lineNumber":49,"author":{"gitID":"donjar"},"content":"    @Subscribe"},{"lineNumber":50,"author":{"gitID":"donjar"},"content":"    private void handleFontSizeChangeEvent(FontSizeRefreshRequestEvent event) {"},{"lineNumber":51,"author":{"gitID":"donjar"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":52,"author":{"gitID":"donjar"},"content":"        refreshFontSizes();"},{"lineNumber":53,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"donjar"},"content":""},{"lineNumber":55,"author":{"gitID":"donjar"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"donjar"},"content":"     * Updates the font sizes of all components of this component with the {@code fontSizeChange} given."},{"lineNumber":57,"author":{"gitID":"donjar"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"donjar"},"content":"    private void refreshFontSizes() {"},{"lineNumber":59,"author":{"gitID":"donjar"},"content":"        resultDisplay.setStyle(\"-fx-font-size: \" + (DEFAULT_FONT_SIZE + logic.getFontSizeChange()));"},{"lineNumber":60,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"donjar"},"content":"    // @@author"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"donjar":23,"-":39}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":10,"author":{"gitID":"donjar"},"content":"import javafx.scene.control.MenuBar;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":22,"author":{"gitID":"500poundbear"},"content":"import seedu.address.commons.events.ui.RefreshStatisticsPanelIfOpenEvent;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":24,"author":{"gitID":"500poundbear"},"content":"import seedu.address.commons.events.ui.ToggleBrowserPanelEvent;"},{"lineNumber":25,"author":{"gitID":"500poundbear"},"content":"import seedu.address.commons.events.ui.ToggleStatisticsPanelEvent;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FxViewUtil;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cRegion\u003e {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String ICON \u003d \"/images/address_book_32.png\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":38,"author":{"gitID":"500poundbear"},"content":"    private static final String STATISTICS_STYLE \u003d \"view/Statistics.css\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final int MIN_HEIGHT \u003d 600;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final int MIN_WIDTH \u003d 450;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":50,"author":{"gitID":"500poundbear"},"content":"    private StatisticsPanel statisticsPanel;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"500poundbear"},"content":"    private Boolean statisticsPanelOpen;"},{"lineNumber":55,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitID":"500poundbear"},"content":"    private StackPane browserOrStatisticsPlaceholder;"},{"lineNumber":58,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":59,"author":{"gitID":"500poundbear"},"content":"    @FXML"},{"lineNumber":60,"author":{"gitID":"500poundbear"},"content":"    private StackPane statisticsPlaceholder;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":75,"author":{"gitID":"donjar"},"content":"    private StackPane peopleCountPlaceholder;"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"donjar"},"content":"    @FXML"},{"lineNumber":78,"author":{"gitID":"donjar"},"content":"    private MenuBar menuBar;"},{"lineNumber":79,"author":{"gitID":"donjar"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        setIcon(ICON);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        setWindowMinSize();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        Scene scene \u003d new Scene(getRoot());"},{"lineNumber":95,"author":{"gitID":"500poundbear"},"content":"        scene.getStylesheets().add(STATISTICS_STYLE);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        primaryStage.setScene(scene);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":118,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":119,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":120,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":121,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":122,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":123,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":124,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":125,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":126,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":127,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":128,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":129,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":130,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":131,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":144,"author":{"gitID":"500poundbear"},"content":"        switchToBrowserPanel();"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"donjar"},"content":"        personListPanel \u003d new PersonListPanel(logic);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"donjar"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay(logic);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"donjar"},"content":"        PeopleCount peopleCount \u003d new PeopleCount(logic.getFilteredPersonList().size());"},{"lineNumber":153,"author":{"gitID":"donjar"},"content":"        peopleCountPlaceholder.getChildren().add(peopleCount.getRoot());"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"500poundbear"},"content":"    //@@author 500poundbear"},{"lineNumber":160,"author":{"gitID":"500poundbear"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"500poundbear"},"content":"     * Instantiates and adds the statistics panel to the UI"},{"lineNumber":162,"author":{"gitID":"500poundbear"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"500poundbear"},"content":"    private void switchToStatisticsPanel() {"},{"lineNumber":164,"author":{"gitID":"500poundbear"},"content":"        logger.info(\"Switched to statistics panel\");"},{"lineNumber":165,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":166,"author":{"gitID":"500poundbear"},"content":"        statisticsPanel \u003d new StatisticsPanel(logic.getAllPersonList());"},{"lineNumber":167,"author":{"gitID":"500poundbear"},"content":"        browserOrStatisticsPlaceholder.getChildren().clear();"},{"lineNumber":168,"author":{"gitID":"500poundbear"},"content":"        browserOrStatisticsPlaceholder.getChildren().add(statisticsPanel.getRoot());"},{"lineNumber":169,"author":{"gitID":"500poundbear"},"content":"        statisticsPanelOpen \u003d true;"},{"lineNumber":170,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":172,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":173,"author":{"gitID":"500poundbear"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"500poundbear"},"content":"     * Instantiates and adds the browser panel to the UI"},{"lineNumber":175,"author":{"gitID":"500poundbear"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"500poundbear"},"content":"    private void switchToBrowserPanel() {"},{"lineNumber":177,"author":{"gitID":"500poundbear"},"content":"        logger.info(\"Switched to browser panel\");"},{"lineNumber":178,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":179,"author":{"gitID":"500poundbear"},"content":"        browserPanel \u003d new BrowserPanel();"},{"lineNumber":180,"author":{"gitID":"500poundbear"},"content":"        browserOrStatisticsPlaceholder.getChildren().clear();"},{"lineNumber":181,"author":{"gitID":"500poundbear"},"content":"        browserOrStatisticsPlaceholder.getChildren().add(browserPanel.getRoot());"},{"lineNumber":182,"author":{"gitID":"500poundbear"},"content":"        statisticsPanelOpen \u003d false;"},{"lineNumber":183,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"500poundbear"},"content":"    //@@author"},{"lineNumber":185,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * Sets the given image as the icon of the main window."},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * @param iconSource e.g. {@code \"/images/help_icon.png\"}"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    private void setIcon(String iconSource) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        FxViewUtil.setStageIcon(primaryStage, iconSource);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":204,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"    private void setWindowMinSize() {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        primaryStage.setMinHeight(MIN_HEIGHT);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        primaryStage.setMinWidth(MIN_WIDTH);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":221,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":224,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":229,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":242,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"    void releaseResources() {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        browserPanel.freeResources();"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":258,"author":{"gitID":"500poundbear"},"content":"    //@@author 500poundbear"},{"lineNumber":259,"author":{"gitID":"500poundbear"},"content":"    @Subscribe"},{"lineNumber":260,"author":{"gitID":"500poundbear"},"content":"    private void handleToggleBrowserPanelEvent(ToggleBrowserPanelEvent event) {"},{"lineNumber":261,"author":{"gitID":"500poundbear"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":262,"author":{"gitID":"500poundbear"},"content":"        switchToBrowserPanel();"},{"lineNumber":263,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":265,"author":{"gitID":"500poundbear"},"content":"    @Subscribe"},{"lineNumber":266,"author":{"gitID":"500poundbear"},"content":"    private void handleToggleStatisticsPanelEvent(ToggleStatisticsPanelEvent event) {"},{"lineNumber":267,"author":{"gitID":"500poundbear"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":268,"author":{"gitID":"500poundbear"},"content":"        switchToStatisticsPanel();"},{"lineNumber":269,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":271,"author":{"gitID":"500poundbear"},"content":"    @Subscribe"},{"lineNumber":272,"author":{"gitID":"500poundbear"},"content":"    private void handleRefreshStatisticsPanelIfOpenEvent(RefreshStatisticsPanelIfOpenEvent event) {"},{"lineNumber":273,"author":{"gitID":"500poundbear"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":274,"author":{"gitID":"500poundbear"},"content":"        if (statisticsPanelOpen) {"},{"lineNumber":275,"author":{"gitID":"500poundbear"},"content":"            switchToStatisticsPanel();"},{"lineNumber":276,"author":{"gitID":"500poundbear"},"content":"        }"},{"lineNumber":277,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"500poundbear"},"content":"}"}],"authorContributionMap":{"500poundbear":62,"donjar":9,"-":207}},{"path":"src/main/java/seedu/address/ui/PeopleCount.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"500poundbear"},"content":"//@@author 500poundbear"},{"lineNumber":12,"author":{"gitID":"500poundbear"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"500poundbear"},"content":" * A ui for the people count that is displayed at the header of the application."},{"lineNumber":14,"author":{"gitID":"500poundbear"},"content":" */"},{"lineNumber":15,"author":{"gitID":"500poundbear"},"content":"public class PeopleCount extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":17,"author":{"gitID":"500poundbear"},"content":"    private static final String FXML \u003d \"PeopleCount.fxml\";"},{"lineNumber":18,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":19,"author":{"gitID":"500poundbear"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitID":"500poundbear"},"content":"    private StatusBar totalPersons;"},{"lineNumber":21,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":22,"author":{"gitID":"500poundbear"},"content":"    public PeopleCount(int totalPersons) {"},{"lineNumber":23,"author":{"gitID":"500poundbear"},"content":"        super(FXML);"},{"lineNumber":24,"author":{"gitID":"500poundbear"},"content":"        setTotalPersons(totalPersons);"},{"lineNumber":25,"author":{"gitID":"500poundbear"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":26,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":28,"author":{"gitID":"500poundbear"},"content":"    private void setTotalPersons(int totalPersons) {"},{"lineNumber":29,"author":{"gitID":"500poundbear"},"content":"        this.totalPersons.setText(Integer.toString(totalPersons));"},{"lineNumber":30,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":32,"author":{"gitID":"500poundbear"},"content":"    @Subscribe"},{"lineNumber":33,"author":{"gitID":"500poundbear"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent abce) {"},{"lineNumber":34,"author":{"gitID":"500poundbear"},"content":"        setTotalPersons(abce.data.getPersonList().size());"},{"lineNumber":35,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"500poundbear"},"content":"}"}],"authorContributionMap":{"500poundbear":26,"-":10}},{"path":"src/main/java/seedu/address/ui/HelpWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FxViewUtil;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Controller for a help page"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class HelpWindow extends UiPart\u003cRegion\u003e {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/UserGuide.html\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String ICON \u003d \"/images/help_icon.png\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String TITLE \u003d \"Help\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final Stage dialogStage;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public HelpWindow() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Scene scene \u003d new Scene(getRoot());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        //Null passed as the parent stage to make it non-modal."},{"lineNumber":34,"author":{"gitID":"-"},"content":"        dialogStage \u003d createDialogStage(TITLE, null, scene);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        dialogStage.setMaximized(true); //TODO: set a more appropriate initial size"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        FxViewUtil.setStageIcon(dialogStage, ICON);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        browser.getEngine().load(userGuideUrl);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Shows the help window."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @throws IllegalStateException"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * \u003cul\u003e"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     *         if this method is called during animation or layout processing."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     *         if this method is called on the primary stage."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     *         if {@code dialogStage} is already showing."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * \u003c/ul\u003e"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void show() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        logger.fine(\"Showing help page about the application.\");"},{"lineNumber":62,"author":{"gitID":"donjar"},"content":"        dialogStage.show();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"donjar":1,"-":63}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.beans.binding.Bindings;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"donjar"},"content":"import javafx.scene.Node;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"donjar"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"donjar"},"content":"import seedu.address.commons.events.ui.FontSizeRefreshRequestEvent;"},{"lineNumber":16,"author":{"gitID":"donjar"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":25,"author":{"gitID":"Zzmobie"},"content":"    private static final String FXML_WITHOUT_ACCESSES \u003d \"PersonListCardNoAccess.fxml\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"donjar"},"content":"    private static final int DEFAULT_TAG_FONT_SIZE \u003d 11;"},{"lineNumber":28,"author":{"gitID":"donjar"},"content":"    private static final int DEFAULT_SMALL_FONT_SIZE \u003d 13;"},{"lineNumber":29,"author":{"gitID":"donjar"},"content":"    private static final int DEFAULT_BIG_FONT_SIZE \u003d 16;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public final ReadOnlyPerson person;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"donjar"},"content":"    private Logic logic;"},{"lineNumber":36,"author":{"gitID":"donjar"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitID":"kenpaxtonlim"},"content":"    private Label socialMedia;"},{"lineNumber":58,"author":{"gitID":"kenpaxtonlim"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitID":"500poundbear"},"content":"    private Label remark;"},{"lineNumber":60,"author":{"gitID":"500poundbear"},"content":"    @FXML"},{"lineNumber":61,"author":{"gitID":"Zzmobie"},"content":"    private Label accesses;"},{"lineNumber":62,"author":{"gitID":"Zzmobie"},"content":"    @FXML"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"Zzmobie"},"content":"    private boolean isAccessDisplayed;"},{"lineNumber":66,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":67,"author":{"gitID":"donjar"},"content":"    public PersonCard(ReadOnlyPerson person, int displayedIndex, boolean isAccessDisplayed, Logic logic) {"},{"lineNumber":68,"author":{"gitID":"Zzmobie"},"content":"        super(isAccessDisplayed ? FXML : FXML_WITHOUT_ACCESSES);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":70,"author":{"gitID":"Zzmobie"},"content":"        this.isAccessDisplayed \u003d isAccessDisplayed;"},{"lineNumber":71,"author":{"gitID":"donjar"},"content":"        this.logic \u003d logic;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        initTags(person);"},{"lineNumber":74,"author":{"gitID":"Zzmobie"},"content":"        bindListeners(person, isAccessDisplayed);"},{"lineNumber":75,"author":{"gitID":"donjar"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":76,"author":{"gitID":"donjar"},"content":"        refreshFontSizes();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Binds the individual UI elements to observe their respective {@code Person} properties"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * so that they will be notified of any changes."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"Zzmobie"},"content":"    private void bindListeners(ReadOnlyPerson person, boolean isAccessDisplayed) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        name.textProperty().bind(Bindings.convert(person.nameProperty()));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        phone.textProperty().bind(Bindings.convert(person.phoneProperty()));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        address.textProperty().bind(Bindings.convert(person.addressProperty()));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        email.textProperty().bind(Bindings.convert(person.emailProperty()));"},{"lineNumber":88,"author":{"gitID":"kenpaxtonlim"},"content":"        socialMedia.textProperty().bind(Bindings.convert(person.socialMediaProperty()));"},{"lineNumber":89,"author":{"gitID":"500poundbear"},"content":"        remark.textProperty().bind(Bindings.convert(person.remarkProperty()));"},{"lineNumber":90,"author":{"gitID":"Zzmobie"},"content":"        if (isAccessDisplayed) {"},{"lineNumber":91,"author":{"gitID":"Zzmobie"},"content":"            accesses.textProperty().bind(Bindings.convert(person.accessCountProperty()));"},{"lineNumber":92,"author":{"gitID":"Zzmobie"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        person.tagProperty().addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            tags.getChildren().clear();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private void initTags(ReadOnlyPerson person) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"donjar"},"content":""},{"lineNumber":121,"author":{"gitID":"donjar"},"content":"    // @@author donjar"},{"lineNumber":122,"author":{"gitID":"donjar"},"content":"    @Subscribe"},{"lineNumber":123,"author":{"gitID":"donjar"},"content":"    private void handleFontSizeChangeEvent(FontSizeRefreshRequestEvent event) {"},{"lineNumber":124,"author":{"gitID":"donjar"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":125,"author":{"gitID":"donjar"},"content":"        refreshFontSizes();"},{"lineNumber":126,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"donjar"},"content":""},{"lineNumber":128,"author":{"gitID":"donjar"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"donjar"},"content":"     * Refreshes the font size of this card."},{"lineNumber":130,"author":{"gitID":"donjar"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"donjar"},"content":"    private void refreshFontSizes() {"},{"lineNumber":132,"author":{"gitID":"donjar"},"content":"        int fontSizeChange \u003d logic.getFontSizeChange();"},{"lineNumber":133,"author":{"gitID":"donjar"},"content":"        name.setStyle(\"-fx-font-size: \" + (DEFAULT_BIG_FONT_SIZE + fontSizeChange));"},{"lineNumber":134,"author":{"gitID":"donjar"},"content":"        id.setStyle(\"-fx-font-size: \" + (DEFAULT_BIG_FONT_SIZE + fontSizeChange));"},{"lineNumber":135,"author":{"gitID":"donjar"},"content":""},{"lineNumber":136,"author":{"gitID":"donjar"},"content":"        for (Label l : new Label[] { phone, address, email, socialMedia, remark }) {"},{"lineNumber":137,"author":{"gitID":"donjar"},"content":"            l.setStyle(\"-fx-font-size: \" + (DEFAULT_SMALL_FONT_SIZE + fontSizeChange));"},{"lineNumber":138,"author":{"gitID":"donjar"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"donjar"},"content":"        if (isAccessDisplayed) {"},{"lineNumber":140,"author":{"gitID":"donjar"},"content":"            accesses.setStyle(\"-fx-font-size: \" + (DEFAULT_SMALL_FONT_SIZE + fontSizeChange));"},{"lineNumber":141,"author":{"gitID":"donjar"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"donjar"},"content":""},{"lineNumber":143,"author":{"gitID":"donjar"},"content":"        for (Node tag : tags.getChildren()) {"},{"lineNumber":144,"author":{"gitID":"donjar"},"content":"            tag.setStyle(\"-fx-font-size: \" + (DEFAULT_TAG_FONT_SIZE + fontSizeChange));"},{"lineNumber":145,"author":{"gitID":"donjar"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"donjar"},"content":"    // @@author"},{"lineNumber":148,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"500poundbear":3,"Zzmobie":12,"kenpaxtonlim":3,"donjar":41,"-":89}},{"path":"src/main/java/seedu/address/ui/UiPart.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.stage.Modality;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"donjar"},"content":" * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, people count bar, etc."},{"lineNumber":18,"author":{"gitID":"-"},"content":" * It contains a scene graph with a root node of type {@code T}."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public abstract class UiPart\u003cT\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /** Resource folder where FXML files are stored. */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private FXMLLoader fxmlLoader;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public UiPart(URL fxmlFileUrl) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        requireNonNull(fxmlFileUrl);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        fxmlLoader \u003d new FXMLLoader(fxmlFileUrl);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        fxmlLoader.setController(this);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            fxmlLoader.load();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            throw new AssertionError(e);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @see #UiPart(URL)"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public UiPart(String fxmlFileName) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this(fxmlFileName !\u003d null ? MainApp.class.getResource(FXML_FILE_FOLDER + fxmlFileName) : null);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Returns the root object of the scene graph of this UiPart."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public T getRoot() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return fxmlLoader.getRoot();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Raises the event via {@link EventsCenter#post(BaseEvent)}"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * @param event"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    protected void raise(BaseEvent event) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(event);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Registers the object as an event handler at the {@link EventsCenter}"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * @param handler usually {@code this}"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    protected void registerAsAnEventHandler(Object handler) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(handler);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Creates a modal dialog."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @param title Title of the dialog."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * @param parentStage The owner stage of the dialog."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * @param scene The scene that will contain the dialog."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * @return the created dialog, not yet made visible."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    protected Stage createDialogStage(String title, Stage parentStage, Scene scene) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Stage dialogStage \u003d new Stage();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        dialogStage.setTitle(title);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        dialogStage.initModality(Modality.WINDOW_MODAL);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        dialogStage.initOwner(parentStage);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        dialogStage.setScene(scene);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return dialogStage;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"donjar":1,"-":88}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"donjar"},"content":"    public static final String MESSAGE_INVALID_REGEX \u003d \"Invalid regex passed! \\n%1$s\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"donjar":1,"-":13}},{"path":"src/main/java/seedu/address/commons/core/Config.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Config values used by the app"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Config {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":14,"author":{"gitID":"donjar"},"content":"    private String appTitle \u003d \"Personal Information Management Program\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return appTitle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return logLevel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        sb.append(\"App title : \" + appTitle);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        sb.append(\"\\nCurrent log level : \" + logLevel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"donjar":1,"-":71}},{"path":"src/main/java/seedu/address/ui/PersonListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"Zzmobie"},"content":"import seedu.address.commons.events.model.AddressBookAccessChangedEvent;"},{"lineNumber":18,"author":{"gitID":"Zzmobie"},"content":"import seedu.address.commons.events.ui.AccessCountDisplayToggleEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":21,"author":{"gitID":"500poundbear"},"content":"import seedu.address.commons.events.ui.ToggleBrowserPanelEvent;"},{"lineNumber":22,"author":{"gitID":"donjar"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Panel containing the list of persons."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class PersonListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListPanel.fxml\";"},{"lineNumber":30,"author":{"gitID":"donjar"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private ListView\u003cPersonCard\u003e personListView;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"Zzmobie"},"content":"    private ObservableList\u003cPersonCard\u003e mappedListWithAccessCount;"},{"lineNumber":37,"author":{"gitID":"Zzmobie"},"content":"    private ObservableList\u003cPersonCard\u003e mappedListWithoutAccessCount;"},{"lineNumber":38,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":39,"author":{"gitID":"donjar"},"content":"    public PersonListPanel(Logic logic) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":41,"author":{"gitID":"donjar"},"content":"        setConnections(logic.getFilteredPersonList(), logic);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"donjar"},"content":"    private void setConnections(ObservableList\u003cReadOnlyPerson\u003e personList, Logic logic) {"},{"lineNumber":46,"author":{"gitID":"Zzmobie"},"content":"        mappedListWithAccessCount \u003d EasyBind.map("},{"lineNumber":47,"author":{"gitID":"Zzmobie"},"content":"                personList, (person) -\u003e new PersonCard(person, personList.indexOf(person) + 1,"},{"lineNumber":48,"author":{"gitID":"donjar"},"content":"                         true, logic));"},{"lineNumber":49,"author":{"gitID":"Zzmobie"},"content":"        mappedListWithoutAccessCount \u003d EasyBind.map("},{"lineNumber":50,"author":{"gitID":"Zzmobie"},"content":"                personList, (person) -\u003e new PersonCard(person, personList.indexOf(person) + 1,"},{"lineNumber":51,"author":{"gitID":"donjar"},"content":"                         false, logic));"},{"lineNumber":52,"author":{"gitID":"Zzmobie"},"content":"        personListView.setItems(mappedListWithAccessCount);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        personListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":62,"author":{"gitID":"500poundbear"},"content":"                        EventsCenter.getInstance().post(new ToggleBrowserPanelEvent());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                        raise(new PersonPanelSelectionChangedEvent(newValue));"},{"lineNumber":64,"author":{"gitID":"Zzmobie"},"content":"                        updateAccessCount(oldValue, newValue);"},{"lineNumber":65,"author":{"gitID":"Zzmobie"},"content":"                    }"},{"lineNumber":66,"author":{"gitID":"Zzmobie"},"content":"                });"},{"lineNumber":67,"author":{"gitID":"Zzmobie"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":69,"author":{"gitID":"Zzmobie"},"content":"    //@@author Zzmobie"},{"lineNumber":70,"author":{"gitID":"Zzmobie"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"Zzmobie"},"content":"     * This function updates the access counts only when necessary. The access count should only be incremented"},{"lineNumber":72,"author":{"gitID":"Zzmobie"},"content":"     * when the card selected is a new card, and when the old card selected was not null. The need for the latter"},{"lineNumber":73,"author":{"gitID":"Zzmobie"},"content":"     * condition is a result of the way edit commands affect the selected person panel."},{"lineNumber":74,"author":{"gitID":"Zzmobie"},"content":"     * @param oldValue Previous value for the PersonCard object"},{"lineNumber":75,"author":{"gitID":"Zzmobie"},"content":"     * @param newValue New value for the PersonCard object that has changed."},{"lineNumber":76,"author":{"gitID":"Zzmobie"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"Zzmobie"},"content":"    private void updateAccessCount(PersonCard oldValue, PersonCard newValue) {"},{"lineNumber":78,"author":{"gitID":"Zzmobie"},"content":"        if (oldValue \u003d\u003d null || oldValue.person.getName() !\u003d newValue.person.getName()) {"},{"lineNumber":79,"author":{"gitID":"Zzmobie"},"content":"            raise(new AddressBookAccessChangedEvent(newValue.person));"},{"lineNumber":80,"author":{"gitID":"Zzmobie"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"Zzmobie"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"Zzmobie"},"content":"    //@@author"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            personListView.scrollTo(index);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            personListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"Zzmobie"},"content":"    //@@author Zzmobie"},{"lineNumber":101,"author":{"gitID":"Zzmobie"},"content":"    @Subscribe"},{"lineNumber":102,"author":{"gitID":"Zzmobie"},"content":"    private void handleAccessCountDisplayToggleEvent(AccessCountDisplayToggleEvent event) {"},{"lineNumber":103,"author":{"gitID":"Zzmobie"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event) + event.isDisplayed());"},{"lineNumber":104,"author":{"gitID":"Zzmobie"},"content":"        if (event.isDisplayed()) {"},{"lineNumber":105,"author":{"gitID":"Zzmobie"},"content":"            personListView.setItems(mappedListWithAccessCount);"},{"lineNumber":106,"author":{"gitID":"Zzmobie"},"content":"        } else {"},{"lineNumber":107,"author":{"gitID":"Zzmobie"},"content":"            personListView.setItems(mappedListWithoutAccessCount);"},{"lineNumber":108,"author":{"gitID":"Zzmobie"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"Zzmobie"},"content":"        personListView.refresh();"},{"lineNumber":110,"author":{"gitID":"Zzmobie"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":112,"author":{"gitID":"Zzmobie"},"content":"    //@@author"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code PersonCard}."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    class PersonListViewCell extends ListCell\u003cPersonCard\u003e {"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        protected void updateItem(PersonCard person, boolean empty) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            super.updateItem(person, empty);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"            if (empty || person \u003d\u003d null) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                setGraphic(null);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                setText(null);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                setGraphic(person.getRoot());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"500poundbear":2,"Zzmobie":42,"donjar":7,"-":80}},{"path":"src/main/java/seedu/address/commons/events/ui/ToggleStatisticsPanelEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"500poundbear"},"content":"/** Indicates the Statistics Panel should be swapped in */"},{"lineNumber":6,"author":{"gitID":"500poundbear"},"content":"public class ToggleStatisticsPanelEvent extends BaseEvent {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"500poundbear"},"content":"}"}],"authorContributionMap":{"500poundbear":3,"-":9}},{"path":"src/main/java/seedu/address/commons/events/ui/ToggleBrowserPanelEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"500poundbear"},"content":"/** Indicates the Browser Panel should be swapped in */"},{"lineNumber":6,"author":{"gitID":"500poundbear"},"content":"public class ToggleBrowserPanelEvent extends BaseEvent {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"500poundbear"},"content":"}"},{"lineNumber":13,"author":{"gitID":"500poundbear"},"content":""}],"authorContributionMap":{"500poundbear":4,"-":9}},{"path":"src/main/java/seedu/address/commons/events/ui/ChangeBrowserPanelUrlEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"kenpaxtonlim"},"content":"//@@author kenpaxtonlim"},{"lineNumber":6,"author":{"gitID":"kenpaxtonlim"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"kenpaxtonlim"},"content":" * Indicates a request to change the url on the browser panel."},{"lineNumber":8,"author":{"gitID":"kenpaxtonlim"},"content":" */"},{"lineNumber":9,"author":{"gitID":"kenpaxtonlim"},"content":"public class ChangeBrowserPanelUrlEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":11,"author":{"gitID":"kenpaxtonlim"},"content":"    public final String url;"},{"lineNumber":12,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":13,"author":{"gitID":"kenpaxtonlim"},"content":"    public ChangeBrowserPanelUrlEvent(String url) {"},{"lineNumber":14,"author":{"gitID":"kenpaxtonlim"},"content":"        this.url \u003d url;"},{"lineNumber":15,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":17,"author":{"gitID":"kenpaxtonlim"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"kenpaxtonlim"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"kenpaxtonlim"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"kenpaxtonlim"},"content":"}"}],"authorContributionMap":{"kenpaxtonlim":17,"-":4}},{"path":"src/main/java/seedu/address/ui/StatisticsPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"500poundbear"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":3,"author":{"gitID":"500poundbear"},"content":"import java.time.Month;"},{"lineNumber":4,"author":{"gitID":"500poundbear"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"500poundbear"},"content":"import java.util.Calendar;"},{"lineNumber":6,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"500poundbear"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"500poundbear"},"content":"import javafx.scene.chart.BarChart;"},{"lineNumber":11,"author":{"gitID":"500poundbear"},"content":"import javafx.scene.chart.PieChart;"},{"lineNumber":12,"author":{"gitID":"500poundbear"},"content":"import javafx.scene.chart.XYChart;"},{"lineNumber":13,"author":{"gitID":"500poundbear"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":15,"author":{"gitID":"500poundbear"},"content":"import seedu.address.model.Statistics;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"500poundbear"},"content":" * The Statistics Panel of the App."},{"lineNumber":20,"author":{"gitID":"500poundbear"},"content":" */"},{"lineNumber":21,"author":{"gitID":"500poundbear"},"content":"public class StatisticsPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"500poundbear"},"content":"    private static final String FXML \u003d \"StatisticsPanel.fxml\";"},{"lineNumber":23,"author":{"gitID":"500poundbear"},"content":"    private static final Integer PERSON_ADDED_DISPLAY_YEARS \u003d 2;"},{"lineNumber":24,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":25,"author":{"gitID":"500poundbear"},"content":"    private static final String FACEBOOK_BREAKDOWN_CHART_TITLE \u003d \"Facebook Usage\";"},{"lineNumber":26,"author":{"gitID":"500poundbear"},"content":"    private static final String INSTAGRAM_BREAKDOWN_CHART_TITLE \u003d \"Instagram Usage\";"},{"lineNumber":27,"author":{"gitID":"500poundbear"},"content":"    private static final String TWITTER_BREAKDOWN_CHART_TITLE \u003d \"Twitter Usage\";"},{"lineNumber":28,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":29,"author":{"gitID":"500poundbear"},"content":"    private static final String CHART_USING_LABEL \u003d \"Using (%d)\";"},{"lineNumber":30,"author":{"gitID":"500poundbear"},"content":"    private static final String CHART_NOT_USING_LABEL \u003d \"Not Using (%d)\";"},{"lineNumber":31,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":32,"author":{"gitID":"500poundbear"},"content":"    private static final Double PERSON_ADDED_CHART_BAR_GAP \u003d 0.1;"},{"lineNumber":33,"author":{"gitID":"500poundbear"},"content":"    private static final String PERSON_ADDED_CHART_TITLE \u003d \"Persons Added in Recent Months\";"},{"lineNumber":34,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":35,"author":{"gitID":"500poundbear"},"content":"    private Statistics statistics;"},{"lineNumber":36,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":37,"author":{"gitID":"500poundbear"},"content":"    private Integer totalNumberOfPeople \u003d 0;"},{"lineNumber":38,"author":{"gitID":"500poundbear"},"content":"    private Integer hasNoFacebook \u003d 0;"},{"lineNumber":39,"author":{"gitID":"500poundbear"},"content":"    private Integer hasNoTwitter \u003d 0;"},{"lineNumber":40,"author":{"gitID":"500poundbear"},"content":"    private Integer hasNoInstagram \u003d 0;"},{"lineNumber":41,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":42,"author":{"gitID":"500poundbear"},"content":"    private Integer currentYear;"},{"lineNumber":43,"author":{"gitID":"500poundbear"},"content":"    private Integer currentMonth;"},{"lineNumber":44,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":45,"author":{"gitID":"500poundbear"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"500poundbear"},"content":"    private BarChart personAddedChart;"},{"lineNumber":47,"author":{"gitID":"500poundbear"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"500poundbear"},"content":"    private PieChart fbChart;"},{"lineNumber":49,"author":{"gitID":"500poundbear"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"500poundbear"},"content":"    private PieChart twChart;"},{"lineNumber":51,"author":{"gitID":"500poundbear"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitID":"500poundbear"},"content":"    private PieChart igChart;"},{"lineNumber":53,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":54,"author":{"gitID":"500poundbear"},"content":"    //@@author 500poundbear"},{"lineNumber":55,"author":{"gitID":"500poundbear"},"content":"    public StatisticsPanel(ObservableList\u003cReadOnlyPerson\u003e list) {"},{"lineNumber":56,"author":{"gitID":"500poundbear"},"content":"        super(FXML);"},{"lineNumber":57,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":58,"author":{"gitID":"500poundbear"},"content":"        currentYear \u003d this.getCurrentYear();"},{"lineNumber":59,"author":{"gitID":"500poundbear"},"content":"        currentMonth \u003d this.getCurrentMonth();"},{"lineNumber":60,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":61,"author":{"gitID":"500poundbear"},"content":"        statistics \u003d new Statistics(list, this.currentMonth, this.currentYear);"},{"lineNumber":62,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":63,"author":{"gitID":"500poundbear"},"content":"        totalNumberOfPeople \u003d statistics.getTotalNumberOfPeople();"},{"lineNumber":64,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":65,"author":{"gitID":"500poundbear"},"content":"        hasNoFacebook \u003d statistics.getHasNoFacebook();"},{"lineNumber":66,"author":{"gitID":"500poundbear"},"content":"        hasNoTwitter \u003d statistics.getHasNoTwitter();"},{"lineNumber":67,"author":{"gitID":"500poundbear"},"content":"        hasNoInstagram \u003d statistics.getHasNoInstagram();"},{"lineNumber":68,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":69,"author":{"gitID":"500poundbear"},"content":"        initialiseStatisticsPanel(list);"},{"lineNumber":70,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":72,"author":{"gitID":"500poundbear"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"500poundbear"},"content":"     * Sets up the fxml objects with data"},{"lineNumber":74,"author":{"gitID":"500poundbear"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"500poundbear"},"content":"    private void initialiseStatisticsPanel(ObservableList\u003cReadOnlyPerson\u003e list) {"},{"lineNumber":76,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":77,"author":{"gitID":"500poundbear"},"content":"        personAddedChart.setTitle(PERSON_ADDED_CHART_TITLE);"},{"lineNumber":78,"author":{"gitID":"500poundbear"},"content":"        personAddedChart.setData(getPersonAddedChartData(list));"},{"lineNumber":79,"author":{"gitID":"500poundbear"},"content":"        personAddedChart.setBarGap(PERSON_ADDED_CHART_BAR_GAP);"},{"lineNumber":80,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":81,"author":{"gitID":"500poundbear"},"content":"        fbChart.setTitle(FACEBOOK_BREAKDOWN_CHART_TITLE);"},{"lineNumber":82,"author":{"gitID":"500poundbear"},"content":"        fbChart.setData(formatFacebookData());"},{"lineNumber":83,"author":{"gitID":"500poundbear"},"content":"        twChart.setTitle(TWITTER_BREAKDOWN_CHART_TITLE);"},{"lineNumber":84,"author":{"gitID":"500poundbear"},"content":"        twChart.setData(formatTwitterData());"},{"lineNumber":85,"author":{"gitID":"500poundbear"},"content":"        igChart.setTitle(INSTAGRAM_BREAKDOWN_CHART_TITLE);"},{"lineNumber":86,"author":{"gitID":"500poundbear"},"content":"        igChart.setData(formatInstagramData());"},{"lineNumber":87,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":89,"author":{"gitID":"500poundbear"},"content":"    private ObservableList\u003cXYChart.Series\u003cString, Integer\u003e\u003e getPersonAddedChartData("},{"lineNumber":90,"author":{"gitID":"500poundbear"},"content":"            ObservableList\u003cReadOnlyPerson\u003e list) {"},{"lineNumber":91,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":92,"author":{"gitID":"500poundbear"},"content":"        ObservableList\u003cXYChart.Series\u003cString, Integer\u003e\u003e answer \u003d FXCollections.observableArrayList();"},{"lineNumber":93,"author":{"gitID":"500poundbear"},"content":"        XYChart.Series\u003cString, Integer\u003e aSeries \u003d new XYChart.Series\u003cString, Integer\u003e();"},{"lineNumber":94,"author":{"gitID":"500poundbear"},"content":"        aSeries.setName(\"Persons added\");"},{"lineNumber":95,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":96,"author":{"gitID":"500poundbear"},"content":"        int endYear \u003d this.currentYear;"},{"lineNumber":97,"author":{"gitID":"500poundbear"},"content":"        int startYear \u003d endYear - PERSON_ADDED_DISPLAY_YEARS;"},{"lineNumber":98,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":99,"author":{"gitID":"500poundbear"},"content":"        int startMonth;"},{"lineNumber":100,"author":{"gitID":"500poundbear"},"content":"        int endMonth;"},{"lineNumber":101,"author":{"gitID":"500poundbear"},"content":"        int monthCount \u003d PERSON_ADDED_DISPLAY_YEARS * 12;"},{"lineNumber":102,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":103,"author":{"gitID":"500poundbear"},"content":"        ArrayList\u003cInteger\u003e monthPersonsAdded \u003d statistics.getNewPersonsAddByMonth(PERSON_ADDED_DISPLAY_YEARS);"},{"lineNumber":104,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":105,"author":{"gitID":"500poundbear"},"content":"        for (int i \u003d startYear; i \u003c\u003d endYear; i++) {"},{"lineNumber":106,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":107,"author":{"gitID":"500poundbear"},"content":"            startMonth \u003d 1;"},{"lineNumber":108,"author":{"gitID":"500poundbear"},"content":"            endMonth \u003d 12;"},{"lineNumber":109,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":110,"author":{"gitID":"500poundbear"},"content":"            if (i \u003d\u003d startYear) {"},{"lineNumber":111,"author":{"gitID":"500poundbear"},"content":"                startMonth \u003d this.currentMonth;"},{"lineNumber":112,"author":{"gitID":"500poundbear"},"content":"            }"},{"lineNumber":113,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":114,"author":{"gitID":"500poundbear"},"content":"            if (i \u003d\u003d endYear) {"},{"lineNumber":115,"author":{"gitID":"500poundbear"},"content":"                endMonth \u003d this.currentMonth;"},{"lineNumber":116,"author":{"gitID":"500poundbear"},"content":"            }"},{"lineNumber":117,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":118,"author":{"gitID":"500poundbear"},"content":"            for (int m \u003d startMonth; m \u003c\u003d endMonth; m++) {"},{"lineNumber":119,"author":{"gitID":"500poundbear"},"content":"                String labelName \u003d Month.of(m).name().substring(0, 3) + \" \" + Integer.toString(i);"},{"lineNumber":120,"author":{"gitID":"500poundbear"},"content":"                aSeries.getData().add(new XYChart.Data(labelName, monthPersonsAdded.get(monthCount)));"},{"lineNumber":121,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":122,"author":{"gitID":"500poundbear"},"content":"                monthCount--;"},{"lineNumber":123,"author":{"gitID":"500poundbear"},"content":"            }"},{"lineNumber":124,"author":{"gitID":"500poundbear"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"500poundbear"},"content":"        answer.addAll(aSeries);"},{"lineNumber":126,"author":{"gitID":"500poundbear"},"content":"        return answer;"},{"lineNumber":127,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":129,"author":{"gitID":"500poundbear"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"500poundbear"},"content":"     * Formats the number of users with Facebook recorded"},{"lineNumber":131,"author":{"gitID":"500poundbear"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"500poundbear"},"content":"    private ObservableList\u003cPieChart.Data\u003e formatFacebookData() {"},{"lineNumber":133,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":134,"author":{"gitID":"500poundbear"},"content":"        ArrayList\u003cPieChart.Data\u003e data \u003d new ArrayList\u003c\u003e();"},{"lineNumber":135,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":136,"author":{"gitID":"500poundbear"},"content":"        int hasFacebook \u003d this.totalNumberOfPeople - this.hasNoFacebook;"},{"lineNumber":137,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":138,"author":{"gitID":"500poundbear"},"content":"        String onFacebookLabel \u003d String.format(CHART_USING_LABEL, hasFacebook);"},{"lineNumber":139,"author":{"gitID":"500poundbear"},"content":"        String notOnFacebookLabel \u003d String.format(CHART_NOT_USING_LABEL, this.hasNoFacebook);"},{"lineNumber":140,"author":{"gitID":"500poundbear"},"content":"        data.add(new PieChart.Data(onFacebookLabel, hasFacebook));"},{"lineNumber":141,"author":{"gitID":"500poundbear"},"content":"        data.add(new PieChart.Data(notOnFacebookLabel, this.hasNoFacebook));"},{"lineNumber":142,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":143,"author":{"gitID":"500poundbear"},"content":"        return FXCollections.observableArrayList(data);"},{"lineNumber":144,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":146,"author":{"gitID":"500poundbear"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"500poundbear"},"content":"     * Formats the number of users with Twitter recorded"},{"lineNumber":148,"author":{"gitID":"500poundbear"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"500poundbear"},"content":"    private ObservableList\u003cPieChart.Data\u003e formatTwitterData() {"},{"lineNumber":150,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":151,"author":{"gitID":"500poundbear"},"content":"        ArrayList\u003cPieChart.Data\u003e data \u003d new ArrayList\u003c\u003e();"},{"lineNumber":152,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":153,"author":{"gitID":"500poundbear"},"content":"        int hasTwitter \u003d this.totalNumberOfPeople - this.hasNoTwitter;"},{"lineNumber":154,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":155,"author":{"gitID":"500poundbear"},"content":"        String onTwitterLabel \u003d String.format(CHART_USING_LABEL, hasTwitter);"},{"lineNumber":156,"author":{"gitID":"500poundbear"},"content":"        String notOnTwitterLabel \u003d String.format(CHART_NOT_USING_LABEL, this.hasNoTwitter);"},{"lineNumber":157,"author":{"gitID":"500poundbear"},"content":"        data.add(new PieChart.Data(onTwitterLabel, hasTwitter));"},{"lineNumber":158,"author":{"gitID":"500poundbear"},"content":"        data.add(new PieChart.Data(notOnTwitterLabel, this.hasNoTwitter));"},{"lineNumber":159,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":160,"author":{"gitID":"500poundbear"},"content":"        return FXCollections.observableArrayList(data);"},{"lineNumber":161,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":163,"author":{"gitID":"500poundbear"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"500poundbear"},"content":"     * Formats the number of users with Instagram recorded"},{"lineNumber":165,"author":{"gitID":"500poundbear"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"500poundbear"},"content":"    private ObservableList\u003cPieChart.Data\u003e formatInstagramData() {"},{"lineNumber":167,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":168,"author":{"gitID":"500poundbear"},"content":"        ArrayList\u003cPieChart.Data\u003e data \u003d new ArrayList\u003c\u003e();"},{"lineNumber":169,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":170,"author":{"gitID":"500poundbear"},"content":"        int hasInstagram \u003d this.totalNumberOfPeople - this.hasNoInstagram;"},{"lineNumber":171,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":172,"author":{"gitID":"500poundbear"},"content":"        String onInstagramLabel \u003d String.format(CHART_USING_LABEL, hasInstagram);"},{"lineNumber":173,"author":{"gitID":"500poundbear"},"content":"        String notOnInstagramLabel \u003d String.format(CHART_NOT_USING_LABEL, this.hasNoInstagram);"},{"lineNumber":174,"author":{"gitID":"500poundbear"},"content":"        data.add(new PieChart.Data(onInstagramLabel, hasInstagram));"},{"lineNumber":175,"author":{"gitID":"500poundbear"},"content":"        data.add(new PieChart.Data(notOnInstagramLabel, this.hasNoInstagram));"},{"lineNumber":176,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":177,"author":{"gitID":"500poundbear"},"content":"        return FXCollections.observableArrayList(data);"},{"lineNumber":178,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":180,"author":{"gitID":"500poundbear"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"500poundbear"},"content":"     * Fetches the current year"},{"lineNumber":182,"author":{"gitID":"500poundbear"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"500poundbear"},"content":"    private Integer getCurrentYear() {"},{"lineNumber":184,"author":{"gitID":"500poundbear"},"content":"        return Calendar.getInstance().get(Calendar.YEAR);"},{"lineNumber":185,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":187,"author":{"gitID":"500poundbear"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"500poundbear"},"content":"     * Fetches the current month"},{"lineNumber":189,"author":{"gitID":"500poundbear"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"500poundbear"},"content":"    private Integer getCurrentMonth() {"},{"lineNumber":191,"author":{"gitID":"500poundbear"},"content":"        return Calendar.getInstance().get(Calendar.MONTH) + 1;"},{"lineNumber":192,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":194,"author":{"gitID":"500poundbear"},"content":"}"}],"authorContributionMap":{"500poundbear":189,"-":5}},{"path":"src/main/java/seedu/address/commons/events/ui/RefreshStatisticsPanelIfOpenEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"500poundbear"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"500poundbear"},"content":" * Indicates that there is a need to recalculate statistics"},{"lineNumber":7,"author":{"gitID":"500poundbear"},"content":" */"},{"lineNumber":8,"author":{"gitID":"500poundbear"},"content":"public class RefreshStatisticsPanelIfOpenEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":10,"author":{"gitID":"500poundbear"},"content":"    public RefreshStatisticsPanelIfOpenEvent() {"},{"lineNumber":11,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"500poundbear"},"content":"}"}],"authorContributionMap":{"500poundbear":8,"-":9}},{"path":"src/main/java/seedu/address/commons/events/ui/AccessCountDisplayToggleEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Zzmobie"},"content":"//@@author Zzmobie"},{"lineNumber":6,"author":{"gitID":"Zzmobie"},"content":"/** Toggles access count display as necessary*/"},{"lineNumber":7,"author":{"gitID":"Zzmobie"},"content":"public class AccessCountDisplayToggleEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":9,"author":{"gitID":"Zzmobie"},"content":"    private final boolean isDisplayed;"},{"lineNumber":10,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":11,"author":{"gitID":"Zzmobie"},"content":"    public AccessCountDisplayToggleEvent(boolean isDisplayed) {"},{"lineNumber":12,"author":{"gitID":"Zzmobie"},"content":"        this.isDisplayed \u003d isDisplayed;"},{"lineNumber":13,"author":{"gitID":"Zzmobie"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":15,"author":{"gitID":"Zzmobie"},"content":"    public boolean isDisplayed() {"},{"lineNumber":16,"author":{"gitID":"Zzmobie"},"content":"        return isDisplayed;"},{"lineNumber":17,"author":{"gitID":"Zzmobie"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":19,"author":{"gitID":"Zzmobie"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"Zzmobie"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitID":"Zzmobie"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":22,"author":{"gitID":"Zzmobie"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"Zzmobie"},"content":"}"}],"authorContributionMap":{"Zzmobie":19,"-":4}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"500poundbear"},"content":"    /** Returns an unmodifiable view of all persons */"},{"lineNumber":23,"author":{"gitID":"500poundbear"},"content":"    ObservableList\u003cReadOnlyPerson\u003e getAllPersonList();"},{"lineNumber":24,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":30,"author":{"gitID":"donjar"},"content":""},{"lineNumber":31,"author":{"gitID":"donjar"},"content":"    // @@author donjar"},{"lineNumber":32,"author":{"gitID":"donjar"},"content":"    /** Returns the current font size change */"},{"lineNumber":33,"author":{"gitID":"donjar"},"content":"    int getFontSizeChange();"},{"lineNumber":34,"author":{"gitID":"donjar"},"content":"    // @@author"},{"lineNumber":35,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"500poundbear":3,"donjar":5,"-":27}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FACEBOOK;"},{"lineNumber":7,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INSTAGRAM;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TWITTER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"500poundbear"},"content":"import java.util.Date;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitID":"Zzmobie"},"content":"import seedu.address.model.person.AccessCount;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":27,"author":{"gitID":"500poundbear"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":28,"author":{"gitID":"kenpaxtonlim"},"content":"import seedu.address.model.person.SocialMedia;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":43,"author":{"gitID":"kenpaxtonlim"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG,"},{"lineNumber":44,"author":{"gitID":"kenpaxtonlim"},"content":"                PREFIX_FACEBOOK, PREFIX_TWITTER, PREFIX_INSTAGRAM);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":55,"author":{"gitID":"500poundbear"},"content":"            Remark remark \u003d new Remark(\"\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":57,"author":{"gitID":"500poundbear"},"content":"            Date createdAt \u003d new Date();"},{"lineNumber":58,"author":{"gitID":"Zzmobie"},"content":"            AccessCount accessCount \u003d new AccessCount(0);"},{"lineNumber":59,"author":{"gitID":"kenpaxtonlim"},"content":"            SocialMedia socialMedia \u003d ParserUtil.parseSocialMedia(argMultimap.getValue(PREFIX_FACEBOOK),"},{"lineNumber":60,"author":{"gitID":"kenpaxtonlim"},"content":"                    argMultimap.getValue(PREFIX_TWITTER), argMultimap.getValue(PREFIX_INSTAGRAM), true);"},{"lineNumber":61,"author":{"gitID":"Zzmobie"},"content":"            ReadOnlyPerson person \u003d new Person(name, phone, email,"},{"lineNumber":62,"author":{"gitID":"Zzmobie"},"content":"                    address, remark, tagList, createdAt, socialMedia, accessCount);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"500poundbear":4,"Zzmobie":4,"kenpaxtonlim":8,"-":61}},{"path":"src/main/java/seedu/address/commons/events/ui/FontSizeRefreshRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"donjar"},"content":"// @@author donjar"},{"lineNumber":2,"author":{"gitID":"donjar"},"content":""},{"lineNumber":3,"author":{"gitID":"donjar"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":4,"author":{"gitID":"donjar"},"content":""},{"lineNumber":5,"author":{"gitID":"donjar"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":6,"author":{"gitID":"donjar"},"content":""},{"lineNumber":7,"author":{"gitID":"donjar"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"donjar"},"content":" * Indicates a request to refresh the font size."},{"lineNumber":9,"author":{"gitID":"donjar"},"content":" */"},{"lineNumber":10,"author":{"gitID":"donjar"},"content":"public class FontSizeRefreshRequestEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"donjar"},"content":"    @Override"},{"lineNumber":12,"author":{"gitID":"donjar"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitID":"donjar"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":14,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"donjar"},"content":"}"}],"authorContributionMap":{"donjar":15}},{"path":"src/main/java/seedu/address/commons/events/model/AddressBookAccessChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Zzmobie"},"content":"//@@author Zzmobie"},{"lineNumber":7,"author":{"gitID":"Zzmobie"},"content":"/** Indicates that an entry of AddressBook in the model has changed*/"},{"lineNumber":8,"author":{"gitID":"Zzmobie"},"content":"public class AddressBookAccessChangedEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":10,"author":{"gitID":"Zzmobie"},"content":"    public final ReadOnlyPerson personToEdit;"},{"lineNumber":11,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":12,"author":{"gitID":"Zzmobie"},"content":"    public AddressBookAccessChangedEvent(ReadOnlyPerson personToEdit) {"},{"lineNumber":13,"author":{"gitID":"Zzmobie"},"content":"        this.personToEdit \u003d personToEdit;"},{"lineNumber":14,"author":{"gitID":"Zzmobie"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":16,"author":{"gitID":"Zzmobie"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"Zzmobie"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"Zzmobie"},"content":"        return \"Entry to increment: \" + personToEdit.toString();"},{"lineNumber":19,"author":{"gitID":"Zzmobie"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"Zzmobie"},"content":"}"}],"authorContributionMap":{"Zzmobie":15,"-":5}},{"path":"src/test/java/seedu/address/logic/commands/AddRemoveTagsCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"kenpaxtonlim"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"kenpaxtonlim"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"kenpaxtonlim"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":31,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":32,"author":{"gitID":"kenpaxtonlim"},"content":"//@@author kenpaxtonlim"},{"lineNumber":33,"author":{"gitID":"kenpaxtonlim"},"content":"public class AddRemoveTagsCommandTest {"},{"lineNumber":34,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":35,"author":{"gitID":"kenpaxtonlim"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":37,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"kenpaxtonlim"},"content":"    public void execute_addTags_success() throws Exception {"},{"lineNumber":39,"author":{"gitID":"kenpaxtonlim"},"content":"        Person editedPerson \u003d new PersonBuilder("},{"lineNumber":40,"author":{"gitID":"kenpaxtonlim"},"content":"                model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()))"},{"lineNumber":41,"author":{"gitID":"kenpaxtonlim"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND, \"friends\").build();"},{"lineNumber":42,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":43,"author":{"gitID":"kenpaxtonlim"},"content":"        ArrayList\u003cString\u003e tagsList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":44,"author":{"gitID":"kenpaxtonlim"},"content":"        tagsList.add(VALID_TAG_HUSBAND);"},{"lineNumber":45,"author":{"gitID":"kenpaxtonlim"},"content":"        tagsList.add(VALID_TAG_FRIEND);"},{"lineNumber":46,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":47,"author":{"gitID":"kenpaxtonlim"},"content":"        AddRemoveTagsCommand addTagsCommand \u003d prepareCommandAdd(INDEX_FIRST_PERSON, ParserUtil.parseTags(tagsList));"},{"lineNumber":48,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":49,"author":{"gitID":"kenpaxtonlim"},"content":"        String expectedMessage \u003d String.format(AddRemoveTagsCommand.MESSAGE_ADD_TAGS_SUCCESS,"},{"lineNumber":50,"author":{"gitID":"kenpaxtonlim"},"content":"                editedPerson);"},{"lineNumber":51,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":52,"author":{"gitID":"kenpaxtonlim"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":53,"author":{"gitID":"kenpaxtonlim"},"content":"                new UserPrefs());"},{"lineNumber":54,"author":{"gitID":"kenpaxtonlim"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":55,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":56,"author":{"gitID":"kenpaxtonlim"},"content":"        assertCommandSuccess(addTagsCommand, model, expectedMessage, expectedModel);"},{"lineNumber":57,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":59,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"kenpaxtonlim"},"content":"    public void execute_removeTags_success() throws Exception {"},{"lineNumber":61,"author":{"gitID":"kenpaxtonlim"},"content":"        Person editedPerson \u003d new PersonBuilder("},{"lineNumber":62,"author":{"gitID":"kenpaxtonlim"},"content":"                model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased())).withTags().build();"},{"lineNumber":63,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":64,"author":{"gitID":"kenpaxtonlim"},"content":"        ArrayList\u003cString\u003e tagsList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":65,"author":{"gitID":"kenpaxtonlim"},"content":"        tagsList.add(\"friends\");"},{"lineNumber":66,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":67,"author":{"gitID":"kenpaxtonlim"},"content":"        AddRemoveTagsCommand removeTagsCommand \u003d prepareCommandRemove(INDEX_FIRST_PERSON,"},{"lineNumber":68,"author":{"gitID":"kenpaxtonlim"},"content":"                ParserUtil.parseTags(tagsList));"},{"lineNumber":69,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":70,"author":{"gitID":"kenpaxtonlim"},"content":"        String expectedMessage \u003d String.format(AddRemoveTagsCommand.MESSAGE_REMOVE_TAGS_SUCCESS,"},{"lineNumber":71,"author":{"gitID":"kenpaxtonlim"},"content":"                editedPerson);"},{"lineNumber":72,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":73,"author":{"gitID":"kenpaxtonlim"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":74,"author":{"gitID":"kenpaxtonlim"},"content":"                new UserPrefs());"},{"lineNumber":75,"author":{"gitID":"kenpaxtonlim"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":76,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":77,"author":{"gitID":"kenpaxtonlim"},"content":"        assertCommandSuccess(removeTagsCommand, model, expectedMessage, expectedModel);"},{"lineNumber":78,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":80,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"kenpaxtonlim"},"content":"    public void execute_removeTags_failure() throws Exception {"},{"lineNumber":82,"author":{"gitID":"kenpaxtonlim"},"content":"        Person editedPerson \u003d new PersonBuilder("},{"lineNumber":83,"author":{"gitID":"kenpaxtonlim"},"content":"                model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased())).withTags().build();"},{"lineNumber":84,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":85,"author":{"gitID":"kenpaxtonlim"},"content":"        ArrayList\u003cString\u003e tagsList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":86,"author":{"gitID":"kenpaxtonlim"},"content":"        tagsList.add(\"friends\");"},{"lineNumber":87,"author":{"gitID":"kenpaxtonlim"},"content":"        tagsList.add(\"husband\");"},{"lineNumber":88,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":89,"author":{"gitID":"kenpaxtonlim"},"content":"        AddRemoveTagsCommand removeTagsCommand \u003d prepareCommandRemove(INDEX_FIRST_PERSON,"},{"lineNumber":90,"author":{"gitID":"kenpaxtonlim"},"content":"                ParserUtil.parseTags(tagsList));"},{"lineNumber":91,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":92,"author":{"gitID":"kenpaxtonlim"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":93,"author":{"gitID":"kenpaxtonlim"},"content":"                new UserPrefs());"},{"lineNumber":94,"author":{"gitID":"kenpaxtonlim"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":95,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":96,"author":{"gitID":"kenpaxtonlim"},"content":"        assertCommandFailure(removeTagsCommand, model,"},{"lineNumber":97,"author":{"gitID":"kenpaxtonlim"},"content":"                AddRemoveTagsCommand.makeTagDontExistMessage(\"husband\"));"},{"lineNumber":98,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":100,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"kenpaxtonlim"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() throws Exception {"},{"lineNumber":102,"author":{"gitID":"kenpaxtonlim"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":103,"author":{"gitID":"kenpaxtonlim"},"content":"        ArrayList\u003cString\u003e tagsList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":104,"author":{"gitID":"kenpaxtonlim"},"content":"        tagsList.add(VALID_TAG_HUSBAND);"},{"lineNumber":105,"author":{"gitID":"kenpaxtonlim"},"content":"        tagsList.add(VALID_TAG_FRIEND);"},{"lineNumber":106,"author":{"gitID":"kenpaxtonlim"},"content":"        AddRemoveTagsCommand addRemoveTagsCommand \u003d prepareCommandAdd(outOfBoundIndex, ParserUtil.parseTags(tagsList));"},{"lineNumber":107,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":108,"author":{"gitID":"kenpaxtonlim"},"content":"        assertCommandFailure(addRemoveTagsCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":109,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":111,"author":{"gitID":"kenpaxtonlim"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"kenpaxtonlim"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":113,"author":{"gitID":"kenpaxtonlim"},"content":"     * but smaller than size of address book"},{"lineNumber":114,"author":{"gitID":"kenpaxtonlim"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"kenpaxtonlim"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() throws Exception {"},{"lineNumber":117,"author":{"gitID":"kenpaxtonlim"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":118,"author":{"gitID":"kenpaxtonlim"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":119,"author":{"gitID":"kenpaxtonlim"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":120,"author":{"gitID":"kenpaxtonlim"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":121,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":122,"author":{"gitID":"kenpaxtonlim"},"content":"        ArrayList\u003cString\u003e tagsList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":123,"author":{"gitID":"kenpaxtonlim"},"content":"        tagsList.add(VALID_TAG_HUSBAND);"},{"lineNumber":124,"author":{"gitID":"kenpaxtonlim"},"content":"        tagsList.add(VALID_TAG_FRIEND);"},{"lineNumber":125,"author":{"gitID":"kenpaxtonlim"},"content":"        AddRemoveTagsCommand addRemoveTagsCommand \u003d prepareCommandAdd(outOfBoundIndex, ParserUtil.parseTags(tagsList));"},{"lineNumber":126,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":127,"author":{"gitID":"kenpaxtonlim"},"content":"        assertCommandFailure(addRemoveTagsCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":128,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":130,"author":{"gitID":"kenpaxtonlim"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"kenpaxtonlim"},"content":"    public void equals() throws Exception {"},{"lineNumber":132,"author":{"gitID":"kenpaxtonlim"},"content":"        ArrayList\u003cString\u003e tagsList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":133,"author":{"gitID":"kenpaxtonlim"},"content":"        tagsList.add(VALID_TAG_HUSBAND);"},{"lineNumber":134,"author":{"gitID":"kenpaxtonlim"},"content":"        tagsList.add(VALID_TAG_FRIEND);"},{"lineNumber":135,"author":{"gitID":"kenpaxtonlim"},"content":"        Set\u003cTag\u003e tags \u003d ParserUtil.parseTags(tagsList);"},{"lineNumber":136,"author":{"gitID":"kenpaxtonlim"},"content":"        final AddRemoveTagsCommand standardCommand \u003d new AddRemoveTagsCommand(true, INDEX_FIRST_PERSON, tags);"},{"lineNumber":137,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":138,"author":{"gitID":"kenpaxtonlim"},"content":"        // Returns true with itself"},{"lineNumber":139,"author":{"gitID":"kenpaxtonlim"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":140,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":141,"author":{"gitID":"kenpaxtonlim"},"content":"        // Returns true with same values"},{"lineNumber":142,"author":{"gitID":"kenpaxtonlim"},"content":"        AddRemoveTagsCommand commandWithSameValues \u003d new AddRemoveTagsCommand(true, INDEX_FIRST_PERSON, tags);"},{"lineNumber":143,"author":{"gitID":"kenpaxtonlim"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":144,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":145,"author":{"gitID":"kenpaxtonlim"},"content":"        // Return false with different type"},{"lineNumber":146,"author":{"gitID":"kenpaxtonlim"},"content":"        AddRemoveTagsCommand commandWithDifferentType \u003d new AddRemoveTagsCommand(false, INDEX_FIRST_PERSON, tags);"},{"lineNumber":147,"author":{"gitID":"kenpaxtonlim"},"content":"        assertFalse(standardCommand.equals(commandWithDifferentType));"},{"lineNumber":148,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":149,"author":{"gitID":"kenpaxtonlim"},"content":"        // Returns false with null"},{"lineNumber":150,"author":{"gitID":"kenpaxtonlim"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":151,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":152,"author":{"gitID":"kenpaxtonlim"},"content":"        // Returns false with different command types"},{"lineNumber":153,"author":{"gitID":"kenpaxtonlim"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":154,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":155,"author":{"gitID":"kenpaxtonlim"},"content":"        // Returns false with different indexes"},{"lineNumber":156,"author":{"gitID":"kenpaxtonlim"},"content":"        AddRemoveTagsCommand commandWithDifferentIndex \u003d new AddRemoveTagsCommand(true, INDEX_SECOND_PERSON,"},{"lineNumber":157,"author":{"gitID":"kenpaxtonlim"},"content":"                ParserUtil.parseTags(tagsList));"},{"lineNumber":158,"author":{"gitID":"kenpaxtonlim"},"content":"        assertFalse(standardCommand.equals(commandWithDifferentIndex));"},{"lineNumber":159,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":160,"author":{"gitID":"kenpaxtonlim"},"content":"        // Returns false with different tags"},{"lineNumber":161,"author":{"gitID":"kenpaxtonlim"},"content":"        ArrayList\u003cString\u003e differentTagsList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":162,"author":{"gitID":"kenpaxtonlim"},"content":"        tagsList.add(VALID_TAG_HUSBAND);"},{"lineNumber":163,"author":{"gitID":"kenpaxtonlim"},"content":"        AddRemoveTagsCommand commandWithDifferentTags \u003d new AddRemoveTagsCommand(true, INDEX_FIRST_PERSON,"},{"lineNumber":164,"author":{"gitID":"kenpaxtonlim"},"content":"                ParserUtil.parseTags(differentTagsList));"},{"lineNumber":165,"author":{"gitID":"kenpaxtonlim"},"content":"        assertFalse(standardCommand.equals(commandWithDifferentTags));"},{"lineNumber":166,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":168,"author":{"gitID":"kenpaxtonlim"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"kenpaxtonlim"},"content":"     * Returns an add {@code AddRemoveTagsCommand} with parameters {@code index} and {@code tags}."},{"lineNumber":170,"author":{"gitID":"kenpaxtonlim"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"kenpaxtonlim"},"content":"    private AddRemoveTagsCommand prepareCommandAdd(Index index, Set\u003cTag\u003e tags) {"},{"lineNumber":172,"author":{"gitID":"kenpaxtonlim"},"content":"        AddRemoveTagsCommand addRemoveTagsCommand \u003d new AddRemoveTagsCommand(true, index, tags);"},{"lineNumber":173,"author":{"gitID":"kenpaxtonlim"},"content":"        addRemoveTagsCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":174,"author":{"gitID":"kenpaxtonlim"},"content":"        return addRemoveTagsCommand;"},{"lineNumber":175,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":177,"author":{"gitID":"kenpaxtonlim"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"kenpaxtonlim"},"content":"     * Returns a remove {@code AddRemoveTagsCommand} with parameters {@code index} and {@code tags}."},{"lineNumber":179,"author":{"gitID":"kenpaxtonlim"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"kenpaxtonlim"},"content":"    private AddRemoveTagsCommand prepareCommandRemove(Index index, Set\u003cTag\u003e tags) {"},{"lineNumber":181,"author":{"gitID":"kenpaxtonlim"},"content":"        AddRemoveTagsCommand addRemoveTagsCommand \u003d new AddRemoveTagsCommand(false, index, tags);"},{"lineNumber":182,"author":{"gitID":"kenpaxtonlim"},"content":"        addRemoveTagsCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":183,"author":{"gitID":"kenpaxtonlim"},"content":"        return addRemoveTagsCommand;"},{"lineNumber":184,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"kenpaxtonlim"},"content":"}"}],"authorContributionMap":{"kenpaxtonlim":158,"-":27}},{"path":"src/main/java/seedu/address/logic/parser/RedoCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"donjar"},"content":"// @@author donjar"},{"lineNumber":2,"author":{"gitID":"donjar"},"content":""},{"lineNumber":3,"author":{"gitID":"donjar"},"content":"package seedu.address.logic.parser;"},{"lineNumber":4,"author":{"gitID":"donjar"},"content":""},{"lineNumber":5,"author":{"gitID":"donjar"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"donjar"},"content":""},{"lineNumber":7,"author":{"gitID":"donjar"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"donjar"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":9,"author":{"gitID":"donjar"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"donjar"},"content":""},{"lineNumber":11,"author":{"gitID":"donjar"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"donjar"},"content":" * Parses input arguments and creates a new RedoCommand object"},{"lineNumber":13,"author":{"gitID":"donjar"},"content":" */"},{"lineNumber":14,"author":{"gitID":"donjar"},"content":"public class RedoCommandParser implements Parser\u003cRedoCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"donjar"},"content":""},{"lineNumber":16,"author":{"gitID":"donjar"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"donjar"},"content":"     * Parses the given {@code String} of arguments in the context of the RedoCommand"},{"lineNumber":18,"author":{"gitID":"donjar"},"content":"     * and returns an RedoCommand object for execution."},{"lineNumber":19,"author":{"gitID":"donjar"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"donjar"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"donjar"},"content":"    public RedoCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"donjar"},"content":"        if (args.equals(\"\")) {"},{"lineNumber":23,"author":{"gitID":"donjar"},"content":"            return new RedoCommand(1);"},{"lineNumber":24,"author":{"gitID":"donjar"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"donjar"},"content":""},{"lineNumber":26,"author":{"gitID":"donjar"},"content":"        try {"},{"lineNumber":27,"author":{"gitID":"donjar"},"content":"            int amount \u003d ParserUtil.parsePositiveInteger(args);"},{"lineNumber":28,"author":{"gitID":"donjar"},"content":"            return new RedoCommand(amount);"},{"lineNumber":29,"author":{"gitID":"donjar"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":30,"author":{"gitID":"donjar"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RedoCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"donjar"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"donjar"},"content":"}"}],"authorContributionMap":{"donjar":33}},{"path":"src/main/java/seedu/address/logic/parser/SizeCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"donjar"},"content":"// @@author donjar"},{"lineNumber":2,"author":{"gitID":"donjar"},"content":""},{"lineNumber":3,"author":{"gitID":"donjar"},"content":"package seedu.address.logic.parser;"},{"lineNumber":4,"author":{"gitID":"donjar"},"content":""},{"lineNumber":5,"author":{"gitID":"donjar"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"donjar"},"content":""},{"lineNumber":7,"author":{"gitID":"donjar"},"content":"import seedu.address.logic.commands.SizeCommand;"},{"lineNumber":8,"author":{"gitID":"donjar"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"donjar"},"content":""},{"lineNumber":10,"author":{"gitID":"donjar"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"donjar"},"content":" * Parses input arguments and creates a new SizeCommand object"},{"lineNumber":12,"author":{"gitID":"donjar"},"content":" */"},{"lineNumber":13,"author":{"gitID":"donjar"},"content":"public class SizeCommandParser implements Parser\u003cSizeCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"donjar"},"content":""},{"lineNumber":15,"author":{"gitID":"donjar"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"donjar"},"content":"     * Parses the given {@code String} of arguments in the context of the SizeCommand"},{"lineNumber":17,"author":{"gitID":"donjar"},"content":"     * and returns an SizeCommand object for execution."},{"lineNumber":18,"author":{"gitID":"donjar"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"donjar"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"donjar"},"content":"    public SizeCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"donjar"},"content":"        if (args.isEmpty()) {"},{"lineNumber":22,"author":{"gitID":"donjar"},"content":"            return new SizeCommand();"},{"lineNumber":23,"author":{"gitID":"donjar"},"content":"        }"},{"lineNumber":24,"author":{"gitID":"donjar"},"content":""},{"lineNumber":25,"author":{"gitID":"donjar"},"content":"        try {"},{"lineNumber":26,"author":{"gitID":"donjar"},"content":"            int parsed \u003d Integer.parseInt(args.trim());"},{"lineNumber":27,"author":{"gitID":"donjar"},"content":"            return new SizeCommand(parsed);"},{"lineNumber":28,"author":{"gitID":"donjar"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":29,"author":{"gitID":"donjar"},"content":"            throw new ParseException("},{"lineNumber":30,"author":{"gitID":"donjar"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SizeCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"donjar"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"donjar"},"content":"}"}],"authorContributionMap":{"donjar":33}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"kenpaxtonlim"},"content":"import seedu.address.logic.commands.AddRemoveTagsCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":17,"author":{"gitID":"donjar"},"content":"import seedu.address.logic.commands.FindRegexCommand;"},{"lineNumber":18,"author":{"gitID":"Zzmobie"},"content":"import seedu.address.logic.commands.FindTagCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":22,"author":{"gitID":"kenpaxtonlim"},"content":"import seedu.address.logic.commands.QuickHelpCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":24,"author":{"gitID":"500poundbear"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":26,"author":{"gitID":"donjar"},"content":"import seedu.address.logic.commands.SizeCommand;"},{"lineNumber":27,"author":{"gitID":"kenpaxtonlim"},"content":"import seedu.address.logic.commands.SocialMediaCommand;"},{"lineNumber":28,"author":{"gitID":"500poundbear"},"content":"import seedu.address.logic.commands.StatisticsCommand;"},{"lineNumber":29,"author":{"gitID":"Zzmobie"},"content":"import seedu.address.logic.commands.ToggleAccessDisplayCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":35,"author":{"gitID":"-"},"content":" */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":61,"author":{"gitID":"kenpaxtonlim"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":65,"author":{"gitID":"kenpaxtonlim"},"content":"        case EditCommand.COMMAND_ALIAS:"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":69,"author":{"gitID":"kenpaxtonlim"},"content":"        case SelectCommand.COMMAND_ALIAS:"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitID":"kenpaxtonlim"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":77,"author":{"gitID":"kenpaxtonlim"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":81,"author":{"gitID":"kenpaxtonlim"},"content":"        case FindCommand.COMMAND_ALIAS:"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"donjar"},"content":"        case FindRegexCommand.COMMAND_WORD:"},{"lineNumber":85,"author":{"gitID":"donjar"},"content":"        case FindRegexCommand.COMMAND_ALIAS:"},{"lineNumber":86,"author":{"gitID":"donjar"},"content":"            return new FindRegexCommandParser().parse(arguments);"},{"lineNumber":87,"author":{"gitID":"donjar"},"content":""},{"lineNumber":88,"author":{"gitID":"Zzmobie"},"content":"        case FindTagCommand.COMMAND_WORD:"},{"lineNumber":89,"author":{"gitID":"Zzmobie"},"content":"        case FindTagCommand.COMMAND_ALIAS:"},{"lineNumber":90,"author":{"gitID":"Zzmobie"},"content":"            return new FindTagCommandParser().parse(arguments);"},{"lineNumber":91,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":93,"author":{"gitID":"kenpaxtonlim"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":97,"author":{"gitID":"kenpaxtonlim"},"content":"        case HistoryCommand.COMMAND_ALIAS:"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":101,"author":{"gitID":"kenpaxtonlim"},"content":"        case ExitCommand.COMMAND_ALIAS:"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":105,"author":{"gitID":"kenpaxtonlim"},"content":"        case HelpCommand.COMMAND_ALIAS:"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":109,"author":{"gitID":"kenpaxtonlim"},"content":"        case UndoCommand.COMMAND_ALIAS:"},{"lineNumber":110,"author":{"gitID":"donjar"},"content":"            return new UndoCommandParser().parse(arguments);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":113,"author":{"gitID":"kenpaxtonlim"},"content":"        case RedoCommand.COMMAND_ALIAS:"},{"lineNumber":114,"author":{"gitID":"donjar"},"content":"            return new RedoCommandParser().parse(arguments);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"500poundbear"},"content":"        case RemarkCommand.COMMAND_WORD:"},{"lineNumber":117,"author":{"gitID":"500poundbear"},"content":"            return new RemarkCommandParser().parse(arguments);"},{"lineNumber":118,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":119,"author":{"gitID":"kenpaxtonlim"},"content":"        case AddRemoveTagsCommand.COMMAND_WORD:"},{"lineNumber":120,"author":{"gitID":"kenpaxtonlim"},"content":"        case AddRemoveTagsCommand.COMMAND_ALIAS:"},{"lineNumber":121,"author":{"gitID":"kenpaxtonlim"},"content":"            return new AddRemoveTagsCommandParser().parse(arguments);"},{"lineNumber":122,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":123,"author":{"gitID":"500poundbear"},"content":"        case StatisticsCommand.COMMAND_WORD:"},{"lineNumber":124,"author":{"gitID":"500poundbear"},"content":"        case StatisticsCommand.COMMAND_ALIAS:"},{"lineNumber":125,"author":{"gitID":"500poundbear"},"content":"            return new StatisticsCommand();"},{"lineNumber":126,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":127,"author":{"gitID":"donjar"},"content":"        case SizeCommand.COMMAND_WORD:"},{"lineNumber":128,"author":{"gitID":"donjar"},"content":"        case SizeCommand.COMMAND_ALIAS:"},{"lineNumber":129,"author":{"gitID":"donjar"},"content":"            return new SizeCommandParser().parse(arguments);"},{"lineNumber":130,"author":{"gitID":"donjar"},"content":""},{"lineNumber":131,"author":{"gitID":"kenpaxtonlim"},"content":"        case SocialMediaCommand.COMMAND_WORD:"},{"lineNumber":132,"author":{"gitID":"kenpaxtonlim"},"content":"        case SocialMediaCommand.COMMAND_ALIAS:"},{"lineNumber":133,"author":{"gitID":"kenpaxtonlim"},"content":"            return new SocialMediaCommandParser().parse(arguments);"},{"lineNumber":134,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":135,"author":{"gitID":"Zzmobie"},"content":"        case ToggleAccessDisplayCommand.COMMAND_WORD:"},{"lineNumber":136,"author":{"gitID":"Zzmobie"},"content":"        case ToggleAccessDisplayCommand.COMMAND_ALIAS:"},{"lineNumber":137,"author":{"gitID":"Zzmobie"},"content":"            return new ToggleAccessDisplayCommandParser().parse(arguments);"},{"lineNumber":138,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":139,"author":{"gitID":"kenpaxtonlim"},"content":"        case QuickHelpCommand.COMMAND_WORD:"},{"lineNumber":140,"author":{"gitID":"kenpaxtonlim"},"content":"        case QuickHelpCommand.COMMAND_ALIAS:"},{"lineNumber":141,"author":{"gitID":"kenpaxtonlim"},"content":"            return new QuickHelpCommand();"},{"lineNumber":142,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"500poundbear":9,"Zzmobie":10,"kenpaxtonlim":27,"donjar":12,"-":90}},{"path":"src/main/java/seedu/address/logic/parser/FindRegexCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"donjar"},"content":"// @@author donjar"},{"lineNumber":2,"author":{"gitID":"donjar"},"content":""},{"lineNumber":3,"author":{"gitID":"donjar"},"content":"package seedu.address.logic.parser;"},{"lineNumber":4,"author":{"gitID":"donjar"},"content":""},{"lineNumber":5,"author":{"gitID":"donjar"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_REGEX;"},{"lineNumber":6,"author":{"gitID":"donjar"},"content":""},{"lineNumber":7,"author":{"gitID":"donjar"},"content":"import java.util.regex.PatternSyntaxException;"},{"lineNumber":8,"author":{"gitID":"donjar"},"content":""},{"lineNumber":9,"author":{"gitID":"donjar"},"content":"import seedu.address.logic.commands.FindRegexCommand;"},{"lineNumber":10,"author":{"gitID":"donjar"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"donjar"},"content":"import seedu.address.model.person.NameMatchesRegexPredicate;"},{"lineNumber":12,"author":{"gitID":"donjar"},"content":""},{"lineNumber":13,"author":{"gitID":"donjar"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"donjar"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":15,"author":{"gitID":"donjar"},"content":" */"},{"lineNumber":16,"author":{"gitID":"donjar"},"content":"public class FindRegexCommandParser implements Parser\u003cFindRegexCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"donjar"},"content":""},{"lineNumber":18,"author":{"gitID":"donjar"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"donjar"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":20,"author":{"gitID":"donjar"},"content":"     * and returns an FindCommand object for execution."},{"lineNumber":21,"author":{"gitID":"donjar"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitID":"donjar"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"donjar"},"content":"    public FindRegexCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"donjar"},"content":"        String trimmed \u003d args.trim();"},{"lineNumber":25,"author":{"gitID":"donjar"},"content":"        try {"},{"lineNumber":26,"author":{"gitID":"donjar"},"content":"            return new FindRegexCommand(new NameMatchesRegexPredicate(trimmed));"},{"lineNumber":27,"author":{"gitID":"donjar"},"content":"        } catch (PatternSyntaxException e) {"},{"lineNumber":28,"author":{"gitID":"donjar"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_REGEX, FindRegexCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"donjar"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"donjar"},"content":""},{"lineNumber":32,"author":{"gitID":"donjar"},"content":"}"}],"authorContributionMap":{"donjar":32}},{"path":"src/main/java/seedu/address/logic/parser/RemarkCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"500poundbear"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"500poundbear"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"500poundbear"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":12,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":13,"author":{"gitID":"500poundbear"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"500poundbear"},"content":" * Parses input arguments and creates a new RemarkCommand object"},{"lineNumber":15,"author":{"gitID":"500poundbear"},"content":" */"},{"lineNumber":16,"author":{"gitID":"500poundbear"},"content":"public class RemarkCommandParser implements Parser\u003cRemarkCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":18,"author":{"gitID":"500poundbear"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"500poundbear"},"content":"    public RemarkCommand parse(String args) throws ParseException {"},{"lineNumber":20,"author":{"gitID":"500poundbear"},"content":"        requireNonNull(args);"},{"lineNumber":21,"author":{"gitID":"500poundbear"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_REMARK);"},{"lineNumber":22,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":23,"author":{"gitID":"500poundbear"},"content":"        Index index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":27,"author":{"gitID":"500poundbear"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"500poundbear"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":30,"author":{"gitID":"500poundbear"},"content":"        String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"},{"lineNumber":31,"author":{"gitID":"500poundbear"},"content":"        return new RemarkCommand(index, new Remark(remark));"},{"lineNumber":32,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"500poundbear"},"content":"}"},{"lineNumber":34,"author":{"gitID":"500poundbear"},"content":""}],"authorContributionMap":{"500poundbear":23,"-":11}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":14,"author":{"gitID":"500poundbear"},"content":"    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"},{"lineNumber":15,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final Prefix PREFIX_FACEBOOK \u003d new Prefix(\"fb/\");"},{"lineNumber":16,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final Prefix PREFIX_TWITTER \u003d new Prefix(\"tw/\");"},{"lineNumber":17,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final Prefix PREFIX_INSTAGRAM \u003d new Prefix(\"ig/\");"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"500poundbear":1,"kenpaxtonlim":3,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitID":"kenpaxtonlim"},"content":"import seedu.address.model.person.SocialMedia;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":23,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":33,"author":{"gitID":"donjar"},"content":"    public static final String MESSAGE_INVALID_NUMBER \u003d \"Number passed is either invalid or not positive.\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"donjar"},"content":"    // @@author donjar"},{"lineNumber":50,"author":{"gitID":"donjar"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"donjar"},"content":"     * Parses {@code num} into a positive integer and returns it. Leading and trailing whitespaces will be trimmed."},{"lineNumber":52,"author":{"gitID":"donjar"},"content":"     * @throws IllegalValueException if the specified argument is invalid, or is not a positive integer."},{"lineNumber":53,"author":{"gitID":"donjar"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"donjar"},"content":"    public static int parsePositiveInteger(String num) throws IllegalValueException {"},{"lineNumber":55,"author":{"gitID":"donjar"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"donjar"},"content":"            int amount \u003d Integer.parseInt(num.trim());"},{"lineNumber":57,"author":{"gitID":"donjar"},"content":"            if (amount \u003c\u003d 0) {"},{"lineNumber":58,"author":{"gitID":"donjar"},"content":"                throw new IllegalValueException(MESSAGE_INVALID_NUMBER);"},{"lineNumber":59,"author":{"gitID":"donjar"},"content":"            }"},{"lineNumber":60,"author":{"gitID":"donjar"},"content":"            return amount;"},{"lineNumber":61,"author":{"gitID":"donjar"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":62,"author":{"gitID":"donjar"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_NUMBER);"},{"lineNumber":63,"author":{"gitID":"donjar"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"donjar"},"content":"    // @@author"},{"lineNumber":66,"author":{"gitID":"donjar"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(new Name(name.get())) : Optional.empty();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(new Phone(phone.get())) : Optional.empty();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(new Address(address.get())) : Optional.empty();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(new Email(email.get())) : Optional.empty();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            tagSet.add(new Tag(tagName));"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":115,"author":{"gitID":"kenpaxtonlim"},"content":"    //@@author kenpaxtonlim"},{"lineNumber":116,"author":{"gitID":"kenpaxtonlim"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"kenpaxtonlim"},"content":"     * Parses three {@code String facebook, twitter, instagram} into an {@code SocialMedia}."},{"lineNumber":118,"author":{"gitID":"kenpaxtonlim"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"kenpaxtonlim"},"content":"    public static SocialMedia parseSocialMedia(Optional\u003cString\u003e facebook,"},{"lineNumber":120,"author":{"gitID":"kenpaxtonlim"},"content":"            Optional\u003cString\u003e twitter, Optional\u003cString\u003e instagram, boolean isAdding) {"},{"lineNumber":121,"author":{"gitID":"kenpaxtonlim"},"content":"        requireAllNonNull(facebook, twitter, instagram);"},{"lineNumber":122,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":123,"author":{"gitID":"kenpaxtonlim"},"content":"        String defaultValue;"},{"lineNumber":124,"author":{"gitID":"kenpaxtonlim"},"content":"        if (isAdding) {"},{"lineNumber":125,"author":{"gitID":"kenpaxtonlim"},"content":"            defaultValue \u003d \"\";"},{"lineNumber":126,"author":{"gitID":"kenpaxtonlim"},"content":"        } else {"},{"lineNumber":127,"author":{"gitID":"kenpaxtonlim"},"content":"            defaultValue \u003d null;"},{"lineNumber":128,"author":{"gitID":"kenpaxtonlim"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"kenpaxtonlim"},"content":"        String fb \u003d facebook.isPresent() ? facebook.get() : defaultValue;"},{"lineNumber":130,"author":{"gitID":"kenpaxtonlim"},"content":"        String tw \u003d twitter.isPresent() ? twitter.get() : defaultValue;"},{"lineNumber":131,"author":{"gitID":"kenpaxtonlim"},"content":"        String in \u003d instagram.isPresent() ? instagram.get() : defaultValue;"},{"lineNumber":132,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":133,"author":{"gitID":"kenpaxtonlim"},"content":"        return new SocialMedia(fb, tw, in);"},{"lineNumber":134,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"kenpaxtonlim"},"content":"    //@@author"},{"lineNumber":136,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kenpaxtonlim":23,"donjar":19,"-":94}},{"path":"src/main/java/seedu/address/logic/parser/AddRemoveTagsCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":6,"author":{"gitID":"kenpaxtonlim"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"kenpaxtonlim"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"kenpaxtonlim"},"content":"import seedu.address.logic.commands.AddRemoveTagsCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"kenpaxtonlim"},"content":"//@@author kenpaxtonlim"},{"lineNumber":17,"author":{"gitID":"kenpaxtonlim"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"kenpaxtonlim"},"content":" * Parses input arguments and creates a new AddRemoveTagsCommand object"},{"lineNumber":19,"author":{"gitID":"kenpaxtonlim"},"content":" */"},{"lineNumber":20,"author":{"gitID":"kenpaxtonlim"},"content":"public class AddRemoveTagsCommandParser implements Parser\u003cAddRemoveTagsCommand\u003e {"},{"lineNumber":21,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":22,"author":{"gitID":"kenpaxtonlim"},"content":"    private static final int ARGUMENT_START_INDEX \u003d 1;"},{"lineNumber":23,"author":{"gitID":"kenpaxtonlim"},"content":"    private static final int TYPE_ARGUMENT_INDEX \u003d 0;"},{"lineNumber":24,"author":{"gitID":"kenpaxtonlim"},"content":"    private static final int INDEX_ARGUMENT_INDEX \u003d 1;"},{"lineNumber":25,"author":{"gitID":"kenpaxtonlim"},"content":"    private static final int TAG_ARGUMENT_INDEX \u003d 2;"},{"lineNumber":26,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":27,"author":{"gitID":"kenpaxtonlim"},"content":"    private static final String TYPE_ADD \u003d \"add\";"},{"lineNumber":28,"author":{"gitID":"kenpaxtonlim"},"content":"    private static final String TYPE_REMOVE \u003d \"remove\";"},{"lineNumber":29,"author":{"gitID":"kenpaxtonlim"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"kenpaxtonlim"},"content":"     * Parses the given {@code String} of arguments in the context of the AddRemoveTagsCommand"},{"lineNumber":31,"author":{"gitID":"kenpaxtonlim"},"content":"     * and returns an AddRemoveTagsCommand object for execution."},{"lineNumber":32,"author":{"gitID":"kenpaxtonlim"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":33,"author":{"gitID":"kenpaxtonlim"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"kenpaxtonlim"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"kenpaxtonlim"},"content":"    public AddRemoveTagsCommand parse(String args) throws ParseException {"},{"lineNumber":36,"author":{"gitID":"kenpaxtonlim"},"content":"        requireNonNull(args);"},{"lineNumber":37,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":38,"author":{"gitID":"kenpaxtonlim"},"content":"        if (args.equals(\"\")) {"},{"lineNumber":39,"author":{"gitID":"kenpaxtonlim"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddRemoveTagsCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitID":"kenpaxtonlim"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":42,"author":{"gitID":"kenpaxtonlim"},"content":"        List\u003cString\u003e argsList \u003d parseParametersIntoList(args);"},{"lineNumber":43,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":44,"author":{"gitID":"kenpaxtonlim"},"content":"        boolean isAdd \u003d checkAddOrRemove(argsList);"},{"lineNumber":45,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":46,"author":{"gitID":"kenpaxtonlim"},"content":"        Index index;"},{"lineNumber":47,"author":{"gitID":"kenpaxtonlim"},"content":"        try {"},{"lineNumber":48,"author":{"gitID":"kenpaxtonlim"},"content":"            index \u003d ParserUtil.parseIndex(argsList.get(INDEX_ARGUMENT_INDEX));"},{"lineNumber":49,"author":{"gitID":"kenpaxtonlim"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":50,"author":{"gitID":"kenpaxtonlim"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddRemoveTagsCommand.MESSAGE_USAGE));"},{"lineNumber":51,"author":{"gitID":"kenpaxtonlim"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":53,"author":{"gitID":"kenpaxtonlim"},"content":"        Set\u003cTag\u003e tagsSet \u003d extractTagsIntoSet(argsList);"},{"lineNumber":54,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":55,"author":{"gitID":"kenpaxtonlim"},"content":"        return new AddRemoveTagsCommand(isAdd, index, tagsSet);"},{"lineNumber":56,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":58,"author":{"gitID":"kenpaxtonlim"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"kenpaxtonlim"},"content":"     * With a given {@code argsList}, convert it to a set of tags."},{"lineNumber":60,"author":{"gitID":"kenpaxtonlim"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"kenpaxtonlim"},"content":"    private Set\u003cTag\u003e extractTagsIntoSet(List\u003cString\u003e argsList) throws ParseException {"},{"lineNumber":62,"author":{"gitID":"kenpaxtonlim"},"content":"        List\u003cString\u003e tagsList \u003d argsList.subList(TAG_ARGUMENT_INDEX, argsList.size());"},{"lineNumber":63,"author":{"gitID":"kenpaxtonlim"},"content":"        Set\u003cTag\u003e tagsSet;"},{"lineNumber":64,"author":{"gitID":"kenpaxtonlim"},"content":"        try {"},{"lineNumber":65,"author":{"gitID":"kenpaxtonlim"},"content":"            tagsSet \u003d ParserUtil.parseTags(tagsList);"},{"lineNumber":66,"author":{"gitID":"kenpaxtonlim"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":67,"author":{"gitID":"kenpaxtonlim"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":68,"author":{"gitID":"kenpaxtonlim"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"kenpaxtonlim"},"content":"        return tagsSet;"},{"lineNumber":70,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":72,"author":{"gitID":"kenpaxtonlim"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"kenpaxtonlim"},"content":"     * Parse the type to determine if it is add or remove."},{"lineNumber":74,"author":{"gitID":"kenpaxtonlim"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"kenpaxtonlim"},"content":"    private boolean checkAddOrRemove(List\u003cString\u003e argsList) throws ParseException {"},{"lineNumber":76,"author":{"gitID":"kenpaxtonlim"},"content":"        boolean isAdd;"},{"lineNumber":77,"author":{"gitID":"kenpaxtonlim"},"content":"        if (argsList.get(TYPE_ARGUMENT_INDEX).equals(TYPE_ADD)) {"},{"lineNumber":78,"author":{"gitID":"kenpaxtonlim"},"content":"            isAdd \u003d true;"},{"lineNumber":79,"author":{"gitID":"kenpaxtonlim"},"content":"        } else if (argsList.get(TYPE_ARGUMENT_INDEX).equals(TYPE_REMOVE)) {"},{"lineNumber":80,"author":{"gitID":"kenpaxtonlim"},"content":"            isAdd \u003d false;"},{"lineNumber":81,"author":{"gitID":"kenpaxtonlim"},"content":"        } else {"},{"lineNumber":82,"author":{"gitID":"kenpaxtonlim"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddRemoveTagsCommand.MESSAGE_USAGE));"},{"lineNumber":83,"author":{"gitID":"kenpaxtonlim"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"kenpaxtonlim"},"content":"        return isAdd;"},{"lineNumber":85,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":87,"author":{"gitID":"kenpaxtonlim"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"kenpaxtonlim"},"content":"     * Parse a string {@code args} into a list of individual argument."},{"lineNumber":89,"author":{"gitID":"kenpaxtonlim"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"kenpaxtonlim"},"content":"    private List\u003cString\u003e parseParametersIntoList(String args) throws ParseException {"},{"lineNumber":91,"author":{"gitID":"kenpaxtonlim"},"content":"        List\u003cString\u003e argsList \u003d Arrays.asList(args.substring(ARGUMENT_START_INDEX).split(\" \"));"},{"lineNumber":92,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":93,"author":{"gitID":"kenpaxtonlim"},"content":"        if (argsList.size() \u003c TAG_ARGUMENT_INDEX + 1 || argsList.contains(\"\")) {"},{"lineNumber":94,"author":{"gitID":"kenpaxtonlim"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddRemoveTagsCommand.MESSAGE_USAGE));"},{"lineNumber":95,"author":{"gitID":"kenpaxtonlim"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"kenpaxtonlim"},"content":"        return argsList;"},{"lineNumber":97,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"kenpaxtonlim"},"content":"}"}],"authorContributionMap":{"kenpaxtonlim":87,"-":11}},{"path":"src/main/java/seedu/address/logic/parser/SocialMediaCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":6,"author":{"gitID":"kenpaxtonlim"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"kenpaxtonlim"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"kenpaxtonlim"},"content":"import seedu.address.logic.commands.SocialMediaCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"kenpaxtonlim"},"content":"//@@author kenpaxtonlim"},{"lineNumber":15,"author":{"gitID":"kenpaxtonlim"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"kenpaxtonlim"},"content":" * Parses input arguments and creates a new SocialMediaCommand object"},{"lineNumber":17,"author":{"gitID":"kenpaxtonlim"},"content":" */"},{"lineNumber":18,"author":{"gitID":"kenpaxtonlim"},"content":"public class SocialMediaCommandParser implements Parser\u003cSocialMediaCommand\u003e {"},{"lineNumber":19,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":20,"author":{"gitID":"kenpaxtonlim"},"content":"    private static final int ARGUMENT_START_INDEX \u003d 1;"},{"lineNumber":21,"author":{"gitID":"kenpaxtonlim"},"content":"    private static final int TYPE_ARGUMENT_INDEX \u003d 0;"},{"lineNumber":22,"author":{"gitID":"kenpaxtonlim"},"content":"    private static final int INDEX_ARGUMENT_INDEX \u003d 1;"},{"lineNumber":23,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":24,"author":{"gitID":"kenpaxtonlim"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"kenpaxtonlim"},"content":"    public SocialMediaCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitID":"kenpaxtonlim"},"content":"        requireNonNull(args);"},{"lineNumber":27,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":28,"author":{"gitID":"kenpaxtonlim"},"content":"        if (args.equals(\"\")) {"},{"lineNumber":29,"author":{"gitID":"kenpaxtonlim"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SocialMediaCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"kenpaxtonlim"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":32,"author":{"gitID":"kenpaxtonlim"},"content":"        List\u003cString\u003e argsList \u003d Arrays.asList(args.substring(ARGUMENT_START_INDEX).split(\" \"));"},{"lineNumber":33,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":34,"author":{"gitID":"kenpaxtonlim"},"content":"        if (argsList.size() \u003c INDEX_ARGUMENT_INDEX + 1 || argsList.contains(\"\")) {"},{"lineNumber":35,"author":{"gitID":"kenpaxtonlim"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SocialMediaCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"kenpaxtonlim"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":38,"author":{"gitID":"kenpaxtonlim"},"content":"        String type \u003d argsList.get(TYPE_ARGUMENT_INDEX);"},{"lineNumber":39,"author":{"gitID":"kenpaxtonlim"},"content":"        if (!(type.equals(SocialMediaCommand.TYPE_FACEBOOK)"},{"lineNumber":40,"author":{"gitID":"kenpaxtonlim"},"content":"                || type.equals(SocialMediaCommand.TYPE_TWITTER)"},{"lineNumber":41,"author":{"gitID":"kenpaxtonlim"},"content":"                || type.equals(SocialMediaCommand.TYPE_INSTAGRAM))) {"},{"lineNumber":42,"author":{"gitID":"kenpaxtonlim"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SocialMediaCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitID":"kenpaxtonlim"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":45,"author":{"gitID":"kenpaxtonlim"},"content":"        Index index;"},{"lineNumber":46,"author":{"gitID":"kenpaxtonlim"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"kenpaxtonlim"},"content":"            index \u003d ParserUtil.parseIndex(argsList.get(INDEX_ARGUMENT_INDEX));"},{"lineNumber":48,"author":{"gitID":"kenpaxtonlim"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":49,"author":{"gitID":"kenpaxtonlim"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SocialMediaCommand.MESSAGE_USAGE));"},{"lineNumber":50,"author":{"gitID":"kenpaxtonlim"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":52,"author":{"gitID":"kenpaxtonlim"},"content":"        return new SocialMediaCommand(index, type);"},{"lineNumber":53,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"kenpaxtonlim"},"content":"}"}],"authorContributionMap":{"kenpaxtonlim":45,"-":9}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"500poundbear"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"500poundbear"},"content":"import seedu.address.commons.events.ui.RefreshStatisticsPanelIfOpenEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Deletes a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":19,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String COMMAND_ALIAS \u003d \"d\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \": Deletes the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        ReadOnlyPerson personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":47,"author":{"gitID":"500poundbear"},"content":"            EventsCenter.getInstance().post(new RefreshStatisticsPanelIfOpenEvent());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            assert false : \"The target person cannot be missing\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"500poundbear":3,"kenpaxtonlim":1,"-":57}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":11,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String COMMAND_ALIAS \u003d \"l\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kenpaxtonlim":1,"-":19}},{"path":"src/main/java/seedu/address/logic/parser/UndoCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"donjar"},"content":"// @@author donjar"},{"lineNumber":2,"author":{"gitID":"donjar"},"content":""},{"lineNumber":3,"author":{"gitID":"donjar"},"content":"package seedu.address.logic.parser;"},{"lineNumber":4,"author":{"gitID":"donjar"},"content":""},{"lineNumber":5,"author":{"gitID":"donjar"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"donjar"},"content":""},{"lineNumber":7,"author":{"gitID":"donjar"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"donjar"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":9,"author":{"gitID":"donjar"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"donjar"},"content":""},{"lineNumber":11,"author":{"gitID":"donjar"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"donjar"},"content":" * Parses input arguments and creates a new UndoCommand object"},{"lineNumber":13,"author":{"gitID":"donjar"},"content":" */"},{"lineNumber":14,"author":{"gitID":"donjar"},"content":"public class UndoCommandParser implements Parser\u003cUndoCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"donjar"},"content":""},{"lineNumber":16,"author":{"gitID":"donjar"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"donjar"},"content":"     * Parses the given {@code String} of arguments in the context of the UndoCommand"},{"lineNumber":18,"author":{"gitID":"donjar"},"content":"     * and returns an UndoCommand object for execution."},{"lineNumber":19,"author":{"gitID":"donjar"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"donjar"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"donjar"},"content":"    public UndoCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"donjar"},"content":"        if (args.equals(\"\")) {"},{"lineNumber":23,"author":{"gitID":"donjar"},"content":"            return new UndoCommand(1);"},{"lineNumber":24,"author":{"gitID":"donjar"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"donjar"},"content":""},{"lineNumber":26,"author":{"gitID":"donjar"},"content":"        try {"},{"lineNumber":27,"author":{"gitID":"donjar"},"content":"            int amount \u003d ParserUtil.parsePositiveInteger(args);"},{"lineNumber":28,"author":{"gitID":"donjar"},"content":"            return new UndoCommand(amount);"},{"lineNumber":29,"author":{"gitID":"donjar"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":30,"author":{"gitID":"donjar"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UndoCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"donjar"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"donjar"},"content":"}"}],"authorContributionMap":{"donjar":33}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FACEBOOK;"},{"lineNumber":8,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INSTAGRAM;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TWITTER;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":39,"author":{"gitID":"kenpaxtonlim"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG,"},{"lineNumber":40,"author":{"gitID":"kenpaxtonlim"},"content":"                PREFIX_FACEBOOK, PREFIX_TWITTER, PREFIX_INSTAGRAM);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":57,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":58,"author":{"gitID":"kenpaxtonlim"},"content":"            if (argMultimap.getValue(PREFIX_FACEBOOK).isPresent()"},{"lineNumber":59,"author":{"gitID":"kenpaxtonlim"},"content":"                    || argMultimap.getValue(PREFIX_TWITTER).isPresent()"},{"lineNumber":60,"author":{"gitID":"kenpaxtonlim"},"content":"                    || argMultimap.getValue(PREFIX_INSTAGRAM).isPresent()) {"},{"lineNumber":61,"author":{"gitID":"kenpaxtonlim"},"content":"                editPersonDescriptor.setSocialMedia(ParserUtil.parseSocialMedia(argMultimap.getValue(PREFIX_FACEBOOK),"},{"lineNumber":62,"author":{"gitID":"kenpaxtonlim"},"content":"                        argMultimap.getValue(PREFIX_TWITTER), argMultimap.getValue(PREFIX_INSTAGRAM), false));"},{"lineNumber":63,"author":{"gitID":"kenpaxtonlim"},"content":"            }"},{"lineNumber":64,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kenpaxtonlim":13,"-":78}},{"path":"src/main/java/seedu/address/logic/parser/ToggleAccessDisplayCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Zzmobie"},"content":"import static seedu.address.logic.commands.ToggleAccessDisplayCommand.TYPE_OFF;"},{"lineNumber":5,"author":{"gitID":"Zzmobie"},"content":"import static seedu.address.logic.commands.ToggleAccessDisplayCommand.TYPE_ON;"},{"lineNumber":6,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":7,"author":{"gitID":"Zzmobie"},"content":"import seedu.address.logic.commands.ToggleAccessDisplayCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"Zzmobie"},"content":"//@@author Zzmobie"},{"lineNumber":11,"author":{"gitID":"Zzmobie"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"Zzmobie"},"content":" * Parses input arguments and creates a new ToggleAccessDisplayCommand object"},{"lineNumber":13,"author":{"gitID":"Zzmobie"},"content":" */"},{"lineNumber":14,"author":{"gitID":"Zzmobie"},"content":"public class ToggleAccessDisplayCommandParser implements Parser\u003cToggleAccessDisplayCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":16,"author":{"gitID":"Zzmobie"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"Zzmobie"},"content":"     * Parses the given {@code String} of arguments in the context of the ToggleAccessDisplayCommand"},{"lineNumber":18,"author":{"gitID":"Zzmobie"},"content":"     * and returns an ToggleAccessDisplayCommand object for execution."},{"lineNumber":19,"author":{"gitID":"Zzmobie"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"Zzmobie"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"Zzmobie"},"content":"    public ToggleAccessDisplayCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"Zzmobie"},"content":"        if (args.trim().equalsIgnoreCase(TYPE_ON)) {"},{"lineNumber":23,"author":{"gitID":"Zzmobie"},"content":"            return new ToggleAccessDisplayCommand(true);"},{"lineNumber":24,"author":{"gitID":"Zzmobie"},"content":"        } else if (args.trim().equalsIgnoreCase(TYPE_OFF)) {"},{"lineNumber":25,"author":{"gitID":"Zzmobie"},"content":"            return new ToggleAccessDisplayCommand(false);"},{"lineNumber":26,"author":{"gitID":"Zzmobie"},"content":"        } else {"},{"lineNumber":27,"author":{"gitID":"Zzmobie"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":28,"author":{"gitID":"Zzmobie"},"content":"                    ToggleAccessDisplayCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"Zzmobie"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"Zzmobie"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":32,"author":{"gitID":"Zzmobie"},"content":"}"}],"authorContributionMap":{"Zzmobie":27,"-":5}},{"path":"src/main/java/seedu/address/logic/commands/RedoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Redo the previously undone command."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class RedoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";"},{"lineNumber":16,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String COMMAND_ALIAS \u003d \"r\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"},{"lineNumber":18,"author":{"gitID":"donjar"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":19,"author":{"gitID":"donjar"},"content":"            + \": Redo a number of commands.\\n\""},{"lineNumber":20,"author":{"gitID":"donjar"},"content":"            + \"Parameters: NUMBER_OF_COMMANDS_TO_REDO (must be a positive integer)\\n\""},{"lineNumber":21,"author":{"gitID":"donjar"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":22,"author":{"gitID":"donjar"},"content":""},{"lineNumber":23,"author":{"gitID":"donjar"},"content":"    // @@author donjar"},{"lineNumber":24,"author":{"gitID":"donjar"},"content":"    private final int amount;"},{"lineNumber":25,"author":{"gitID":"donjar"},"content":""},{"lineNumber":26,"author":{"gitID":"donjar"},"content":"    public RedoCommand(int amount) {"},{"lineNumber":27,"author":{"gitID":"donjar"},"content":"        this.amount \u003d amount;"},{"lineNumber":28,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"donjar"},"content":"    // @@author"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canRedo()) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"donjar"},"content":"        // @@author donjar"},{"lineNumber":40,"author":{"gitID":"donjar"},"content":"        int commandsRedoed \u003d 0;"},{"lineNumber":41,"author":{"gitID":"donjar"},"content":"        while (undoRedoStack.canRedo() \u0026\u0026 commandsRedoed \u003c amount) {"},{"lineNumber":42,"author":{"gitID":"donjar"},"content":"            undoRedoStack.popRedo().redo();"},{"lineNumber":43,"author":{"gitID":"donjar"},"content":"            commandsRedoed++;"},{"lineNumber":44,"author":{"gitID":"donjar"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"donjar"},"content":"        return new CommandResult(getSuccessMessage(commandsRedoed));"},{"lineNumber":46,"author":{"gitID":"donjar"},"content":"        // @@author"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"donjar"},"content":""},{"lineNumber":55,"author":{"gitID":"donjar"},"content":"    // @@author donjar"},{"lineNumber":56,"author":{"gitID":"donjar"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"donjar"},"content":"    public boolean equals(Object other) {"},{"lineNumber":58,"author":{"gitID":"donjar"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":59,"author":{"gitID":"donjar"},"content":"                || (other instanceof RedoCommand // instanceof handles nulls"},{"lineNumber":60,"author":{"gitID":"donjar"},"content":"                \u0026\u0026 this.amount \u003d\u003d ((RedoCommand) other).amount); // state check"},{"lineNumber":61,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"donjar"},"content":""},{"lineNumber":63,"author":{"gitID":"donjar"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"donjar"},"content":"     * Constructs the success message from the given amount. This takes into account that the number of commands"},{"lineNumber":65,"author":{"gitID":"donjar"},"content":"     * undone influences the singular/plural form of \"command\"."},{"lineNumber":66,"author":{"gitID":"donjar"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"donjar"},"content":"    public static String getSuccessMessage(int amount) {"},{"lineNumber":68,"author":{"gitID":"donjar"},"content":"        if (amount \u003d\u003d 1) {"},{"lineNumber":69,"author":{"gitID":"donjar"},"content":"            return \"1 command redoed.\";"},{"lineNumber":70,"author":{"gitID":"donjar"},"content":"        } else {"},{"lineNumber":71,"author":{"gitID":"donjar"},"content":"            return String.format(\"%1$s commands redoed.\", amount);"},{"lineNumber":72,"author":{"gitID":"donjar"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"donjar"},"content":"    // @@author"},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kenpaxtonlim":1,"donjar":41,"-":33}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"500poundbear"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"500poundbear"},"content":"import seedu.address.commons.events.ui.RefreshStatisticsPanelIfOpenEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Clears the address book."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":15,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String COMMAND_ALIAS \u003d \"c\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":22,"author":{"gitID":"500poundbear"},"content":"        EventsCenter.getInstance().post(new RefreshStatisticsPanelIfOpenEvent());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        model.resetData(new AddressBook());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"500poundbear":3,"kenpaxtonlim":1,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FACEBOOK;"},{"lineNumber":7,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INSTAGRAM;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"kenpaxtonlim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TWITTER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"500poundbear"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":14,"author":{"gitID":"500poundbear"},"content":"import seedu.address.commons.events.ui.RefreshStatisticsPanelIfOpenEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":26,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":33,"author":{"gitID":"kenpaxtonlim"},"content":"            + \"[\" + PREFIX_FACEBOOK + \"FACEBOOK] \""},{"lineNumber":34,"author":{"gitID":"kenpaxtonlim"},"content":"            + \"[\" + PREFIX_TWITTER + \"TWITTER] \""},{"lineNumber":35,"author":{"gitID":"kenpaxtonlim"},"content":"            + \"[\" + PREFIX_INSTAGRAM + \"INSTAGRAM] \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":42,"author":{"gitID":"kenpaxtonlim"},"content":"            + PREFIX_FACEBOOK + \"johndoe \""},{"lineNumber":43,"author":{"gitID":"kenpaxtonlim"},"content":"            + PREFIX_TWITTER + \"john_doe \""},{"lineNumber":44,"author":{"gitID":"kenpaxtonlim"},"content":"            + PREFIX_INSTAGRAM + \"johnnyjohn \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code ReadOnlyPerson}"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public AddCommand(ReadOnlyPerson person) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        toAdd \u003d new Person(person);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":65,"author":{"gitID":"500poundbear"},"content":"            EventsCenter.getInstance().post(new RefreshStatisticsPanelIfOpenEvent());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"500poundbear":3,"kenpaxtonlim":10,"-":66}},{"path":"src/main/java/seedu/address/logic/commands/FindTagCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"Zzmobie"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":3,"author":{"gitID":"Zzmobie"},"content":"import seedu.address.model.person.TagContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":5,"author":{"gitID":"Zzmobie"},"content":"//@@author Zzmobie"},{"lineNumber":6,"author":{"gitID":"Zzmobie"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Zzmobie"},"content":" * Finds and lists all persons in address book who has any tag containing any of the argument keywords."},{"lineNumber":8,"author":{"gitID":"Zzmobie"},"content":" * Keyword matching is case sensitive."},{"lineNumber":9,"author":{"gitID":"Zzmobie"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Zzmobie"},"content":"public class FindTagCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":12,"author":{"gitID":"Zzmobie"},"content":"    public static final String COMMAND_WORD \u003d \"findtag\";"},{"lineNumber":13,"author":{"gitID":"Zzmobie"},"content":"    public static final String COMMAND_ALIAS \u003d \"ft\";"},{"lineNumber":14,"author":{"gitID":"Zzmobie"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons who has any tag containing any \""},{"lineNumber":15,"author":{"gitID":"Zzmobie"},"content":"            + \"of the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":16,"author":{"gitID":"Zzmobie"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":17,"author":{"gitID":"Zzmobie"},"content":"            + \"Example: \" + COMMAND_WORD + \" friend colleague\";"},{"lineNumber":18,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":19,"author":{"gitID":"Zzmobie"},"content":"    private final TagContainsKeywordsPredicate predicate;"},{"lineNumber":20,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":21,"author":{"gitID":"Zzmobie"},"content":"    public FindTagCommand(TagContainsKeywordsPredicate predicate) {"},{"lineNumber":22,"author":{"gitID":"Zzmobie"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":23,"author":{"gitID":"Zzmobie"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":25,"author":{"gitID":"Zzmobie"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"Zzmobie"},"content":"    public CommandResult execute() {"},{"lineNumber":27,"author":{"gitID":"Zzmobie"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":28,"author":{"gitID":"Zzmobie"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":29,"author":{"gitID":"Zzmobie"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":31,"author":{"gitID":"Zzmobie"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"Zzmobie"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitID":"Zzmobie"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":34,"author":{"gitID":"Zzmobie"},"content":"                || (other instanceof FindTagCommand // instanceof handles nulls"},{"lineNumber":35,"author":{"gitID":"Zzmobie"},"content":"                \u0026\u0026 this.predicate.equals(((FindTagCommand) other).predicate)); // state check"},{"lineNumber":36,"author":{"gitID":"Zzmobie"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Zzmobie"},"content":"}"}],"authorContributionMap":{"Zzmobie":37}},{"path":"src/main/java/seedu/address/logic/commands/HelpCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Format full help instructions for every command for display."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class HelpCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";"},{"lineNumber":12,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String COMMAND_ALIAS \u003d \"h\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""},{"lineNumber":14,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kenpaxtonlim":1,"-":22}},{"path":"src/main/java/seedu/address/logic/parser/FindTagCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"Zzmobie"},"content":"import seedu.address.logic.commands.FindTagCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"Zzmobie"},"content":"import seedu.address.model.person.TagContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":11,"author":{"gitID":"Zzmobie"},"content":"//@@author Zzmobie"},{"lineNumber":12,"author":{"gitID":"Zzmobie"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Zzmobie"},"content":" * Parses input arguments and creates a new FindTagCommand object"},{"lineNumber":14,"author":{"gitID":"Zzmobie"},"content":" */"},{"lineNumber":15,"author":{"gitID":"Zzmobie"},"content":"public class FindTagCommandParser implements Parser\u003cFindTagCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":17,"author":{"gitID":"Zzmobie"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"Zzmobie"},"content":"     * Parses the given {@code String} of arguments in the context of the FindTagCommand"},{"lineNumber":19,"author":{"gitID":"Zzmobie"},"content":"     * and returns an FindTagCommand object for execution."},{"lineNumber":20,"author":{"gitID":"Zzmobie"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"Zzmobie"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"Zzmobie"},"content":"    public FindTagCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"Zzmobie"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":24,"author":{"gitID":"Zzmobie"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":25,"author":{"gitID":"Zzmobie"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"Zzmobie"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTagCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"Zzmobie"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":29,"author":{"gitID":"Zzmobie"},"content":"        String[] tagKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":30,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":31,"author":{"gitID":"Zzmobie"},"content":"        return new FindTagCommand(new TagContainsKeywordsPredicate(Arrays.asList(tagKeywords)));"},{"lineNumber":32,"author":{"gitID":"Zzmobie"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":34,"author":{"gitID":"Zzmobie"},"content":"}"}],"authorContributionMap":{"Zzmobie":27,"-":7}},{"path":"src/main/java/seedu/address/logic/commands/QuickHelpCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"donjar"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"donjar"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":4,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":5,"author":{"gitID":"kenpaxtonlim"},"content":"//@@author kenpaxtonlim"},{"lineNumber":6,"author":{"gitID":"kenpaxtonlim"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"kenpaxtonlim"},"content":" * Show a list of valid command words."},{"lineNumber":8,"author":{"gitID":"kenpaxtonlim"},"content":" */"},{"lineNumber":9,"author":{"gitID":"kenpaxtonlim"},"content":"public class QuickHelpCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":11,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String COMMAND_WORD \u003d \"quickhelp\";"},{"lineNumber":12,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String COMMAND_ALIAS \u003d \"qh\";"},{"lineNumber":13,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":14,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String MESSAGE \u003d \"Valid Command Words:\\n\""},{"lineNumber":15,"author":{"gitID":"kenpaxtonlim"},"content":"            + SelectCommand.COMMAND_WORD + \" \""},{"lineNumber":16,"author":{"gitID":"kenpaxtonlim"},"content":"            + ListCommand.COMMAND_WORD + \" \""},{"lineNumber":17,"author":{"gitID":"kenpaxtonlim"},"content":"            + AddCommand.COMMAND_WORD + \" \""},{"lineNumber":18,"author":{"gitID":"kenpaxtonlim"},"content":"            + DeleteCommand.COMMAND_WORD + \" \""},{"lineNumber":19,"author":{"gitID":"kenpaxtonlim"},"content":"            + EditCommand.COMMAND_WORD + \" \""},{"lineNumber":20,"author":{"gitID":"kenpaxtonlim"},"content":"            + ClearCommand.COMMAND_WORD + \" \""},{"lineNumber":21,"author":{"gitID":"kenpaxtonlim"},"content":"            + RemarkCommand.COMMAND_WORD + \" \""},{"lineNumber":22,"author":{"gitID":"kenpaxtonlim"},"content":"            + AddRemoveTagsCommand.COMMAND_WORD + \" \""},{"lineNumber":23,"author":{"gitID":"kenpaxtonlim"},"content":"            + FindCommand.COMMAND_WORD + \" \""},{"lineNumber":24,"author":{"gitID":"kenpaxtonlim"},"content":"            + FindRegexCommand.COMMAND_WORD + \" \""},{"lineNumber":25,"author":{"gitID":"kenpaxtonlim"},"content":"            + FindTagCommand.COMMAND_WORD + \" \""},{"lineNumber":26,"author":{"gitID":"kenpaxtonlim"},"content":"            + SocialMediaCommand.COMMAND_WORD + \" \""},{"lineNumber":27,"author":{"gitID":"kenpaxtonlim"},"content":"            + StatisticsCommand.COMMAND_WORD + \" \""},{"lineNumber":28,"author":{"gitID":"kenpaxtonlim"},"content":"            + SizeCommand.COMMAND_WORD + \" \""},{"lineNumber":29,"author":{"gitID":"kenpaxtonlim"},"content":"            + ToggleAccessDisplayCommand.COMMAND_WORD + \" \""},{"lineNumber":30,"author":{"gitID":"kenpaxtonlim"},"content":"            + UndoCommand.COMMAND_WORD + \" \""},{"lineNumber":31,"author":{"gitID":"kenpaxtonlim"},"content":"            + RedoCommand.COMMAND_WORD + \" \""},{"lineNumber":32,"author":{"gitID":"kenpaxtonlim"},"content":"            + HistoryCommand.COMMAND_WORD + \" \""},{"lineNumber":33,"author":{"gitID":"kenpaxtonlim"},"content":"            + HelpCommand.COMMAND_WORD + \" \""},{"lineNumber":34,"author":{"gitID":"kenpaxtonlim"},"content":"            + ExitCommand.COMMAND_WORD;"},{"lineNumber":35,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":36,"author":{"gitID":"kenpaxtonlim"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"kenpaxtonlim"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":38,"author":{"gitID":"kenpaxtonlim"},"content":"        return new CommandResult(MESSAGE);"},{"lineNumber":39,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":41,"author":{"gitID":"kenpaxtonlim"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"kenpaxtonlim"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"kenpaxtonlim"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"kenpaxtonlim"},"content":"                || (other instanceof QuickHelpCommand); // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"kenpaxtonlim"},"content":"}"}],"authorContributionMap":{"kenpaxtonlim":43,"donjar":2,"-":1}},{"path":"src/main/java/seedu/address/logic/commands/HistoryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Lists all the commands entered by user from the start of app launch."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class HistoryCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"history\";"},{"lineNumber":18,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String COMMAND_ALIAS \u003d \"his\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        List\u003cString\u003e previousCommands \u003d history.getHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        if (previousCommands.isEmpty()) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_NO_HISTORY);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Collections.reverse(previousCommands);"},{"lineNumber":31,"author":{"gitID":"donjar"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, HistoryCommand.getHistoryText(previousCommands)));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"donjar"},"content":"    // @@author donjar"},{"lineNumber":35,"author":{"gitID":"donjar"},"content":""},{"lineNumber":36,"author":{"gitID":"donjar"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"donjar"},"content":"     * Returns the text displayed when executing the `history` command."},{"lineNumber":38,"author":{"gitID":"donjar"},"content":"     * @param previousCommands a list containing the previous commands"},{"lineNumber":39,"author":{"gitID":"donjar"},"content":"     * @return the text displayed when executing the `history` command"},{"lineNumber":40,"author":{"gitID":"donjar"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"donjar"},"content":"    public static String getHistoryText(List\u003cString\u003e previousCommands) {"},{"lineNumber":42,"author":{"gitID":"donjar"},"content":"        StringBuilder historyText \u003d new StringBuilder();"},{"lineNumber":43,"author":{"gitID":"donjar"},"content":""},{"lineNumber":44,"author":{"gitID":"donjar"},"content":"        int idx \u003d 1;"},{"lineNumber":45,"author":{"gitID":"donjar"},"content":"        for (String command : previousCommands) {"},{"lineNumber":46,"author":{"gitID":"donjar"},"content":"            historyText.append(String.format(\"(%1$s) %2$s\", idx, command));"},{"lineNumber":47,"author":{"gitID":"donjar"},"content":"            if (idx !\u003d previousCommands.size()) {"},{"lineNumber":48,"author":{"gitID":"donjar"},"content":"                historyText.append(\"\\n\");"},{"lineNumber":49,"author":{"gitID":"donjar"},"content":"            }"},{"lineNumber":50,"author":{"gitID":"donjar"},"content":"            idx++;"},{"lineNumber":51,"author":{"gitID":"donjar"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"donjar"},"content":""},{"lineNumber":53,"author":{"gitID":"donjar"},"content":"        return historyText.toString();"},{"lineNumber":54,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"donjar"},"content":"    // @@author"},{"lineNumber":56,"author":{"gitID":"donjar"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        requireNonNull(history);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.history \u003d history;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kenpaxtonlim":1,"donjar":24,"-":37}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"500poundbear"},"content":"import java.util.Date;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"500poundbear"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"500poundbear"},"content":"import seedu.address.commons.events.ui.RefreshStatisticsPanelIfOpenEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"Zzmobie"},"content":"import seedu.address.model.person.AccessCount;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":29,"author":{"gitID":"500poundbear"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":30,"author":{"gitID":"kenpaxtonlim"},"content":"import seedu.address.model.person.SocialMedia;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":41,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String COMMAND_ALIAS \u003d \"e\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        ReadOnlyPerson personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":87,"author":{"gitID":"500poundbear"},"content":"            EventsCenter.getInstance().post(new RefreshStatisticsPanelIfOpenEvent());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(ReadOnlyPerson personToEdit,"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                                             EditPersonDescriptor editPersonDescriptor)  {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":109,"author":{"gitID":"500poundbear"},"content":"        Remark updatedRemark \u003d personToEdit.getRemark();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":111,"author":{"gitID":"500poundbear"},"content":"        Date createdAt \u003d editPersonDescriptor.getCreatedAt().orElse(personToEdit.getCreatedAt());"},{"lineNumber":112,"author":{"gitID":"Zzmobie"},"content":"        AccessCount accessCount \u003d new AccessCount(personToEdit.getAccessCount().numAccess() + 1);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"kenpaxtonlim"},"content":"        SocialMedia updatedSocialMedia;"},{"lineNumber":115,"author":{"gitID":"kenpaxtonlim"},"content":"        if (editPersonDescriptor.getSocialMedia().isPresent()) {"},{"lineNumber":116,"author":{"gitID":"kenpaxtonlim"},"content":"            updatedSocialMedia \u003d new SocialMedia(personToEdit.getSocialMedia(),"},{"lineNumber":117,"author":{"gitID":"kenpaxtonlim"},"content":"                    editPersonDescriptor.getSocialMedia().get());"},{"lineNumber":118,"author":{"gitID":"kenpaxtonlim"},"content":"        } else {"},{"lineNumber":119,"author":{"gitID":"kenpaxtonlim"},"content":"            updatedSocialMedia \u003d personToEdit.getSocialMedia();"},{"lineNumber":120,"author":{"gitID":"kenpaxtonlim"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":122,"author":{"gitID":"500poundbear"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedRemark,"},{"lineNumber":123,"author":{"gitID":"Zzmobie"},"content":"                updatedTags, createdAt, updatedSocialMedia, accessCount);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":141,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":154,"author":{"gitID":"500poundbear"},"content":"        private Date createdAt;"},{"lineNumber":155,"author":{"gitID":"kenpaxtonlim"},"content":"        private SocialMedia socialMedia;"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            this.name \u003d toCopy.name;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            this.phone \u003d toCopy.phone;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            this.email \u003d toCopy.email;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            this.address \u003d toCopy.address;"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            this.tags \u003d toCopy.tags;"},{"lineNumber":165,"author":{"gitID":"500poundbear"},"content":"            this.createdAt \u003d toCopy.createdAt;"},{"lineNumber":166,"author":{"gitID":"kenpaxtonlim"},"content":"            this.socialMedia \u003d toCopy.socialMedia;"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":170,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":171,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":173,"author":{"gitID":"500poundbear"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address,"},{"lineNumber":174,"author":{"gitID":"kenpaxtonlim"},"content":"                    this.tags, this.createdAt, this.socialMedia);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            this.tags \u003d tags;"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(tags);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"500poundbear"},"content":"        public void setCreatedAt(Date createdAt) {"},{"lineNumber":218,"author":{"gitID":"500poundbear"},"content":"            this.createdAt \u003d createdAt;"},{"lineNumber":219,"author":{"gitID":"500poundbear"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":221,"author":{"gitID":"500poundbear"},"content":"        public Optional\u003cDate\u003e getCreatedAt() {"},{"lineNumber":222,"author":{"gitID":"500poundbear"},"content":"            return Optional.ofNullable(createdAt);"},{"lineNumber":223,"author":{"gitID":"500poundbear"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":225,"author":{"gitID":"kenpaxtonlim"},"content":"        public void setSocialMedia(SocialMedia socialMedia) {"},{"lineNumber":226,"author":{"gitID":"kenpaxtonlim"},"content":"            this.socialMedia \u003d socialMedia;"},{"lineNumber":227,"author":{"gitID":"kenpaxtonlim"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":229,"author":{"gitID":"kenpaxtonlim"},"content":"        public Optional\u003cSocialMedia\u003e getSocialMedia() {"},{"lineNumber":230,"author":{"gitID":"kenpaxtonlim"},"content":"            return Optional.ofNullable(socialMedia);"},{"lineNumber":231,"author":{"gitID":"kenpaxtonlim"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":236,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":238,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":243,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":246,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":249,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":250,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":251,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":252,"author":{"gitID":"500poundbear"},"content":"                    \u0026\u0026 getTags().equals(e.getTags())"},{"lineNumber":253,"author":{"gitID":"kenpaxtonlim"},"content":"                    \u0026\u0026 getCreatedAt().equals(e.getCreatedAt())"},{"lineNumber":254,"author":{"gitID":"kenpaxtonlim"},"content":"                    \u0026\u0026 getSocialMedia().equals(e.getSocialMedia());"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"500poundbear":21,"Zzmobie":3,"kenpaxtonlim":22,"-":211}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"500poundbear"},"content":"import seedu.address.commons.events.ui.ToggleBrowserPanelEvent;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":19,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String COMMAND_ALIAS \u003d \"s\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"500poundbear"},"content":"        EventsCenter.getInstance().post(new ToggleBrowserPanelEvent());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"500poundbear":2,"kenpaxtonlim":1,"-":49}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Undo the previous {@code UndoableCommand}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class UndoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";"},{"lineNumber":16,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String COMMAND_ALIAS \u003d \"u\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"},{"lineNumber":18,"author":{"gitID":"donjar"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":19,"author":{"gitID":"donjar"},"content":"            + \": Undo a number of commands.\\n\""},{"lineNumber":20,"author":{"gitID":"donjar"},"content":"            + \"Parameters: NUMBER_OF_COMMANDS_TO_UNDO (must be a positive integer)\\n\""},{"lineNumber":21,"author":{"gitID":"donjar"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":22,"author":{"gitID":"donjar"},"content":""},{"lineNumber":23,"author":{"gitID":"donjar"},"content":"    // @@author donjar"},{"lineNumber":24,"author":{"gitID":"donjar"},"content":"    private final int amount;"},{"lineNumber":25,"author":{"gitID":"donjar"},"content":""},{"lineNumber":26,"author":{"gitID":"donjar"},"content":"    public UndoCommand(int amount) {"},{"lineNumber":27,"author":{"gitID":"donjar"},"content":"        this.amount \u003d amount;"},{"lineNumber":28,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"donjar"},"content":"    // @@author"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canUndo()) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"donjar"},"content":"        // @@author donjar"},{"lineNumber":40,"author":{"gitID":"donjar"},"content":"        int commandsUndoed \u003d 0;"},{"lineNumber":41,"author":{"gitID":"donjar"},"content":"        while (undoRedoStack.canUndo() \u0026\u0026 commandsUndoed \u003c amount) {"},{"lineNumber":42,"author":{"gitID":"donjar"},"content":"            undoRedoStack.popUndo().undo();"},{"lineNumber":43,"author":{"gitID":"donjar"},"content":"            commandsUndoed++;"},{"lineNumber":44,"author":{"gitID":"donjar"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"donjar"},"content":"        return new CommandResult(getSuccessMessage(commandsUndoed));"},{"lineNumber":46,"author":{"gitID":"donjar"},"content":"        // @@author"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"donjar"},"content":""},{"lineNumber":55,"author":{"gitID":"donjar"},"content":"    // @@author donjar"},{"lineNumber":56,"author":{"gitID":"donjar"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"donjar"},"content":"    public boolean equals(Object other) {"},{"lineNumber":58,"author":{"gitID":"donjar"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":59,"author":{"gitID":"donjar"},"content":"                || (other instanceof UndoCommand // instanceof handles nulls"},{"lineNumber":60,"author":{"gitID":"donjar"},"content":"                \u0026\u0026 this.amount \u003d\u003d ((UndoCommand) other).amount); // state check"},{"lineNumber":61,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"donjar"},"content":""},{"lineNumber":63,"author":{"gitID":"donjar"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"donjar"},"content":"     * Constructs the success message from the given amount. This takes into account that the number of commands"},{"lineNumber":65,"author":{"gitID":"donjar"},"content":"     * undone influences the singular/plural form of \"command\"."},{"lineNumber":66,"author":{"gitID":"donjar"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"donjar"},"content":"    public static String getSuccessMessage(int amount) {"},{"lineNumber":68,"author":{"gitID":"donjar"},"content":"        if (amount \u003d\u003d 1) {"},{"lineNumber":69,"author":{"gitID":"donjar"},"content":"            return \"1 command undoed.\";"},{"lineNumber":70,"author":{"gitID":"donjar"},"content":"        } else {"},{"lineNumber":71,"author":{"gitID":"donjar"},"content":"            return String.format(\"%1$s commands undoed.\", amount);"},{"lineNumber":72,"author":{"gitID":"donjar"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"donjar"},"content":"    // @@author"},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kenpaxtonlim":1,"donjar":41,"-":33}},{"path":"src/main/java/seedu/address/logic/commands/RemarkCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"500poundbear"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":5,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"Zzmobie"},"content":"import seedu.address.model.person.AccessCount;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":14,"author":{"gitID":"500poundbear"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":17,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":18,"author":{"gitID":"500poundbear"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"500poundbear"},"content":" * Changes the remark of an existing person in the address book."},{"lineNumber":20,"author":{"gitID":"500poundbear"},"content":" */"},{"lineNumber":21,"author":{"gitID":"500poundbear"},"content":"public class RemarkCommand extends UndoableCommand {"},{"lineNumber":22,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":23,"author":{"gitID":"500poundbear"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";"},{"lineNumber":24,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":25,"author":{"gitID":"500poundbear"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":27,"author":{"gitID":"500poundbear"},"content":"            + \"Existing remark will be overwritten by the input.\\n\""},{"lineNumber":28,"author":{"gitID":"500poundbear"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":29,"author":{"gitID":"500poundbear"},"content":"            + PREFIX_REMARK + \"[REMARK]\\n\""},{"lineNumber":30,"author":{"gitID":"500poundbear"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":31,"author":{"gitID":"500poundbear"},"content":"            + PREFIX_REMARK + \"Likes to swim.\";"},{"lineNumber":32,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":33,"author":{"gitID":"500poundbear"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"},{"lineNumber":34,"author":{"gitID":"500poundbear"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":38,"author":{"gitID":"500poundbear"},"content":"    private final Remark remark;"},{"lineNumber":39,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":40,"author":{"gitID":"500poundbear"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"500poundbear"},"content":"     * @param index of the person in the filtered person list to edit the remark"},{"lineNumber":42,"author":{"gitID":"500poundbear"},"content":"     * @param remark of the person"},{"lineNumber":43,"author":{"gitID":"500poundbear"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"500poundbear"},"content":"    public RemarkCommand(Index index, Remark remark) {"},{"lineNumber":45,"author":{"gitID":"500poundbear"},"content":"        requireNonNull(index);"},{"lineNumber":46,"author":{"gitID":"500poundbear"},"content":"        requireNonNull(remark);"},{"lineNumber":47,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":48,"author":{"gitID":"500poundbear"},"content":"        this.index \u003d index;"},{"lineNumber":49,"author":{"gitID":"500poundbear"},"content":"        this.remark \u003d remark;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        ReadOnlyPerson personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":61,"author":{"gitID":"Zzmobie"},"content":"        AccessCount accessCount \u003d new AccessCount(personToEdit.getAccessCount().numAccess() + 1);"},{"lineNumber":62,"author":{"gitID":"500poundbear"},"content":"        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"},{"lineNumber":63,"author":{"gitID":"kenpaxtonlim"},"content":"                personToEdit.getAddress(), remark, personToEdit.getTags(), personToEdit.getCreatedAt(),"},{"lineNumber":64,"author":{"gitID":"Zzmobie"},"content":"                personToEdit.getSocialMedia(), accessCount);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":73,"author":{"gitID":"500poundbear"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));"},{"lineNumber":74,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":76,"author":{"gitID":"500poundbear"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"500poundbear"},"content":"     * Returns a message describing whether remark was successfully added or not"},{"lineNumber":78,"author":{"gitID":"500poundbear"},"content":"     **/"},{"lineNumber":79,"author":{"gitID":"500poundbear"},"content":"    private String generateSuccessMessage(ReadOnlyPerson personToEdit) {"},{"lineNumber":80,"author":{"gitID":"500poundbear"},"content":"        if (!remark.value.isEmpty()) {"},{"lineNumber":81,"author":{"gitID":"500poundbear"},"content":"            return String.format(MESSAGE_ADD_REMARK_SUCCESS, personToEdit);"},{"lineNumber":82,"author":{"gitID":"500poundbear"},"content":"        } else {"},{"lineNumber":83,"author":{"gitID":"500poundbear"},"content":"            return String.format(MESSAGE_DELETE_REMARK_SUCCESS, personToEdit);"},{"lineNumber":84,"author":{"gitID":"500poundbear"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":95,"author":{"gitID":"500poundbear"},"content":"        if (!(other instanceof RemarkCommand)) {"},{"lineNumber":96,"author":{"gitID":"500poundbear"},"content":"            return false;"},{"lineNumber":97,"author":{"gitID":"500poundbear"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":99,"author":{"gitID":"500poundbear"},"content":"        // state check"},{"lineNumber":100,"author":{"gitID":"500poundbear"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;"},{"lineNumber":101,"author":{"gitID":"500poundbear"},"content":"        return index.equals(e.index)"},{"lineNumber":102,"author":{"gitID":"500poundbear"},"content":"                \u0026\u0026 remark.equals(e.remark);"},{"lineNumber":103,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"500poundbear"},"content":"}"}],"authorContributionMap":{"500poundbear":56,"Zzmobie":3,"kenpaxtonlim":1,"-":44}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":12,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String COMMAND_ALIAS \u003d \"f\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""},{"lineNumber":14,"author":{"gitID":"-"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kenpaxtonlim":1,"-":35}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Terminates the program."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class ExitCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";"},{"lineNumber":12,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String COMMAND_ALIAS \u003d \"ex\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ExitAppRequestEvent());"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kenpaxtonlim":1,"-":20}},{"path":"src/main/java/seedu/address/logic/commands/StatisticsCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"500poundbear"},"content":"import seedu.address.commons.events.ui.ToggleStatisticsPanelEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":7,"author":{"gitID":"500poundbear"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"500poundbear"},"content":" * Displays the statistics of the address book to the user."},{"lineNumber":9,"author":{"gitID":"500poundbear"},"content":" */"},{"lineNumber":10,"author":{"gitID":"500poundbear"},"content":"public class StatisticsCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"500poundbear"},"content":"    public static final String COMMAND_WORD \u003d \"statistics\";"},{"lineNumber":12,"author":{"gitID":"500poundbear"},"content":"    public static final String COMMAND_ALIAS \u003d \"st\";"},{"lineNumber":13,"author":{"gitID":"donjar"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":14,"author":{"gitID":"500poundbear"},"content":"            + \": Displays the statistics of the address book to the user.\\n\""},{"lineNumber":15,"author":{"gitID":"500poundbear"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":16,"author":{"gitID":"500poundbear"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed statistics\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":20,"author":{"gitID":"500poundbear"},"content":"        EventsCenter.getInstance().post(new ToggleStatisticsPanelEvent());"},{"lineNumber":21,"author":{"gitID":"500poundbear"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"500poundbear"},"content":"}"}],"authorContributionMap":{"500poundbear":15,"donjar":1,"-":7}},{"path":"src/main/java/seedu/address/logic/commands/FindRegexCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"donjar"},"content":"// @@author donjar"},{"lineNumber":2,"author":{"gitID":"donjar"},"content":""},{"lineNumber":3,"author":{"gitID":"donjar"},"content":"package seedu.address.logic.commands;"},{"lineNumber":4,"author":{"gitID":"donjar"},"content":""},{"lineNumber":5,"author":{"gitID":"donjar"},"content":"import seedu.address.model.person.NameMatchesRegexPredicate;"},{"lineNumber":6,"author":{"gitID":"donjar"},"content":""},{"lineNumber":7,"author":{"gitID":"donjar"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"donjar"},"content":" * Finds and lists all persons in address book whose name is matched by the regex given."},{"lineNumber":9,"author":{"gitID":"donjar"},"content":" * Keyword matching is case sensitive."},{"lineNumber":10,"author":{"gitID":"donjar"},"content":" */"},{"lineNumber":11,"author":{"gitID":"donjar"},"content":"public class FindRegexCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"donjar"},"content":""},{"lineNumber":13,"author":{"gitID":"donjar"},"content":"    public static final String COMMAND_WORD \u003d \"findregex\";"},{"lineNumber":14,"author":{"gitID":"donjar"},"content":"    public static final String COMMAND_ALIAS \u003d \"fr\";"},{"lineNumber":15,"author":{"gitID":"donjar"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names match \""},{"lineNumber":16,"author":{"gitID":"donjar"},"content":"            + \"the specified regex and displays them as a list with index numbers.\\n\""},{"lineNumber":17,"author":{"gitID":"donjar"},"content":"            + \"Parameters: REGEX\\n\""},{"lineNumber":18,"author":{"gitID":"donjar"},"content":"            + \"Example: \" + COMMAND_WORD + \" ^Joh?n$\";"},{"lineNumber":19,"author":{"gitID":"donjar"},"content":""},{"lineNumber":20,"author":{"gitID":"donjar"},"content":"    private final NameMatchesRegexPredicate predicate;"},{"lineNumber":21,"author":{"gitID":"donjar"},"content":""},{"lineNumber":22,"author":{"gitID":"donjar"},"content":"    public FindRegexCommand(NameMatchesRegexPredicate predicate) {"},{"lineNumber":23,"author":{"gitID":"donjar"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":24,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"donjar"},"content":""},{"lineNumber":26,"author":{"gitID":"donjar"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"donjar"},"content":"    public CommandResult execute() {"},{"lineNumber":28,"author":{"gitID":"donjar"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":29,"author":{"gitID":"donjar"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":30,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"donjar"},"content":""},{"lineNumber":32,"author":{"gitID":"donjar"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"donjar"},"content":"    public boolean equals(Object other) {"},{"lineNumber":34,"author":{"gitID":"donjar"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":35,"author":{"gitID":"donjar"},"content":"                || (other instanceof FindRegexCommand // instanceof handles nulls"},{"lineNumber":36,"author":{"gitID":"donjar"},"content":"                \u0026\u0026 this.predicate.equals(((FindRegexCommand) other).predicate)); // state check"},{"lineNumber":37,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"donjar"},"content":"}"}],"authorContributionMap":{"donjar":38}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.history \u003d new CommandHistory();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.addressBookParser \u003d new AddressBookParser();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"500poundbear"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"500poundbear"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getAllPersonList() {"},{"lineNumber":50,"author":{"gitID":"500poundbear"},"content":"        return model.getAllPersonList();"},{"lineNumber":51,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"donjar"},"content":""},{"lineNumber":63,"author":{"gitID":"donjar"},"content":"    // @@author donjar"},{"lineNumber":64,"author":{"gitID":"donjar"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"donjar"},"content":"    public int getFontSizeChange() {"},{"lineNumber":66,"author":{"gitID":"donjar"},"content":"        return model.getFontSizeChange();"},{"lineNumber":67,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"donjar"},"content":"    // @@author"},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"500poundbear":5,"donjar":7,"-":57}},{"path":"src/main/java/seedu/address/logic/commands/SocialMediaCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"Zzmobie"},"content":"import seedu.address.commons.events.model.AddressBookAccessChangedEvent;"},{"lineNumber":9,"author":{"gitID":"kenpaxtonlim"},"content":"import seedu.address.commons.events.ui.ChangeBrowserPanelUrlEvent;"},{"lineNumber":10,"author":{"gitID":"500poundbear"},"content":"import seedu.address.commons.events.ui.ToggleBrowserPanelEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"kenpaxtonlim"},"content":"//@@author kenpaxtonlim"},{"lineNumber":15,"author":{"gitID":"kenpaxtonlim"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"kenpaxtonlim"},"content":" * Display social media page of the person identified using it\u0027s last displayed index from the address book."},{"lineNumber":17,"author":{"gitID":"kenpaxtonlim"},"content":" */"},{"lineNumber":18,"author":{"gitID":"kenpaxtonlim"},"content":"public class SocialMediaCommand extends Command {"},{"lineNumber":19,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":20,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String COMMAND_WORD \u003d \"socialmedia\";"},{"lineNumber":21,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String COMMAND_ALIAS \u003d \"sm\";"},{"lineNumber":22,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"kenpaxtonlim"},"content":"            + \": Shows the social media of the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":24,"author":{"gitID":"kenpaxtonlim"},"content":"            + \"Parameters: TYPE (either \\\"facebook\\\", \\\"twitter\\\", or\\\"instagram\\\")\""},{"lineNumber":25,"author":{"gitID":"kenpaxtonlim"},"content":"            + \"INDEX (must be a positive integer)\\n\""},{"lineNumber":26,"author":{"gitID":"kenpaxtonlim"},"content":"            + \"Example: \" + COMMAND_WORD + \" facebook 1\";"},{"lineNumber":27,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":28,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String TYPE_FACEBOOK \u003d \"facebook\";"},{"lineNumber":29,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String TYPE_TWITTER \u003d \"twitter\";"},{"lineNumber":30,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String TYPE_INSTAGRAM \u003d \"instagram\";"},{"lineNumber":31,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":32,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String URL_FACEBOOK \u003d \"https://www.facebook.com/\";"},{"lineNumber":33,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String URL_TWITTER \u003d \"https://twitter.com/\";"},{"lineNumber":34,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String URL_INSTAGRAM \u003d \"https://www.instagram.com/\";"},{"lineNumber":35,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":36,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Social media shown!\";"},{"lineNumber":37,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String MESSAGE_NO_FACEBOOK \u003d \"This person has no facebook.\";"},{"lineNumber":38,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String MESSAGE_NO_TWITTER \u003d \"This person has no twitter.\";"},{"lineNumber":39,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String MESSAGE_NO_INSTAGRAM \u003d \"This person has no instagram.\";"},{"lineNumber":40,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String MESSAGE_INVALID_TYPE \u003d \"No such social media type.\";"},{"lineNumber":41,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":42,"author":{"gitID":"kenpaxtonlim"},"content":"    private final Index targetIndex;"},{"lineNumber":43,"author":{"gitID":"kenpaxtonlim"},"content":"    private final String type;"},{"lineNumber":44,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":45,"author":{"gitID":"kenpaxtonlim"},"content":"    public SocialMediaCommand(Index targetIndex, String type) {"},{"lineNumber":46,"author":{"gitID":"kenpaxtonlim"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":47,"author":{"gitID":"kenpaxtonlim"},"content":"        this.type \u003d type;"},{"lineNumber":48,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":50,"author":{"gitID":"kenpaxtonlim"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"kenpaxtonlim"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"kenpaxtonlim"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":53,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":54,"author":{"gitID":"kenpaxtonlim"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":55,"author":{"gitID":"kenpaxtonlim"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"kenpaxtonlim"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"kenpaxtonlim"},"content":"        ReadOnlyPerson personToEdit \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":58,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":59,"author":{"gitID":"kenpaxtonlim"},"content":"        switch(type) {"},{"lineNumber":60,"author":{"gitID":"kenpaxtonlim"},"content":"        case TYPE_FACEBOOK:"},{"lineNumber":61,"author":{"gitID":"kenpaxtonlim"},"content":"            if (personToEdit.getSocialMedia().facebook.equals(\"\")) {"},{"lineNumber":62,"author":{"gitID":"kenpaxtonlim"},"content":"                throw new CommandException(MESSAGE_NO_FACEBOOK);"},{"lineNumber":63,"author":{"gitID":"kenpaxtonlim"},"content":"            } else {"},{"lineNumber":64,"author":{"gitID":"kenpaxtonlim"},"content":"                EventsCenter.getInstance().post(new ToggleBrowserPanelEvent());"},{"lineNumber":65,"author":{"gitID":"kenpaxtonlim"},"content":"                EventsCenter.getInstance().post(new AddressBookAccessChangedEvent(personToEdit));"},{"lineNumber":66,"author":{"gitID":"kenpaxtonlim"},"content":"                EventsCenter.getInstance().post(new ChangeBrowserPanelUrlEvent("},{"lineNumber":67,"author":{"gitID":"kenpaxtonlim"},"content":"                        URL_FACEBOOK + personToEdit.getSocialMedia().facebook));"},{"lineNumber":68,"author":{"gitID":"kenpaxtonlim"},"content":"            }"},{"lineNumber":69,"author":{"gitID":"kenpaxtonlim"},"content":"            break;"},{"lineNumber":70,"author":{"gitID":"kenpaxtonlim"},"content":"        case TYPE_TWITTER:"},{"lineNumber":71,"author":{"gitID":"kenpaxtonlim"},"content":"            if (personToEdit.getSocialMedia().twitter.equals(\"\")) {"},{"lineNumber":72,"author":{"gitID":"kenpaxtonlim"},"content":"                throw new CommandException(MESSAGE_NO_TWITTER);"},{"lineNumber":73,"author":{"gitID":"kenpaxtonlim"},"content":"            } else {"},{"lineNumber":74,"author":{"gitID":"kenpaxtonlim"},"content":"                EventsCenter.getInstance().post(new ToggleBrowserPanelEvent());"},{"lineNumber":75,"author":{"gitID":"kenpaxtonlim"},"content":"                EventsCenter.getInstance().post(new AddressBookAccessChangedEvent(personToEdit));"},{"lineNumber":76,"author":{"gitID":"kenpaxtonlim"},"content":"                EventsCenter.getInstance().post(new ChangeBrowserPanelUrlEvent("},{"lineNumber":77,"author":{"gitID":"kenpaxtonlim"},"content":"                        URL_TWITTER + personToEdit.getSocialMedia().twitter));"},{"lineNumber":78,"author":{"gitID":"kenpaxtonlim"},"content":"            }"},{"lineNumber":79,"author":{"gitID":"kenpaxtonlim"},"content":"            break;"},{"lineNumber":80,"author":{"gitID":"kenpaxtonlim"},"content":"        case TYPE_INSTAGRAM:"},{"lineNumber":81,"author":{"gitID":"kenpaxtonlim"},"content":"            if (personToEdit.getSocialMedia().instagram.equals(\"\")) {"},{"lineNumber":82,"author":{"gitID":"kenpaxtonlim"},"content":"                throw new CommandException(MESSAGE_NO_INSTAGRAM);"},{"lineNumber":83,"author":{"gitID":"kenpaxtonlim"},"content":"            } else {"},{"lineNumber":84,"author":{"gitID":"kenpaxtonlim"},"content":"                EventsCenter.getInstance().post(new ToggleBrowserPanelEvent());"},{"lineNumber":85,"author":{"gitID":"kenpaxtonlim"},"content":"                EventsCenter.getInstance().post(new AddressBookAccessChangedEvent(personToEdit));"},{"lineNumber":86,"author":{"gitID":"kenpaxtonlim"},"content":"                EventsCenter.getInstance().post(new ChangeBrowserPanelUrlEvent("},{"lineNumber":87,"author":{"gitID":"kenpaxtonlim"},"content":"                        URL_INSTAGRAM + personToEdit.getSocialMedia().instagram));"},{"lineNumber":88,"author":{"gitID":"kenpaxtonlim"},"content":"            }"},{"lineNumber":89,"author":{"gitID":"kenpaxtonlim"},"content":"            break;"},{"lineNumber":90,"author":{"gitID":"kenpaxtonlim"},"content":"        default:"},{"lineNumber":91,"author":{"gitID":"kenpaxtonlim"},"content":"            throw new CommandException(MESSAGE_INVALID_TYPE);"},{"lineNumber":92,"author":{"gitID":"kenpaxtonlim"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":94,"author":{"gitID":"kenpaxtonlim"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":95,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":97,"author":{"gitID":"kenpaxtonlim"},"content":"    @Override"},{"lineNumber":98,"author":{"gitID":"kenpaxtonlim"},"content":"    public boolean equals(Object other) {"},{"lineNumber":99,"author":{"gitID":"kenpaxtonlim"},"content":"        // short circuit if same object"},{"lineNumber":100,"author":{"gitID":"kenpaxtonlim"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":101,"author":{"gitID":"kenpaxtonlim"},"content":"            return true;"},{"lineNumber":102,"author":{"gitID":"kenpaxtonlim"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":104,"author":{"gitID":"kenpaxtonlim"},"content":"        // instanceof handles nulls"},{"lineNumber":105,"author":{"gitID":"kenpaxtonlim"},"content":"        if (!(other instanceof SocialMediaCommand)) {"},{"lineNumber":106,"author":{"gitID":"kenpaxtonlim"},"content":"            return false;"},{"lineNumber":107,"author":{"gitID":"kenpaxtonlim"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":109,"author":{"gitID":"kenpaxtonlim"},"content":"        SocialMediaCommand e \u003d (SocialMediaCommand) other;"},{"lineNumber":110,"author":{"gitID":"kenpaxtonlim"},"content":"        return targetIndex.equals(e.targetIndex) \u0026\u0026 type.equals(e.type);"},{"lineNumber":111,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"kenpaxtonlim"},"content":"}"}],"authorContributionMap":{"500poundbear":1,"Zzmobie":1,"kenpaxtonlim":100,"-":10}},{"path":"src/main/java/seedu/address/storage/AddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a storage for {@link seedu.address.model.AddressBook}."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface AddressBookStorage {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns the file path of the data file."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @see #getAddressBookFilePath()"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @see #saveAddressBook(ReadOnlyAddressBook)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"Zzmobie"},"content":"    void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":45,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Zzmobie":2,"-":44}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            saveAddressBook(event.data);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"Zzmobie"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"Zzmobie"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":94,"author":{"gitID":"Zzmobie"},"content":"        saveAddressBook(addressBook, \"backup.xml\");"},{"lineNumber":95,"author":{"gitID":"Zzmobie"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Zzmobie":5,"-":92}},{"path":"src/main/java/seedu/address/storage/XmlAddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A class to access AddressBook data stored as an xml file on the hard disk."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorage implements AddressBookStorage {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public XmlAddressBookStorage(String filePath) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return readAddressBook(filePath);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Similar to {@link #readAddressBook()}"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException,"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                                                                                 FileNotFoundException {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        File addressBookFile \u003d new File(filePath);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        if (!addressBookFile.exists()) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            logger.info(\"AddressBook file \"  + addressBookFile + \" not found\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook addressBookOptional \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return Optional.of(addressBookOptional);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, filePath);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableAddressBook(addressBook));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"Zzmobie"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"Zzmobie"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":79,"author":{"gitID":"Zzmobie"},"content":"        saveAddressBook(addressBook, \"backup.xml\");"},{"lineNumber":80,"author":{"gitID":"Zzmobie"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Zzmobie":5,"-":77}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"500poundbear"},"content":"import java.util.Date;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"Zzmobie"},"content":"import seedu.address.model.person.AccessCount;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":19,"author":{"gitID":"500poundbear"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":20,"author":{"gitID":"kenpaxtonlim"},"content":"import seedu.address.model.person.SocialMedia;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":37,"author":{"gitID":"500poundbear"},"content":"    private String remark;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitID":"500poundbear"},"content":"    @XmlElement"},{"lineNumber":41,"author":{"gitID":"500poundbear"},"content":"    private Date createdAt;"},{"lineNumber":42,"author":{"gitID":"Zzmobie"},"content":"    @XmlElement"},{"lineNumber":43,"author":{"gitID":"Zzmobie"},"content":"    private int accessCount;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @XmlElement (required \u003d true)"},{"lineNumber":45,"author":{"gitID":"kenpaxtonlim"},"content":"    private String facebook;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @XmlElement (required \u003d true)"},{"lineNumber":47,"author":{"gitID":"kenpaxtonlim"},"content":"    private String twitter;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @XmlElement (required \u003d true)"},{"lineNumber":49,"author":{"gitID":"kenpaxtonlim"},"content":"    private String instagram;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(ReadOnlyPerson source) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":68,"author":{"gitID":"500poundbear"},"content":"        remark \u003d source.getRemark().value;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"Zzmobie"},"content":"        accessCount \u003d source.getAccessCount().numAccess();"},{"lineNumber":74,"author":{"gitID":"500poundbear"},"content":"        createdAt \u003d source.getCreatedAt();"},{"lineNumber":75,"author":{"gitID":"kenpaxtonlim"},"content":"        facebook \u003d source.getSocialMedia().facebook;"},{"lineNumber":76,"author":{"gitID":"kenpaxtonlim"},"content":"        twitter \u003d source.getSocialMedia().twitter;"},{"lineNumber":77,"author":{"gitID":"kenpaxtonlim"},"content":"        instagram \u003d source.getSocialMedia().instagram;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":94,"author":{"gitID":"500poundbear"},"content":"        final Remark remark \u003d new Remark(this.remark);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":96,"author":{"gitID":"500poundbear"},"content":"        final Date createdAt;"},{"lineNumber":97,"author":{"gitID":"Zzmobie"},"content":"        final AccessCount accessCount \u003d new AccessCount(this.accessCount);"},{"lineNumber":98,"author":{"gitID":"kenpaxtonlim"},"content":"        final SocialMedia socialMedia \u003d new SocialMedia("},{"lineNumber":99,"author":{"gitID":"kenpaxtonlim"},"content":"                facebook \u003d\u003d null ? \"\" : facebook, twitter \u003d\u003d null ? \"\" : twitter, instagram \u003d\u003d null ? \"\" : instagram);"},{"lineNumber":100,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":101,"author":{"gitID":"500poundbear"},"content":"        if (this.createdAt \u003d\u003d null) {"},{"lineNumber":102,"author":{"gitID":"500poundbear"},"content":"            // In the event that there is no createdAt attribute for that person"},{"lineNumber":103,"author":{"gitID":"500poundbear"},"content":"            createdAt \u003d new Date();"},{"lineNumber":104,"author":{"gitID":"500poundbear"},"content":"        } else {"},{"lineNumber":105,"author":{"gitID":"500poundbear"},"content":"            createdAt \u003d new Date(this.createdAt.getTime());"},{"lineNumber":106,"author":{"gitID":"500poundbear"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":108,"author":{"gitID":"Zzmobie"},"content":"        return new Person(name, phone, email, address, remark, tags, createdAt, socialMedia, accessCount);"},{"lineNumber":109,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"500poundbear":17,"Zzmobie":7,"kenpaxtonlim":9,"-":78}},{"path":"src/main/java/seedu/address/logic/commands/SizeCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"donjar"},"content":"// @@author donjar"},{"lineNumber":2,"author":{"gitID":"donjar"},"content":""},{"lineNumber":3,"author":{"gitID":"donjar"},"content":"package seedu.address.logic.commands;"},{"lineNumber":4,"author":{"gitID":"donjar"},"content":""},{"lineNumber":5,"author":{"gitID":"donjar"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"donjar"},"content":"import seedu.address.model.FontSizeOutOfBoundsException;"},{"lineNumber":7,"author":{"gitID":"donjar"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitID":"donjar"},"content":""},{"lineNumber":9,"author":{"gitID":"donjar"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"donjar"},"content":" * Changes the font size."},{"lineNumber":11,"author":{"gitID":"donjar"},"content":" */"},{"lineNumber":12,"author":{"gitID":"donjar"},"content":"public class SizeCommand extends Command {"},{"lineNumber":13,"author":{"gitID":"donjar"},"content":""},{"lineNumber":14,"author":{"gitID":"donjar"},"content":"    public static final String COMMAND_WORD \u003d \"size\";"},{"lineNumber":15,"author":{"gitID":"donjar"},"content":"    public static final String COMMAND_ALIAS \u003d \"si\";"},{"lineNumber":16,"author":{"gitID":"donjar"},"content":"    public static final String MESSAGE_RESET_FONT_SUCCESS \u003d \"Font size successfully reset!\";"},{"lineNumber":17,"author":{"gitID":"donjar"},"content":"    public static final String MESSAGE_CHANGE_FONT_SUCCESS \u003d \"Font size %1$s by %2$s! Current change is %3$s.\";"},{"lineNumber":18,"author":{"gitID":"donjar"},"content":"    public static final String MESSAGE_FAILURE \u003d \"New font size out of bounds! Current change is %1$s, the command \""},{"lineNumber":19,"author":{"gitID":"donjar"},"content":"            + \"will change it into %2$s, which is outside [\" + Model.FONT_SIZE_LOWER_BOUND + \", \""},{"lineNumber":20,"author":{"gitID":"donjar"},"content":"            + Model.FONT_SIZE_UPPER_BOUND + \"].\";"},{"lineNumber":21,"author":{"gitID":"donjar"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":22,"author":{"gitID":"donjar"},"content":"            + \": Changes the font size. If no arguments are supplied, resets the font size to its default.\\n\""},{"lineNumber":23,"author":{"gitID":"donjar"},"content":"            + \"Parameters: [SIZE_CHANGE] (must be an integer)\\n\""},{"lineNumber":24,"author":{"gitID":"donjar"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":25,"author":{"gitID":"donjar"},"content":""},{"lineNumber":26,"author":{"gitID":"donjar"},"content":"    private final boolean isReset;"},{"lineNumber":27,"author":{"gitID":"donjar"},"content":"    private final int sizeChange;"},{"lineNumber":28,"author":{"gitID":"donjar"},"content":""},{"lineNumber":29,"author":{"gitID":"donjar"},"content":"    public SizeCommand() {"},{"lineNumber":30,"author":{"gitID":"donjar"},"content":"        isReset \u003d true;"},{"lineNumber":31,"author":{"gitID":"donjar"},"content":"        sizeChange \u003d 0;"},{"lineNumber":32,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"donjar"},"content":""},{"lineNumber":34,"author":{"gitID":"donjar"},"content":"    public SizeCommand(int sizeChange) {"},{"lineNumber":35,"author":{"gitID":"donjar"},"content":"        isReset \u003d false;"},{"lineNumber":36,"author":{"gitID":"donjar"},"content":"        this.sizeChange \u003d sizeChange;"},{"lineNumber":37,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"donjar"},"content":""},{"lineNumber":39,"author":{"gitID":"donjar"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"donjar"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":41,"author":{"gitID":"donjar"},"content":"        if (isReset) {"},{"lineNumber":42,"author":{"gitID":"donjar"},"content":"            return executeSizeResetCommand();"},{"lineNumber":43,"author":{"gitID":"donjar"},"content":"        } else {"},{"lineNumber":44,"author":{"gitID":"donjar"},"content":"            try {"},{"lineNumber":45,"author":{"gitID":"donjar"},"content":"                return executeSizeChangeCommand();"},{"lineNumber":46,"author":{"gitID":"donjar"},"content":"            } catch (FontSizeOutOfBoundsException e) {"},{"lineNumber":47,"author":{"gitID":"donjar"},"content":"                throw new CommandException(String.format(MESSAGE_FAILURE, e.previousFontSize, e.newFontSize));"},{"lineNumber":48,"author":{"gitID":"donjar"},"content":"            }"},{"lineNumber":49,"author":{"gitID":"donjar"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"donjar"},"content":""},{"lineNumber":52,"author":{"gitID":"donjar"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"donjar"},"content":"     * Executes the command that resets the font size."},{"lineNumber":54,"author":{"gitID":"donjar"},"content":"     * @return the command result produced."},{"lineNumber":55,"author":{"gitID":"donjar"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"donjar"},"content":"    private CommandResult executeSizeResetCommand() {"},{"lineNumber":57,"author":{"gitID":"donjar"},"content":"        model.resetFontSize();"},{"lineNumber":58,"author":{"gitID":"donjar"},"content":"        return new CommandResult(MESSAGE_RESET_FONT_SUCCESS);"},{"lineNumber":59,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"donjar"},"content":""},{"lineNumber":61,"author":{"gitID":"donjar"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"donjar"},"content":"     * Executes the command that changes the font size by the given size change."},{"lineNumber":63,"author":{"gitID":"donjar"},"content":"     * @return the command result produced."},{"lineNumber":64,"author":{"gitID":"donjar"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"donjar"},"content":"    private CommandResult executeSizeChangeCommand() throws FontSizeOutOfBoundsException {"},{"lineNumber":66,"author":{"gitID":"donjar"},"content":"        int newChange \u003d model.updateFontSize(sizeChange);"},{"lineNumber":67,"author":{"gitID":"donjar"},"content":""},{"lineNumber":68,"author":{"gitID":"donjar"},"content":"        if (sizeChange \u003e\u003d 0) {"},{"lineNumber":69,"author":{"gitID":"donjar"},"content":"            return new CommandResult(String.format(MESSAGE_CHANGE_FONT_SUCCESS, \"increased\","},{"lineNumber":70,"author":{"gitID":"donjar"},"content":"                    sizeChange, newChange));"},{"lineNumber":71,"author":{"gitID":"donjar"},"content":"        } else {"},{"lineNumber":72,"author":{"gitID":"donjar"},"content":"            return new CommandResult(String.format(MESSAGE_CHANGE_FONT_SUCCESS, \"decreased\","},{"lineNumber":73,"author":{"gitID":"donjar"},"content":"                    -1 * sizeChange, newChange));"},{"lineNumber":74,"author":{"gitID":"donjar"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"donjar"},"content":""},{"lineNumber":77,"author":{"gitID":"donjar"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"donjar"},"content":"    public boolean equals(Object other) {"},{"lineNumber":79,"author":{"gitID":"donjar"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":80,"author":{"gitID":"donjar"},"content":"                || (other instanceof SizeCommand // instanceof handles nulls"},{"lineNumber":81,"author":{"gitID":"donjar"},"content":"                \u0026\u0026 this.sizeChange \u003d\u003d ((SizeCommand) other).sizeChange"},{"lineNumber":82,"author":{"gitID":"donjar"},"content":"                \u0026\u0026 this.isReset \u003d\u003d ((SizeCommand) other).isReset); // state check"},{"lineNumber":83,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"donjar"},"content":"}"}],"authorContributionMap":{"donjar":84}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"donjar"},"content":"    public static final Version VERSION \u003d new Version(1, 5, 0, false);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":135,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":163,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"donjar":1,"-":211}},{"path":"src/main/java/seedu/address/model/person/Phone.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s phone number in the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class Phone {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"donjar"},"content":"    // @@author donjar"},{"lineNumber":14,"author":{"gitID":"donjar"},"content":"    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"},{"lineNumber":15,"author":{"gitID":"donjar"},"content":"            \"Phone numbers can only contain numbers, dashes, parentheses, and spaces. Also, there should be at \""},{"lineNumber":16,"author":{"gitID":"donjar"},"content":"                    + \"least 3 numbers in the string.\";"},{"lineNumber":17,"author":{"gitID":"donjar"},"content":"    public static final String PHONE_REPLACEMENT_REGEX \u003d \"[() -]\";"},{"lineNumber":18,"author":{"gitID":"donjar"},"content":"    // @@author"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d{3,}\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Validates given phone number."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if given phone string is invalid."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public Phone(String phone) throws IllegalValueException {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":30,"author":{"gitID":"donjar"},"content":"        this.value \u003d extractPhone(trimmedPhone);"},{"lineNumber":31,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"donjar"},"content":""},{"lineNumber":33,"author":{"gitID":"donjar"},"content":"    // @@author donjar"},{"lineNumber":34,"author":{"gitID":"donjar"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"donjar"},"content":"     * Returns a phone number from the given string, by stripping certain special characters."},{"lineNumber":36,"author":{"gitID":"donjar"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"donjar"},"content":"    public static String extractPhone(String phoneNumber) throws IllegalValueException {"},{"lineNumber":38,"author":{"gitID":"donjar"},"content":"        String strippedPhoneNumber \u003d phoneNumber.replaceAll(PHONE_REPLACEMENT_REGEX, \"\");"},{"lineNumber":39,"author":{"gitID":"donjar"},"content":"        if (!isValidPhone(strippedPhoneNumber)) {"},{"lineNumber":40,"author":{"gitID":"donjar"},"content":"            throw new IllegalValueException(MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":41,"author":{"gitID":"donjar"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"donjar"},"content":"        return strippedPhoneNumber;"},{"lineNumber":43,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"donjar"},"content":"    // @@author"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person phone number."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static boolean isValidPhone(String test) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return test.matches(PHONE_VALIDATION_REGEX);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Phone) other).value)); // state check"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"donjar":21,"-":49}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"500poundbear"},"content":"import java.util.Date;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":10,"author":{"gitID":"Zzmobie"},"content":"import seedu.address.model.person.AccessCount;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":16,"author":{"gitID":"500poundbear"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":17,"author":{"gitID":"kenpaxtonlim"},"content":"import seedu.address.model.person.SocialMedia;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            return new Person[] {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":29,"author":{"gitID":"500poundbear"},"content":"                    new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Remark(\"\"),"},{"lineNumber":30,"author":{"gitID":"Zzmobie"},"content":"                    getTagSet(\"friends\"), new Date(), new SocialMedia(), new AccessCount(0)),"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":32,"author":{"gitID":"500poundbear"},"content":"                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Remark(\"\"),"},{"lineNumber":33,"author":{"gitID":"Zzmobie"},"content":"                    getTagSet(\"colleagues\", \"friends\"), new Date(), new SocialMedia(), new AccessCount(0)),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":35,"author":{"gitID":"500poundbear"},"content":"                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Remark(\"\"),"},{"lineNumber":36,"author":{"gitID":"Zzmobie"},"content":"                    getTagSet(\"neighbours\"), new Date(), new SocialMedia(), new AccessCount(0)),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":38,"author":{"gitID":"500poundbear"},"content":"                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Remark(\"\"),"},{"lineNumber":39,"author":{"gitID":"Zzmobie"},"content":"                    getTagSet(\"family\"), new Date(), new SocialMedia(), new AccessCount(0)),"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":41,"author":{"gitID":"500poundbear"},"content":"                    new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Remark(\"\"),"},{"lineNumber":42,"author":{"gitID":"Zzmobie"},"content":"                    getTagSet(\"classmates\"), new Date(), new SocialMedia(), new AccessCount(0)),"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":44,"author":{"gitID":"500poundbear"},"content":"                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Remark(\"\"),"},{"lineNumber":45,"author":{"gitID":"Zzmobie"},"content":"                    getTagSet(\"colleagues\"), new Date(), new SocialMedia(), new AccessCount(0))"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            };"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot be invalid\", e);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) throws IllegalValueException {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"500poundbear":8,"Zzmobie":7,"kenpaxtonlim":1,"-":60}},{"path":"src/main/java/seedu/address/model/person/ReadOnlyPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"500poundbear"},"content":"import java.util.Date;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * A read-only immutable interface for a Person in the addressbook."},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Implementations should guarantee: details are present and not null, field values are validated."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public interface ReadOnlyPerson {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cName\u003e nameProperty();"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    Name getName();"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cPhone\u003e phoneProperty();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    Phone getPhone();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cEmail\u003e emailProperty();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    Email getEmail();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cAddress\u003e addressProperty();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    Address getAddress();"},{"lineNumber":24,"author":{"gitID":"500poundbear"},"content":"    ObjectProperty\u003cRemark\u003e remarkProperty();"},{"lineNumber":25,"author":{"gitID":"500poundbear"},"content":"    Remark getRemark();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cUniqueTagList\u003e tagProperty();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    Set\u003cTag\u003e getTags();"},{"lineNumber":28,"author":{"gitID":"500poundbear"},"content":"    ObjectProperty\u003cDate\u003e createdAtProperty();"},{"lineNumber":29,"author":{"gitID":"500poundbear"},"content":"    Date getCreatedAt();"},{"lineNumber":30,"author":{"gitID":"Zzmobie"},"content":"    ObjectProperty\u003cAccessCount\u003e accessCountProperty();"},{"lineNumber":31,"author":{"gitID":"Zzmobie"},"content":"    AccessCount getAccessCount();"},{"lineNumber":32,"author":{"gitID":"Zzmobie"},"content":"    void incrementAccess();"},{"lineNumber":33,"author":{"gitID":"kenpaxtonlim"},"content":"    ObjectProperty\u003cSocialMedia\u003e socialMediaProperty();"},{"lineNumber":34,"author":{"gitID":"kenpaxtonlim"},"content":"    SocialMedia getSocialMedia();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Returns true if both have the same state. (interfaces cannot override .equals)"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    default boolean isSameStateAs(ReadOnlyPerson other) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                || (other !\u003d null // this is first to avoid NPE below"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                \u0026\u0026 other.getName().equals(this.getName()) // state checks here onwards"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                \u0026\u0026 other.getPhone().equals(this.getPhone())"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                \u0026\u0026 other.getEmail().equals(this.getEmail())"},{"lineNumber":45,"author":{"gitID":"500poundbear"},"content":"                \u0026\u0026 other.getAddress().equals(this.getAddress())"},{"lineNumber":46,"author":{"gitID":"kenpaxtonlim"},"content":"                \u0026\u0026 other.getRemark().equals(this.getRemark())"},{"lineNumber":47,"author":{"gitID":"kenpaxtonlim"},"content":"                \u0026\u0026 other.getSocialMedia().equals(this.getSocialMedia()));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Formats the person as text, showing all contact details."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    default String getAsText() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":62,"author":{"gitID":"kenpaxtonlim"},"content":"                .append(\" \")"},{"lineNumber":63,"author":{"gitID":"kenpaxtonlim"},"content":"                .append(getSocialMedia())"},{"lineNumber":64,"author":{"gitID":"500poundbear"},"content":"                .append(\" Remark: \")"},{"lineNumber":65,"author":{"gitID":"500poundbear"},"content":"                .append(getRemark())"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"500poundbear":8,"Zzmobie":3,"kenpaxtonlim":6,"-":54}},{"path":"src/main/java/seedu/address/logic/commands/ToggleAccessDisplayCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"Zzmobie"},"content":"import seedu.address.commons.events.ui.AccessCountDisplayToggleEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":7,"author":{"gitID":"Zzmobie"},"content":"//@@author Zzmobie"},{"lineNumber":8,"author":{"gitID":"Zzmobie"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"Zzmobie"},"content":" * Toggles the display of the access count."},{"lineNumber":10,"author":{"gitID":"Zzmobie"},"content":" */"},{"lineNumber":11,"author":{"gitID":"Zzmobie"},"content":"public class ToggleAccessDisplayCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"Zzmobie"},"content":"    public static final String COMMAND_WORD \u003d \"accessdisplay\";"},{"lineNumber":13,"author":{"gitID":"Zzmobie"},"content":"    public static final String COMMAND_ALIAS \u003d \"ad\";"},{"lineNumber":14,"author":{"gitID":"Zzmobie"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":15,"author":{"gitID":"Zzmobie"},"content":"            + \": Toggles the display of the access count. \""},{"lineNumber":16,"author":{"gitID":"Zzmobie"},"content":"            + \"Parameters: TYPE (either \\\"on\\\" or \\\"off\\\")\\n\""},{"lineNumber":17,"author":{"gitID":"Zzmobie"},"content":"            + \"Example: \" + COMMAND_WORD + \" on\";"},{"lineNumber":18,"author":{"gitID":"Zzmobie"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Display toggled \";"},{"lineNumber":19,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":20,"author":{"gitID":"Zzmobie"},"content":"    public static final String TYPE_ON \u003d \"on\";"},{"lineNumber":21,"author":{"gitID":"Zzmobie"},"content":"    public static final String TYPE_OFF \u003d \"off\";"},{"lineNumber":22,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":23,"author":{"gitID":"Zzmobie"},"content":"    private boolean isDisplayed;"},{"lineNumber":24,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":25,"author":{"gitID":"Zzmobie"},"content":"    public ToggleAccessDisplayCommand (boolean isDisplayed) {"},{"lineNumber":26,"author":{"gitID":"Zzmobie"},"content":"        this.isDisplayed \u003d isDisplayed;"},{"lineNumber":27,"author":{"gitID":"Zzmobie"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":29,"author":{"gitID":"Zzmobie"},"content":"    public boolean isDisplayed() {"},{"lineNumber":30,"author":{"gitID":"Zzmobie"},"content":"        return isDisplayed;"},{"lineNumber":31,"author":{"gitID":"Zzmobie"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":33,"author":{"gitID":"Zzmobie"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"Zzmobie"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"Zzmobie"},"content":"        EventsCenter.getInstance().post(new AccessCountDisplayToggleEvent(isDisplayed));"},{"lineNumber":36,"author":{"gitID":"Zzmobie"},"content":"        return new CommandResult(MESSAGE_SUCCESS + (isDisplayed ? TYPE_ON : TYPE_OFF) + \". \");"},{"lineNumber":37,"author":{"gitID":"Zzmobie"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Zzmobie"},"content":"}"}],"authorContributionMap":{"Zzmobie":34,"-":4}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"500poundbear"},"content":"import java.util.Date;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleObjectProperty;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class Person implements ReadOnlyPerson {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cName\u003e name;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cPhone\u003e phone;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cEmail\u003e email;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cAddress\u003e address;"},{"lineNumber":26,"author":{"gitID":"500poundbear"},"content":"    private ObjectProperty\u003cRemark\u003e remark;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cUniqueTagList\u003e tags;"},{"lineNumber":28,"author":{"gitID":"500poundbear"},"content":"    private ObjectProperty\u003cDate\u003e createdAt;"},{"lineNumber":29,"author":{"gitID":"Zzmobie"},"content":"    private ObjectProperty\u003cAccessCount\u003e accessCount;"},{"lineNumber":30,"author":{"gitID":"kenpaxtonlim"},"content":"    private ObjectProperty\u003cSocialMedia\u003e socialMedia;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"500poundbear"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Remark remark,"},{"lineNumber":36,"author":{"gitID":"Zzmobie"},"content":"                  Set\u003cTag\u003e tags, Date createdAt, SocialMedia socialMedia, AccessCount accessCount) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.name \u003d new SimpleObjectProperty\u003c\u003e(name);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.phone \u003d new SimpleObjectProperty\u003c\u003e(phone);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.email \u003d new SimpleObjectProperty\u003c\u003e(email);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.address \u003d new SimpleObjectProperty\u003c\u003e(address);"},{"lineNumber":42,"author":{"gitID":"500poundbear"},"content":"        this.remark \u003d new SimpleObjectProperty\u003c\u003e(remark);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.tags \u003d new SimpleObjectProperty\u003c\u003e(new UniqueTagList(tags));"},{"lineNumber":45,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":46,"author":{"gitID":"500poundbear"},"content":"        this.createdAt \u003d new SimpleObjectProperty\u003c\u003e(createdAt);"},{"lineNumber":47,"author":{"gitID":"Zzmobie"},"content":"        this.accessCount \u003d new SimpleObjectProperty\u003c\u003e(accessCount);"},{"lineNumber":48,"author":{"gitID":"kenpaxtonlim"},"content":"        this.socialMedia \u003d new SimpleObjectProperty\u003c\u003e(socialMedia);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Creates a copy of the given ReadOnlyPerson."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public Person(ReadOnlyPerson source) {"},{"lineNumber":55,"author":{"gitID":"Zzmobie"},"content":"        this(source.getName(), source.getPhone(), source.getEmail(), source.getAddress(), source.getRemark(),"},{"lineNumber":56,"author":{"gitID":"Zzmobie"},"content":"                source.getTags(), source.getCreatedAt(), source.getSocialMedia(), source.getAccessCount());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void setName(Name name) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.name.set(requireNonNull(name));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cName\u003e nameProperty() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return name.get();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void setPhone(Phone phone) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        this.phone.set(requireNonNull(phone));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cPhone\u003e phoneProperty() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return phone.get();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void setEmail(Email email) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        this.email.set(requireNonNull(email));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cEmail\u003e emailProperty() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return email.get();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void setAddress(Address address) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        this.address.set(requireNonNull(address));"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cAddress\u003e addressProperty() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return address.get();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"500poundbear"},"content":"    public void setRemark(Remark remark) {"},{"lineNumber":116,"author":{"gitID":"500poundbear"},"content":"        this.remark.set(requireNonNull(remark));"},{"lineNumber":117,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":119,"author":{"gitID":"500poundbear"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"500poundbear"},"content":"    public ObjectProperty\u003cRemark\u003e remarkProperty() {"},{"lineNumber":121,"author":{"gitID":"500poundbear"},"content":"        return remark;"},{"lineNumber":122,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":124,"author":{"gitID":"500poundbear"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"500poundbear"},"content":"    public Remark getRemark() {"},{"lineNumber":126,"author":{"gitID":"500poundbear"},"content":"        return remark.get();"},{"lineNumber":127,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.get().toSet());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cUniqueTagList\u003e tagProperty() {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Replaces this person\u0027s tags with the tags in the argument tag set."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e replacement) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        tags.set(new UniqueTagList(replacement));"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"500poundbear"},"content":"    public void setCreatedAt(Date createdAt) {"},{"lineNumber":150,"author":{"gitID":"500poundbear"},"content":"        this.createdAt.set(requireNonNull(createdAt));"},{"lineNumber":151,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":153,"author":{"gitID":"500poundbear"},"content":"    @Override"},{"lineNumber":154,"author":{"gitID":"500poundbear"},"content":"    public ObjectProperty\u003cDate\u003e createdAtProperty() {"},{"lineNumber":155,"author":{"gitID":"500poundbear"},"content":"        return createdAt;"},{"lineNumber":156,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":158,"author":{"gitID":"500poundbear"},"content":"    @Override"},{"lineNumber":159,"author":{"gitID":"500poundbear"},"content":"    public Date getCreatedAt() {"},{"lineNumber":160,"author":{"gitID":"500poundbear"},"content":"        return createdAt.get();"},{"lineNumber":161,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":163,"author":{"gitID":"kenpaxtonlim"},"content":"    //@@author kenpaxtonlim"},{"lineNumber":164,"author":{"gitID":"kenpaxtonlim"},"content":"    @Override"},{"lineNumber":165,"author":{"gitID":"kenpaxtonlim"},"content":"    public ObjectProperty\u003cSocialMedia\u003e socialMediaProperty() {"},{"lineNumber":166,"author":{"gitID":"kenpaxtonlim"},"content":"        return socialMedia;"},{"lineNumber":167,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":169,"author":{"gitID":"kenpaxtonlim"},"content":"    @Override"},{"lineNumber":170,"author":{"gitID":"kenpaxtonlim"},"content":"    public SocialMedia getSocialMedia() {"},{"lineNumber":171,"author":{"gitID":"kenpaxtonlim"},"content":"        return socialMedia.get();"},{"lineNumber":172,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":174,"author":{"gitID":"kenpaxtonlim"},"content":"    public void setSocialMedia(SocialMedia socialMedia) {"},{"lineNumber":175,"author":{"gitID":"kenpaxtonlim"},"content":"        this.socialMedia.set(requireNonNull(socialMedia));"},{"lineNumber":176,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"kenpaxtonlim"},"content":"    //@@author"},{"lineNumber":178,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                || (other instanceof ReadOnlyPerson // instanceof handles nulls"},{"lineNumber":183,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.isSameStateAs((ReadOnlyPerson) other));"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        return getAsText();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"Zzmobie"},"content":"    @Override"},{"lineNumber":198,"author":{"gitID":"Zzmobie"},"content":"    public ObjectProperty\u003cAccessCount\u003e accessCountProperty() {"},{"lineNumber":199,"author":{"gitID":"Zzmobie"},"content":"        return accessCount;"},{"lineNumber":200,"author":{"gitID":"Zzmobie"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":202,"author":{"gitID":"Zzmobie"},"content":"    @Override"},{"lineNumber":203,"author":{"gitID":"Zzmobie"},"content":"    public AccessCount getAccessCount() {"},{"lineNumber":204,"author":{"gitID":"Zzmobie"},"content":"        return accessCount.get();"},{"lineNumber":205,"author":{"gitID":"Zzmobie"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":207,"author":{"gitID":"Zzmobie"},"content":"    @Override"},{"lineNumber":208,"author":{"gitID":"Zzmobie"},"content":"    public void incrementAccess() {"},{"lineNumber":209,"author":{"gitID":"Zzmobie"},"content":"        accessCount.set(new AccessCount(accessCount.get().numAccess() + 1));"},{"lineNumber":210,"author":{"gitID":"Zzmobie"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"500poundbear":35,"Zzmobie":20,"kenpaxtonlim":18,"-":139}},{"path":"src/main/java/seedu/address/model/person/AccessCount.java","lines":[{"lineNumber":1,"author":{"gitID":"Zzmobie"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":3,"author":{"gitID":"Zzmobie"},"content":"//@@author Zzmobie"},{"lineNumber":4,"author":{"gitID":"Zzmobie"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"Zzmobie"},"content":" * Represents the number of accesses to a person\u0027s data."},{"lineNumber":6,"author":{"gitID":"Zzmobie"},"content":" */"},{"lineNumber":7,"author":{"gitID":"Zzmobie"},"content":"public class AccessCount {"},{"lineNumber":8,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":9,"author":{"gitID":"Zzmobie"},"content":"    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"},{"lineNumber":10,"author":{"gitID":"Zzmobie"},"content":"            \"Number of access cannot be less than 0.\";"},{"lineNumber":11,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":12,"author":{"gitID":"Zzmobie"},"content":"    private int value;"},{"lineNumber":13,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":14,"author":{"gitID":"Zzmobie"},"content":"    public AccessCount(int accessCount) {"},{"lineNumber":15,"author":{"gitID":"Zzmobie"},"content":"        this.value \u003d accessCount;"},{"lineNumber":16,"author":{"gitID":"Zzmobie"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":18,"author":{"gitID":"Zzmobie"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"Zzmobie"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"Zzmobie"},"content":"        return Integer.toString(value);"},{"lineNumber":21,"author":{"gitID":"Zzmobie"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":23,"author":{"gitID":"Zzmobie"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"Zzmobie"},"content":"    public boolean equals(Object other) {"},{"lineNumber":25,"author":{"gitID":"Zzmobie"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":26,"author":{"gitID":"Zzmobie"},"content":"                || (other instanceof AccessCount // instanceof handles nulls"},{"lineNumber":27,"author":{"gitID":"Zzmobie"},"content":"                \u0026\u0026 this.value \u003d\u003d ((AccessCount) other).value); // state check"},{"lineNumber":28,"author":{"gitID":"Zzmobie"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":30,"author":{"gitID":"Zzmobie"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"Zzmobie"},"content":"    public int hashCode() {"},{"lineNumber":32,"author":{"gitID":"Zzmobie"},"content":"        return value;"},{"lineNumber":33,"author":{"gitID":"Zzmobie"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":35,"author":{"gitID":"Zzmobie"},"content":"    public int numAccess() {"},{"lineNumber":36,"author":{"gitID":"Zzmobie"},"content":"        return value;"},{"lineNumber":37,"author":{"gitID":"Zzmobie"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":39,"author":{"gitID":"Zzmobie"},"content":"}"}],"authorContributionMap":{"Zzmobie":39}},{"path":"src/main/java/seedu/address/model/person/Remark.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":5,"author":{"gitID":"500poundbear"},"content":"//@@author 500poundbear"},{"lineNumber":6,"author":{"gitID":"500poundbear"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"500poundbear"},"content":" * Represents a Person\u0027s remark in the address book."},{"lineNumber":8,"author":{"gitID":"500poundbear"},"content":" */"},{"lineNumber":9,"author":{"gitID":"500poundbear"},"content":"public class Remark {"},{"lineNumber":10,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":11,"author":{"gitID":"500poundbear"},"content":"    public static final String MESSAGE_REMARK_CONSTRAINTS \u003d"},{"lineNumber":12,"author":{"gitID":"500poundbear"},"content":"            \"The remark of a person can take any value.\";"},{"lineNumber":13,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":14,"author":{"gitID":"500poundbear"},"content":"    public final String value;"},{"lineNumber":15,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":16,"author":{"gitID":"500poundbear"},"content":"    public Remark(String remark) {"},{"lineNumber":17,"author":{"gitID":"500poundbear"},"content":"        requireNonNull(remark);"},{"lineNumber":18,"author":{"gitID":"500poundbear"},"content":"        this.value \u003d remark;"},{"lineNumber":19,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":21,"author":{"gitID":"500poundbear"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"500poundbear"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitID":"500poundbear"},"content":"        return value;"},{"lineNumber":24,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":26,"author":{"gitID":"500poundbear"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"500poundbear"},"content":"    public boolean equals(Object other) {"},{"lineNumber":28,"author":{"gitID":"500poundbear"},"content":"        return other \u003d\u003d this"},{"lineNumber":29,"author":{"gitID":"500poundbear"},"content":"                || ((other instanceof Remark)"},{"lineNumber":30,"author":{"gitID":"500poundbear"},"content":"                \u0026\u0026 this.value.equals(((Remark) other).value));"},{"lineNumber":31,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":33,"author":{"gitID":"500poundbear"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"500poundbear"},"content":"    public int hashCode() {"},{"lineNumber":35,"author":{"gitID":"500poundbear"},"content":"        return value.hashCode();"},{"lineNumber":36,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"500poundbear"},"content":"}"}],"authorContributionMap":{"500poundbear":34,"-":3}},{"path":"src/main/java/seedu/address/model/person/Name.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s name in the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class Name {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"-"},"content":"            \"Person names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"donjar"},"content":"     * Matches unicode words separated with one space, e.g. \"Charles Nguyễn 你好\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"donjar"},"content":"    // @@author donjar"},{"lineNumber":20,"author":{"gitID":"donjar"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{L}\\\\p{Digit}]+( [\\\\p{L}\\\\p{Digit}]+)*\";"},{"lineNumber":21,"author":{"gitID":"donjar"},"content":"    // @@author"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public final String fullName;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Validates given name."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if given name string is invalid."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public Name(String name) throws IllegalValueException {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        if (!isValidName(trimmedName)) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.fullName \u003d trimmedName;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person name."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return fullName;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                || (other instanceof Name // instanceof handles nulls"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.fullName.equals(((Name) other).fullName)); // state check"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"donjar":4,"-":60}},{"path":"src/main/java/seedu/address/model/person/TagContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"Zzmobie"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":8,"author":{"gitID":"Zzmobie"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":10,"author":{"gitID":"Zzmobie"},"content":"//@@author Zzmobie"},{"lineNumber":11,"author":{"gitID":"Zzmobie"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"Zzmobie"},"content":" * Tests that a {@code ReadOnlyPerson}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":13,"author":{"gitID":"Zzmobie"},"content":" */"},{"lineNumber":14,"author":{"gitID":"Zzmobie"},"content":"public class TagContainsKeywordsPredicate implements Predicate\u003cReadOnlyPerson\u003e {"},{"lineNumber":15,"author":{"gitID":"Zzmobie"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":16,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":17,"author":{"gitID":"Zzmobie"},"content":"    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":18,"author":{"gitID":"Zzmobie"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":19,"author":{"gitID":"Zzmobie"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":21,"author":{"gitID":"Zzmobie"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"Zzmobie"},"content":"    public boolean test(ReadOnlyPerson person) {"},{"lineNumber":23,"author":{"gitID":"Zzmobie"},"content":"        Set\u003cTag\u003e tags \u003d person.getTags();"},{"lineNumber":24,"author":{"gitID":"Zzmobie"},"content":"        for (Tag t : tags) {"},{"lineNumber":25,"author":{"gitID":"Zzmobie"},"content":"            if (keywords.stream()"},{"lineNumber":26,"author":{"gitID":"Zzmobie"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(t.toTagName(), keyword))) {"},{"lineNumber":27,"author":{"gitID":"Zzmobie"},"content":"                return true;"},{"lineNumber":28,"author":{"gitID":"Zzmobie"},"content":"            }"},{"lineNumber":29,"author":{"gitID":"Zzmobie"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"Zzmobie"},"content":"        return false;"},{"lineNumber":31,"author":{"gitID":"Zzmobie"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":33,"author":{"gitID":"Zzmobie"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"Zzmobie"},"content":"    public boolean equals(Object other) {"},{"lineNumber":35,"author":{"gitID":"Zzmobie"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":36,"author":{"gitID":"Zzmobie"},"content":"                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":37,"author":{"gitID":"Zzmobie"},"content":"                \u0026\u0026 this.keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":38,"author":{"gitID":"Zzmobie"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":40,"author":{"gitID":"Zzmobie"},"content":"}"}],"authorContributionMap":{"Zzmobie":34,"-":6}},{"path":"src/main/java/seedu/address/logic/commands/AddRemoveTagsCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":5,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":6,"author":{"gitID":"kenpaxtonlim"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"Zzmobie"},"content":"import seedu.address.model.person.AccessCount;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":19,"author":{"gitID":"kenpaxtonlim"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":21,"author":{"gitID":"kenpaxtonlim"},"content":"//@@author kenpaxtonlim"},{"lineNumber":22,"author":{"gitID":"kenpaxtonlim"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"kenpaxtonlim"},"content":" * Adds tags to an existing person in the address book."},{"lineNumber":24,"author":{"gitID":"kenpaxtonlim"},"content":" */"},{"lineNumber":25,"author":{"gitID":"kenpaxtonlim"},"content":"public class AddRemoveTagsCommand extends UndoableCommand {"},{"lineNumber":26,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":27,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String COMMAND_WORD \u003d \"tags\";"},{"lineNumber":28,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String COMMAND_ALIAS \u003d \"t\";"},{"lineNumber":29,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add or remove tags to the person identified \""},{"lineNumber":30,"author":{"gitID":"kenpaxtonlim"},"content":"            + \"by the index number used in the last person listing. \\n\""},{"lineNumber":31,"author":{"gitID":"kenpaxtonlim"},"content":"            + \"Parameters: TYPE (either add or remove) INDEX (must be a positive integer) \""},{"lineNumber":32,"author":{"gitID":"kenpaxtonlim"},"content":"            + \"TAG [TAG] (can add 1 or more tags)... \\n\""},{"lineNumber":33,"author":{"gitID":"kenpaxtonlim"},"content":"            + \"Example: \" + COMMAND_WORD + \" add 1 \""},{"lineNumber":34,"author":{"gitID":"kenpaxtonlim"},"content":"            + \"NUS CS2103 classmate\";"},{"lineNumber":35,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":36,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String MESSAGE_ADD_TAGS_SUCCESS \u003d \"Added Tag/s to Person: %1$s\";"},{"lineNumber":37,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String MESSAGE_REMOVE_TAGS_SUCCESS \u003d \"Removed Tag/s to Person: %1$s\";"},{"lineNumber":38,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String MESSAGE_NO_TAG \u003d \"One or more tags must be entered.\";"},{"lineNumber":39,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String MESSAGE_TAG_DONT_EXIST \u003d \"The following tag/s to be removed do not exist in person: \";"},{"lineNumber":40,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":41,"author":{"gitID":"kenpaxtonlim"},"content":"    private final boolean isAdd;"},{"lineNumber":42,"author":{"gitID":"kenpaxtonlim"},"content":"    private final Index index;"},{"lineNumber":43,"author":{"gitID":"kenpaxtonlim"},"content":"    private final Set\u003cTag\u003e tags;"},{"lineNumber":44,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":45,"author":{"gitID":"kenpaxtonlim"},"content":"    public AddRemoveTagsCommand(boolean isAdd, Index index, Set\u003cTag\u003e tags) {"},{"lineNumber":46,"author":{"gitID":"kenpaxtonlim"},"content":"        requireNonNull(isAdd);"},{"lineNumber":47,"author":{"gitID":"kenpaxtonlim"},"content":"        requireNonNull(index);"},{"lineNumber":48,"author":{"gitID":"kenpaxtonlim"},"content":"        requireNonNull(tags);"},{"lineNumber":49,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":50,"author":{"gitID":"kenpaxtonlim"},"content":"        this.isAdd \u003d isAdd;"},{"lineNumber":51,"author":{"gitID":"kenpaxtonlim"},"content":"        this.index \u003d index;"},{"lineNumber":52,"author":{"gitID":"kenpaxtonlim"},"content":"        this.tags \u003d tags;"},{"lineNumber":53,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":55,"author":{"gitID":"kenpaxtonlim"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"kenpaxtonlim"},"content":"    protected CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":57,"author":{"gitID":"kenpaxtonlim"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":58,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":59,"author":{"gitID":"kenpaxtonlim"},"content":"        checkParameterValidity(lastShownList);"},{"lineNumber":60,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":61,"author":{"gitID":"kenpaxtonlim"},"content":"        ReadOnlyPerson personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":62,"author":{"gitID":"kenpaxtonlim"},"content":"        Person editedPerson \u003d prepareEditedPerson(personToEdit);"},{"lineNumber":63,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":64,"author":{"gitID":"kenpaxtonlim"},"content":"        try {"},{"lineNumber":65,"author":{"gitID":"kenpaxtonlim"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":66,"author":{"gitID":"kenpaxtonlim"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":67,"author":{"gitID":"kenpaxtonlim"},"content":"            throw new AssertionError(\"The target person should not be duplicated\");"},{"lineNumber":68,"author":{"gitID":"kenpaxtonlim"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":69,"author":{"gitID":"kenpaxtonlim"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":70,"author":{"gitID":"kenpaxtonlim"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"kenpaxtonlim"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":72,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":73,"author":{"gitID":"kenpaxtonlim"},"content":"        return isAdd ? new CommandResult(String.format(MESSAGE_ADD_TAGS_SUCCESS, editedPerson))"},{"lineNumber":74,"author":{"gitID":"kenpaxtonlim"},"content":"                : new CommandResult(String.format(MESSAGE_REMOVE_TAGS_SUCCESS, editedPerson));"},{"lineNumber":75,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":77,"author":{"gitID":"kenpaxtonlim"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"kenpaxtonlim"},"content":"     * Returns the edited Person based on whether is it an add or remove action."},{"lineNumber":79,"author":{"gitID":"kenpaxtonlim"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"kenpaxtonlim"},"content":"    private Person prepareEditedPerson(ReadOnlyPerson personToEdit) throws CommandException {"},{"lineNumber":81,"author":{"gitID":"kenpaxtonlim"},"content":"        Person editedPerson;"},{"lineNumber":82,"author":{"gitID":"kenpaxtonlim"},"content":"        if (isAdd) {"},{"lineNumber":83,"author":{"gitID":"kenpaxtonlim"},"content":"            editedPerson \u003d addTagsToPerson(personToEdit, tags);"},{"lineNumber":84,"author":{"gitID":"kenpaxtonlim"},"content":"        } else {"},{"lineNumber":85,"author":{"gitID":"kenpaxtonlim"},"content":"            editedPerson \u003d removeTagsFromPerson(personToEdit, tags);"},{"lineNumber":86,"author":{"gitID":"kenpaxtonlim"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"kenpaxtonlim"},"content":"        return editedPerson;"},{"lineNumber":88,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":90,"author":{"gitID":"kenpaxtonlim"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"kenpaxtonlim"},"content":"     * Checks that the index is valid and tags are present."},{"lineNumber":92,"author":{"gitID":"kenpaxtonlim"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"kenpaxtonlim"},"content":"    private void checkParameterValidity(List\u003cReadOnlyPerson\u003e lastShownList) throws CommandException {"},{"lineNumber":94,"author":{"gitID":"kenpaxtonlim"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":95,"author":{"gitID":"kenpaxtonlim"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":96,"author":{"gitID":"kenpaxtonlim"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":98,"author":{"gitID":"kenpaxtonlim"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":99,"author":{"gitID":"kenpaxtonlim"},"content":"            throw new CommandException(MESSAGE_NO_TAG);"},{"lineNumber":100,"author":{"gitID":"kenpaxtonlim"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":103,"author":{"gitID":"kenpaxtonlim"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"kenpaxtonlim"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":105,"author":{"gitID":"kenpaxtonlim"},"content":"     * edited with the {@code tags} to be added."},{"lineNumber":106,"author":{"gitID":"kenpaxtonlim"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"kenpaxtonlim"},"content":"    private static Person addTagsToPerson(ReadOnlyPerson personToEdit, Set\u003cTag\u003e tags) {"},{"lineNumber":108,"author":{"gitID":"kenpaxtonlim"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":109,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":110,"author":{"gitID":"kenpaxtonlim"},"content":"        Set\u003cTag\u003e personTags \u003d personToEdit.getTags();"},{"lineNumber":111,"author":{"gitID":"kenpaxtonlim"},"content":"        HashSet\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":112,"author":{"gitID":"kenpaxtonlim"},"content":"        newTags.addAll(tags);"},{"lineNumber":113,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":114,"author":{"gitID":"kenpaxtonlim"},"content":"        AccessCount accessCount \u003d new AccessCount((personToEdit.getAccessCount().numAccess() + 1));"},{"lineNumber":115,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":116,"author":{"gitID":"kenpaxtonlim"},"content":"        return new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"},{"lineNumber":117,"author":{"gitID":"kenpaxtonlim"},"content":"                personToEdit.getAddress(), personToEdit.getRemark(), newTags,"},{"lineNumber":118,"author":{"gitID":"kenpaxtonlim"},"content":"                personToEdit.getCreatedAt(), personToEdit.getSocialMedia(), accessCount);"},{"lineNumber":119,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":120,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":122,"author":{"gitID":"kenpaxtonlim"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"kenpaxtonlim"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":124,"author":{"gitID":"kenpaxtonlim"},"content":"     * edited with the {@code tags} to be removed."},{"lineNumber":125,"author":{"gitID":"kenpaxtonlim"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"kenpaxtonlim"},"content":"    private static Person removeTagsFromPerson(ReadOnlyPerson personToEdit, Set\u003cTag\u003e tags) throws CommandException {"},{"lineNumber":127,"author":{"gitID":"kenpaxtonlim"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":128,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":129,"author":{"gitID":"kenpaxtonlim"},"content":"        Set\u003cTag\u003e personTags \u003d personToEdit.getTags();"},{"lineNumber":130,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":131,"author":{"gitID":"kenpaxtonlim"},"content":"        String[] dontExist \u003d getTagsNamesThatDontExist(tags, personTags);"},{"lineNumber":132,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":133,"author":{"gitID":"kenpaxtonlim"},"content":"        if (dontExist.length \u003e 0) {"},{"lineNumber":134,"author":{"gitID":"kenpaxtonlim"},"content":"            throw new CommandException(makeTagDontExistMessage(dontExist));"},{"lineNumber":135,"author":{"gitID":"kenpaxtonlim"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":137,"author":{"gitID":"kenpaxtonlim"},"content":"        HashSet\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":138,"author":{"gitID":"kenpaxtonlim"},"content":"        newTags.removeAll(tags);"},{"lineNumber":139,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":140,"author":{"gitID":"kenpaxtonlim"},"content":"        AccessCount accessCount \u003d new AccessCount(personToEdit.getAccessCount().numAccess() + 1);"},{"lineNumber":141,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":142,"author":{"gitID":"kenpaxtonlim"},"content":"        return new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"},{"lineNumber":143,"author":{"gitID":"kenpaxtonlim"},"content":"                personToEdit.getAddress(), personToEdit.getRemark(), newTags, personToEdit.getCreatedAt(),"},{"lineNumber":144,"author":{"gitID":"kenpaxtonlim"},"content":"                personToEdit.getSocialMedia(), accessCount);"},{"lineNumber":145,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":147,"author":{"gitID":"kenpaxtonlim"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"kenpaxtonlim"},"content":"     * From a given set of {@code tags}, extract those that do not exist in {@code personTags}"},{"lineNumber":149,"author":{"gitID":"kenpaxtonlim"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"kenpaxtonlim"},"content":"    public static String[] getTagsNamesThatDontExist(Set\u003cTag\u003e tags, Set\u003cTag\u003e personTags) {"},{"lineNumber":151,"author":{"gitID":"kenpaxtonlim"},"content":"        ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":152,"author":{"gitID":"kenpaxtonlim"},"content":"        for (Tag t: tags) {"},{"lineNumber":153,"author":{"gitID":"kenpaxtonlim"},"content":"            if (!personTags.contains(t)) {"},{"lineNumber":154,"author":{"gitID":"kenpaxtonlim"},"content":"                list.add(t.tagName);"},{"lineNumber":155,"author":{"gitID":"kenpaxtonlim"},"content":"            }"},{"lineNumber":156,"author":{"gitID":"kenpaxtonlim"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"kenpaxtonlim"},"content":"        String[] arr \u003d new String[list.size()];"},{"lineNumber":158,"author":{"gitID":"kenpaxtonlim"},"content":"        arr \u003d list.toArray(arr);"},{"lineNumber":159,"author":{"gitID":"kenpaxtonlim"},"content":"        return arr;"},{"lineNumber":160,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":162,"author":{"gitID":"kenpaxtonlim"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"kenpaxtonlim"},"content":"     * Make the error message when there are tags that don\u0027t exist"},{"lineNumber":164,"author":{"gitID":"kenpaxtonlim"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"kenpaxtonlim"},"content":"    public static String makeTagDontExistMessage(String... tags) {"},{"lineNumber":166,"author":{"gitID":"kenpaxtonlim"},"content":"        return MESSAGE_TAG_DONT_EXIST + String.join(\" \", tags);"},{"lineNumber":167,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":169,"author":{"gitID":"kenpaxtonlim"},"content":"    @Override"},{"lineNumber":170,"author":{"gitID":"kenpaxtonlim"},"content":"    public boolean equals(Object other) {"},{"lineNumber":171,"author":{"gitID":"kenpaxtonlim"},"content":"        // short circuit if same object"},{"lineNumber":172,"author":{"gitID":"kenpaxtonlim"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":173,"author":{"gitID":"kenpaxtonlim"},"content":"            return true;"},{"lineNumber":174,"author":{"gitID":"kenpaxtonlim"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":176,"author":{"gitID":"kenpaxtonlim"},"content":"        // instanceof handles nulls"},{"lineNumber":177,"author":{"gitID":"kenpaxtonlim"},"content":"        if (!(other instanceof AddRemoveTagsCommand)) {"},{"lineNumber":178,"author":{"gitID":"kenpaxtonlim"},"content":"            return false;"},{"lineNumber":179,"author":{"gitID":"kenpaxtonlim"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":181,"author":{"gitID":"kenpaxtonlim"},"content":"        AddRemoveTagsCommand e \u003d (AddRemoveTagsCommand) other;"},{"lineNumber":182,"author":{"gitID":"kenpaxtonlim"},"content":"        return isAdd \u003d\u003d e.isAdd \u0026\u0026 index.equals(e.index) \u0026\u0026 tags.equals(e.tags);"},{"lineNumber":183,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"kenpaxtonlim"},"content":"}"}],"authorContributionMap":{"Zzmobie":1,"kenpaxtonlim":168,"-":15}},{"path":"src/main/java/seedu/address/model/FontSizeOutOfBoundsException.java","lines":[{"lineNumber":1,"author":{"gitID":"donjar"},"content":"// @@author donjar"},{"lineNumber":2,"author":{"gitID":"donjar"},"content":""},{"lineNumber":3,"author":{"gitID":"donjar"},"content":"package seedu.address.model;"},{"lineNumber":4,"author":{"gitID":"donjar"},"content":""},{"lineNumber":5,"author":{"gitID":"donjar"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"donjar"},"content":""},{"lineNumber":7,"author":{"gitID":"donjar"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"donjar"},"content":" * Signals that the font size change given is out of bounds."},{"lineNumber":9,"author":{"gitID":"donjar"},"content":" */"},{"lineNumber":10,"author":{"gitID":"donjar"},"content":"public class FontSizeOutOfBoundsException extends IllegalValueException {"},{"lineNumber":11,"author":{"gitID":"donjar"},"content":"    public final int previousFontSize;"},{"lineNumber":12,"author":{"gitID":"donjar"},"content":"    public final int newFontSize;"},{"lineNumber":13,"author":{"gitID":"donjar"},"content":""},{"lineNumber":14,"author":{"gitID":"donjar"},"content":"    public FontSizeOutOfBoundsException(int previousFontSize, int newFontSize) {"},{"lineNumber":15,"author":{"gitID":"donjar"},"content":"        super(\"Changing the font size by this amount will result in an out of bounds font size.\");"},{"lineNumber":16,"author":{"gitID":"donjar"},"content":"        this.previousFontSize \u003d previousFontSize;"},{"lineNumber":17,"author":{"gitID":"donjar"},"content":"        this.newFontSize \u003d newFontSize;"},{"lineNumber":18,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"donjar"},"content":"}"}],"authorContributionMap":{"donjar":19}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents a Tag in the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class Tag {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public final String tagName;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Validates given tag name."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given tag name string is invalid."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public Tag(String name) throws IllegalValueException {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        if (!isValidTagName(trimmedName)) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.tagName \u003d trimmedName;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return test.matches(TAG_VALIDATION_REGEX);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"Zzmobie"},"content":"    public String toTagName() {"},{"lineNumber":59,"author":{"gitID":"Zzmobie"},"content":"        return tagName;"},{"lineNumber":60,"author":{"gitID":"Zzmobie"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":62,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Zzmobie":5,"-":58}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"Zzmobie"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"Zzmobie"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"Zzmobie"},"content":"import seedu.address.commons.events.model.AddressBookAccessChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":18,"author":{"gitID":"donjar"},"content":"import seedu.address.commons.events.ui.FontSizeRefreshRequestEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":25,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cReadOnlyPerson\u003e filteredPersons;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"donjar"},"content":"    private int fontSizeChange \u003d 0;"},{"lineNumber":34,"author":{"gitID":"donjar"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code ReadOnlyPerson} backed by the internal list of"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"500poundbear"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getAllPersonList() {"},{"lineNumber":95,"author":{"gitID":"500poundbear"},"content":"        return FXCollections.unmodifiableObservableList("},{"lineNumber":96,"author":{"gitID":"500poundbear"},"content":"                new FilteredList\u003c\u003e(this.addressBook.getPersonList()));"},{"lineNumber":97,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code ReadOnlyPerson} backed by the internal list of"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":107,"author":{"gitID":"kenpaxtonlim"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons.sorted());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"donjar"},"content":"    // @@author donjar"},{"lineNumber":117,"author":{"gitID":"donjar"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"donjar"},"content":"    public int getFontSizeChange() {"},{"lineNumber":119,"author":{"gitID":"donjar"},"content":"        return fontSizeChange;"},{"lineNumber":120,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"donjar"},"content":""},{"lineNumber":122,"author":{"gitID":"donjar"},"content":"    @Override"},{"lineNumber":123,"author":{"gitID":"donjar"},"content":"    public void resetFontSize() {"},{"lineNumber":124,"author":{"gitID":"donjar"},"content":"        fontSizeChange \u003d 0;"},{"lineNumber":125,"author":{"gitID":"donjar"},"content":"        indicateFontSizeChanged();"},{"lineNumber":126,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"donjar"},"content":""},{"lineNumber":128,"author":{"gitID":"donjar"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"donjar"},"content":"    public int updateFontSize(int change) throws FontSizeOutOfBoundsException {"},{"lineNumber":130,"author":{"gitID":"donjar"},"content":"        int newFontSizeChange \u003d fontSizeChange + change;"},{"lineNumber":131,"author":{"gitID":"donjar"},"content":""},{"lineNumber":132,"author":{"gitID":"donjar"},"content":"        if (newFontSizeChange \u003c FONT_SIZE_LOWER_BOUND || newFontSizeChange \u003e FONT_SIZE_UPPER_BOUND) {"},{"lineNumber":133,"author":{"gitID":"donjar"},"content":"            throw new FontSizeOutOfBoundsException(fontSizeChange, newFontSizeChange);"},{"lineNumber":134,"author":{"gitID":"donjar"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"donjar"},"content":""},{"lineNumber":136,"author":{"gitID":"donjar"},"content":"        fontSizeChange \u003d newFontSizeChange;"},{"lineNumber":137,"author":{"gitID":"donjar"},"content":"        indicateFontSizeChanged();"},{"lineNumber":138,"author":{"gitID":"donjar"},"content":""},{"lineNumber":139,"author":{"gitID":"donjar"},"content":"        return fontSizeChange;"},{"lineNumber":140,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"donjar"},"content":""},{"lineNumber":142,"author":{"gitID":"donjar"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"donjar"},"content":"     * Raises an event to indicate the font size has changed."},{"lineNumber":144,"author":{"gitID":"donjar"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"donjar"},"content":"    private void indicateFontSizeChanged() {"},{"lineNumber":146,"author":{"gitID":"donjar"},"content":"        raise(new FontSizeRefreshRequestEvent());"},{"lineNumber":147,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"Zzmobie"},"content":"    //@@author Zzmobie"},{"lineNumber":149,"author":{"gitID":"Zzmobie"},"content":"    @Subscribe"},{"lineNumber":150,"author":{"gitID":"Zzmobie"},"content":"    public void handleAddressBookAccessChangedEvent(AddressBookAccessChangedEvent event)"},{"lineNumber":151,"author":{"gitID":"Zzmobie"},"content":"            throws PersonNotFoundException, DuplicatePersonException {"},{"lineNumber":152,"author":{"gitID":"Zzmobie"},"content":"        logger.info(\"Updating person in addressbook\" + event.personToEdit.toString());"},{"lineNumber":153,"author":{"gitID":"Zzmobie"},"content":"        ReadOnlyPerson editedPerson \u003d event.personToEdit;"},{"lineNumber":154,"author":{"gitID":"Zzmobie"},"content":"        editedPerson.incrementAccess();"},{"lineNumber":155,"author":{"gitID":"Zzmobie"},"content":"        updatePerson(event.personToEdit, editedPerson);"},{"lineNumber":156,"author":{"gitID":"Zzmobie"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"Zzmobie"},"content":"    //@@author"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"500poundbear":5,"Zzmobie":13,"kenpaxtonlim":1,"donjar":35,"-":122}},{"path":"src/main/java/seedu/address/model/person/SocialMedia.java","lines":[{"lineNumber":1,"author":{"gitID":"kenpaxtonlim"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":3,"author":{"gitID":"kenpaxtonlim"},"content":"//@@author kenpaxtonlim"},{"lineNumber":4,"author":{"gitID":"kenpaxtonlim"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"kenpaxtonlim"},"content":" * Represents a Person\u0027s social media usernames in the address book."},{"lineNumber":6,"author":{"gitID":"kenpaxtonlim"},"content":" */"},{"lineNumber":7,"author":{"gitID":"kenpaxtonlim"},"content":"public class SocialMedia {"},{"lineNumber":8,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":9,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String MESSAGE_USERNAME_CONSTRAINTS \u003d"},{"lineNumber":10,"author":{"gitID":"kenpaxtonlim"},"content":"            \"Social media username should be alphanumeric without spaces\";"},{"lineNumber":11,"author":{"gitID":"kenpaxtonlim"},"content":"    public static final String USERNAME_VALIDATION_REGEX \u003d \"[^\\\\s]+|[\\\\s*]\";"},{"lineNumber":12,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":13,"author":{"gitID":"kenpaxtonlim"},"content":"    public final String facebook;"},{"lineNumber":14,"author":{"gitID":"kenpaxtonlim"},"content":"    public final String twitter;"},{"lineNumber":15,"author":{"gitID":"kenpaxtonlim"},"content":"    public final String instagram;"},{"lineNumber":16,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":17,"author":{"gitID":"kenpaxtonlim"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"kenpaxtonlim"},"content":"     * All usernames are empty."},{"lineNumber":19,"author":{"gitID":"kenpaxtonlim"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"kenpaxtonlim"},"content":"    public SocialMedia() {"},{"lineNumber":21,"author":{"gitID":"kenpaxtonlim"},"content":"        facebook \u003d \"\";"},{"lineNumber":22,"author":{"gitID":"kenpaxtonlim"},"content":"        twitter \u003d \"\";"},{"lineNumber":23,"author":{"gitID":"kenpaxtonlim"},"content":"        instagram \u003d \"\";"},{"lineNumber":24,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":26,"author":{"gitID":"kenpaxtonlim"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"kenpaxtonlim"},"content":"     * Set usernames based on input."},{"lineNumber":28,"author":{"gitID":"kenpaxtonlim"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"kenpaxtonlim"},"content":"    public SocialMedia(String facebook, String twitter, String instagram) {"},{"lineNumber":30,"author":{"gitID":"kenpaxtonlim"},"content":"        this.facebook \u003d facebook;"},{"lineNumber":31,"author":{"gitID":"kenpaxtonlim"},"content":"        this.twitter \u003d twitter;"},{"lineNumber":32,"author":{"gitID":"kenpaxtonlim"},"content":"        this.instagram \u003d instagram;"},{"lineNumber":33,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":35,"author":{"gitID":"kenpaxtonlim"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"kenpaxtonlim"},"content":"     * Replace old usernames if new usernames is valid (not null)."},{"lineNumber":37,"author":{"gitID":"kenpaxtonlim"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"kenpaxtonlim"},"content":"    public SocialMedia(SocialMedia oldData, SocialMedia newData) {"},{"lineNumber":39,"author":{"gitID":"kenpaxtonlim"},"content":"        facebook \u003d newData.facebook \u003d\u003d null ? oldData.facebook : newData.facebook;"},{"lineNumber":40,"author":{"gitID":"kenpaxtonlim"},"content":"        twitter \u003d newData.twitter \u003d\u003d null ? oldData.twitter : newData.twitter;"},{"lineNumber":41,"author":{"gitID":"kenpaxtonlim"},"content":"        instagram \u003d newData.instagram \u003d\u003d null ? oldData.instagram : newData.instagram;"},{"lineNumber":42,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":44,"author":{"gitID":"kenpaxtonlim"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"kenpaxtonlim"},"content":"     * Returns true if a given string is a valid person name."},{"lineNumber":46,"author":{"gitID":"kenpaxtonlim"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"kenpaxtonlim"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":48,"author":{"gitID":"kenpaxtonlim"},"content":"        return test.matches(USERNAME_VALIDATION_REGEX);"},{"lineNumber":49,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":51,"author":{"gitID":"kenpaxtonlim"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"kenpaxtonlim"},"content":"    public String toString() {"},{"lineNumber":53,"author":{"gitID":"kenpaxtonlim"},"content":"        String toString \u003d \"\";"},{"lineNumber":54,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":55,"author":{"gitID":"kenpaxtonlim"},"content":"        if (!facebook.equals(\"\")) {"},{"lineNumber":56,"author":{"gitID":"kenpaxtonlim"},"content":"            toString +\u003d \"FB: \" + facebook + \" \";"},{"lineNumber":57,"author":{"gitID":"kenpaxtonlim"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"kenpaxtonlim"},"content":"        if (!twitter.equals(\"\")) {"},{"lineNumber":59,"author":{"gitID":"kenpaxtonlim"},"content":"            toString +\u003d \"TW: \" + twitter + \" \";"},{"lineNumber":60,"author":{"gitID":"kenpaxtonlim"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"kenpaxtonlim"},"content":"        if (!instagram.equals(\"\")) {"},{"lineNumber":62,"author":{"gitID":"kenpaxtonlim"},"content":"            toString +\u003d \"IG: \" + instagram;"},{"lineNumber":63,"author":{"gitID":"kenpaxtonlim"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"kenpaxtonlim"},"content":"        if (toString.equals(\"\")) {"},{"lineNumber":65,"author":{"gitID":"kenpaxtonlim"},"content":"            toString \u003d \"-No Social Media Accounts-\";"},{"lineNumber":66,"author":{"gitID":"kenpaxtonlim"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"kenpaxtonlim"},"content":"        return toString;"},{"lineNumber":68,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"kenpaxtonlim"},"content":""},{"lineNumber":70,"author":{"gitID":"kenpaxtonlim"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"kenpaxtonlim"},"content":"    public boolean equals(Object other) {"},{"lineNumber":72,"author":{"gitID":"kenpaxtonlim"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":73,"author":{"gitID":"kenpaxtonlim"},"content":"                || (other instanceof SocialMedia // instanceof handles nulls"},{"lineNumber":74,"author":{"gitID":"kenpaxtonlim"},"content":"                \u0026\u0026 this.facebook.equals(((SocialMedia) other).facebook)"},{"lineNumber":75,"author":{"gitID":"kenpaxtonlim"},"content":"                \u0026\u0026 this.twitter.equals(((SocialMedia) other).twitter)"},{"lineNumber":76,"author":{"gitID":"kenpaxtonlim"},"content":"                \u0026\u0026 this.instagram.equals(((SocialMedia) other).instagram)); // state check"},{"lineNumber":77,"author":{"gitID":"kenpaxtonlim"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"kenpaxtonlim"},"content":"}"}],"authorContributionMap":{"kenpaxtonlim":78}},{"path":"src/main/java/seedu/address/model/person/NameMatchesRegexPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"donjar"},"content":"// @@author donjar"},{"lineNumber":2,"author":{"gitID":"donjar"},"content":""},{"lineNumber":3,"author":{"gitID":"donjar"},"content":"package seedu.address.model.person;"},{"lineNumber":4,"author":{"gitID":"donjar"},"content":""},{"lineNumber":5,"author":{"gitID":"donjar"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"donjar"},"content":"import java.util.regex.Pattern;"},{"lineNumber":7,"author":{"gitID":"donjar"},"content":""},{"lineNumber":8,"author":{"gitID":"donjar"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"donjar"},"content":" * Tests that a {@code ReadOnlyPerson}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"donjar"},"content":" */"},{"lineNumber":11,"author":{"gitID":"donjar"},"content":"public class NameMatchesRegexPredicate implements Predicate\u003cReadOnlyPerson\u003e {"},{"lineNumber":12,"author":{"gitID":"donjar"},"content":"    private final Pattern pattern;"},{"lineNumber":13,"author":{"gitID":"donjar"},"content":""},{"lineNumber":14,"author":{"gitID":"donjar"},"content":"    public NameMatchesRegexPredicate(String regex) {"},{"lineNumber":15,"author":{"gitID":"donjar"},"content":"        this.pattern \u003d Pattern.compile(regex);"},{"lineNumber":16,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"donjar"},"content":""},{"lineNumber":18,"author":{"gitID":"donjar"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"donjar"},"content":"    public boolean test(ReadOnlyPerson person) {"},{"lineNumber":20,"author":{"gitID":"donjar"},"content":"        return pattern.matcher(person.getName().fullName).find();"},{"lineNumber":21,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"donjar"},"content":""},{"lineNumber":23,"author":{"gitID":"donjar"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"donjar"},"content":"    public boolean equals(Object other) {"},{"lineNumber":25,"author":{"gitID":"donjar"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":26,"author":{"gitID":"donjar"},"content":"            return true;"},{"lineNumber":27,"author":{"gitID":"donjar"},"content":"        } else if (other instanceof NameMatchesRegexPredicate) {"},{"lineNumber":28,"author":{"gitID":"donjar"},"content":"            String thisPattern \u003d pattern.toString();"},{"lineNumber":29,"author":{"gitID":"donjar"},"content":"            String otherPattern \u003d ((NameMatchesRegexPredicate) other).pattern.toString();"},{"lineNumber":30,"author":{"gitID":"donjar"},"content":"            return thisPattern.equals(otherPattern);"},{"lineNumber":31,"author":{"gitID":"donjar"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"donjar"},"content":"        return false;"},{"lineNumber":33,"author":{"gitID":"donjar"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"donjar"},"content":""},{"lineNumber":35,"author":{"gitID":"donjar"},"content":"}"}],"authorContributionMap":{"donjar":35}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":14,"author":{"gitID":"donjar"},"content":"    // @@author donjar"},{"lineNumber":15,"author":{"gitID":"donjar"},"content":"    /** Upper and lower bounds for the font size change */"},{"lineNumber":16,"author":{"gitID":"donjar"},"content":"    int FONT_SIZE_LOWER_BOUND \u003d -5;"},{"lineNumber":17,"author":{"gitID":"donjar"},"content":"    int FONT_SIZE_UPPER_BOUND \u003d 5;"},{"lineNumber":18,"author":{"gitID":"donjar"},"content":"    // @@author"},{"lineNumber":19,"author":{"gitID":"donjar"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    Predicate\u003cReadOnlyPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    void addPerson(ReadOnlyPerson person) throws DuplicatePersonException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"500poundbear"},"content":"    /** Returns an unmodifiable view of all person list */"},{"lineNumber":46,"author":{"gitID":"500poundbear"},"content":"    ObservableList\u003cReadOnlyPerson\u003e getAllPersonList();"},{"lineNumber":47,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"donjar"},"content":"    // @@author donjar"},{"lineNumber":58,"author":{"gitID":"donjar"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"donjar"},"content":"     * Gets the current font size change of the model"},{"lineNumber":60,"author":{"gitID":"donjar"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"donjar"},"content":"    int getFontSizeChange();"},{"lineNumber":62,"author":{"gitID":"donjar"},"content":""},{"lineNumber":63,"author":{"gitID":"donjar"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"donjar"},"content":"     * Resets the font size of the model to its defaults."},{"lineNumber":65,"author":{"gitID":"donjar"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"donjar"},"content":"    void resetFontSize();"},{"lineNumber":67,"author":{"gitID":"donjar"},"content":""},{"lineNumber":68,"author":{"gitID":"donjar"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"donjar"},"content":"     * Resets the font size of the model to its defaults. Returns the new change of the font size."},{"lineNumber":70,"author":{"gitID":"donjar"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"donjar"},"content":"    int updateFontSize(int change) throws FontSizeOutOfBoundsException;"},{"lineNumber":72,"author":{"gitID":"donjar"},"content":"    // @@author"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"500poundbear":3,"donjar":22,"-":48}},{"path":"src/main/java/seedu/address/model/Statistics.java","lines":[{"lineNumber":1,"author":{"gitID":"500poundbear"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":3,"author":{"gitID":"500poundbear"},"content":"import java.time.Month;"},{"lineNumber":4,"author":{"gitID":"500poundbear"},"content":"import java.time.Year;"},{"lineNumber":5,"author":{"gitID":"500poundbear"},"content":"import java.time.ZoneId;"},{"lineNumber":6,"author":{"gitID":"500poundbear"},"content":"import java.time.ZonedDateTime;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitID":"500poundbear"},"content":"import java.util.Comparator;"},{"lineNumber":10,"author":{"gitID":"500poundbear"},"content":"import java.util.Date;"},{"lineNumber":11,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":12,"author":{"gitID":"500poundbear"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":14,"author":{"gitID":"kenpaxtonlim"},"content":"import seedu.address.model.person.SocialMedia;"},{"lineNumber":15,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":16,"author":{"gitID":"500poundbear"},"content":"//@@author 500poundbear"},{"lineNumber":17,"author":{"gitID":"500poundbear"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"500poundbear"},"content":" * A model for calculating the values for Statistics Panel"},{"lineNumber":19,"author":{"gitID":"500poundbear"},"content":" */"},{"lineNumber":20,"author":{"gitID":"500poundbear"},"content":"public class Statistics {"},{"lineNumber":21,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":22,"author":{"gitID":"500poundbear"},"content":"    private static final String ZONE_ID \u003d \"UTC\";"},{"lineNumber":23,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":24,"author":{"gitID":"500poundbear"},"content":"    private ObservableList\u003cReadOnlyPerson\u003e personList;"},{"lineNumber":25,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":26,"author":{"gitID":"500poundbear"},"content":"    private Integer totalNumberOfPeople \u003d 0;"},{"lineNumber":27,"author":{"gitID":"500poundbear"},"content":"    private Integer hasNoFacebook \u003d 0;"},{"lineNumber":28,"author":{"gitID":"500poundbear"},"content":"    private Integer hasNoTwitter \u003d 0;"},{"lineNumber":29,"author":{"gitID":"500poundbear"},"content":"    private Integer hasNoInstagram \u003d 0;"},{"lineNumber":30,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":31,"author":{"gitID":"500poundbear"},"content":"    private Integer currentYear;"},{"lineNumber":32,"author":{"gitID":"500poundbear"},"content":"    private Integer currentMonth;"},{"lineNumber":33,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":34,"author":{"gitID":"500poundbear"},"content":"    public Statistics (ObservableList\u003cReadOnlyPerson\u003e list, int currentMonth, int currentYear) {"},{"lineNumber":35,"author":{"gitID":"500poundbear"},"content":"        setStatisticAttributes(list, currentMonth, currentYear);"},{"lineNumber":36,"author":{"gitID":"500poundbear"},"content":"        tabulateSocialMediaUsage();"},{"lineNumber":37,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":39,"author":{"gitID":"500poundbear"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"500poundbear"},"content":"     * Returns Array for each month in past displayYears with a count of new persons added in that month"},{"lineNumber":41,"author":{"gitID":"500poundbear"},"content":"     * Current month is also included"},{"lineNumber":42,"author":{"gitID":"500poundbear"},"content":"     *"},{"lineNumber":43,"author":{"gitID":"500poundbear"},"content":"     * @param displayYears The number of years to be displayed"},{"lineNumber":44,"author":{"gitID":"500poundbear"},"content":"     * @return ArrayList of integers"},{"lineNumber":45,"author":{"gitID":"500poundbear"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"500poundbear"},"content":"    public ArrayList\u003cInteger\u003e getNewPersonsAddByMonth(int displayYears) {"},{"lineNumber":47,"author":{"gitID":"500poundbear"},"content":"        int totalMonthsDisplayed \u003d yearsToMonth(displayYears) + 1;"},{"lineNumber":48,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":49,"author":{"gitID":"500poundbear"},"content":"        ArrayList\u003cInteger\u003e countByMonth \u003d new ArrayList\u003c\u003e("},{"lineNumber":50,"author":{"gitID":"500poundbear"},"content":"                Collections.nCopies(totalMonthsDisplayed, 0));"},{"lineNumber":51,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":52,"author":{"gitID":"500poundbear"},"content":"        personList.forEach(p -\u003e {"},{"lineNumber":53,"author":{"gitID":"500poundbear"},"content":"            Date givenDate \u003d p.getCreatedAt();"},{"lineNumber":54,"author":{"gitID":"500poundbear"},"content":"            ZonedDateTime given \u003d givenDate.toInstant().atZone(ZoneId.of(ZONE_ID));"},{"lineNumber":55,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":56,"author":{"gitID":"500poundbear"},"content":"            int personAddedYear \u003d Integer.parseInt(Year.from(given).toString());"},{"lineNumber":57,"author":{"gitID":"500poundbear"},"content":"            int personAddedMonth \u003d Month.from(given).getValue();"},{"lineNumber":58,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":59,"author":{"gitID":"500poundbear"},"content":"            int indOffset \u003d calculateCountByMonthOffset(personAddedMonth, personAddedYear);"},{"lineNumber":60,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":61,"author":{"gitID":"500poundbear"},"content":"            if (isOffsetWithinDisplayRange(indOffset, totalMonthsDisplayed)) {"},{"lineNumber":62,"author":{"gitID":"500poundbear"},"content":"                countByMonth.set(indOffset, countByMonth.get(indOffset) + 1);"},{"lineNumber":63,"author":{"gitID":"500poundbear"},"content":"            }"},{"lineNumber":64,"author":{"gitID":"500poundbear"},"content":"        });"},{"lineNumber":65,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":66,"author":{"gitID":"500poundbear"},"content":"        return countByMonth;"},{"lineNumber":67,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":69,"author":{"gitID":"500poundbear"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"500poundbear"},"content":"     * Fetches number of persons with no facebook information added"},{"lineNumber":71,"author":{"gitID":"500poundbear"},"content":"     *"},{"lineNumber":72,"author":{"gitID":"500poundbear"},"content":"     * @return Number of Persons with no facebook"},{"lineNumber":73,"author":{"gitID":"500poundbear"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"500poundbear"},"content":"    public Integer getHasNoFacebook() {"},{"lineNumber":75,"author":{"gitID":"500poundbear"},"content":"        return this.hasNoFacebook;"},{"lineNumber":76,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":78,"author":{"gitID":"500poundbear"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"500poundbear"},"content":"     * Fetches number of persons with no twitter information added"},{"lineNumber":80,"author":{"gitID":"500poundbear"},"content":"     *"},{"lineNumber":81,"author":{"gitID":"500poundbear"},"content":"     * @return Number of Persons with no twitter"},{"lineNumber":82,"author":{"gitID":"500poundbear"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"500poundbear"},"content":"    public Integer getHasNoTwitter() {"},{"lineNumber":84,"author":{"gitID":"500poundbear"},"content":"        return this.hasNoTwitter;"},{"lineNumber":85,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":87,"author":{"gitID":"500poundbear"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"500poundbear"},"content":"     * Fetches number of persons with no instagram information added"},{"lineNumber":89,"author":{"gitID":"500poundbear"},"content":"     *"},{"lineNumber":90,"author":{"gitID":"500poundbear"},"content":"     * @return Number of Persons with no twitter"},{"lineNumber":91,"author":{"gitID":"500poundbear"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"500poundbear"},"content":"    public Integer getHasNoInstagram() {"},{"lineNumber":93,"author":{"gitID":"500poundbear"},"content":"        return this.hasNoInstagram;"},{"lineNumber":94,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":96,"author":{"gitID":"500poundbear"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"500poundbear"},"content":"     * Fetches total number of persons"},{"lineNumber":98,"author":{"gitID":"500poundbear"},"content":"     *"},{"lineNumber":99,"author":{"gitID":"500poundbear"},"content":"     * @return Number of Persons added"},{"lineNumber":100,"author":{"gitID":"500poundbear"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"500poundbear"},"content":"    public Integer getTotalNumberOfPeople() {"},{"lineNumber":102,"author":{"gitID":"500poundbear"},"content":"        return this.totalNumberOfPeople;"},{"lineNumber":103,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":105,"author":{"gitID":"500poundbear"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"500poundbear"},"content":"     * Set the initialisation parameters into the Statistics instance attributes"},{"lineNumber":107,"author":{"gitID":"500poundbear"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"500poundbear"},"content":"    private void setStatisticAttributes(ObservableList\u003cReadOnlyPerson\u003e list, int currentMonth, int currentYear) {"},{"lineNumber":109,"author":{"gitID":"500poundbear"},"content":"        this.personList \u003d list;"},{"lineNumber":110,"author":{"gitID":"500poundbear"},"content":"        this.currentMonth \u003d currentMonth;"},{"lineNumber":111,"author":{"gitID":"500poundbear"},"content":"        this.currentYear \u003d currentYear;"},{"lineNumber":112,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":113,"author":{"gitID":"500poundbear"},"content":"        this.totalNumberOfPeople \u003d personList.size();"},{"lineNumber":114,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":116,"author":{"gitID":"500poundbear"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"500poundbear"},"content":"     * Count the offset when adding to the array list of sum by months"},{"lineNumber":118,"author":{"gitID":"500poundbear"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"500poundbear"},"content":"    private int calculateCountByMonthOffset(int personAddedMonth, int personAddedYear) {"},{"lineNumber":120,"author":{"gitID":"500poundbear"},"content":"        return yearsToMonth(this.currentYear - personAddedYear) + (this.currentMonth - personAddedMonth);"},{"lineNumber":121,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":123,"author":{"gitID":"500poundbear"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"500poundbear"},"content":"     * Tabulates number of users of each social media platform"},{"lineNumber":125,"author":{"gitID":"500poundbear"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"500poundbear"},"content":"    private void tabulateSocialMediaUsage() {"},{"lineNumber":127,"author":{"gitID":"500poundbear"},"content":"        for (ReadOnlyPerson person : personList) {"},{"lineNumber":128,"author":{"gitID":"500poundbear"},"content":"            SocialMedia personSocialMedia \u003d person.getSocialMedia();"},{"lineNumber":129,"author":{"gitID":"500poundbear"},"content":"            if (personSocialMedia.facebook.isEmpty()) {"},{"lineNumber":130,"author":{"gitID":"500poundbear"},"content":"                this.hasNoFacebook++;"},{"lineNumber":131,"author":{"gitID":"500poundbear"},"content":"            }"},{"lineNumber":132,"author":{"gitID":"500poundbear"},"content":"            if (personSocialMedia.twitter.isEmpty()) {"},{"lineNumber":133,"author":{"gitID":"500poundbear"},"content":"                this.hasNoTwitter++;"},{"lineNumber":134,"author":{"gitID":"500poundbear"},"content":"            }"},{"lineNumber":135,"author":{"gitID":"500poundbear"},"content":"            if (personSocialMedia.instagram.isEmpty()) {"},{"lineNumber":136,"author":{"gitID":"500poundbear"},"content":"                this.hasNoInstagram++;"},{"lineNumber":137,"author":{"gitID":"500poundbear"},"content":"            }"},{"lineNumber":138,"author":{"gitID":"500poundbear"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":141,"author":{"gitID":"500poundbear"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"500poundbear"},"content":"     * Sort by ReadOnlyPerson.getAccessCount()"},{"lineNumber":143,"author":{"gitID":"500poundbear"},"content":"     *"},{"lineNumber":144,"author":{"gitID":"500poundbear"},"content":"     * @return new comparator"},{"lineNumber":145,"author":{"gitID":"500poundbear"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"500poundbear"},"content":"    private static Comparator\u003cReadOnlyPerson\u003e sortByGetAccessCount() {"},{"lineNumber":147,"author":{"gitID":"500poundbear"},"content":"        return new Comparator\u003cReadOnlyPerson\u003e() {"},{"lineNumber":148,"author":{"gitID":"500poundbear"},"content":"            @Override"},{"lineNumber":149,"author":{"gitID":"500poundbear"},"content":"            public int compare(ReadOnlyPerson s1, ReadOnlyPerson s2) {"},{"lineNumber":150,"author":{"gitID":"500poundbear"},"content":"                return s1.getAccessCount().numAccess() - s2.getAccessCount().numAccess();"},{"lineNumber":151,"author":{"gitID":"500poundbear"},"content":"            }"},{"lineNumber":152,"author":{"gitID":"500poundbear"},"content":"        };"},{"lineNumber":153,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":155,"author":{"gitID":"500poundbear"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"500poundbear"},"content":"     * Converts the number of years into number of months"},{"lineNumber":157,"author":{"gitID":"500poundbear"},"content":"     *"},{"lineNumber":158,"author":{"gitID":"500poundbear"},"content":"     * @param years"},{"lineNumber":159,"author":{"gitID":"500poundbear"},"content":"     * @return Number of months"},{"lineNumber":160,"author":{"gitID":"500poundbear"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"500poundbear"},"content":"    private int yearsToMonth(int years) {"},{"lineNumber":162,"author":{"gitID":"500poundbear"},"content":"        return years * 12;"},{"lineNumber":163,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":165,"author":{"gitID":"500poundbear"},"content":""},{"lineNumber":166,"author":{"gitID":"500poundbear"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"500poundbear"},"content":"     * Returns whether month offset provided is within range of [0, displayYear * 12]"},{"lineNumber":168,"author":{"gitID":"500poundbear"},"content":"     *"},{"lineNumber":169,"author":{"gitID":"500poundbear"},"content":"     * @param indOffset Value to be checked"},{"lineNumber":170,"author":{"gitID":"500poundbear"},"content":"     * @param totalMonthsDisplayed To determine maximum bound of offset accepted"},{"lineNumber":171,"author":{"gitID":"500poundbear"},"content":"     * @return Boolean whether offset is accepted or not"},{"lineNumber":172,"author":{"gitID":"500poundbear"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"500poundbear"},"content":"    private boolean isOffsetWithinDisplayRange(int indOffset, int totalMonthsDisplayed) {"},{"lineNumber":174,"author":{"gitID":"500poundbear"},"content":"        return (indOffset \u003e\u003d 0) \u0026\u0026 (indOffset \u003c totalMonthsDisplayed);"},{"lineNumber":175,"author":{"gitID":"500poundbear"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"500poundbear"},"content":"}"}],"authorContributionMap":{"500poundbear":172,"kenpaxtonlim":1,"-":3}}]
