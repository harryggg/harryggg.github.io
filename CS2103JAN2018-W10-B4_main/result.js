var resultJson = [{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"AddSurance was developed by the https://se-edu.github.io/docs/Team.html[se-edu] team. +"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d Joshua Lee Kai Sheng"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"image::jlks96.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"{empty}[https://github.com/jlks96[github]] [https://www.linkedin.com/in/joshua-lee-a47b94157/[portfolio]]"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"Role: Team Lead + Deliverables \u0026 Deadlines + Scheduling + Code Quality + Documentation"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"Responsibilities: Logic + UI + Model + Storage + Commons"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d Ng Jun Wei"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"image::ng95junwei.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":"{empty}[http://github.com/ng95junwei[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"Role: Integration + Code Quality + Java expert"},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"Responsibilities: Logic + Model + Storage"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d Lucas Gaylord"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"image::luca590.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"{empty}[http://github.com/luca590[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"Role: Testing + Integration + Documentation"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"Responsibilities: Logic + Model"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"jlks96":17,"-":22}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"\u003d AddSurance"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"https://travis-ci.org/se-edu/addressbook-level4[image:https://travis-ci.org/se-edu/addressbook-level4.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"-"},"content":"https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"https://coveralls.io/github/CS2103JAN2018-W10-B4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-W10-B4/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":7,"author":{"gitID":"-"},"content":"https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"},{"lineNumber":8,"author":{"gitID":"-"},"content":"https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":15,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":16,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"AddSurance is a comprehensive, reliable and convenient address book for insurance agents built on a simple belief -- efficiency and elegance."},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"With its minimalistic design, user interactions are greatly simplified using a CLI (Command Line Interface). With this application, you can"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"maintain your huge list of contacts easily, at the same time, managing your schedule efficiently."},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"So, if you are a reasonably tech-savvy insurance agent, this application is absolutely designed for you!"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":27,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":29,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"* Major parts of this application is derived and extended from the comprehensive https://github.com/se-edu/addressbook-level4[AddressBook Level 4]"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"developed by the https://github.com/se-edu[SE-EDU initiative]"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"* Some parts of this application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":36,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":37,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"jlks96":10,"-":29}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"\u003d AddSurance - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":":repoURL: https://github.com/CS2103JAN2018-W10-B4/addressbook-level4"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"AddSurance is for insurance agents who *prefer to use a desktop app for managing contacts with current or potential clients*. More importantly, AddSurance is *optimized for insurance agents who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, AddSurance can get your contact management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":25,"author":{"gitID":"-"},"content":"+"},{"lineNumber":26,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":27,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":28,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."},{"lineNumber":31,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for your Address Book."},{"lineNumber":32,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":33,"author":{"gitID":"-"},"content":"+"},{"lineNumber":34,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":35,"author":{"gitID":"-"},"content":"+"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":".  Type the command/command alias in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"e.g. typing *`help`* or *`h`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":38,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"* *`list`* : lists all contacts"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"* *`l`* : lists all contacts"},{"lineNumber":42,"author":{"gitID":"-"},"content":"* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"* **`a`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."},{"lineNumber":44,"author":{"gitID":"-"},"content":"* **`delete`**`3` : deletes the 3rd contact shown in the current list"},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":"* **`d`**`3` : deletes the 3rd contact shown in the current list"},{"lineNumber":46,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"* *`ex`* : exits the app"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":52,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":55,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":58,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":59,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":60,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":61,"author":{"gitID":"jlks96"},"content":"* Actual command words can be replaced by their aliases e.g. for the help command, user can use its alias, *`h`*, instead."},{"lineNumber":62,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d Viewing help : `help` or `h`"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"jlks96"},"content":"Format: `help` or `h`"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d Adding a person: `add` or `a`"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"Adds a person to the address book +"},{"lineNumber":71,"author":{"gitID":"jlks96"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` or `a n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":74,"author":{"gitID":"-"},"content":"A person can have any number of tags (including 0)"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"},{"lineNumber":79,"author":{"gitID":"-"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d Listing all persons : `list` or `l`"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"Shows a list of all persons in the address book. +"},{"lineNumber":84,"author":{"gitID":"jlks96"},"content":"Format: `list` or `l`"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d Editing a person : `edit` or `e`"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"Edits an existing person in the address book. +"},{"lineNumber":89,"author":{"gitID":"jlks96"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...` or `e INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"****"},{"lineNumber":92,"author":{"gitID":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":93,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":94,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":95,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."},{"lineNumber":96,"author":{"gitID":"-"},"content":"* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":97,"author":{"gitID":"-"},"content":"****"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":102,"author":{"gitID":"-"},"content":"Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":103,"author":{"gitID":"-"},"content":"* `edit 2 n/Betsy Crower t/` +"},{"lineNumber":104,"author":{"gitID":"-"},"content":"Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"Ng95junwei"},"content":"\u003d\u003d\u003d Locating persons by detail: `find` or `f`"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"Ng95junwei"},"content":"Finds persons whose details contain any of the given keywords or part thereof. +"},{"lineNumber":109,"author":{"gitID":"jlks96"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]` or `f KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"****"},{"lineNumber":112,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":113,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":114,"author":{"gitID":"Ng95junwei"},"content":"* All the details will be searched."},{"lineNumber":115,"author":{"gitID":"Ng95junwei"},"content":"* Partial words will be matched e.g. `Han` will match `Hans`"},{"lineNumber":116,"author":{"gitID":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":117,"author":{"gitID":"-"},"content":"****"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"* `find John` +"},{"lineNumber":122,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":123,"author":{"gitID":"-"},"content":"* `find Betsy Tim John` +"},{"lineNumber":124,"author":{"gitID":"Ng95junwei"},"content":"Returns any person having names containing `Betsy`, `Tim`, or `John`"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d Deleting a person : `delete` or `d`"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"Deletes the specified person from the address book. +"},{"lineNumber":129,"author":{"gitID":"jlks96"},"content":"Format: `delete INDEX` or `d INDEX`"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"****"},{"lineNumber":132,"author":{"gitID":"-"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":133,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":134,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":135,"author":{"gitID":"-"},"content":"****"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":140,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":141,"author":{"gitID":"-"},"content":"Deletes the 2nd person in the address book."},{"lineNumber":142,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":143,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":144,"author":{"gitID":"jlks96"},"content":"Deletes the 1st person in the results of the `find` command"},{"lineNumber":145,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":146,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d Deleting dated persons  : `deletebefore` or `db`"},{"lineNumber":147,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":148,"author":{"gitID":"jlks96"},"content":"Deletes all persons added before a specified date with specified tags. +"},{"lineNumber":149,"author":{"gitID":"jlks96"},"content":"Format: `deletebefore d/DATE t/TAG...` or `db d/DATE t/TAG...`"},{"lineNumber":150,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":151,"author":{"gitID":"jlks96"},"content":"****"},{"lineNumber":152,"author":{"gitID":"jlks96"},"content":"* Persons deleted must have tags that matches all the specified `TAG` s."},{"lineNumber":153,"author":{"gitID":"jlks96"},"content":"* The specified tags can be in any order."},{"lineNumber":154,"author":{"gitID":"jlks96"},"content":"* *At least one tag* must be provided."},{"lineNumber":155,"author":{"gitID":"jlks96"},"content":"* The input `DATE` *must be in the following format: dd/MM/yyyy*."},{"lineNumber":156,"author":{"gitID":"jlks96"},"content":"****"},{"lineNumber":157,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":158,"author":{"gitID":"jlks96"},"content":"Examples:"},{"lineNumber":159,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":160,"author":{"gitID":"jlks96"},"content":"* `deletebefore d/12/12/2017 t/non-clients` +"},{"lineNumber":161,"author":{"gitID":"jlks96"},"content":"Deletes all non-clients added before 12/12/2017 in the address book."},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"Ng95junwei"},"content":"\u003d\u003d\u003d Emailing a person : `email` or `em`"},{"lineNumber":164,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":165,"author":{"gitID":"Ng95junwei"},"content":"Emails a person based on the specified name."},{"lineNumber":166,"author":{"gitID":"Ng95junwei"},"content":"Format: `email KEYWORD TEMPLATE`"},{"lineNumber":167,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":168,"author":{"gitID":"jlks96"},"content":"****"},{"lineNumber":169,"author":{"gitID":"Ng95junwei"},"content":"* Emailed person must have name match the full word of keyword"},{"lineNumber":170,"author":{"gitID":"Ng95junwei"},"content":"* Template chosen must contain the TEMPLATE keyword."},{"lineNumber":171,"author":{"gitID":"Ng95junwei"},"content":"* Search is case insensitive. e.g. hans will match Hans"},{"lineNumber":172,"author":{"gitID":"Ng95junwei"},"content":"* Persons matching at least one keyword will be emailed. eg. Hans Bo will email Hans Gruber, Bo Yang"},{"lineNumber":173,"author":{"gitID":"jlks96"},"content":"****"},{"lineNumber":174,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":175,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d Selecting a person : `select` or `s`"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"Selects the person identified by the index number used in the last person listing. +"},{"lineNumber":178,"author":{"gitID":"jlks96"},"content":"Format: `select INDEX` or `s INDEX`"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"****"},{"lineNumber":181,"author":{"gitID":"-"},"content":"* Selects the person and loads the Google search page the person at the specified `INDEX`."},{"lineNumber":182,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":183,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":184,"author":{"gitID":"-"},"content":"****"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":189,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":190,"author":{"gitID":"-"},"content":"Selects the 2nd person in the address book."},{"lineNumber":191,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":192,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":193,"author":{"gitID":"-"},"content":"Selects the 1st person in the results of the `find` command."},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d Listing entered commands : `history` or `hist`"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":198,"author":{"gitID":"jlks96"},"content":"Format: `history` or `hist`"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":201,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":202,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":203,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"luca590"},"content":"\u003d\u003d\u003d Importing contacts from CSV : `import_contacts` or `ic`"},{"lineNumber":206,"author":{"gitID":"luca590"},"content":""},{"lineNumber":207,"author":{"gitID":"luca590"},"content":"Imports contacts from a csv file that contains the header (Name, Email, Phone, Address) +"},{"lineNumber":208,"author":{"gitID":"luca590"},"content":"Format: `import_contacts f/PATH`"},{"lineNumber":209,"author":{"gitID":"luca590"},"content":""},{"lineNumber":210,"author":{"gitID":"luca590"},"content":"For example `import_contacts f/examplefile.csv` will import the contacts contained in the .csv file `examplefile.csv`"},{"lineNumber":211,"author":{"gitID":"luca590"},"content":""},{"lineNumber":212,"author":{"gitID":"luca590"},"content":"[NOTE]"},{"lineNumber":213,"author":{"gitID":"luca590"},"content":"Please include the file extension (.csv), do include the full file path, and do not include quotations (\"...\") around the file path."},{"lineNumber":214,"author":{"gitID":"luca590"},"content":""},{"lineNumber":215,"author":{"gitID":"luca590"},"content":"\u003d\u003d\u003d Exporting contacts to CSV: `export_contacts` or `ec`"},{"lineNumber":216,"author":{"gitID":"luca590"},"content":""},{"lineNumber":217,"author":{"gitID":"luca590"},"content":"Export all contacts to a .csv file."},{"lineNumber":218,"author":{"gitID":"luca590"},"content":""},{"lineNumber":219,"author":{"gitID":"luca590"},"content":"Format: `ec f/PATH`"},{"lineNumber":220,"author":{"gitID":"luca590"},"content":""},{"lineNumber":221,"author":{"gitID":"luca590"},"content":"[NOTE]"},{"lineNumber":222,"author":{"gitID":"luca590"},"content":"It is not necessary to include a file path after the command. If no file path is included, `ec` will create and write to a new .csv file, _data/exportToExisting.csv_"},{"lineNumber":223,"author":{"gitID":"luca590"},"content":""},{"lineNumber":224,"author":{"gitID":"luca590"},"content":""},{"lineNumber":225,"author":{"gitID":"luca590"},"content":"****"},{"lineNumber":226,"author":{"gitID":"luca590"},"content":"* Be sure to include .csv at the end of the file name"},{"lineNumber":227,"author":{"gitID":"luca590"},"content":"* No need to put the file path in quotes (\"...\"), can simply write it directly"},{"lineNumber":228,"author":{"gitID":"luca590"},"content":"* Can write absolute or local file path"},{"lineNumber":229,"author":{"gitID":"luca590"},"content":"* You may also give the path to a file name that doesn\u0027t yet exist. For example, you may call `ec data/newFileExample.csv` where `data/newFileExample.csv` does not yet exist. In this case, a new .csv file will be automatically created and written to."},{"lineNumber":230,"author":{"gitID":"luca590"},"content":"****"},{"lineNumber":231,"author":{"gitID":"luca590"},"content":""},{"lineNumber":232,"author":{"gitID":"luca590"},"content":""},{"lineNumber":233,"author":{"gitID":"jlks96"},"content":"// tag::scheduling[]"},{"lineNumber":234,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d Adding an appointment : `addappointment` or `aa`"},{"lineNumber":235,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":236,"author":{"gitID":"jlks96"},"content":"Adds an appointment with a person in the address book that will be shown in the calendar panel. +"},{"lineNumber":237,"author":{"gitID":"jlks96"},"content":"Format: `addappointment n/NAME d/DATE st/STARTTIME et/ENDTIME l/LOCATION` or `aa n/NAME d/DATE st/STARTTIME et/ENDTIME l/LOCATION`"},{"lineNumber":238,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":239,"author":{"gitID":"jlks96"},"content":"****"},{"lineNumber":240,"author":{"gitID":"jlks96"},"content":"* Adds an appointment with the person named `NAME`, with the specified `DATE`, `STARTTIME`, `ENDTIME` and `LOCATION` respectively"},{"lineNumber":241,"author":{"gitID":"jlks96"},"content":"* The input date *must be in the following format: dd/MM/yyyy*."},{"lineNumber":242,"author":{"gitID":"jlks96"},"content":"* The input time *must be in the following format: HH:mm (24hr format)*."},{"lineNumber":243,"author":{"gitID":"jlks96"},"content":"* The calendar panel will be updated accordingly."},{"lineNumber":244,"author":{"gitID":"jlks96"},"content":"****"},{"lineNumber":245,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":246,"author":{"gitID":"jlks96"},"content":"Examples:"},{"lineNumber":247,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":248,"author":{"gitID":"jlks96"},"content":"* `aa n/Betsy d/12/12/2017 st/12:30 et/13:30 l/Gold Park Estate` +"},{"lineNumber":249,"author":{"gitID":"jlks96"},"content":"Creates an appointment with Betsy on 12/12/2017 from 12:30pm to 1:30pm at Gold Park Estate."},{"lineNumber":250,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":251,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d Deleting an appointment : `deleteappointment` or `da`"},{"lineNumber":252,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":253,"author":{"gitID":"jlks96"},"content":"Deletes an appointment in the address book. +"},{"lineNumber":254,"author":{"gitID":"jlks96"},"content":"Format: `deleteappointment n/NAME d/DATE st/STARTTIME et/ENDTIME l/LOCATION` or `da n/NAME d/DATE st/STARTTIME et/ENDTIME l/LOCATION`"},{"lineNumber":255,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":256,"author":{"gitID":"jlks96"},"content":"****"},{"lineNumber":257,"author":{"gitID":"jlks96"},"content":"* Deletes an appointment that matches all the input `NAME`, `DATE`, `STARTTIME`, `ENDTIME` and `LOCATION`."},{"lineNumber":258,"author":{"gitID":"jlks96"},"content":"* The input date *must be in the following format: dd/MM/yyyy*."},{"lineNumber":259,"author":{"gitID":"jlks96"},"content":"* The input time *must be in the following format: HH:mm (24hr format)*."},{"lineNumber":260,"author":{"gitID":"jlks96"},"content":"* The calendar panel will be updated accordingly."},{"lineNumber":261,"author":{"gitID":"jlks96"},"content":"****"},{"lineNumber":262,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":263,"author":{"gitID":"jlks96"},"content":"Examples:"},{"lineNumber":264,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":265,"author":{"gitID":"jlks96"},"content":"* `da n/Betsy d/12/12/2017 st/12:30 et/13:30 l/Gold Park Estate` +"},{"lineNumber":266,"author":{"gitID":"jlks96"},"content":"Deletes the appointment previously arranged with Betsy on 12/12/2017 from 12:30pm to 1:30pm at Gold Park Estate."},{"lineNumber":267,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":268,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d Zooming in calendar view : `zoomin` or `zi`"},{"lineNumber":269,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":270,"author":{"gitID":"jlks96"},"content":"Zooms in the calendar panel to show a more detailed calendar view  +"},{"lineNumber":271,"author":{"gitID":"jlks96"},"content":"Format: `zoomin` or `zi`"},{"lineNumber":272,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":273,"author":{"gitID":"jlks96"},"content":"****"},{"lineNumber":274,"author":{"gitID":"jlks96"},"content":"* The calendar will zoom in in the following order: Year View -\u003e Month View -\u003e Week View -\u003e Day View."},{"lineNumber":275,"author":{"gitID":"jlks96"},"content":"****"},{"lineNumber":276,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":277,"author":{"gitID":"jlks96"},"content":"Examples:"},{"lineNumber":278,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":279,"author":{"gitID":"jlks96"},"content":"* `zi` +"},{"lineNumber":280,"author":{"gitID":"jlks96"},"content":"If the calendar panel is previously showing the Year View, it will now be showing the Month View."},{"lineNumber":281,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":282,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d Zooming out calendar view : `zoomout` or `zo`"},{"lineNumber":283,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":284,"author":{"gitID":"jlks96"},"content":"Zooms out the calendar panel to show a wider calendar view  +"},{"lineNumber":285,"author":{"gitID":"jlks96"},"content":"Format: `zoomout` or `zo`"},{"lineNumber":286,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":287,"author":{"gitID":"jlks96"},"content":"****"},{"lineNumber":288,"author":{"gitID":"jlks96"},"content":"* The calendar will zoom out in the following order: Day View -\u003e Week View -\u003e Month View -\u003e Year View."},{"lineNumber":289,"author":{"gitID":"jlks96"},"content":"****"},{"lineNumber":290,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":291,"author":{"gitID":"jlks96"},"content":"Examples:"},{"lineNumber":292,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":293,"author":{"gitID":"jlks96"},"content":"* `zo` +"},{"lineNumber":294,"author":{"gitID":"jlks96"},"content":"If the calendar panel is previously showing the Day View, it will now be showing the Week View."},{"lineNumber":295,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":296,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d Going back on calendar view : `goback` or `gb` `[Coming in v1.5]`"},{"lineNumber":297,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":298,"author":{"gitID":"jlks96"},"content":"Makes the calendar view go back in time from the currently displaying date. +"},{"lineNumber":299,"author":{"gitID":"jlks96"},"content":"Format: `goback` or `gb`"},{"lineNumber":300,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":301,"author":{"gitID":"jlks96"},"content":"Examples:"},{"lineNumber":302,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":303,"author":{"gitID":"jlks96"},"content":"* `gb` +"},{"lineNumber":304,"author":{"gitID":"jlks96"},"content":"If the calendar panel is currently displaying Day View for 02/02/2018, it will change the Day View to 01/02/2018"},{"lineNumber":305,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":306,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d Going forward on calendar view : `goforward` or `gf` `[Coming in v1.5]`"},{"lineNumber":307,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":308,"author":{"gitID":"jlks96"},"content":"Makes the calendar view go forward in time from the currently displaying date. +"},{"lineNumber":309,"author":{"gitID":"jlks96"},"content":"Format: `goforward` or `gf`"},{"lineNumber":310,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":311,"author":{"gitID":"jlks96"},"content":"Examples:"},{"lineNumber":312,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":313,"author":{"gitID":"jlks96"},"content":"* `gf` +"},{"lineNumber":314,"author":{"gitID":"jlks96"},"content":"If the calendar panel is currently displaying Day View for 02/02/2018, it will change the Day View to 03/02/2018"},{"lineNumber":315,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":316,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d Finding an appointment : `findappointment` or `fa` `[Coming in v2.0]`"},{"lineNumber":317,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":318,"author":{"gitID":"jlks96"},"content":"Finds appointments with details containing any of the given keywords or part thereof. +"},{"lineNumber":319,"author":{"gitID":"jlks96"},"content":"Format: `findappointment KEYWORD...` or `fa KEYWORD...`"},{"lineNumber":320,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":321,"author":{"gitID":"jlks96"},"content":"****"},{"lineNumber":322,"author":{"gitID":"jlks96"},"content":"* Keywords are words that are part of any fields of an appointment, i.e. `NAME`, `DATE`, `STARTTIME`, `ENDTIME` and `LOCATION`"},{"lineNumber":323,"author":{"gitID":"jlks96"},"content":"* The search is case insensitive. e.g `gold park` will match `Gold Park`"},{"lineNumber":324,"author":{"gitID":"Ng95junwei"},"content":"* All the details will be searched."},{"lineNumber":325,"author":{"gitID":"jlks96"},"content":"* Partial words will be matched e.g. `gol` will match `gold park`"},{"lineNumber":326,"author":{"gitID":"jlks96"},"content":"****"},{"lineNumber":327,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":328,"author":{"gitID":"jlks96"},"content":"Examples:"},{"lineNumber":329,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":330,"author":{"gitID":"jlks96"},"content":"* `findappointment 12/12/2018` +"},{"lineNumber":331,"author":{"gitID":"jlks96"},"content":"Returns any appointment that is scheduled on 12/12/2018"},{"lineNumber":332,"author":{"gitID":"jlks96"},"content":"* `findappointment Betsy Tim John` +"},{"lineNumber":333,"author":{"gitID":"jlks96"},"content":"Returns any appointment with `Betsy`, `Tim`, or `John`"},{"lineNumber":334,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":335,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d Editing an appointment : `editappointment` or `ea` `[Coming in v2.0]`"},{"lineNumber":336,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":337,"author":{"gitID":"jlks96"},"content":"Edits an appointment in the address book. +"},{"lineNumber":338,"author":{"gitID":"jlks96"},"content":"Format: `editappointment INDEX [n/NAME] [d/DATE] [st/STARTTIME] [et/ENDTIME] [l/LOCATION]`"},{"lineNumber":339,"author":{"gitID":"jlks96"},"content":"or `ea INDEX [n/NAME] [d/DATE] [st/STARTTIME] [et/ENDTIME] [l/LOCATION]`"},{"lineNumber":340,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":341,"author":{"gitID":"jlks96"},"content":"****"},{"lineNumber":342,"author":{"gitID":"jlks96"},"content":"* Edits an appointment at the specified INDEX."},{"lineNumber":343,"author":{"gitID":"jlks96"},"content":"The index refers to the index number shown in the last appointment listing. The index must be a positive integer 1, 2, 3, …​"},{"lineNumber":344,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":345,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":346,"author":{"gitID":"jlks96"},"content":"* The input date *must be in the following format: dd/MM/yyyy*."},{"lineNumber":347,"author":{"gitID":"jlks96"},"content":"* The input time *must be in the following format: HH:mm (24hr format)*."},{"lineNumber":348,"author":{"gitID":"jlks96"},"content":"* The calendar panel will be updated accordingly."},{"lineNumber":349,"author":{"gitID":"jlks96"},"content":"****"},{"lineNumber":350,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":351,"author":{"gitID":"jlks96"},"content":"Examples:"},{"lineNumber":352,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":353,"author":{"gitID":"jlks96"},"content":"* `findappointment Betsy` +"},{"lineNumber":354,"author":{"gitID":"jlks96"},"content":"`editappointment 1 d/25/12/2017 l/Parkway Parade` +"},{"lineNumber":355,"author":{"gitID":"jlks96"},"content":"Edits the date and location of the first appointment with Betsy in the listing to 25/12/2017 and Parkway Parade respectively."},{"lineNumber":356,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":357,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d Configuring calendar theme : `configcalendar` or `cc` `[Coming in v2.0]`"},{"lineNumber":358,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":359,"author":{"gitID":"jlks96"},"content":"Configures the calendar view. +"},{"lineNumber":360,"author":{"gitID":"jlks96"},"content":"Format: `configcalendar s/STYLE` or `cc s/STYLE`"},{"lineNumber":361,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":362,"author":{"gitID":"jlks96"},"content":"****"},{"lineNumber":363,"author":{"gitID":"jlks96"},"content":"* Set the calendar theme to the specified predefined `STYLE`."},{"lineNumber":364,"author":{"gitID":"jlks96"},"content":"****"},{"lineNumber":365,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":366,"author":{"gitID":"jlks96"},"content":"Examples:"},{"lineNumber":367,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":368,"author":{"gitID":"jlks96"},"content":"* `cc s/STYLE_2` +"},{"lineNumber":369,"author":{"gitID":"jlks96"},"content":"Set the calendar theme to the predefined `STYLE_2`."},{"lineNumber":370,"author":{"gitID":"jlks96"},"content":"// end::scheduling[]"},{"lineNumber":371,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":372,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":373,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d Undoing previous command : `undo` or `u`"},{"lineNumber":374,"author":{"gitID":"-"},"content":""},{"lineNumber":375,"author":{"gitID":"-"},"content":"Restores the address book to the state before the previous _undoable_ command was executed. +"},{"lineNumber":376,"author":{"gitID":"jlks96"},"content":"Format: `undo` or `u`"},{"lineNumber":377,"author":{"gitID":"-"},"content":""},{"lineNumber":378,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":379,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":380,"author":{"gitID":"-"},"content":"Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":381,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":382,"author":{"gitID":"-"},"content":""},{"lineNumber":383,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":384,"author":{"gitID":"-"},"content":""},{"lineNumber":385,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":386,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":387,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":388,"author":{"gitID":"-"},"content":""},{"lineNumber":389,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":390,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":391,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":392,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":393,"author":{"gitID":"-"},"content":""},{"lineNumber":394,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":395,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":396,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":397,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":398,"author":{"gitID":"-"},"content":""},{"lineNumber":399,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo` or `r`"},{"lineNumber":400,"author":{"gitID":"-"},"content":""},{"lineNumber":401,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":402,"author":{"gitID":"jlks96"},"content":"Format: `redo` or `r`"},{"lineNumber":403,"author":{"gitID":"-"},"content":""},{"lineNumber":404,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":405,"author":{"gitID":"-"},"content":""},{"lineNumber":406,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":407,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":408,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":409,"author":{"gitID":"-"},"content":""},{"lineNumber":410,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":411,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":412,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":413,"author":{"gitID":"-"},"content":""},{"lineNumber":414,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":415,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":416,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":417,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":418,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":419,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":420,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":421,"author":{"gitID":"-"},"content":""},{"lineNumber":422,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d Clearing all entries : `clear` or `c`"},{"lineNumber":423,"author":{"gitID":"-"},"content":""},{"lineNumber":424,"author":{"gitID":"-"},"content":"Clears all entries from the address book. +"},{"lineNumber":425,"author":{"gitID":"jlks96"},"content":"Format: `clear` or `c`"},{"lineNumber":426,"author":{"gitID":"-"},"content":""},{"lineNumber":427,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d Exiting the program : `exit` or `ex`"},{"lineNumber":428,"author":{"gitID":"-"},"content":""},{"lineNumber":429,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":430,"author":{"gitID":"jlks96"},"content":"Format: `exit` or `ex`"},{"lineNumber":431,"author":{"gitID":"-"},"content":""},{"lineNumber":432,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":433,"author":{"gitID":"-"},"content":""},{"lineNumber":434,"author":{"gitID":"-"},"content":"Address book data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":435,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":436,"author":{"gitID":"-"},"content":""},{"lineNumber":437,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":438,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":439,"author":{"gitID":"-"},"content":""},{"lineNumber":440,"author":{"gitID":"-"},"content":"_{explain how the user can enable/disable data encryption}_"},{"lineNumber":441,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":442,"author":{"gitID":"-"},"content":""},{"lineNumber":443,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":444,"author":{"gitID":"-"},"content":""},{"lineNumber":445,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":446,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."},{"lineNumber":447,"author":{"gitID":"-"},"content":""},{"lineNumber":448,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":449,"author":{"gitID":"-"},"content":""},{"lineNumber":450,"author":{"gitID":"-"},"content":"* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"},{"lineNumber":451,"author":{"gitID":"-"},"content":"e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"},{"lineNumber":452,"author":{"gitID":"-"},"content":"* *Clear* : `clear`"},{"lineNumber":453,"author":{"gitID":"-"},"content":"* *Delete* : `delete INDEX` +"},{"lineNumber":454,"author":{"gitID":"-"},"content":"e.g. `delete 3`"},{"lineNumber":455,"author":{"gitID":"jlks96"},"content":"* *Delete Before* : `deletebefore d/DATE [t/TAG]...` +"},{"lineNumber":456,"author":{"gitID":"jlks96"},"content":"e.g. `deletebefore d/12/12/2017 t/friends`"},{"lineNumber":457,"author":{"gitID":"Ng95junwei"},"content":"* *Email* : `email KEYWORD TEMPLATE` +"},{"lineNumber":458,"author":{"gitID":"Ng95junwei"},"content":"e.g. `email James followup`"},{"lineNumber":459,"author":{"gitID":"-"},"content":"* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"},{"lineNumber":460,"author":{"gitID":"-"},"content":"e.g. `edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":461,"author":{"gitID":"-"},"content":"* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":462,"author":{"gitID":"-"},"content":"e.g. `find James Jake`"},{"lineNumber":463,"author":{"gitID":"-"},"content":"* *List* : `list`"},{"lineNumber":464,"author":{"gitID":"-"},"content":"* *Help* : `help`"},{"lineNumber":465,"author":{"gitID":"-"},"content":"* *Select* : `select INDEX` +"},{"lineNumber":466,"author":{"gitID":"-"},"content":"e.g.`select 2`"},{"lineNumber":467,"author":{"gitID":"-"},"content":"* *History* : `history`"},{"lineNumber":468,"author":{"gitID":"jlks96"},"content":"* *Add Appointment* : `addappointment n/NAME d/DATE st/STARTTIME et/ENDTIME l/LOCATION` +"},{"lineNumber":469,"author":{"gitID":"jlks96"},"content":"e.g. `addappointment n/Betsy d/12/12/2017 st/12:30 et/13:30 l/Gold Park Estate`"},{"lineNumber":470,"author":{"gitID":"jlks96"},"content":"* *Delete Appointment* : `deleteappointment n/NAME d/DATE st/STARTTIME et/ENDTIME l/LOCATION` +"},{"lineNumber":471,"author":{"gitID":"jlks96"},"content":"e.g. `deleteappointment n/Betsy d/12/12/2017 st/12:30 et/13:30 l/Gold Park Estate`"},{"lineNumber":472,"author":{"gitID":"jlks96"},"content":"* *Zoom In* : `zoomin`"},{"lineNumber":473,"author":{"gitID":"jlks96"},"content":"* *Zoom Out* : `zoomout`"},{"lineNumber":474,"author":{"gitID":"jlks96"},"content":"* *Calendar Go Back* : `goback`"},{"lineNumber":475,"author":{"gitID":"jlks96"},"content":"* *Calendar Go Forward* : `goforward`"},{"lineNumber":476,"author":{"gitID":"jlks96"},"content":"* *Find Appointment*: `findappointment KEYWORD...` +"},{"lineNumber":477,"author":{"gitID":"jlks96"},"content":"e.g. `findappointment 12/12/2018`"},{"lineNumber":478,"author":{"gitID":"jlks96"},"content":"* *Edit Appointment*: `editappointment INDEX [n/NAME] [d/DATE] [st/STARTTIME] [et/ENDTIME] [l/LOCATION]` +"},{"lineNumber":479,"author":{"gitID":"jlks96"},"content":"e.g. `editappointment 1 d/25/12/2017 l/Parkway Parade`"},{"lineNumber":480,"author":{"gitID":"jlks96"},"content":"* *Configure Calendar Theme* : `configcalendar s/STYLE`"},{"lineNumber":481,"author":{"gitID":"jlks96"},"content":"e.g. `configcalendar s/STYLE_2`"},{"lineNumber":482,"author":{"gitID":"-"},"content":"* *Undo* : `undo`"},{"lineNumber":483,"author":{"gitID":"-"},"content":"* *Redo* : `redo`"}],"authorContributionMap":{"jlks96":208,"luca590":28,"Ng95junwei":15,"-":232}},{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getMidIndex;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.KEYWORD_MATCHING_MEIER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class DeleteCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        /* Case: delete the last person in the list -\u003e deleted */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandSuccess(lastPersonIndex);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: undo deleting the last person in the list -\u003e last person restored */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        removePerson(modelBeforeDeletingLast, lastPersonIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: delete the middle person in the list -\u003e deleted */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Index middlePersonIndex \u003d getMidIndex(getModel());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"},{"lineNumber":69,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        selectPerson(selectedIndex);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":101,"author":{"gitID":"-"},"content":"                getModel().getAddressBook().getPersonList().size() + 1);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * @return the removed person"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    private Person removePerson(Model model, Index index) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Person targetPerson \u003d getPerson(model, index);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            model.deletePerson(targetPerson);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"targetPerson is retrieved from model.\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return targetPerson;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":140,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":1,"-":199}},{"path":"src/test/java/systemtests/ClearCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.KEYWORD_MATCHING_MEIER;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ClearCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void clear() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        final Model defaultModel \u003d getModel();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"},{"lineNumber":22,"author":{"gitID":"-"},"content":"         * spaces -\u003e cleared"},{"lineNumber":23,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        /* Case: undo clearing address book -\u003e original address book restored */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        /* Case: redo clearing address book -\u003e cleared */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before clearing -\u003e entire address book cleared */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: clear empty address book -\u003e cleared */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @see ClearCommandSystemTest#assertCommandSuccess(String)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":1,"-":100}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointmentsWithAutoDateGeneration.ALICE;"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointmentsWithAutoDateGeneration.AMY;"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointmentsWithAutoDateGeneration.BOB;"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointmentsWithAutoDateGeneration.CARL;"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointmentsWithAutoDateGeneration.HOON;"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointmentsWithAutoDateGeneration.IDA;"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointmentsWithAutoDateGeneration.KEYWORD_MATCHING_MEIER;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":64,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":65,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Person toAdd \u003d AMY;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":68,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":84,"author":{"gitID":"jlks96"},"content":"                .withAddress(VALID_ADDRESS_AMY).generateDate().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":91,"author":{"gitID":"jlks96"},"content":"                .withAddress(VALID_ADDRESS_AMY).generateDate().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":98,"author":{"gitID":"jlks96"},"content":"                .withAddress(VALID_ADDRESS_AMY).generateDate().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":105,"author":{"gitID":"jlks96"},"content":"                .withAddress(VALID_ADDRESS_BOB).generateDate().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":142,"author":{"gitID":"jlks96"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersonsAndAppointments#ALICE"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":186,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC;"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Person toAdd) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":12,"-":249}},{"path":"src/test/java/systemtests/HelpAliasSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.ui.StatusBarFooter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"public class HelpAliasSystemTest extends AddressBookSystemTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        //use accelerator"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        getCommandBox().click();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        getResultDisplay().click();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        getPersonListPanel().click();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        //use menu button"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        //use command box"},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":"        executeCommand(HelpCommand.COMMAND_ALIAS);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // open help window and give it focus"},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":"        executeCommand(HelpCommand.COMMAND_ALIAS);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // assert that while the help window is open the UI updates correctly for a command execution"},{"lineNumber":58,"author":{"gitID":"jlks96"},"content":"        executeCommand(SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // assert that the status bar too is updated correctly while the help window is open"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // note: the select command tested above does not update the status bar"},{"lineNumber":66,"author":{"gitID":"jlks96"},"content":"        executeCommand(DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Asserts that the help window isn\u0027t open."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    private void assertHelpWindowNotOpen() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":5,"-":83}},{"path":"src/test/java/systemtests/DeleteAliasSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getMidIndex;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.KEYWORD_MATCHING_MEIER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"public class DeleteAliasSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_ALIAS + \"      \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"                + \"       \";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        /* Case: delete the last person in the list -\u003e deleted */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandSuccess(lastPersonIndex);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /* Case: undo deleting the last person in the list -\u003e last person restored */"},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"        command \u003d UndoCommand.COMMAND_ALIAS;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"        command \u003d RedoCommand.COMMAND_ALIAS;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        removePerson(modelBeforeDeletingLast, lastPersonIndex);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        /* Case: delete the middle person in the list -\u003e deleted */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Index middlePersonIndex \u003d getMidIndex(getModel());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":71,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":74,"author":{"gitID":"jlks96"},"content":"        command \u003d DeleteCommand.COMMAND_ALIAS + \" \" + invalidIndex;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        selectPerson(selectedIndex);"},{"lineNumber":85,"author":{"gitID":"jlks96"},"content":"        command \u003d DeleteCommand.COMMAND_ALIAS + \" \" + selectedIndex.getOneBased();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":93,"author":{"gitID":"jlks96"},"content":"        command \u003d DeleteCommand.COMMAND_ALIAS + \" 0\";"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":97,"author":{"gitID":"jlks96"},"content":"        command \u003d DeleteCommand.COMMAND_ALIAS + \" -1\";"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":102,"author":{"gitID":"-"},"content":"                getModel().getAddressBook().getPersonList().size() + 1);"},{"lineNumber":103,"author":{"gitID":"jlks96"},"content":"        command \u003d DeleteCommand.COMMAND_ALIAS + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":107,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_ALIAS + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":110,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_ALIAS + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * @return the removed person"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    private Person removePerson(Model model, Index index) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        Person targetPerson \u003d getPerson(model, index);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            model.deletePerson(targetPerson);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"targetPerson is retrieved from model.\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        return targetPerson;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":141,"author":{"gitID":"jlks96"},"content":"                DeleteCommand.COMMAND_ALIAS + \" \" + toDelete.getOneBased(), expectedModel,"},{"lineNumber":142,"author":{"gitID":"jlks96"},"content":"                expectedResultMessage);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":168,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":15,"-":187}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"import guitests.guihandles.CalendarPanelHandle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"import seedu.address.testutil.TypicalPersonsAndAppointments;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":40,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":41,"author":{"gitID":"-"},"content":" */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":78,"author":{"gitID":"jlks96"},"content":"        return TypicalPersonsAndAppointments.getTypicalAddressBook();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"jlks96"},"content":"    public CalendarPanelHandle getCalendarPanel() {"},{"lineNumber":105,"author":{"gitID":"jlks96"},"content":"        return mainWindowHandle.getCalendarPanel();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":124,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":135,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":136,"author":{"gitID":"jlks96"},"content":"        executeCommand(ListCommand.COMMAND_ALIAS);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"},{"lineNumber":146,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":147,"author":{"gitID":"jlks96"},"content":"        executeCommand(FindCommand.COMMAND_ALIAS + \" \" + keyword);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":157,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":158,"author":{"gitID":"jlks96"},"content":"        executeCommand(SelectCommand.COMMAND_ALIAS + \" \" + index.getOneBased());"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":168,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":169,"author":{"gitID":"jlks96"},"content":"        executeCommand(ClearCommand.COMMAND_ALIAS);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":177,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"jlks96"},"content":"     * Calls {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"jlks96"},"content":"     * Asserts that the previously selected card is now deselected"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":206,"author":{"gitID":"jlks96"},"content":"     * Asserts that tonly the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":215,"author":{"gitID":"jlks96"},"content":"     * Asserts that the the selected card in the person list panel remain unchanged."},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":224,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":231,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":238,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":248,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":259,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":263,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":264,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":265,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":266,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":274,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":277,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":17,"-":261}},{"path":"src/test/java/systemtests/DeleteBeforeCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":3,"author":{"gitID":"jlks96"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_NOT_FOUND;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.commands.DeleteBeforeCommand.MESSAGE_DELETE_PERSONS_SUCCESS;"},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalDates.DATE_FIRST_JAN;"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalDates.INVALID_DATE_DESC;"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalDates.VALID_DATE_DESC;"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.ALICE;"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalTags.INVALID_TAG_DESC;"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalTags.TAG_SET_FRIEND;"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalTags.VALID_TAG_DESC_FRIEND;"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalTags.VALID_TAG_DESC_OWES_MONEY;"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"import seedu.address.logic.commands.DeleteBeforeCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.person.DateAdded;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"public class DeleteBeforeCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"    private static final String MESSAGE_INVALID_DELETE_BEFORE_COMMAND_FORMAT \u003d"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteBeforeCommand.MESSAGE_USAGE);"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"    public void deleteBefore() {"},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"        /* --------------------------------- Performing delete before operation  ------------------------------------ */"},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"        /* Case: delete persons in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"        Model modelBeforeDeleting \u003d getModel();"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"        Model modelAfterDeleting \u003d getModel();"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"        String command \u003d \"     \" + DeleteBeforeCommand.COMMAND_WORD + \"      \" + VALID_DATE_DESC"},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"                + \"       \" + VALID_TAG_DESC_FRIEND;"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"        List\u003cPerson\u003e deleteTargets \u003d Arrays.asList(ALICE);"},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":"        removePersons(modelAfterDeleting, deleteTargets);"},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"                MESSAGE_DELETE_PERSONS_SUCCESS, deleteTargets.size(), TAG_SET_FRIEND, DATE_FIRST_JAN);"},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"        assertCommandSuccess(command, modelAfterDeleting, expectedResultMessage);"},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":"        /* Case: undo deleting the persons in the list -\u003e deleted persons restored */"},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":"        assertCommandSuccess(command, modelBeforeDeleting, expectedResultMessage);"},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":"        /* Case: redo deleting the persons in the list -\u003e restored persons deleted again */"},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":58,"author":{"gitID":"jlks96"},"content":"        assertCommandSuccess(command, modelAfterDeleting, expectedResultMessage);"},{"lineNumber":59,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":60,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":61,"author":{"gitID":"jlks96"},"content":"        /* ------------------------------ Performing invalid delete before operation -------------------------------- */"},{"lineNumber":62,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":63,"author":{"gitID":"jlks96"},"content":"        /* Case: invalid date -\u003e rejected */"},{"lineNumber":64,"author":{"gitID":"jlks96"},"content":"        command \u003d DeleteBeforeCommand.COMMAND_WORD + INVALID_DATE_DESC + VALID_TAG_DESC_OWES_MONEY;"},{"lineNumber":65,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(command, DateAdded.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":66,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":67,"author":{"gitID":"jlks96"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":68,"author":{"gitID":"jlks96"},"content":"        command \u003d DeleteBeforeCommand.COMMAND_WORD + VALID_DATE_DESC + INVALID_TAG_DESC;"},{"lineNumber":69,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":70,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":71,"author":{"gitID":"jlks96"},"content":"        /* Case: missing date -\u003e rejected */"},{"lineNumber":72,"author":{"gitID":"jlks96"},"content":"        command \u003d DeleteBeforeCommand.COMMAND_WORD + VALID_TAG_DESC_OWES_MONEY;"},{"lineNumber":73,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_BEFORE_COMMAND_FORMAT);"},{"lineNumber":74,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":75,"author":{"gitID":"jlks96"},"content":"        /* Case: missing tag -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"jlks96"},"content":"        command \u003d DeleteBeforeCommand.COMMAND_WORD + VALID_DATE_DESC;"},{"lineNumber":77,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_BEFORE_COMMAND_FORMAT);"},{"lineNumber":78,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":79,"author":{"gitID":"jlks96"},"content":"        /* Case: no such person exists -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"jlks96"},"content":"        command \u003d DeleteBeforeCommand.COMMAND_WORD + VALID_DATE_DESC + VALID_TAG_DESC_OWES_MONEY;"},{"lineNumber":81,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(command, MESSAGE_PERSONS_NOT_FOUND);"},{"lineNumber":82,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":84,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"jlks96"},"content":"     * Removes all {@code Person}s in {@code model}\u0027s address book specified by the {@code targets} list."},{"lineNumber":86,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"jlks96"},"content":"    private void removePersons(Model model, List\u003cPerson\u003e targets) {"},{"lineNumber":88,"author":{"gitID":"jlks96"},"content":"        try {"},{"lineNumber":89,"author":{"gitID":"jlks96"},"content":"            model.deletePersons(targets);"},{"lineNumber":90,"author":{"gitID":"jlks96"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":91,"author":{"gitID":"jlks96"},"content":"            throw new AssertionError(\"Targets not found in model.\");"},{"lineNumber":92,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":95,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"jlks96"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":97,"author":{"gitID":"jlks96"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":98,"author":{"gitID":"jlks96"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":99,"author":{"gitID":"jlks96"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":100,"author":{"gitID":"jlks96"},"content":"     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":101,"author":{"gitID":"jlks96"},"content":"     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"jlks96"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":103,"author":{"gitID":"jlks96"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":104,"author":{"gitID":"jlks96"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":105,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"jlks96"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":107,"author":{"gitID":"jlks96"},"content":"        executeCommand(command);"},{"lineNumber":108,"author":{"gitID":"jlks96"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":109,"author":{"gitID":"jlks96"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":110,"author":{"gitID":"jlks96"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":111,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":113,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"jlks96"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":115,"author":{"gitID":"jlks96"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":116,"author":{"gitID":"jlks96"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":117,"author":{"gitID":"jlks96"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":118,"author":{"gitID":"jlks96"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":119,"author":{"gitID":"jlks96"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":120,"author":{"gitID":"jlks96"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":121,"author":{"gitID":"jlks96"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":122,"author":{"gitID":"jlks96"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":123,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"jlks96"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":125,"author":{"gitID":"jlks96"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":126,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":127,"author":{"gitID":"jlks96"},"content":"        executeCommand(command);"},{"lineNumber":128,"author":{"gitID":"jlks96"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":129,"author":{"gitID":"jlks96"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":130,"author":{"gitID":"jlks96"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":131,"author":{"gitID":"jlks96"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":132,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":124,"-":9}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d AddressBook Level 4 - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":":repoURL: https://github.com/CS2103JAN2018-W10-B4/addressbook-level4/tree/master"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":22,"author":{"gitID":"-"},"content":"+"},{"lineNumber":23,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":24,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":25,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":26,"author":{"gitID":"-"},"content":"+"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":32,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":38,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":39,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":40,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":41,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":42,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":43,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":45,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":47,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":52,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":61,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":62,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":65,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":80,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":85,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":92,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":97,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":100,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":105,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":110,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":120,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":121,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":132,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":135,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":143,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":151,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":156,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":159,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":170,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":171,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":174,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":177,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":178,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":181,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":184,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":187,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":188,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":189,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":194,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":197,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":200,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":207,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":208,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":209,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":212,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":215,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":222,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":225,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":234,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d Undo/Redo Feature"},{"lineNumber":235,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":246,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":247,"author":{"gitID":"-"},"content":"----"},{"lineNumber":248,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":"}"},{"lineNumber":254,"author":{"gitID":"-"},"content":"----"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":257,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":258,"author":{"gitID":"-"},"content":"----"},{"lineNumber":259,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":"}"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":272,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"-"},"content":"}"},{"lineNumber":274,"author":{"gitID":"-"},"content":"----"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":287,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":296,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":305,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":324,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":325,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":326,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":327,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":328,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":333,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":334,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":335,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":336,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":337,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":343,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":344,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":345,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":346,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":347,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":348,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":354,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":355,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":356,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":357,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":358,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":359,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"Ng95junwei"},"content":"// tag::email[]"},{"lineNumber":362,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d Email Feature"},{"lineNumber":363,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":364,"author":{"gitID":"Ng95junwei"},"content":"The email mechanism is facilitated by the `GmailUtil` which resides under the `util` package. The implementation"},{"lineNumber":365,"author":{"gitID":"Ng95junwei"},"content":"uses the Gmail API which exists as an imported library."},{"lineNumber":366,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":367,"author":{"gitID":"Ng95junwei"},"content":"// end::email[]"},{"lineNumber":368,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":369,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":370,"author":{"gitID":"-"},"content":""},{"lineNumber":371,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":372,"author":{"gitID":"-"},"content":""},{"lineNumber":373,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":374,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":375,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":376,"author":{"gitID":"-"},"content":""},{"lineNumber":377,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":378,"author":{"gitID":"-"},"content":""},{"lineNumber":379,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":380,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":381,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":382,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":383,"author":{"gitID":"-"},"content":""},{"lineNumber":384,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":385,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":386,"author":{"gitID":"-"},"content":""},{"lineNumber":387,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":388,"author":{"gitID":"-"},"content":""},{"lineNumber":389,"author":{"gitID":"jlks96"},"content":"// tag::deletebefore[]"},{"lineNumber":390,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d Delete Dated Persons Function"},{"lineNumber":391,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":392,"author":{"gitID":"jlks96"},"content":"The delete dated persons mechanism supports deleting all persons added before a date who possess all the tags specified by the user."},{"lineNumber":393,"author":{"gitID":"jlks96"},"content":"This function is facilitated by adding a `DateAdded` attribute whenever a `Person` is added to the address book. This"},{"lineNumber":394,"author":{"gitID":"jlks96"},"content":"date stamp is added automatically by the application whenever the user adds a new person. Furthermore, to check if a `Person` is to be deleted,"},{"lineNumber":395,"author":{"gitID":"jlks96"},"content":"additional predicate classes are implemented."},{"lineNumber":396,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":397,"author":{"gitID":"jlks96"},"content":"The command for this function, `DeleteBeforeCommand` inherits from the `UndoableCommand`. This allows user to undo the delete should he/she does it by mistake."},{"lineNumber":398,"author":{"gitID":"jlks96"},"content":"The `DeleteBeforeCommand` takes in `d/DATE` and `[t/TAG...]` as parameters. The `TAG`s parameter allows the user to delete only persons with the"},{"lineNumber":399,"author":{"gitID":"jlks96"},"content":"specified tags and not everyone added before a certain date. This enhances the flexibility of this delete function."},{"lineNumber":400,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":401,"author":{"gitID":"jlks96"},"content":"The implementation of this function adheres closely to the Object Oriented Principle as well as the Single Responsibility Principle."},{"lineNumber":402,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":403,"author":{"gitID":"jlks96"},"content":"Following is a sequence diagram describing how the delete dated persons function works:"},{"lineNumber":404,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":405,"author":{"gitID":"jlks96"},"content":"image::DeleteBeforeSequenceDiagram.png[width\u003d\"900\"]"},{"lineNumber":406,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":407,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":408,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `DeleteBeforeCommand`"},{"lineNumber":409,"author":{"gitID":"jlks96"},"content":"* **Alternative 1 (current choice):** Follows the general design of the `delete` command"},{"lineNumber":410,"author":{"gitID":"jlks96"},"content":"** Pros: Consistencies in implementation of commands and command parsers"},{"lineNumber":411,"author":{"gitID":"jlks96"},"content":"** Cons: Requires additional methods for removing persons in the `AddressBook` and `UniquePersonList` classes"},{"lineNumber":412,"author":{"gitID":"jlks96"},"content":"* **Alternative 2:** Extends the `delete` command"},{"lineNumber":413,"author":{"gitID":"jlks96"},"content":"** Pros: Does not require \"exploratory\" modifications in the Model component"},{"lineNumber":414,"author":{"gitID":"jlks96"},"content":"** Cons: Needs to call the `delete` command multiple times to delete all targeted persons"},{"lineNumber":415,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":416,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `DateAdded`"},{"lineNumber":417,"author":{"gitID":"jlks96"},"content":"* **Alternative 1 (current choice):** Add `DateAdded` as an attribute of a `Person`"},{"lineNumber":418,"author":{"gitID":"jlks96"},"content":"** Pros: Consistencies in implementation of the `Person` model that is in line with the OOP and Single Responsibility Principle"},{"lineNumber":419,"author":{"gitID":"jlks96"},"content":"** Cons: Requires additional tests and overheads in maintaining an extra attribute"},{"lineNumber":420,"author":{"gitID":"jlks96"},"content":"* **Alternative 2:** Include the `DateAdded` directly inside the `Person` class"},{"lineNumber":421,"author":{"gitID":"jlks96"},"content":"** Pros: Less overhead needed to maintain the DateAdded attribute"},{"lineNumber":422,"author":{"gitID":"jlks96"},"content":"** Cons: Reduces consistencies in the existing architecture and reduces coherence of the `Person` class"},{"lineNumber":423,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":424,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Who adds the `DateAdded` attribute"},{"lineNumber":425,"author":{"gitID":"jlks96"},"content":"* **Alternative 1 (current choice):** The application automatically creates a `DateAdded` attribute for every `Person` added"},{"lineNumber":426,"author":{"gitID":"jlks96"},"content":"** Pros: Avoids unnecessary errors in user-input date"},{"lineNumber":427,"author":{"gitID":"jlks96"},"content":"** Cons: Additional stubs are needed to carry out tests in order to manually fix and manipulate `DateAdded`"},{"lineNumber":428,"author":{"gitID":"jlks96"},"content":"* **Alternative 2:** Let the user input the current date"},{"lineNumber":429,"author":{"gitID":"jlks96"},"content":"** Pros: The user might input the wrong date or date with invalid format"},{"lineNumber":430,"author":{"gitID":"jlks96"},"content":"** Cons: Ease of implementation"},{"lineNumber":431,"author":{"gitID":"jlks96"},"content":"// end::deletebefore[]"},{"lineNumber":432,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":433,"author":{"gitID":"jlks96"},"content":"// tag::scheduling[]"},{"lineNumber":434,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d Scheduling and Calendar Module"},{"lineNumber":435,"author":{"gitID":"jlks96"},"content":"This entire section is dedicated to explaining the whole scheduling and calendar module in view of its scale and significance."},{"lineNumber":436,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":437,"author":{"gitID":"jlks96"},"content":"In general, the implementation of this module follows closely to the current architecture of the system as shown in \u003c\u003cDesign-Architecture, Section 2.1\u003e\u003e."},{"lineNumber":438,"author":{"gitID":"jlks96"},"content":"This is to ensure consistency in the design of the system to keep it simple as _simplicity is consistency_."},{"lineNumber":439,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":440,"author":{"gitID":"jlks96"},"content":"A number of Software Engineering Principles are used in the implementation of this module, namely *OOP*, *SOLID*, *YAGNI*, *DRY* principles."},{"lineNumber":441,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":442,"author":{"gitID":"jlks96"},"content":"The following is the activity diagram that summarises the actions that can be taken by a user with regards to the scheduling function."},{"lineNumber":443,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":444,"author":{"gitID":"jlks96"},"content":"\u003d\u003e Attach activity diagram"},{"lineNumber":445,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":446,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d\u003d Appointment Model"},{"lineNumber":447,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":448,"author":{"gitID":"jlks96"},"content":"The `Appointment` model is created to support the scheduling feature of the address book. It stores the information of appointments"},{"lineNumber":449,"author":{"gitID":"jlks96"},"content":"arranged by the user. The class diagram for the Appointment is as follows:"},{"lineNumber":450,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":451,"author":{"gitID":"jlks96"},"content":"\u003d\u003e Insert class diagram"},{"lineNumber":452,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":453,"author":{"gitID":"jlks96"},"content":"Similar to the `Person` model, the `Appointment` model consists of an `Appointment` class which has its attributes implemented as separate classes to"},{"lineNumber":454,"author":{"gitID":"jlks96"},"content":"observe the *Single Responsibility Principle*. The attributes include:"},{"lineNumber":455,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":456,"author":{"gitID":"jlks96"},"content":"i) `PersonName` \u003d\u003e the name of the person the user is having appointment with"},{"lineNumber":457,"author":{"gitID":"jlks96"},"content":"ii) `Date` \u003d\u003e the date of the appointment"},{"lineNumber":458,"author":{"gitID":"jlks96"},"content":"iii) `StartTime` \u003d\u003e the start time of the appointment"},{"lineNumber":459,"author":{"gitID":"jlks96"},"content":"iv) `EndTime` \u003d\u003e the end time of the appointment"},{"lineNumber":460,"author":{"gitID":"jlks96"},"content":"v) `Location` \u003d\u003e the arranged location of the appointment"},{"lineNumber":461,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":462,"author":{"gitID":"jlks96"},"content":"The `Appointments` are stored in a `UniqueAppointmentList` in the `AddressBook`. The existing `Model` interface is extended"},{"lineNumber":463,"author":{"gitID":"jlks96"},"content":"with functionality to manage the filtered list of `Appointments`. The extension is kept as minimised as possible in light of"},{"lineNumber":464,"author":{"gitID":"jlks96"},"content":"the *YAGNI* Principle."},{"lineNumber":465,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":466,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":467,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Model Manager for Appointment"},{"lineNumber":468,"author":{"gitID":"jlks96"},"content":"* **Alternative 1 (current choice):** The existing `ModelManager` is extended to handle the filtered list of `Appointments`"},{"lineNumber":469,"author":{"gitID":"jlks96"},"content":"** Pros: This design adheres to the *DRY* Principle as there will not be a duplicated `ModelManager` for the `Appointment` model"},{"lineNumber":470,"author":{"gitID":"jlks96"},"content":"with repeated functionality as the existing one."},{"lineNumber":471,"author":{"gitID":"jlks96"},"content":"** Cons: Additional methods added to the `Model` interface might increase coupling for existing classes that are dependent on"},{"lineNumber":472,"author":{"gitID":"jlks96"},"content":"the `ModelManager`. For example, modifications made for `Appointment` in the `ModelManager` might now affect other commands unrelated"},{"lineNumber":473,"author":{"gitID":"jlks96"},"content":"to `Appointment` which call the `ModelManager`"},{"lineNumber":474,"author":{"gitID":"jlks96"},"content":"* **Alternative 2:** Create another `Model` interface implemented by another `ModelManager`"},{"lineNumber":475,"author":{"gitID":"jlks96"},"content":"** Pros: Ease of implementation and minimal impact on classes coupled with the existing `ModelManager`"},{"lineNumber":476,"author":{"gitID":"jlks96"},"content":"** Cons: Violates the *DRY* Principle and causes redundant codes"},{"lineNumber":477,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":478,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Creation of StartTime and EndTime attributes"},{"lineNumber":479,"author":{"gitID":"jlks96"},"content":"* **Alternative 1 (current choice):** `StartTime` and `EndTime` are created as separate classes which extends the `Time` class"},{"lineNumber":480,"author":{"gitID":"jlks96"},"content":"** Pros: This implementation adheres to the Polymorphism and Inheritance concepts in OOP. Both `StartTime` and `EndTime` has a"},{"lineNumber":481,"author":{"gitID":"jlks96"},"content":"_is a_ relationship with `Time`. The separation of `StartTime` and `EndTime` into two classes also support possible future extensions to"},{"lineNumber":482,"author":{"gitID":"jlks96"},"content":"these attribute classes. For example, it is possible to set different limits to the `StartTime` and `EndTime` with this implementation."},{"lineNumber":483,"author":{"gitID":"jlks96"},"content":"** Cons: The `StartTime` and `EndTime` have to adhere to the Liskov Substitution Principle where `StartTime` and `EndTime` cannot be"},{"lineNumber":484,"author":{"gitID":"jlks96"},"content":"more restrictive than the parent `Time` class."},{"lineNumber":485,"author":{"gitID":"jlks96"},"content":"* **Alternative 2:** Create `StartTime` and `EndTime` as separate unrelated classes"},{"lineNumber":486,"author":{"gitID":"jlks96"},"content":"** Pros: Avoids coupling between `StartTime` and `EndTime` due to an additional `Time` superclass"},{"lineNumber":487,"author":{"gitID":"jlks96"},"content":"** Cons: Violates the *DRY* Principle as `StartTime` and `EndTime` share some functionality, such as checking the validity"},{"lineNumber":488,"author":{"gitID":"jlks96"},"content":"of an input date"},{"lineNumber":489,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":490,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d\u003d Calendar UI"},{"lineNumber":491,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":492,"author":{"gitID":"jlks96"},"content":"The calendar is implemented using third party libraries provided by https://github.com/dlemmermann/CalendarFX[CalendarFX]."},{"lineNumber":493,"author":{"gitID":"jlks96"},"content":"The calendar panel view is shown below:"},{"lineNumber":494,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":495,"author":{"gitID":"jlks96"},"content":"image::CalendarView.png[width\u003d\"900\"]"},{"lineNumber":496,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":497,"author":{"gitID":"jlks96"},"content":"The setting up of the `CalendarView` is done by first creating a `Calendar` named _Appointments_ which is added to a `CalendarSource`."},{"lineNumber":498,"author":{"gitID":"jlks96"},"content":"The `CalendarSource` is then added to the `CalendarView`. The implementation details are as shown in the following code snippet:"},{"lineNumber":499,"author":{"gitID":"jlks96"},"content":"[source,java]"},{"lineNumber":500,"author":{"gitID":"jlks96"},"content":"----"},{"lineNumber":501,"author":{"gitID":"jlks96"},"content":"CalendarView calendarView;"},{"lineNumber":502,"author":{"gitID":"jlks96"},"content":"Calendar calendar;"},{"lineNumber":503,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":504,"author":{"gitID":"jlks96"},"content":"calendar \u003d new Calendar(\"Appointments\");"},{"lineNumber":505,"author":{"gitID":"jlks96"},"content":"CalendarSource calendarSource \u003d new CalendarSource(\"My Calendar\");"},{"lineNumber":506,"author":{"gitID":"jlks96"},"content":"calendarSource.getCalendars().addAll(calendar);"},{"lineNumber":507,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":508,"author":{"gitID":"jlks96"},"content":"calendarView.getCalendarSources().addAll(calendarSource);"},{"lineNumber":509,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":510,"author":{"gitID":"jlks96"},"content":"calendarView.setRequestedTime(LocalTime.now());"},{"lineNumber":511,"author":{"gitID":"jlks96"},"content":"calendarView.showMonthPage();"},{"lineNumber":512,"author":{"gitID":"jlks96"},"content":"----"},{"lineNumber":513,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":514,"author":{"gitID":"jlks96"},"content":"The `Appointments` stored in the address book is loaded as `Entries` into the `Calendar` upon start up. The list of `Appointments`"},{"lineNumber":515,"author":{"gitID":"jlks96"},"content":"is passed into the `CalendarPanel` class. For each of these `Appointments`, the attributes are used to create an `Entry`, which is then"},{"lineNumber":516,"author":{"gitID":"jlks96"},"content":"added to the `Calendar`."},{"lineNumber":517,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":518,"author":{"gitID":"jlks96"},"content":"When there are changes to the filtered list of `Appointments` due to addition or deletion of appointments, the `Calendar` is updated"},{"lineNumber":519,"author":{"gitID":"jlks96"},"content":"by using *Event Handlers*. An example of an event handler for the addition of a new appointment is shown below:"},{"lineNumber":520,"author":{"gitID":"jlks96"},"content":"[source,java]"},{"lineNumber":521,"author":{"gitID":"jlks96"},"content":"----"},{"lineNumber":522,"author":{"gitID":"jlks96"},"content":"@Subscribe"},{"lineNumber":523,"author":{"gitID":"jlks96"},"content":"private void handleNewAppointmentAddedEvent(NewAppointmentAddedEvent event) {"},{"lineNumber":524,"author":{"gitID":"jlks96"},"content":"    logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":525,"author":{"gitID":"jlks96"},"content":"    loadEntry(event.getAppointmentAdded());"},{"lineNumber":526,"author":{"gitID":"jlks96"},"content":"}"},{"lineNumber":527,"author":{"gitID":"jlks96"},"content":"----"},{"lineNumber":528,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":529,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":530,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Updating of Calendar due to addition or deletion of appointments"},{"lineNumber":531,"author":{"gitID":"jlks96"},"content":"* **Alternative 1 (current choice):** Use of Event Handling to update the `Calendar`"},{"lineNumber":532,"author":{"gitID":"jlks96"},"content":"** Pros: Event handling is suitable for UI purposes due to its flexibility"},{"lineNumber":533,"author":{"gitID":"jlks96"},"content":"** Cons: The flow of program is less logical and obvious"},{"lineNumber":534,"author":{"gitID":"jlks96"},"content":"* **Alternative 2:** The `DeleteAppointmentCommand` and `AddAppointmentCommand` call the `UIManager` to invoke the update"},{"lineNumber":535,"author":{"gitID":"jlks96"},"content":"** Pros: Associations between the `Logic` and `UI` components are clearer"},{"lineNumber":536,"author":{"gitID":"jlks96"},"content":"** Cons: This will introduce a two way dependency between the `Logic` and `UI` components which may lead to confusion and"},{"lineNumber":537,"author":{"gitID":"jlks96"},"content":"make the `Logic` component coupled to the `UI` component"},{"lineNumber":538,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":539,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Creation of Calendar"},{"lineNumber":540,"author":{"gitID":"jlks96"},"content":"* **Alternative 1 (current choice):** Use third party libraries"},{"lineNumber":541,"author":{"gitID":"jlks96"},"content":"** Pros: Readily available hence time saving"},{"lineNumber":542,"author":{"gitID":"jlks96"},"content":"** Cons: There might be possible bugs in the libraries provided by third parties"},{"lineNumber":543,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":544,"author":{"gitID":"jlks96"},"content":"[NOTE]"},{"lineNumber":545,"author":{"gitID":"jlks96"},"content":"There is an existing bug in the `YearPage` for the `Calendar`, which causes the `YearPage` to fail to scale its size according"},{"lineNumber":546,"author":{"gitID":"jlks96"},"content":"to the size of the container `Pane`"},{"lineNumber":547,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":548,"author":{"gitID":"jlks96"},"content":"* **Alternative 2:** Create our own `CalendarView`"},{"lineNumber":549,"author":{"gitID":"jlks96"},"content":"** Pros: More flexibility with the design of the `CalendarView`"},{"lineNumber":550,"author":{"gitID":"jlks96"},"content":"** Cons: Time consuming and manpower intensive"},{"lineNumber":551,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":552,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d\u003d Add Appointment Function"},{"lineNumber":553,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":554,"author":{"gitID":"jlks96"},"content":"The add Appointment function is implemented as the `AddAppointmentCommand` together"},{"lineNumber":555,"author":{"gitID":"jlks96"},"content":"with its associated `AddAppointmentCommandParser` class. This function supports the adding of an `Appointment` to the address book."},{"lineNumber":556,"author":{"gitID":"jlks96"},"content":"The `AddAppointmentCommand` inherits from the `UndoableCommand` to allow user to undo the addition of an `Appointment`. The"},{"lineNumber":557,"author":{"gitID":"jlks96"},"content":"implementation of the `AddAppointmentCommand` is similar to that of the `AddCommand`."},{"lineNumber":558,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":559,"author":{"gitID":"jlks96"},"content":"Following is a sequence diagram describing how the add appointment function works:"},{"lineNumber":560,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":561,"author":{"gitID":"jlks96"},"content":"image::AddAppointmentSequenceDiagram.png[width\u003d\"900\"]"},{"lineNumber":562,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":563,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":564,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: What `Event` to raise when adding a new `Appointment`"},{"lineNumber":565,"author":{"gitID":"jlks96"},"content":"* **Alternative 1 (current choice):** Raise a specially created `NewAppointmentAddedEvent`"},{"lineNumber":566,"author":{"gitID":"jlks96"},"content":"** Pros: Do not have to respond to unrelated or unnecessary events"},{"lineNumber":567,"author":{"gitID":"jlks96"},"content":"** Cons: Overhead in maintaining the new `Event` class"},{"lineNumber":568,"author":{"gitID":"jlks96"},"content":"* **Alternative 2:** Raise the existing `AddressBookChangedEvent`"},{"lineNumber":569,"author":{"gitID":"jlks96"},"content":"** Pros: Do not have to implement a new `Event` class"},{"lineNumber":570,"author":{"gitID":"jlks96"},"content":"** Cons: The Calendar will refresh whenever `AddressBookChangedEvent` is raised, including when only the `Person` list is changed."},{"lineNumber":571,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":572,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d\u003d Delete Appointment Function"},{"lineNumber":573,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":574,"author":{"gitID":"jlks96"},"content":"The delete Appointment function is implemented as the `DeleteAppointmentCommand` together"},{"lineNumber":575,"author":{"gitID":"jlks96"},"content":"with its associated `DeleteAppointmentCommandParser` class. This function supports the deletion of an `Appointment` from the address book."},{"lineNumber":576,"author":{"gitID":"jlks96"},"content":"The `DeleteAppointmentCommand` inherits from the `UndoableCommand` to allow user to undo the deletion of an `Appointment`. The"},{"lineNumber":577,"author":{"gitID":"jlks96"},"content":"implementation of the `DeleteAppointmentCommand` is similar to that of the `DeleteCommand`."},{"lineNumber":578,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":579,"author":{"gitID":"jlks96"},"content":"Following is a sequence diagram describing how the delete appointment function works:"},{"lineNumber":580,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":581,"author":{"gitID":"jlks96"},"content":"image::DeleteAppointmentSequenceDiagram.png[width\u003d\"900\"]"},{"lineNumber":582,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":583,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":584,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: What fields to input when deleting an `Appointment`"},{"lineNumber":585,"author":{"gitID":"jlks96"},"content":"* **Alternative 1 (current choice):** Use all attributes of an `Appointment` as input fields to delete a matching `Appointment`"},{"lineNumber":586,"author":{"gitID":"jlks96"},"content":"** Pros: Certainty in deleting an `Appointment`"},{"lineNumber":587,"author":{"gitID":"jlks96"},"content":"** Cons: User has to input all fields which may be cumbersome"},{"lineNumber":588,"author":{"gitID":"jlks96"},"content":"* **Alternative 2:** Only input the `PersonName` and `Date` of the `Appointment` to be deleted"},{"lineNumber":589,"author":{"gitID":"jlks96"},"content":"** Pros: User does not have to input all the attributes of an `Appointment`"},{"lineNumber":590,"author":{"gitID":"jlks96"},"content":"** Cons: There may be more than one `Appointments` with the same `PersonName` and `Date`, which may cause unexpected behaviour by"},{"lineNumber":591,"author":{"gitID":"jlks96"},"content":"the `DeleteAppointmentCommand`"},{"lineNumber":592,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":593,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d\u003d Calendar Zooming Function"},{"lineNumber":594,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":595,"author":{"gitID":"jlks96"},"content":"The calendar zooming function is implemented by the `ZoomInCommand` and `ZoomOutCommand`. These `Command` classes are kept simple,"},{"lineNumber":596,"author":{"gitID":"jlks96"},"content":"only responsible for raising `ZoomInEvent` and `ZoomOutEvent`. The `ZoomInEvent` and `ZoomOutEvent` are created to support this function."},{"lineNumber":597,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":598,"author":{"gitID":"jlks96"},"content":"The actual implementation of the `ZoomInCommand` is as follows:"},{"lineNumber":599,"author":{"gitID":"jlks96"},"content":"[source,java]"},{"lineNumber":600,"author":{"gitID":"jlks96"},"content":"----"},{"lineNumber":601,"author":{"gitID":"jlks96"},"content":"public class ZoomInCommand extends Command {"},{"lineNumber":602,"author":{"gitID":"jlks96"},"content":"    public static final String COMMAND_WORD \u003d \"zoomin\";"},{"lineNumber":603,"author":{"gitID":"jlks96"},"content":"    public static final String COMMAND_ALIAS \u003d \"zi\";"},{"lineNumber":604,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":605,"author":{"gitID":"jlks96"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Calendar zoomed in\";"},{"lineNumber":606,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":607,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":608,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":609,"author":{"gitID":"jlks96"},"content":"        raise(new ZoomInEvent());"},{"lineNumber":610,"author":{"gitID":"jlks96"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":611,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":612,"author":{"gitID":"jlks96"},"content":"}"},{"lineNumber":613,"author":{"gitID":"jlks96"},"content":"----"},{"lineNumber":614,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":615,"author":{"gitID":"jlks96"},"content":"The actual implementation of the `ZoomOutCommand` is as follows:"},{"lineNumber":616,"author":{"gitID":"jlks96"},"content":"[source,java]"},{"lineNumber":617,"author":{"gitID":"jlks96"},"content":"----"},{"lineNumber":618,"author":{"gitID":"jlks96"},"content":"public class ZoomOutCommand extends Command {"},{"lineNumber":619,"author":{"gitID":"jlks96"},"content":"    public static final String COMMAND_WORD \u003d \"zoomout\";"},{"lineNumber":620,"author":{"gitID":"jlks96"},"content":"    public static final String COMMAND_ALIAS \u003d \"zo\";"},{"lineNumber":621,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":622,"author":{"gitID":"jlks96"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Calendar zoomed out\";"},{"lineNumber":623,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":624,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":625,"author":{"gitID":"jlks96"},"content":"    public CommandResult execute() {"},{"lineNumber":626,"author":{"gitID":"jlks96"},"content":"        raise(new ZoomOutEvent());"},{"lineNumber":627,"author":{"gitID":"jlks96"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":628,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":629,"author":{"gitID":"jlks96"},"content":"}"},{"lineNumber":630,"author":{"gitID":"jlks96"},"content":"----"},{"lineNumber":631,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":632,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":633,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":634,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Where should the event raising be implemented"},{"lineNumber":635,"author":{"gitID":"jlks96"},"content":"* **Alternative 1 (current choice):** Implement event raising in the `Command` superclass"},{"lineNumber":636,"author":{"gitID":"jlks96"},"content":"** Pros: Adheres to the *DRY* principle as `ZoomInCommand` and `ZoomOutCommand` do not have to implement a duplicated event"},{"lineNumber":637,"author":{"gitID":"jlks96"},"content":"raising functionality"},{"lineNumber":638,"author":{"gitID":"jlks96"},"content":"** Cons: All other command subclasses inherits the unnecessary event raising function"},{"lineNumber":639,"author":{"gitID":"jlks96"},"content":"* **Alternative 2:** Implement event raising in a specially created subclass of `Command`, which is in turn inherited by `ZoomInCommand` and `ZooOutCommand`"},{"lineNumber":640,"author":{"gitID":"jlks96"},"content":"** Pros: Commands that do not need to raise event do not need to inherit the event raising function"},{"lineNumber":641,"author":{"gitID":"jlks96"},"content":"** Cons: Might over complicate things for these simple commands."},{"lineNumber":642,"author":{"gitID":"jlks96"},"content":"// end::scheduling[]"},{"lineNumber":643,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":644,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":645,"author":{"gitID":"luca590"},"content":"\u003d\u003d\u003d Import Contacts from CSV file"},{"lineNumber":646,"author":{"gitID":"luca590"},"content":""},{"lineNumber":647,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":648,"author":{"gitID":"luca590"},"content":"The Import Contacts mechanism allows users to import contacts from a .csv file. The file should contain the headers _Name_, _Email_, _Phone_, and _Address_ with a separate contact in each row. This functionality is implemented in with classes `ImportContactsCommand` and `ImportContactsCommandParser`. Functionality is tested in `ImportContactsCommandTest`."},{"lineNumber":649,"author":{"gitID":"luca590"},"content":""},{"lineNumber":650,"author":{"gitID":"luca590"},"content":"The core functionality of the mechanism is in the `executeUndoableCommand()` function of the `ImportContactsCommand` class."},{"lineNumber":651,"author":{"gitID":"luca590"},"content":""},{"lineNumber":652,"author":{"gitID":"luca590"},"content":"The `ImportContactsCommand` borrows code from _https://github.com/callicoder/java-read-write-csv-file_ for reading the CSV file"},{"lineNumber":653,"author":{"gitID":"luca590"},"content":""},{"lineNumber":654,"author":{"gitID":"luca590"},"content":"The architecture of the mechanism is specified in the below diagram:"},{"lineNumber":655,"author":{"gitID":"luca590"},"content":""},{"lineNumber":656,"author":{"gitID":"luca590"},"content":"image::ImportContactDiagram.png[width\u003d\"900\"]"},{"lineNumber":657,"author":{"gitID":"luca590"},"content":""},{"lineNumber":658,"author":{"gitID":"luca590"},"content":""},{"lineNumber":659,"author":{"gitID":"luca590"},"content":"\u003d\u003d\u003d\u003d Design Consideration"},{"lineNumber":660,"author":{"gitID":"luca590"},"content":""},{"lineNumber":661,"author":{"gitID":"luca590"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `ImportContactsCommand`"},{"lineNumber":662,"author":{"gitID":"luca590"},"content":"* **Alternative 1 (current choice):** `ImportContactsCommand`   extends `UndoableCommand` class and calls `model.addPerson`."},{"lineNumber":663,"author":{"gitID":"luca590"},"content":""},{"lineNumber":664,"author":{"gitID":"luca590"},"content":"* **Alternative 2:** Instead of extending `UndoableCommand` it would be possible to extend `AddCommand` class, and overwrite it to add a while loop to loop over the contacts imported from the CSV and add them to the model"},{"lineNumber":665,"author":{"gitID":"luca590"},"content":""},{"lineNumber":666,"author":{"gitID":"luca590"},"content":"* **Alternative 3:** Instead of extending `UndoableCommand` it would be possible to extend the base class `Command`. Although this solution may be simpler at face value, it would limit the scope of `ImportContactsCommand` and may in fact not be much simpler to impliment."},{"lineNumber":667,"author":{"gitID":"luca590"},"content":""},{"lineNumber":668,"author":{"gitID":"luca590"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `ImportContactsCommandParser`"},{"lineNumber":669,"author":{"gitID":"luca590"},"content":"* **Alternative 1 (current choice):** Parses the argument and creates a new `ImportContactsCommand` passing it a file path if there is any"},{"lineNumber":670,"author":{"gitID":"luca590"},"content":""},{"lineNumber":671,"author":{"gitID":"luca590"},"content":"* **Alternative 2:** Because we know there can only be 1 valid argument, we could check for validity and correctness in the `ImportContactsCommand` class and not implement a parser. This could simplify the overall architecture, but it would increase coupling and decrease cohesion, which is against modern software design principles."},{"lineNumber":672,"author":{"gitID":"luca590"},"content":""},{"lineNumber":673,"author":{"gitID":"luca590"},"content":"\u003d\u003d\u003d Exporting Persons Command"},{"lineNumber":674,"author":{"gitID":"luca590"},"content":"The exporting persons mechanism allows the user to write the current `Person` list from the `ReadOnlyAddressBook` to a .csv file. The core functionality of this mechanism is contained in the `ExportContactsCommand` class, with a parser written in `ExportContactsCommandParser`."},{"lineNumber":675,"author":{"gitID":"luca590"},"content":""},{"lineNumber":676,"author":{"gitID":"luca590"},"content":"If the user does not specify a file path, `ExportContactsCommand` will be default write to _data/exportToExisting.csv_. If the user specifies a path to a file that doesn\u0027t exist, `CSVPrinter` will create the .csv file and write to it."},{"lineNumber":677,"author":{"gitID":"luca590"},"content":""},{"lineNumber":678,"author":{"gitID":"luca590"},"content":"`ExportContactsCommand` borrows code from _https://github.com/callicoder/java-read-write-csv-file_ for creating and writing to a .csv file"},{"lineNumber":679,"author":{"gitID":"luca590"},"content":""},{"lineNumber":680,"author":{"gitID":"luca590"},"content":"A diagram of the architecture is displayed below:"},{"lineNumber":681,"author":{"gitID":"luca590"},"content":""},{"lineNumber":682,"author":{"gitID":"luca590"},"content":"image::ExportContactDiagram.png[width\u003d\"900\"]"},{"lineNumber":683,"author":{"gitID":"luca590"},"content":""},{"lineNumber":684,"author":{"gitID":"luca590"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `ImportContactsCommand.getCsvToWriteTo()`"},{"lineNumber":685,"author":{"gitID":"luca590"},"content":"* **Alternative 1 (current choice):** Put the logic for `getCsvToWriteTo()` in a separate function that creates and returns a local `CSVPrinter` object."},{"lineNumber":686,"author":{"gitID":"luca590"},"content":""},{"lineNumber":687,"author":{"gitID":"luca590"},"content":"* **Alternative 2:** An alternative would be to make the `CSVPrinter` object global, instead of returning a local one. This may be slightly more efficient, but it creates inherent risk in that the global variable ma ybe unintentionally modified by another class before writing. Therefore it makes sense to pass it as a local variable."},{"lineNumber":688,"author":{"gitID":"luca590"},"content":""},{"lineNumber":689,"author":{"gitID":"luca590"},"content":"* **Alternative 3:** Another option would be to simply combin the functionality of `getCsvToWriteTo()` with `executeUndoableCommand()` because they are naturally called together. Although `executeUndoableCommand()` depends on `getCsvToWriteTo()`, the reverse dependency does not hold so in order to increase coupling and decrease cohesion it\u0027s better to create a separate function for `getCsvToWriteTo()`."},{"lineNumber":690,"author":{"gitID":"luca590"},"content":""},{"lineNumber":691,"author":{"gitID":"luca590"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `ExportContactsCommandParser`"},{"lineNumber":692,"author":{"gitID":"luca590"},"content":"* **Alternative 1 (current choice):** The `ExportContactsCommandParser.parse(String args)` function uses the condition `if(args.length() \u003c 1)` to check whether the String, `args` is _null_."},{"lineNumber":693,"author":{"gitID":"luca590"},"content":""},{"lineNumber":694,"author":{"gitID":"luca590"},"content":"* **Alternative 2:** An alternative would be to simply check `if(args \u003d\u003d null)` the problem with this approach is that it does not function correctly. The the user inputs `ec`, args is not returned as null, nor is it returned as an empty string. Instead it\u0027s returned as a _non-null string_ with `agrs.length() \u003d 0`. Therefore the best way to check whether the user entered a file path is simply check the length of the String *args*."},{"lineNumber":695,"author":{"gitID":"luca590"},"content":""},{"lineNumber":696,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":697,"author":{"gitID":"-"},"content":""},{"lineNumber":698,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":699,"author":{"gitID":"-"},"content":""},{"lineNumber":700,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":701,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":702,"author":{"gitID":"-"},"content":""},{"lineNumber":703,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":704,"author":{"gitID":"-"},"content":""},{"lineNumber":705,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":706,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":707,"author":{"gitID":"-"},"content":""},{"lineNumber":708,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":709,"author":{"gitID":"-"},"content":""},{"lineNumber":710,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":711,"author":{"gitID":"-"},"content":""},{"lineNumber":712,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":713,"author":{"gitID":"-"},"content":""},{"lineNumber":714,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":715,"author":{"gitID":"-"},"content":""},{"lineNumber":716,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":717,"author":{"gitID":"-"},"content":""},{"lineNumber":718,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":719,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":720,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":721,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":722,"author":{"gitID":"-"},"content":""},{"lineNumber":723,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":724,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":725,"author":{"gitID":"-"},"content":""},{"lineNumber":726,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":727,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":728,"author":{"gitID":"-"},"content":""},{"lineNumber":729,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":730,"author":{"gitID":"-"},"content":""},{"lineNumber":731,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":732,"author":{"gitID":"-"},"content":""},{"lineNumber":733,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":734,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":735,"author":{"gitID":"-"},"content":""},{"lineNumber":736,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":737,"author":{"gitID":"-"},"content":""},{"lineNumber":738,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":739,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":740,"author":{"gitID":"-"},"content":""},{"lineNumber":741,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":742,"author":{"gitID":"-"},"content":""},{"lineNumber":743,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":744,"author":{"gitID":"-"},"content":""},{"lineNumber":745,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":746,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":747,"author":{"gitID":"-"},"content":""},{"lineNumber":748,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":749,"author":{"gitID":"-"},"content":""},{"lineNumber":750,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":751,"author":{"gitID":"-"},"content":""},{"lineNumber":752,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":753,"author":{"gitID":"-"},"content":""},{"lineNumber":754,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":755,"author":{"gitID":"-"},"content":""},{"lineNumber":756,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":757,"author":{"gitID":"-"},"content":""},{"lineNumber":758,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":759,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":760,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":761,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":762,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":763,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":764,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":765,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":766,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":767,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":768,"author":{"gitID":"-"},"content":""},{"lineNumber":769,"author":{"gitID":"-"},"content":""},{"lineNumber":770,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":771,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":772,"author":{"gitID":"-"},"content":""},{"lineNumber":773,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":774,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":775,"author":{"gitID":"-"},"content":""},{"lineNumber":776,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":777,"author":{"gitID":"-"},"content":""},{"lineNumber":778,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":779,"author":{"gitID":"-"},"content":""},{"lineNumber":780,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":781,"author":{"gitID":"-"},"content":""},{"lineNumber":782,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":783,"author":{"gitID":"-"},"content":""},{"lineNumber":784,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":785,"author":{"gitID":"-"},"content":""},{"lineNumber":786,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":787,"author":{"gitID":"-"},"content":""},{"lineNumber":788,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":789,"author":{"gitID":"-"},"content":""},{"lineNumber":790,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":791,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":792,"author":{"gitID":"-"},"content":""},{"lineNumber":793,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":794,"author":{"gitID":"-"},"content":""},{"lineNumber":795,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":796,"author":{"gitID":"-"},"content":""},{"lineNumber":797,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":798,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":799,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":800,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":801,"author":{"gitID":"-"},"content":""},{"lineNumber":802,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":803,"author":{"gitID":"-"},"content":""},{"lineNumber":804,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":805,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":806,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":807,"author":{"gitID":"-"},"content":""},{"lineNumber":808,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":809,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":810,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":811,"author":{"gitID":"-"},"content":""},{"lineNumber":812,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":813,"author":{"gitID":"-"},"content":""},{"lineNumber":814,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":815,"author":{"gitID":"-"},"content":""},{"lineNumber":816,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":817,"author":{"gitID":"-"},"content":""},{"lineNumber":818,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":819,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":820,"author":{"gitID":"-"},"content":""},{"lineNumber":821,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":822,"author":{"gitID":"-"},"content":""},{"lineNumber":823,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":824,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":825,"author":{"gitID":"-"},"content":""},{"lineNumber":826,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":827,"author":{"gitID":"-"},"content":""},{"lineNumber":828,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":829,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":830,"author":{"gitID":"-"},"content":""},{"lineNumber":831,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."},{"lineNumber":832,"author":{"gitID":"-"},"content":"+"},{"lineNumber":833,"author":{"gitID":"-"},"content":"****"},{"lineNumber":834,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":835,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":836,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":837,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":838,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":839,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":840,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":841,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":842,"author":{"gitID":"-"},"content":"****"},{"lineNumber":843,"author":{"gitID":"-"},"content":""},{"lineNumber":844,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":845,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":846,"author":{"gitID":"-"},"content":""},{"lineNumber":847,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":848,"author":{"gitID":"-"},"content":""},{"lineNumber":849,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":850,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":851,"author":{"gitID":"-"},"content":""},{"lineNumber":852,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."},{"lineNumber":853,"author":{"gitID":"-"},"content":"+"},{"lineNumber":854,"author":{"gitID":"-"},"content":"****"},{"lineNumber":855,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":856,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":857,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":858,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":859,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":860,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."},{"lineNumber":861,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":862,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":863,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":864,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":865,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":866,"author":{"gitID":"-"},"content":"****"},{"lineNumber":867,"author":{"gitID":"-"},"content":""},{"lineNumber":868,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":869,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":870,"author":{"gitID":"-"},"content":""},{"lineNumber":871,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":872,"author":{"gitID":"-"},"content":""},{"lineNumber":873,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":874,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":875,"author":{"gitID":"-"},"content":""},{"lineNumber":876,"author":{"gitID":"-"},"content":". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":877,"author":{"gitID":"-"},"content":"+"},{"lineNumber":878,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":879,"author":{"gitID":"-"},"content":"+"},{"lineNumber":880,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":881,"author":{"gitID":"-"},"content":"+"},{"lineNumber":882,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":883,"author":{"gitID":"-"},"content":"+"},{"lineNumber":884,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":885,"author":{"gitID":"-"},"content":"+"},{"lineNumber":886,"author":{"gitID":"-"},"content":"****"},{"lineNumber":887,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":888,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":889,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":890,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":891,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":892,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":893,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":894,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":895,"author":{"gitID":"-"},"content":"****"},{"lineNumber":896,"author":{"gitID":"-"},"content":""},{"lineNumber":897,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":898,"author":{"gitID":"-"},"content":"+"},{"lineNumber":899,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":900,"author":{"gitID":"-"},"content":"+"},{"lineNumber":901,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":902,"author":{"gitID":"-"},"content":"+"},{"lineNumber":903,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":904,"author":{"gitID":"-"},"content":"+"},{"lineNumber":905,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":906,"author":{"gitID":"-"},"content":"+"},{"lineNumber":907,"author":{"gitID":"-"},"content":"****"},{"lineNumber":908,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":909,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":910,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":911,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":912,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":913,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":914,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":915,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":916,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":917,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":918,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":919,"author":{"gitID":"-"},"content":"****"},{"lineNumber":920,"author":{"gitID":"-"},"content":""},{"lineNumber":921,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."},{"lineNumber":922,"author":{"gitID":"-"},"content":"+"},{"lineNumber":923,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":924,"author":{"gitID":"-"},"content":"+"},{"lineNumber":925,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":926,"author":{"gitID":"-"},"content":"+"},{"lineNumber":927,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":928,"author":{"gitID":"-"},"content":"+"},{"lineNumber":929,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":930,"author":{"gitID":"-"},"content":"+"},{"lineNumber":931,"author":{"gitID":"-"},"content":"****"},{"lineNumber":932,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":933,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":934,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."},{"lineNumber":935,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":936,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."},{"lineNumber":937,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."},{"lineNumber":938,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":939,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."},{"lineNumber":940,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":941,"author":{"gitID":"-"},"content":"****"},{"lineNumber":942,"author":{"gitID":"-"},"content":""},{"lineNumber":943,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":944,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":945,"author":{"gitID":"-"},"content":""},{"lineNumber":946,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."},{"lineNumber":947,"author":{"gitID":"-"},"content":""},{"lineNumber":948,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":949,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":950,"author":{"gitID":"-"},"content":""},{"lineNumber":951,"author":{"gitID":"-"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."},{"lineNumber":952,"author":{"gitID":"-"},"content":"+"},{"lineNumber":953,"author":{"gitID":"-"},"content":"****"},{"lineNumber":954,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":955,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":956,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":957,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":958,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":959,"author":{"gitID":"-"},"content":"****"},{"lineNumber":960,"author":{"gitID":"-"},"content":""},{"lineNumber":961,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":962,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":963,"author":{"gitID":"-"},"content":""},{"lineNumber":964,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":965,"author":{"gitID":"-"},"content":""},{"lineNumber":966,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":967,"author":{"gitID":"-"},"content":""},{"lineNumber":968,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":969,"author":{"gitID":"-"},"content":"Edits the remark for a person specified in the `INDEX`. +"},{"lineNumber":970,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":971,"author":{"gitID":"-"},"content":""},{"lineNumber":972,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":973,"author":{"gitID":"-"},"content":""},{"lineNumber":974,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":975,"author":{"gitID":"-"},"content":"Edits the remark for the first person to `Likes to drink coffee.`"},{"lineNumber":976,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":977,"author":{"gitID":"-"},"content":"Removes the remark for the first person."},{"lineNumber":978,"author":{"gitID":"-"},"content":""},{"lineNumber":979,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":980,"author":{"gitID":"-"},"content":""},{"lineNumber":981,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":982,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":983,"author":{"gitID":"-"},"content":""},{"lineNumber":984,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":985,"author":{"gitID":"-"},"content":""},{"lineNumber":986,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":987,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":988,"author":{"gitID":"-"},"content":""},{"lineNumber":989,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":990,"author":{"gitID":"-"},"content":""},{"lineNumber":991,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":992,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":993,"author":{"gitID":"-"},"content":""},{"lineNumber":994,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":995,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":996,"author":{"gitID":"-"},"content":""},{"lineNumber":997,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":998,"author":{"gitID":"-"},"content":""},{"lineNumber":999,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":1000,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":1001,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":1002,"author":{"gitID":"-"},"content":""},{"lineNumber":1003,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1004,"author":{"gitID":"-"},"content":""},{"lineNumber":1005,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":1006,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":1007,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":1008,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":1009,"author":{"gitID":"-"},"content":""},{"lineNumber":1010,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":1011,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":1012,"author":{"gitID":"-"},"content":""},{"lineNumber":1013,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1014,"author":{"gitID":"-"},"content":""},{"lineNumber":1015,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":1016,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":1017,"author":{"gitID":"-"},"content":""},{"lineNumber":1018,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1019,"author":{"gitID":"-"},"content":""},{"lineNumber":1020,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":1021,"author":{"gitID":"-"},"content":""},{"lineNumber":1022,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":1023,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":1024,"author":{"gitID":"-"},"content":""},{"lineNumber":1025,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1026,"author":{"gitID":"-"},"content":""},{"lineNumber":1027,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":1028,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":1029,"author":{"gitID":"-"},"content":""},{"lineNumber":1030,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1031,"author":{"gitID":"-"},"content":""},{"lineNumber":1032,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":1033,"author":{"gitID":"-"},"content":""},{"lineNumber":1034,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":1035,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":1036,"author":{"gitID":"-"},"content":""},{"lineNumber":1037,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1038,"author":{"gitID":"-"},"content":""},{"lineNumber":1039,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":1040,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":1041,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":1042,"author":{"gitID":"-"},"content":""},{"lineNumber":1043,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":1044,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":1045,"author":{"gitID":"-"},"content":""},{"lineNumber":1046,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1047,"author":{"gitID":"-"},"content":""},{"lineNumber":1048,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":1049,"author":{"gitID":"-"},"content":""},{"lineNumber":1050,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1051,"author":{"gitID":"-"},"content":""},{"lineNumber":1052,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":1053,"author":{"gitID":"-"},"content":""},{"lineNumber":1054,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":1055,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":1056,"author":{"gitID":"-"},"content":""},{"lineNumber":1057,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1058,"author":{"gitID":"-"},"content":""},{"lineNumber":1059,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":1060,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":1061,"author":{"gitID":"-"},"content":""},{"lineNumber":1062,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":1063,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":1064,"author":{"gitID":"-"},"content":""},{"lineNumber":1065,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1066,"author":{"gitID":"-"},"content":""},{"lineNumber":1067,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":1068,"author":{"gitID":"-"},"content":""},{"lineNumber":1069,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1070,"author":{"gitID":"-"},"content":""},{"lineNumber":1071,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":1072,"author":{"gitID":"-"},"content":""},{"lineNumber":1073,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":1074,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":1075,"author":{"gitID":"-"},"content":""},{"lineNumber":1076,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1077,"author":{"gitID":"-"},"content":""},{"lineNumber":1078,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":1079,"author":{"gitID":"-"},"content":""},{"lineNumber":1080,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1081,"author":{"gitID":"-"},"content":""},{"lineNumber":1082,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":1083,"author":{"gitID":"-"},"content":""},{"lineNumber":1084,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":1085,"author":{"gitID":"-"},"content":""},{"lineNumber":1086,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":1087,"author":{"gitID":"-"},"content":""},{"lineNumber":1088,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1089,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":1090,"author":{"gitID":"jlks96"},"content":"*Target user*:"},{"lineNumber":1091,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1092,"author":{"gitID":"jlks96"},"content":"* Insurance agents"},{"lineNumber":1093,"author":{"gitID":"-"},"content":""},{"lineNumber":1094,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":1095,"author":{"gitID":"-"},"content":""},{"lineNumber":1096,"author":{"gitID":"jlks96"},"content":"* aged between 23 and 34 years"},{"lineNumber":1097,"author":{"gitID":"-"},"content":"* has a need to manage a significant number of contacts"},{"lineNumber":1098,"author":{"gitID":"jlks96"},"content":"* has little time to maintain contacts"},{"lineNumber":1099,"author":{"gitID":"jlks96"},"content":"* has a need to keep track of appointments with clients"},{"lineNumber":1100,"author":{"gitID":"jlks96"},"content":"* has a need to delete old, inactive contacts"},{"lineNumber":1101,"author":{"gitID":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":1102,"author":{"gitID":"jlks96"},"content":"* is reasonably tech savvy and can type fast"},{"lineNumber":1103,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":1104,"author":{"gitID":"-"},"content":""},{"lineNumber":1105,"author":{"gitID":"jlks96"},"content":"*Value proposition*:"},{"lineNumber":1106,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1107,"author":{"gitID":"jlks96"},"content":"* A comprehensive, reliable and convenient address book for insurance agents built on a simple belief -- efficiency and elegance."},{"lineNumber":1108,"author":{"gitID":"-"},"content":""},{"lineNumber":1109,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d Feature Contribution"},{"lineNumber":1110,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1111,"author":{"gitID":"jlks96"},"content":"*Joshua Lee Kai Sheng*"},{"lineNumber":1112,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1113,"author":{"gitID":"jlks96"},"content":"Minor Enhancement :"},{"lineNumber":1114,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1115,"author":{"gitID":"jlks96"},"content":"** Implements the delete dated persons, aka `DeleteBefore`, function which allows the user to delete persons added before a"},{"lineNumber":1116,"author":{"gitID":"jlks96"},"content":"date who matches all tags specified by the user"},{"lineNumber":1117,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1118,"author":{"gitID":"jlks96"},"content":"Major Enhancement :"},{"lineNumber":1119,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1120,"author":{"gitID":"jlks96"},"content":"** Implements a group of scheduling functions to manage the user\u0027s appointments. This includes:"},{"lineNumber":1121,"author":{"gitID":"jlks96"},"content":"*** Implementing a calendar reflecting the scheduled appointments"},{"lineNumber":1122,"author":{"gitID":"jlks96"},"content":"*** Implementing `Appointment` objects and their storage"},{"lineNumber":1123,"author":{"gitID":"jlks96"},"content":"*** Implementing `addappointment` command to support the creation of new appointments"},{"lineNumber":1124,"author":{"gitID":"jlks96"},"content":"*** Implementing `removeappointment` command to support the removal of appointments"},{"lineNumber":1125,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1126,"author":{"gitID":"jlks96"},"content":"*Ng Jun Wei*"},{"lineNumber":1127,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1128,"author":{"gitID":"jlks96"},"content":"Minor Enhancement :"},{"lineNumber":1129,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1130,"author":{"gitID":"Ng95junwei"},"content":"** Enhance find command to include all the fields of a Person, and also to check for partial matches."},{"lineNumber":1131,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1132,"author":{"gitID":"jlks96"},"content":"Major Enhancement :"},{"lineNumber":1133,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1134,"author":{"gitID":"Ng95junwei"},"content":"** Implement email function which takes in a search parameter and a template parameter"},{"lineNumber":1135,"author":{"gitID":"Ng95junwei"},"content":"*** Adding the email utility into the Application"},{"lineNumber":1136,"author":{"gitID":"Ng95junwei"},"content":"*** Implementing `Email` Package and its subsidiary models"},{"lineNumber":1137,"author":{"gitID":"Ng95junwei"},"content":"*** Implementing persistence of data for Email Templates"},{"lineNumber":1138,"author":{"gitID":"Ng95junwei"},"content":"*** Implementing add and remove for new Email Templates"},{"lineNumber":1139,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1140,"author":{"gitID":"jlks96"},"content":"*Lucas Gaylord*"},{"lineNumber":1141,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1142,"author":{"gitID":"jlks96"},"content":"Minor Enhancement :"},{"lineNumber":1143,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1144,"author":{"gitID":"jlks96"},"content":"** Upgrades the command box to show hints dynamically"},{"lineNumber":1145,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1146,"author":{"gitID":"jlks96"},"content":"Major Enhancement :"},{"lineNumber":1147,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1148,"author":{"gitID":"jlks96"},"content":"** Implements a batch importing and exporting contacts function from and to CSV format files."},{"lineNumber":1149,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1150,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1151,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1152,"author":{"gitID":"-"},"content":""},{"lineNumber":1153,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1154,"author":{"gitID":"-"},"content":""},{"lineNumber":1155,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1156,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1157,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1158,"author":{"gitID":"jlks96"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the application"},{"lineNumber":1159,"author":{"gitID":"-"},"content":""},{"lineNumber":1160,"author":{"gitID":"jlks96"},"content":"|`* * *` |user |add a new person |save the person\u0027s contact details"},{"lineNumber":1161,"author":{"gitID":"-"},"content":""},{"lineNumber":1162,"author":{"gitID":"-"},"content":"|`* * *` |user |delete a person |remove entries that I no longer need"},{"lineNumber":1163,"author":{"gitID":"-"},"content":""},{"lineNumber":1164,"author":{"gitID":"-"},"content":"|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"},{"lineNumber":1165,"author":{"gitID":"-"},"content":""},{"lineNumber":1166,"author":{"gitID":"jlks96"},"content":"|`* * *` |user |delete old, inactive contacts in batches |clear up space for new contacts"},{"lineNumber":1167,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1168,"author":{"gitID":"jlks96"},"content":"|`* * *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"},{"lineNumber":1169,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1170,"author":{"gitID":"jlks96"},"content":"|`* * *` |user with many persons in the address book |sort persons by name |locate a person easily"},{"lineNumber":1171,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1172,"author":{"gitID":"jlks96"},"content":"|`* * *` |user |undo an action |revert to the previous state when I make an unwanted action"},{"lineNumber":1173,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1174,"author":{"gitID":"jlks96"},"content":"|`* * *` |user |redo an action |revert to the later state"},{"lineNumber":1175,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1176,"author":{"gitID":"jlks96"},"content":"|`* * *` |user |manage appointment dates and details in a calendar |keep track of them systematically"},{"lineNumber":1177,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1178,"author":{"gitID":"jlks96"},"content":"|`* * *` |user |send email using customised templates |easily follow up with clients"},{"lineNumber":1179,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1180,"author":{"gitID":"jlks96"},"content":"|`* * *` |user |export the contacts to CSV format files |further make use of them"},{"lineNumber":1181,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1182,"author":{"gitID":"jlks96"},"content":"|`* * *` |user |import contacts from CSV format files |speed up the process of adding new contacts"},{"lineNumber":1183,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1184,"author":{"gitID":"jlks96"},"content":"|`* * *` |user |add multiple entries under the same contact category for the same client |avoid creating multiple contacts for the same client"},{"lineNumber":1185,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1186,"author":{"gitID":"jlks96"},"content":"|`* * *` |user |set reminders |be reminded about appointments and events"},{"lineNumber":1187,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1188,"author":{"gitID":"jlks96"},"content":"|`* * *` |user |include client photos in their contact details |recognise them more easily"},{"lineNumber":1189,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1190,"author":{"gitID":"jlks96"},"content":"|`* * *` |user |enjoy autocomplete when typing commands |save time"},{"lineNumber":1191,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1192,"author":{"gitID":"jlks96"},"content":"|`* * *` |user |use truncated commands |remove entries that I no longer need"},{"lineNumber":1193,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1194,"author":{"gitID":"jlks96"},"content":"|`* * *` |user |customise the colour of the tags |view the different tags more clearly"},{"lineNumber":1195,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1196,"author":{"gitID":"jlks96"},"content":"|`* * *` |user |replace an existing tag with a new tag |update tags effectively"},{"lineNumber":1197,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1198,"author":{"gitID":"Ng95junwei"},"content":"|`* * *` |user |delete a tag from everyone in the address book |save time"},{"lineNumber":1199,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1200,"author":{"gitID":"jlks96"},"content":"|`* *` |user |prioritise clients |single out the more profitable clients"},{"lineNumber":1201,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1202,"author":{"gitID":"jlks96"},"content":"|`* *` |user |email clients from the address book |make arrangements with them"},{"lineNumber":1203,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1204,"author":{"gitID":"jlks96"},"content":"|`* *` |user |change the font and font size of the words in the address book |better read off the application"},{"lineNumber":1205,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1206,"author":{"gitID":"jlks96"},"content":"|`* *` |user |email multiple clients at the same time |save time when sending a common email"},{"lineNumber":1207,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1208,"author":{"gitID":"jlks96"},"content":"|`* *` |user |automate emails and SMS sending |remind clients of upcoming appointments"},{"lineNumber":1209,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1210,"author":{"gitID":"jlks96"},"content":"|`* *` |user |can change the colour theme of my address book |customise the address book to my liking"},{"lineNumber":1211,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1212,"author":{"gitID":"jlks96"},"content":"|`* *` |user |back up my address book periodically |avoid losing all data"},{"lineNumber":1213,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1214,"author":{"gitID":"jlks96"},"content":"|`* *` |user |select tabs for different categories of clients |effectively look for clients belonging to the same category"},{"lineNumber":1215,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1216,"author":{"gitID":"Ng95junwei"},"content":"|`* *` |user |pull my contacts from LinkedIn |synchronize my contacts across platforms"},{"lineNumber":1217,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":1218,"author":{"gitID":"jlks96"},"content":"|`*` |user |link to the clients\u0027 social media page |find out more about them"},{"lineNumber":1219,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1220,"author":{"gitID":"jlks96"},"content":"|`*` |user |add in new commands to the address book |have the added functionalities I desire"},{"lineNumber":1221,"author":{"gitID":"-"},"content":""},{"lineNumber":1222,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1223,"author":{"gitID":"-"},"content":""},{"lineNumber":1224,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1225,"author":{"gitID":"-"},"content":""},{"lineNumber":1226,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1227,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1228,"author":{"gitID":"-"},"content":""},{"lineNumber":1229,"author":{"gitID":"-"},"content":"(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1230,"author":{"gitID":"-"},"content":""},{"lineNumber":1231,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1232,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete person"},{"lineNumber":1233,"author":{"gitID":"-"},"content":""},{"lineNumber":1234,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1235,"author":{"gitID":"-"},"content":""},{"lineNumber":1236,"author":{"gitID":"-"},"content":"1.  User requests to list persons"},{"lineNumber":1237,"author":{"gitID":"-"},"content":"2.  AddressBook shows a list of persons"},{"lineNumber":1238,"author":{"gitID":"-"},"content":"3.  User requests to delete a specific person in the list"},{"lineNumber":1239,"author":{"gitID":"-"},"content":"4.  AddressBook deletes the person"},{"lineNumber":1240,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1241,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1242,"author":{"gitID":"-"},"content":""},{"lineNumber":1243,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1244,"author":{"gitID":"-"},"content":""},{"lineNumber":1245,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1246,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1247,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1248,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1249,"author":{"gitID":"-"},"content":""},{"lineNumber":1250,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1251,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1252,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1253,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":1254,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1255,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1256,"author":{"gitID":"-"},"content":""},{"lineNumber":1257,"author":{"gitID":"jlks96"},"content":"[discrete]"},{"lineNumber":1258,"author":{"gitID":"Ng95junwei"},"content":"\u003d\u003d\u003d Use case: Undo action"},{"lineNumber":1259,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1260,"author":{"gitID":"jlks96"},"content":"*MSS*"},{"lineNumber":1261,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1262,"author":{"gitID":"jlks96"},"content":"1.  User requests to undo the previous action taken."},{"lineNumber":1263,"author":{"gitID":"jlks96"},"content":"2.  AddressBook undo the the action."},{"lineNumber":1264,"author":{"gitID":"jlks96"},"content":"+"},{"lineNumber":1265,"author":{"gitID":"jlks96"},"content":"Use case ends."},{"lineNumber":1266,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1267,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1268,"author":{"gitID":"jlks96"},"content":"*Extensions*"},{"lineNumber":1269,"author":{"gitID":"jlks96"},"content":"[none]"},{"lineNumber":1270,"author":{"gitID":"jlks96"},"content":"* 2a. If there is no previous action taken."},{"lineNumber":1271,"author":{"gitID":"jlks96"},"content":"+"},{"lineNumber":1272,"author":{"gitID":"jlks96"},"content":"Use case ends."},{"lineNumber":1273,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1274,"author":{"gitID":"jlks96"},"content":"[discrete]"},{"lineNumber":1275,"author":{"gitID":"Ng95junwei"},"content":"\u003d\u003d\u003d Use case: Find person"},{"lineNumber":1276,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1277,"author":{"gitID":"jlks96"},"content":"*MSS*"},{"lineNumber":1278,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1279,"author":{"gitID":"jlks96"},"content":"1.  User requests to find person and enters any keywords in the name of the person."},{"lineNumber":1280,"author":{"gitID":"jlks96"},"content":"2.  AddressBook returns the person requested."},{"lineNumber":1281,"author":{"gitID":"jlks96"},"content":"+"},{"lineNumber":1282,"author":{"gitID":"jlks96"},"content":"Use case ends."},{"lineNumber":1283,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1284,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1285,"author":{"gitID":"jlks96"},"content":"*Extensions*"},{"lineNumber":1286,"author":{"gitID":"jlks96"},"content":"[none]"},{"lineNumber":1287,"author":{"gitID":"jlks96"},"content":"* 2a.  The list of people is empty."},{"lineNumber":1288,"author":{"gitID":"jlks96"},"content":"+"},{"lineNumber":1289,"author":{"gitID":"jlks96"},"content":"[none]"},{"lineNumber":1290,"author":{"gitID":"jlks96"},"content":"** 2a1.  AddressBook shows an error message."},{"lineNumber":1291,"author":{"gitID":"jlks96"},"content":"+"},{"lineNumber":1292,"author":{"gitID":"jlks96"},"content":"Use case ends."},{"lineNumber":1293,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1294,"author":{"gitID":"jlks96"},"content":"* 2b.  The person is not in the list."},{"lineNumber":1295,"author":{"gitID":"jlks96"},"content":"+"},{"lineNumber":1296,"author":{"gitID":"jlks96"},"content":"[none]"},{"lineNumber":1297,"author":{"gitID":"jlks96"},"content":"** 2b1.  AddressBook returns error message."},{"lineNumber":1298,"author":{"gitID":"jlks96"},"content":"+"},{"lineNumber":1299,"author":{"gitID":"jlks96"},"content":"Use case ends."},{"lineNumber":1300,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1301,"author":{"gitID":"jlks96"},"content":"[discrete]"},{"lineNumber":1302,"author":{"gitID":"Ng95junwei"},"content":"\u003d\u003d\u003d Use case: Email contacts"},{"lineNumber":1303,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":1304,"author":{"gitID":"Ng95junwei"},"content":"*MSS*"},{"lineNumber":1305,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":1306,"author":{"gitID":"Ng95junwei"},"content":"1. User requests to email person and enters a word in the name of the person"},{"lineNumber":1307,"author":{"gitID":"Ng95junwei"},"content":"2. AddressBook emails the person requested a sample template."},{"lineNumber":1308,"author":{"gitID":"Ng95junwei"},"content":"+"},{"lineNumber":1309,"author":{"gitID":"Ng95junwei"},"content":"Use case ends."},{"lineNumber":1310,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":1311,"author":{"gitID":"jlks96"},"content":"*Extensions*"},{"lineNumber":1312,"author":{"gitID":"jlks96"},"content":"[none]"},{"lineNumber":1313,"author":{"gitID":"jlks96"},"content":"* 2a.  The list of people is empty."},{"lineNumber":1314,"author":{"gitID":"jlks96"},"content":"+"},{"lineNumber":1315,"author":{"gitID":"jlks96"},"content":"[none]"},{"lineNumber":1316,"author":{"gitID":"jlks96"},"content":"** 2a1.  AddressBook shows an error message."},{"lineNumber":1317,"author":{"gitID":"jlks96"},"content":"+"},{"lineNumber":1318,"author":{"gitID":"jlks96"},"content":"Use case ends."},{"lineNumber":1319,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1320,"author":{"gitID":"jlks96"},"content":"* 2b.  The person is not in the list."},{"lineNumber":1321,"author":{"gitID":"jlks96"},"content":"+"},{"lineNumber":1322,"author":{"gitID":"jlks96"},"content":"[none]"},{"lineNumber":1323,"author":{"gitID":"jlks96"},"content":"** 2b1.  AddressBook returns error message."},{"lineNumber":1324,"author":{"gitID":"jlks96"},"content":"+"},{"lineNumber":1325,"author":{"gitID":"jlks96"},"content":"Use case ends."},{"lineNumber":1326,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1327,"author":{"gitID":"jlks96"},"content":"[discrete]"},{"lineNumber":1328,"author":{"gitID":"jlks96"},"content":"\u003d\u003d\u003d Use case: Delete dated persons"},{"lineNumber":1329,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1330,"author":{"gitID":"jlks96"},"content":"*MSS*"},{"lineNumber":1331,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1332,"author":{"gitID":"jlks96"},"content":"1.  User requests to delete dated persons and enters the cut of date and tags."},{"lineNumber":1333,"author":{"gitID":"jlks96"},"content":"2.  AddressBook deletes all persons created before the cut off date."},{"lineNumber":1334,"author":{"gitID":"jlks96"},"content":"3.  AddressBook shows success message."},{"lineNumber":1335,"author":{"gitID":"jlks96"},"content":"+"},{"lineNumber":1336,"author":{"gitID":"jlks96"},"content":"Use case ends."},{"lineNumber":1337,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1338,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1339,"author":{"gitID":"jlks96"},"content":"*Extensions*"},{"lineNumber":1340,"author":{"gitID":"jlks96"},"content":"[none]"},{"lineNumber":1341,"author":{"gitID":"jlks96"},"content":"* 2a.  If user input invalid date."},{"lineNumber":1342,"author":{"gitID":"jlks96"},"content":"+"},{"lineNumber":1343,"author":{"gitID":"jlks96"},"content":"[none]"},{"lineNumber":1344,"author":{"gitID":"jlks96"},"content":"** 2a1.  AddressBook prompts user for valid cut off date input."},{"lineNumber":1345,"author":{"gitID":"jlks96"},"content":"** 2a2.  User enters cut off date."},{"lineNumber":1346,"author":{"gitID":"jlks96"},"content":"+"},{"lineNumber":1347,"author":{"gitID":"jlks96"},"content":"Steps 2a1 - 2a2 are repeated until date entered is correct."},{"lineNumber":1348,"author":{"gitID":"jlks96"},"content":"+"},{"lineNumber":1349,"author":{"gitID":"jlks96"},"content":"Use case resumes from step 3."},{"lineNumber":1350,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1351,"author":{"gitID":"jlks96"},"content":"* 3a.  If there is no matched persons added before the cut off date"},{"lineNumber":1352,"author":{"gitID":"jlks96"},"content":"+"},{"lineNumber":1353,"author":{"gitID":"jlks96"},"content":"[none]"},{"lineNumber":1354,"author":{"gitID":"jlks96"},"content":"** 3a1.  AddressBook shows error message"},{"lineNumber":1355,"author":{"gitID":"jlks96"},"content":"+"},{"lineNumber":1356,"author":{"gitID":"jlks96"},"content":"Use case ends."},{"lineNumber":1357,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1358,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1359,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1360,"author":{"gitID":"-"},"content":""},{"lineNumber":1361,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1362,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1363,"author":{"gitID":"-"},"content":""},{"lineNumber":1364,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1365,"author":{"gitID":"jlks96"},"content":".  Should be able to hold up to 5000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1366,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1367,"author":{"gitID":"jlks96"},"content":". Must be aesthetically appealing"},{"lineNumber":1368,"author":{"gitID":"jlks96"},"content":". Search must be relatively fast"},{"lineNumber":1369,"author":{"gitID":"jlks96"},"content":". Customisable theme"},{"lineNumber":1370,"author":{"gitID":"jlks96"},"content":". Must be less than 10MB in size"},{"lineNumber":1371,"author":{"gitID":"jlks96"},"content":". Data must be backed up"},{"lineNumber":1372,"author":{"gitID":"jlks96"},"content":". Should be able to be extended into a mobile application"},{"lineNumber":1373,"author":{"gitID":"Ng95junwei"},"content":". CRUD operations must be relatively fast"},{"lineNumber":1374,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1375,"author":{"gitID":"-"},"content":""},{"lineNumber":1376,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1377,"author":{"gitID":"-"},"content":""},{"lineNumber":1378,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1379,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1380,"author":{"gitID":"-"},"content":""},{"lineNumber":1381,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1382,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1383,"author":{"gitID":"-"},"content":""},{"lineNumber":1384,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1385,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1386,"author":{"gitID":"-"},"content":""},{"lineNumber":1387,"author":{"gitID":"jlks96"},"content":"[[client]] Client::"},{"lineNumber":1388,"author":{"gitID":"jlks96"},"content":"A person who has (potential) business relationship with the insurance agent whose contact needs to be saved"},{"lineNumber":1389,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1390,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1391,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":1392,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1393,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1394,"author":{"gitID":"-"},"content":""},{"lineNumber":1395,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1396,"author":{"gitID":"-"},"content":""},{"lineNumber":1397,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1398,"author":{"gitID":"-"},"content":""},{"lineNumber":1399,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1400,"author":{"gitID":"-"},"content":""},{"lineNumber":1401,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1402,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1403,"author":{"gitID":"-"},"content":""},{"lineNumber":1404,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1405,"author":{"gitID":"-"},"content":""},{"lineNumber":1406,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1407,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1408,"author":{"gitID":"-"},"content":""},{"lineNumber":1409,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1410,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1411,"author":{"gitID":"-"},"content":""},{"lineNumber":1412,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1413,"author":{"gitID":"-"},"content":""},{"lineNumber":1414,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1415,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1416,"author":{"gitID":"-"},"content":""},{"lineNumber":1417,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1418,"author":{"gitID":"-"},"content":""},{"lineNumber":1419,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1420,"author":{"gitID":"-"},"content":""},{"lineNumber":1421,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1422,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1423,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1424,"author":{"gitID":"-"},"content":""},{"lineNumber":1425,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1426,"author":{"gitID":"-"},"content":""},{"lineNumber":1427,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1428,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1429,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1430,"author":{"gitID":"-"},"content":""},{"lineNumber":1431,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1432,"author":{"gitID":"-"},"content":""},{"lineNumber":1433,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":1434,"author":{"gitID":"-"},"content":""},{"lineNumber":1435,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":1436,"author":{"gitID":"-"},"content":""},{"lineNumber":1437,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":1438,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1439,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1440,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1441,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1442,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1443,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1444,"author":{"gitID":"-"},"content":""},{"lineNumber":1445,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1446,"author":{"gitID":"-"},"content":""},{"lineNumber":1447,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1448,"author":{"gitID":"-"},"content":""},{"lineNumber":1449,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1450,"author":{"gitID":"-"},"content":""},{"lineNumber":1451,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1452,"author":{"gitID":"-"},"content":""},{"lineNumber":1453,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"jlks96":459,"luca590":50,"Ng95junwei":27,"-":917}},{"path":"src/test/java/systemtests/ClearAliasSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.KEYWORD_MATCHING_MEIER;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"public class ClearAliasSystemTest extends AddressBookSystemTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void clear() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        final Model defaultModel \u003d getModel();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"},{"lineNumber":22,"author":{"gitID":"-"},"content":"         * spaces -\u003e cleared"},{"lineNumber":23,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_ALIAS + \" ab12   \");"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        /* Case: undo clearing address book -\u003e original address book restored */"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"        String command \u003d UndoCommand.COMMAND_ALIAS;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        /* Case: redo clearing address book -\u003e cleared */"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"        command \u003d RedoCommand.COMMAND_ALIAS;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"        executeCommand(UndoCommand.COMMAND_ALIAS); // restores the original address book"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_ALIAS);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before clearing -\u003e entire address book cleared */"},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"        executeCommand(UndoCommand.COMMAND_ALIAS); // restores the original address book"},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_ALIAS);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: clear empty address book -\u003e cleared */"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_ALIAS);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @see ClearCommandSystemTest#assertCommandSuccess(String)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":12,"-":89}},{"path":"src/test/java/systemtests/AddAliasSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointmentsWithAutoDateGeneration.ALICE;"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointmentsWithAutoDateGeneration.AMY;"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointmentsWithAutoDateGeneration.BOB;"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointmentsWithAutoDateGeneration.CARL;"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointmentsWithAutoDateGeneration.HOON;"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointmentsWithAutoDateGeneration.IDA;"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointmentsWithAutoDateGeneration.KEYWORD_MATCHING_MEIER;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":"public class AddAliasSystemTest extends AddressBookSystemTest {"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":64,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":65,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Person toAdd \u003d AMY;"},{"lineNumber":67,"author":{"gitID":"jlks96"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_ALIAS + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":68,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":72,"author":{"gitID":"jlks96"},"content":"        command \u003d UndoCommand.COMMAND_ALIAS;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":77,"author":{"gitID":"jlks96"},"content":"        command \u003d RedoCommand.COMMAND_ALIAS;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":84,"author":{"gitID":"jlks96"},"content":"                .withAddress(VALID_ADDRESS_AMY).generateDate().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":85,"author":{"gitID":"jlks96"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":91,"author":{"gitID":"jlks96"},"content":"                .withAddress(VALID_ADDRESS_AMY).generateDate().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":92,"author":{"gitID":"jlks96"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":98,"author":{"gitID":"jlks96"},"content":"                .withAddress(VALID_ADDRESS_AMY).generateDate().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":99,"author":{"gitID":"jlks96"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":105,"author":{"gitID":"jlks96"},"content":"                .withAddress(VALID_ADDRESS_BOB).generateDate().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":106,"author":{"gitID":"jlks96"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":116,"author":{"gitID":"jlks96"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":142,"author":{"gitID":"jlks96"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersonsAndAppointments#ALICE"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":149,"author":{"gitID":"jlks96"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"jlks96"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":157,"author":{"gitID":"jlks96"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":161,"author":{"gitID":"jlks96"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":169,"author":{"gitID":"jlks96"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":173,"author":{"gitID":"jlks96"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":177,"author":{"gitID":"jlks96"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":181,"author":{"gitID":"jlks96"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":185,"author":{"gitID":"jlks96"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":186,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC;"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Person toAdd) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":30,"-":231}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.ALICE;"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.BENSON;"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.CARL;"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.DANIEL;"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.ELLE;"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.FIONA;"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.GEORGE;"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.KEYWORD_MATCHING_MEIER;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class FindCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":33,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":34,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":42,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":43,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":71,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":72,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"Ng95junwei"},"content":"        /* Case: find person in address book, keyword is substring of name -\u003e 1 persons found */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        /* Case: find person not in address book -\u003e 0 persons found */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"Ng95junwei"},"content":"        /* Case: find phone number of person in address book -\u003e 1 persons found */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"Ng95junwei"},"content":"        /* Case: find address of person in address book -\u003e 1 persons found */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"},{"lineNumber":125,"author":{"gitID":"Ng95junwei"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL, DANIEL, GEORGE);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"Ng95junwei"},"content":"        /* Case: find email of person in address book -\u003e 1 persons found */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"Ng95junwei"},"content":"        /* Case: find tags of person in address book -\u003e 6 persons found */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":138,"author":{"gitID":"Ng95junwei"},"content":"        ModelHelper.setFilteredList(expectedModel, ALICE, CARL, DANIEL, ELLE, FIONA, GEORGE);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        /* Case: find while a person is selected -\u003e selected card deselected */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        /* Case: find person in empty address book -\u003e 0 persons found */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":176,"author":{"gitID":"-"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":8,"Ng95junwei":7,"-":185}},{"path":"src/test/java/systemtests/SelectAliasSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.getTypicalPersons;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"public class SelectAliasSystemTest extends AddressBookSystemTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"},{"lineNumber":26,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":27,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, INDEX_FIRST_PERSON);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* Case: select the last card in the person list -\u003e selected */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Index personCount \u003d Index.fromOneBased(getTypicalPersons().size());"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"        command \u003d SelectCommand.COMMAND_ALIAS + \" \" + personCount.getOneBased();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, personCount);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"        command \u003d UndoCommand.COMMAND_ALIAS;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"        command \u003d RedoCommand.COMMAND_ALIAS;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /* Case: select the middle card in the person list -\u003e selected */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(personCount.getOneBased() / 2);"},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"        command \u003d SelectCommand.COMMAND_ALIAS + \" \" + middleIndex.getOneBased();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"},{"lineNumber":57,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":58,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":61,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(SelectCommand.COMMAND_ALIAS + \" \" + invalidIndex,"},{"lineNumber":62,"author":{"gitID":"jlks96"},"content":"                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":67,"author":{"gitID":"jlks96"},"content":"        command \u003d SelectCommand.COMMAND_ALIAS + \" \" + validIndex.getOneBased();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":73,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(SelectCommand.COMMAND_ALIAS + \" \" + 0,"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":77,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(SelectCommand.COMMAND_ALIAS + \" \" + -1,"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":82,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(SelectCommand.COMMAND_ALIAS + \" \" + invalidIndex,"},{"lineNumber":83,"author":{"gitID":"jlks96"},"content":"                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":84,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":85,"author":{"gitID":"jlks96"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":86,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(SelectCommand.COMMAND_ALIAS + \" abc\","},{"lineNumber":87,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":90,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(SelectCommand.COMMAND_ALIAS + \" 1 abc\","},{"lineNumber":91,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: select from empty address book -\u003e rejected */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":98,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":119,"author":{"gitID":"-"},"content":"                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":20,"-":135}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.getTypicalPersons;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class SelectCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"},{"lineNumber":26,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":27,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, INDEX_FIRST_PERSON);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* Case: select the last card in the person list -\u003e selected */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Index personCount \u003d Index.fromOneBased(getTypicalPersons().size());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, personCount);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /* Case: select the middle card in the person list -\u003e selected */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(personCount.getOneBased() / 2);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"},{"lineNumber":57,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":58,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":85,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":89,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: select from empty address book -\u003e rejected */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":117,"author":{"gitID":"-"},"content":"                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":2,"-":151}},{"path":"src/test/java/systemtests/DeleteBeforeAliasSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":3,"author":{"gitID":"jlks96"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_NOT_FOUND;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.commands.DeleteBeforeCommand.MESSAGE_DELETE_PERSONS_SUCCESS;"},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalDates.DATE_FIRST_JAN;"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalDates.INVALID_DATE_DESC;"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalDates.VALID_DATE_DESC;"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.ALICE;"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalTags.INVALID_TAG_DESC;"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalTags.TAG_SET_FRIEND;"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalTags.VALID_TAG_DESC_FRIEND;"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalTags.VALID_TAG_DESC_OWES_MONEY;"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"import seedu.address.logic.commands.DeleteBeforeCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.person.DateAdded;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"public class DeleteBeforeAliasSystemTest extends AddressBookSystemTest {"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"    private static final String MESSAGE_INVALID_DELETE_BEFORE_COMMAND_FORMAT \u003d"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteBeforeCommand.MESSAGE_USAGE);"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"    public void deleteBefore() {"},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"        /* --------------------------------- Performing delete before operation  ------------------------------------ */"},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"        /* Case: delete persons in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"        Model modelBeforeDeleting \u003d getModel();"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"        Model modelAfterDeleting \u003d getModel();"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"        String command \u003d \"     \" + DeleteBeforeCommand.COMMAND_ALIAS + \"      \" + VALID_DATE_DESC"},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"                + \"       \" + VALID_TAG_DESC_FRIEND;"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"        List\u003cPerson\u003e deleteTargets \u003d Arrays.asList(ALICE);"},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":"        removePersons(modelAfterDeleting, deleteTargets);"},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"                MESSAGE_DELETE_PERSONS_SUCCESS, deleteTargets.size(), TAG_SET_FRIEND, DATE_FIRST_JAN);"},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"        assertCommandSuccess(command, modelAfterDeleting, expectedResultMessage);"},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":"        /* Case: undo deleting the persons in the list -\u003e deleted persons restored */"},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":"        command \u003d UndoCommand.COMMAND_ALIAS;"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":"        assertCommandSuccess(command, modelBeforeDeleting, expectedResultMessage);"},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":"        /* Case: redo deleting the persons in the list -\u003e restored persons deleted again */"},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":"        command \u003d RedoCommand.COMMAND_ALIAS;"},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":58,"author":{"gitID":"jlks96"},"content":"        assertCommandSuccess(command, modelAfterDeleting, expectedResultMessage);"},{"lineNumber":59,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":60,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":61,"author":{"gitID":"jlks96"},"content":"        /* ------------------------------ Performing invalid delete before operation -------------------------------- */"},{"lineNumber":62,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":63,"author":{"gitID":"jlks96"},"content":"        /* Case: invalid date -\u003e rejected */"},{"lineNumber":64,"author":{"gitID":"jlks96"},"content":"        command \u003d DeleteBeforeCommand.COMMAND_ALIAS + INVALID_DATE_DESC + VALID_TAG_DESC_OWES_MONEY;"},{"lineNumber":65,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(command, DateAdded.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":66,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":67,"author":{"gitID":"jlks96"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":68,"author":{"gitID":"jlks96"},"content":"        command \u003d DeleteBeforeCommand.COMMAND_ALIAS + VALID_DATE_DESC + INVALID_TAG_DESC;"},{"lineNumber":69,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":70,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":71,"author":{"gitID":"jlks96"},"content":"        /* Case: missing date -\u003e rejected */"},{"lineNumber":72,"author":{"gitID":"jlks96"},"content":"        command \u003d DeleteBeforeCommand.COMMAND_ALIAS + VALID_TAG_DESC_OWES_MONEY;"},{"lineNumber":73,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_BEFORE_COMMAND_FORMAT);"},{"lineNumber":74,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":75,"author":{"gitID":"jlks96"},"content":"        /* Case: missing tag -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"jlks96"},"content":"        command \u003d DeleteBeforeCommand.COMMAND_ALIAS + VALID_DATE_DESC;"},{"lineNumber":77,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_BEFORE_COMMAND_FORMAT);"},{"lineNumber":78,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":79,"author":{"gitID":"jlks96"},"content":"        /* Case: no such person exists -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"jlks96"},"content":"        command \u003d DeleteBeforeCommand.COMMAND_ALIAS + VALID_DATE_DESC + VALID_TAG_DESC_OWES_MONEY;"},{"lineNumber":81,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(command, MESSAGE_PERSONS_NOT_FOUND);"},{"lineNumber":82,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":84,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"jlks96"},"content":"     * Removes all {@code Person}s in {@code model}\u0027s address book specified by the {@code targets} list."},{"lineNumber":86,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"jlks96"},"content":"    private void removePersons(Model model, List\u003cPerson\u003e targets) {"},{"lineNumber":88,"author":{"gitID":"jlks96"},"content":"        try {"},{"lineNumber":89,"author":{"gitID":"jlks96"},"content":"            model.deletePersons(targets);"},{"lineNumber":90,"author":{"gitID":"jlks96"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":91,"author":{"gitID":"jlks96"},"content":"            throw new AssertionError(\"targetPerson is retrieved from model.\");"},{"lineNumber":92,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":95,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"jlks96"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":97,"author":{"gitID":"jlks96"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":98,"author":{"gitID":"jlks96"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":99,"author":{"gitID":"jlks96"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":100,"author":{"gitID":"jlks96"},"content":"     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":101,"author":{"gitID":"jlks96"},"content":"     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"jlks96"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":103,"author":{"gitID":"jlks96"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":104,"author":{"gitID":"jlks96"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":105,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"jlks96"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":107,"author":{"gitID":"jlks96"},"content":"        executeCommand(command);"},{"lineNumber":108,"author":{"gitID":"jlks96"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":109,"author":{"gitID":"jlks96"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":110,"author":{"gitID":"jlks96"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":111,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":113,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"jlks96"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":115,"author":{"gitID":"jlks96"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":116,"author":{"gitID":"jlks96"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":117,"author":{"gitID":"jlks96"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":118,"author":{"gitID":"jlks96"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":119,"author":{"gitID":"jlks96"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":120,"author":{"gitID":"jlks96"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":121,"author":{"gitID":"jlks96"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":122,"author":{"gitID":"jlks96"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":123,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"jlks96"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":125,"author":{"gitID":"jlks96"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":126,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":127,"author":{"gitID":"jlks96"},"content":"        executeCommand(command);"},{"lineNumber":128,"author":{"gitID":"jlks96"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":129,"author":{"gitID":"jlks96"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":130,"author":{"gitID":"jlks96"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":131,"author":{"gitID":"jlks96"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":132,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":124,"-":9}},{"path":"src/test/java/seedu/address/ui/PersonListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.getTypicalPersons;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class PersonListPanelTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            FXCollections.observableList(getTypicalPersons());"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_PERSON);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private PersonListPanelHandle personListPanelHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        PersonListPanel personListPanel \u003d new PersonListPanel(TYPICAL_PERSONS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personListPanel);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(expectedPerson, actualCard);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void handleJumpToListRequestEvent() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        postNow(JUMP_TO_SECOND_EVENT);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        PersonCardHandle expectedCard \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        PersonCardHandle selectedCard \u003d personListPanelHandle.getHandleToSelectedCard();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCardEquals(expectedCard, selectedCard);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":1,"-":57}},{"path":"src/test/java/seedu/address/ui/CalendarPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"import seedu.address.commons.events.logic.ZoomInEvent;"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"import seedu.address.commons.events.logic.ZoomOutEvent;"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"public class CalendarPanelTest extends GuiUnitTest {"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"    private CalendarPanel calendarPanel;"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"    @Before"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"    public void setUp() {"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"        guiRobot.interact(() -\u003e calendarPanel \u003d new CalendarPanel(getTypicalAddressBook().getAppointmentList()));"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"    public void zoomInAndOut() throws Exception {"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"        //starts with Month Page"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"        assertEquals(calendarPanel.getCalendarView().getMonthPage(), calendarPanel.getPageBase());"},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"        //zoom in to Week Page"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"        raiseZoomInEvent();"},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"        assertEquals(calendarPanel.getCalendarView().getWeekPage(), calendarPanel.getPageBase());"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"        //zoom in to Day Page"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"        raiseZoomInEvent();"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"        assertEquals(calendarPanel.getCalendarView().getDayPage(), calendarPanel.getPageBase());"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"        //can\u0027t zoom in anymore, stays at Day Page"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"        raiseZoomInEvent();"},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"        assertEquals(calendarPanel.getCalendarView().getDayPage(), calendarPanel.getPageBase());"},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"        //zoom out to Week Page"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"        raiseZoomOutEvent();"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"        assertEquals(calendarPanel.getCalendarView().getWeekPage(), calendarPanel.getPageBase());"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"        //zoom out to Month Page"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"        raiseZoomOutEvent();"},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":"        assertEquals(calendarPanel.getCalendarView().getMonthPage(), calendarPanel.getPageBase());"},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"        //zoom out to Year Page"},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"        raiseZoomOutEvent();"},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":"        assertEquals(calendarPanel.getCalendarView().getYearPage(), calendarPanel.getPageBase());"},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":"        //can\u0027t zoom out anymore, stays at Year Page"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"        raiseZoomOutEvent();"},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":"        assertEquals(calendarPanel.getCalendarView().getYearPage(), calendarPanel.getPageBase());"},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":"        //zoom in to Month Page"},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":"        raiseZoomInEvent();"},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":"        assertEquals(calendarPanel.getCalendarView().getMonthPage(), calendarPanel.getPageBase());"},{"lineNumber":58,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":60,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"jlks96"},"content":"     * Raises a {@code ZoomInEvent}"},{"lineNumber":62,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"jlks96"},"content":"    private void raiseZoomInEvent() {"},{"lineNumber":64,"author":{"gitID":"jlks96"},"content":"        EventsCenter.getInstance().post(new ZoomInEvent());"},{"lineNumber":65,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":67,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"jlks96"},"content":"     * Raises a {@code ZoomOutEvent}"},{"lineNumber":69,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"jlks96"},"content":"    private void raiseZoomOutEvent() {"},{"lineNumber":71,"author":{"gitID":"jlks96"},"content":"        EventsCenter.getInstance().post(new ZoomOutEvent());"},{"lineNumber":72,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":74,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":66,"-":8}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.AMY;"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.BOB;"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.KEYWORD_MATCHING_MEIER;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":65,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":66,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":68,"author":{"gitID":"jlks96"},"content":"        String dateAddedOfFirstPerson \u003d getModel().getFilteredPersonList().get(index.getZeroBased())"},{"lineNumber":69,"author":{"gitID":"jlks96"},"content":"                .getDateAdded().toString();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":71,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":73,"author":{"gitID":"jlks96"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withDateAdded(dateAddedOfFirstPerson)"},{"lineNumber":74,"author":{"gitID":"jlks96"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":86,"author":{"gitID":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":90,"author":{"gitID":"jlks96"},"content":"        Person samePerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":91,"author":{"gitID":"jlks96"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withDateAdded(dateAddedOfFirstPerson)"},{"lineNumber":92,"author":{"gitID":"jlks96"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":93,"author":{"gitID":"jlks96"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":94,"author":{"gitID":"jlks96"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":95,"author":{"gitID":"jlks96"},"content":"        assertCommandSuccess(command, index, samePerson);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":101,"author":{"gitID":"jlks96"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND)"},{"lineNumber":102,"author":{"gitID":"jlks96"},"content":"                .withDateAdded(dateAddedOfFirstPerson).build();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":108,"author":{"gitID":"jlks96"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().withDateAdded(dateAddedOfFirstPerson).build();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":117,"author":{"gitID":"jlks96"},"content":"        String dateAddedOfFirstFilteredPerson \u003d getModel().getFilteredPersonList().get(index.getZeroBased())"},{"lineNumber":118,"author":{"gitID":"jlks96"},"content":"                .getDateAdded().dateAdded;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":121,"author":{"gitID":"jlks96"},"content":"        System.out.println(dateAddedOfFirstPerson);"},{"lineNumber":122,"author":{"gitID":"jlks96"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB)"},{"lineNumber":123,"author":{"gitID":"jlks96"},"content":"                .withDateAdded(dateAddedOfFirstFilteredPerson).build();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":127,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":128,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":137,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":138,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        selectPerson(index);"},{"lineNumber":142,"author":{"gitID":"jlks96"},"content":"        editedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":143,"author":{"gitID":"jlks96"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withDateAdded(dateAddedOfFirstPerson)"},{"lineNumber":144,"author":{"gitID":"jlks96"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":145,"author":{"gitID":"jlks96"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":146,"author":{"gitID":"jlks96"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":149,"author":{"gitID":"jlks96"},"content":"        assertCommandSuccess(command, index, editedPerson, index);"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":159,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":168,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":172,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":175,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":176,"author":{"gitID":"jlks96"},"content":"                        + INVALID_NAME_DESC,"},{"lineNumber":177,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":180,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":181,"author":{"gitID":"jlks96"},"content":"                        + INVALID_PHONE_DESC,"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":185,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":186,"author":{"gitID":"jlks96"},"content":"                        + INVALID_EMAIL_DESC,"},{"lineNumber":187,"author":{"gitID":"-"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":190,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":191,"author":{"gitID":"jlks96"},"content":"                        + INVALID_ADDRESS_DESC,"},{"lineNumber":192,"author":{"gitID":"-"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":195,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":196,"author":{"gitID":"jlks96"},"content":"                        + INVALID_TAG_DESC,"},{"lineNumber":197,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"jlks96"},"content":"        //@@author jlks96"},{"lineNumber":200,"author":{"gitID":"jlks96"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":201,"author":{"gitID":"jlks96"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":202,"author":{"gitID":"jlks96"},"content":"        Person newBob \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":203,"author":{"gitID":"jlks96"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).generateDate()"},{"lineNumber":204,"author":{"gitID":"jlks96"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":205,"author":{"gitID":"jlks96"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(newBob));"},{"lineNumber":206,"author":{"gitID":"jlks96"},"content":"        executeCommand(PersonUtil.getAddCommand(AMY));"},{"lineNumber":207,"author":{"gitID":"jlks96"},"content":"        index \u003d Index.fromOneBased(getModel().getFilteredPersonList().size());"},{"lineNumber":208,"author":{"gitID":"jlks96"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":209,"author":{"gitID":"jlks96"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":210,"author":{"gitID":"jlks96"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":211,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":212,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":213,"author":{"gitID":"jlks96"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":214,"author":{"gitID":"jlks96"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":215,"author":{"gitID":"jlks96"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":216,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":217,"author":{"gitID":"jlks96"},"content":"        //@@author"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"},{"lineNumber":239,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":243,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":246,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":247,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":251,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":274,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":275,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":277,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":278,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":284,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":286,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":292,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":293,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":294,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":295,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":296,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":297,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":298,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":299,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":300,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":301,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":302,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":303,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":306,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":309,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":310,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":311,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":56,"-":255}},{"path":"src/test/java/seedu/address/ui/BrowserPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Ng95junwei"},"content":"//import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(new PersonCard(ALICE, 0));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void display() throws Exception {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // default web page"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // associated web page of a person"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        postNow(selectionChangedEventStub);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        URL expectedPersonUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + ALICE.getName().fullName.replaceAll(\" \", \"%20\"));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"Ng95junwei"},"content":"        //waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":1,"Ng95junwei":2,"-":45}},{"path":"src/test/java/seedu/address/commons/core/ConfigTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ConfigTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"        String defaultConfigAsString \u003d \"App title : AddSurance\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"                + \"Current log level : INFO\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"                + \"Preference file Location : preferences.json\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":1,"-":31}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"    private static final String VALID_DATE_ADDED \u003d \"02/02/2018\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getPersonList().size());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":82,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":84,"author":{"gitID":"jlks96"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DATE_ADDED, VALID_TAGS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":91,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":93,"author":{"gitID":"jlks96"},"content":"                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DATE_ADDED, VALID_TAGS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":100,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":102,"author":{"gitID":"jlks96"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DATE_ADDED, VALID_TAGS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":134,"author":{"gitID":"-"},"content":"                builder.withPerson(new PersonBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":147,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":4,"-":143}},{"path":"src/test/java/seedu/address/commons/event/AppointmentDeletedEventTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.commons.event;"},{"lineNumber":2,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":3,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPT;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"import seedu.address.commons.events.model.AppointmentDeletedEvent;"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"public class AppointmentDeletedEventTest {"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"    public void getAppointmentDeleted_validAppointment_success() throws AppointmentNotFoundException {"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"        AddressBook addressBook \u003d getTypicalAddressBook();"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"        addressBook.removeAppointment(addressBook.getAppointmentList().get(INDEX_FIRST_APPT.getZeroBased()));"},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"        ObservableList\u003cAppointment\u003e appointments \u003d addressBook.getAppointmentList();"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"        AppointmentDeletedEvent event \u003d new AppointmentDeletedEvent(appointments);"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":"        assert(event.getUpdatedAppointments().equals(appointments));"},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":25}},{"path":"src/test/java/seedu/address/commons/event/ZoomOutEventTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.commons.event;"},{"lineNumber":2,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":3,"author":{"gitID":"jlks96"},"content":"import org.junit.Test;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"import seedu.address.commons.events.logic.ZoomOutEvent;"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"public class ZoomOutEventTest {"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"    public void toString_comparedWithClassName_success() {"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"        ZoomOutEvent event \u003d new ZoomOutEvent();"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"        assert(event.toString().equals(\"ZoomOutEvent\"));"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":14}},{"path":"src/test/java/seedu/address/commons/event/ZoomInEventTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.commons.event;"},{"lineNumber":2,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":3,"author":{"gitID":"jlks96"},"content":"import org.junit.Test;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"import seedu.address.commons.events.logic.ZoomInEvent;"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"public class ZoomInEventTest {"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"    public void toString_comparedWithClassName_success() {"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"        ZoomInEvent event \u003d new ZoomInEvent();"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"        assert(event.toString().equals(\"ZoomInEvent\"));"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":14}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Logic logic \u003d new LogicManager(model);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(invalidCommand);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(deleteCommand);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_validCommand_success() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(listCommand);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        logic.getFilteredPersonList().remove(0);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":"    public void getFilteredAppointmentList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":58,"author":{"gitID":"jlks96"},"content":"        logic.getFilteredAppointmentList().remove(0);"},{"lineNumber":59,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Also confirms that {@code expectedModel} is as specified."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     *      - {@code expectedModel}\u0027s address book was saved to the storage file."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                                           String expectedMessage, Model expectedModel) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, null);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, e.getClass());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * {@code HistoryCommand}."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    private void assertHistoryCorrect(String... expectedCommands) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            String expectedMessage \u003d String.format("},{"lineNumber":124,"author":{"gitID":"-"},"content":"                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        } catch (ParseException | CommandException e) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":5,"-":125}},{"path":"src/test/java/seedu/address/commons/event/NewAppointmentAddedEventTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.commons.event;"},{"lineNumber":2,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":3,"author":{"gitID":"jlks96"},"content":"import org.junit.Test;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"import seedu.address.commons.events.model.NewAppointmentAddedEvent;"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"import seedu.address.testutil.AppointmentBuilder;"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"public class NewAppointmentAddedEventTest {"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"    public void getAppointmentAdded_validAppointment_success() {"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"        Appointment appointment \u003d new AppointmentBuilder().build();"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"        NewAppointmentAddedEvent event \u003d new NewAppointmentAddedEvent(appointment);"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"        assert(event.getAppointmentAdded().equals(appointment));"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":18}},{"path":"src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"import java.util.Calendar;"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Contains helper methods for testing command parsers."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class CommandParserTestUtil {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * equals to {@code expectedCommand}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            Command command \u003d parser.parse(userInput);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            assertEquals(expectedCommand, command);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * equals to {@code expectedMessage}."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            parser.parse(userInput);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, pe.getMessage());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"    //@@author jlks96"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":"     * Creates and returns a {@code DateAdded} with the dateAdded attribute representing the current date"},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"     * @return current date in the following format: dd/MM/yyyy"},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"    public static String createDate() {"},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":"        SimpleDateFormat dateFormatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":"        Calendar calendar \u003d Calendar.getInstance();"},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":"        return dateFormatter.format(calendar.getTime());"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":15,"-":38}},{"path":"src/test/java/systemtests/FindAliasSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.ALICE;"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.BENSON;"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.CARL;"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.DANIEL;"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.ELLE;"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.FIONA;"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.GEORGE;"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.KEYWORD_MATCHING_MEIER;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"public class FindAliasSystemTest extends AddressBookSystemTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":33,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":34,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_ALIAS + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":42,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":43,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" Carl\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" Benson Daniel\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":61,"author":{"gitID":"jlks96"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" Daniel Benson\";"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":66,"author":{"gitID":"jlks96"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" Daniel Benson Daniel\";"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":71,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":72,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":73,"author":{"gitID":"jlks96"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":78,"author":{"gitID":"jlks96"},"content":"        command \u003d UndoCommand.COMMAND_ALIAS;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":83,"author":{"gitID":"jlks96"},"content":"        command \u003d RedoCommand.COMMAND_ALIAS;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":88,"author":{"gitID":"jlks96"},"content":"        executeCommand(DeleteCommand.COMMAND_ALIAS + \" 1\");"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"},{"lineNumber":90,"author":{"gitID":"jlks96"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"},{"lineNumber":97,"author":{"gitID":"jlks96"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" MeIeR\";"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"Ng95junwei"},"content":"        /* Case: find person in address book, keyword is substring of name -\u003e 1 persons found */"},{"lineNumber":102,"author":{"gitID":"jlks96"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" Mei\";"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":107,"author":{"gitID":"jlks96"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" Meiers\";"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        /* Case: find person not in address book -\u003e 0 persons found */"},{"lineNumber":113,"author":{"gitID":"jlks96"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" Mark\";"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"Ng95junwei"},"content":"        /* Case: find phone number of person in address book -\u003e 1 persons found */"},{"lineNumber":118,"author":{"gitID":"jlks96"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + DANIEL.getPhone().value;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"Ng95junwei"},"content":"        /* Case: find address of person in address book -\u003e 3 persons found */"},{"lineNumber":124,"author":{"gitID":"jlks96"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + DANIEL.getAddress().value;"},{"lineNumber":125,"author":{"gitID":"Ng95junwei"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL, DANIEL, GEORGE);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"Ng95junwei"},"content":"        /* Case: find email of person in address book -\u003e 1 persons found */"},{"lineNumber":130,"author":{"gitID":"jlks96"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + DANIEL.getEmail().value;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /* Case: find tags of person in address book -\u003e 0 persons found */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":137,"author":{"gitID":"jlks96"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + tags.get(0).tagName;"},{"lineNumber":138,"author":{"gitID":"Ng95junwei"},"content":"        ModelHelper.setFilteredList(expectedModel, ALICE, CARL, DANIEL, ELLE, FIONA, GEORGE);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        /* Case: find while a person is selected -\u003e selected card deselected */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"},{"lineNumber":146,"author":{"gitID":"jlks96"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" Daniel\";"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        /* Case: find person in empty address book -\u003e 0 persons found */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":153,"author":{"gitID":"jlks96"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":176,"author":{"gitID":"-"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":30,"Ng95junwei":6,"-":166}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.createDate;"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalDates.DATE_FIRST_JAN;"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalDates.VALID_DATE_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalTags.TAG_FRIEND;"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalTags.VALID_TAG_DESC_FRIEND;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"import java.util.HashSet;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"import seedu.address.logic.commands.DeleteAppointmentCommand;"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"import seedu.address.logic.commands.DeleteBeforeCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":32,"author":{"gitID":"Ng95junwei"},"content":"import seedu.address.logic.commands.EmailCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"import seedu.address.logic.commands.ZoomInCommand;"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"import seedu.address.logic.commands.ZoomOutCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"import seedu.address.testutil.AppointmentBuilder;"},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"import seedu.address.testutil.AppointmentUtil;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":61,"author":{"gitID":"jlks96"},"content":"        Person person \u003d new PersonBuilder().withDateAdded(createDate()).build();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"jlks96"},"content":"    public void parseCommand_addAlias() throws Exception {"},{"lineNumber":68,"author":{"gitID":"jlks96"},"content":"        Person person \u003d new PersonBuilder().withDateAdded(createDate()).build();"},{"lineNumber":69,"author":{"gitID":"jlks96"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddAlias(person));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"jlks96"},"content":"    public void parseCommand_clearAlias() throws Exception {"},{"lineNumber":81,"author":{"gitID":"jlks96"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"},{"lineNumber":82,"author":{"gitID":"jlks96"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":83,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":88,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"jlks96"},"content":"    public void parseCommand_deleteAlias() throws Exception {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":95,"author":{"gitID":"jlks96"},"content":"                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"jlks96"},"content":"    //@@author jlks96"},{"lineNumber":100,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"jlks96"},"content":"    public void parseCommand_deleteBefore() throws Exception {"},{"lineNumber":102,"author":{"gitID":"jlks96"},"content":"        DeleteBeforeCommand command \u003d (DeleteBeforeCommand) parser.parseCommand("},{"lineNumber":103,"author":{"gitID":"jlks96"},"content":"                DeleteBeforeCommand.COMMAND_WORD + VALID_DATE_DESC + VALID_TAG_DESC_FRIEND);"},{"lineNumber":104,"author":{"gitID":"jlks96"},"content":"        assertEquals(new DeleteBeforeCommand(DATE_FIRST_JAN, new HashSet\u003c\u003e(Arrays.asList(TAG_FRIEND))), command);"},{"lineNumber":105,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":107,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"jlks96"},"content":"    public void parseCommand_deleteBeforeAlias() throws Exception {"},{"lineNumber":109,"author":{"gitID":"jlks96"},"content":"        DeleteBeforeCommand command \u003d (DeleteBeforeCommand) parser.parseCommand("},{"lineNumber":110,"author":{"gitID":"jlks96"},"content":"                DeleteBeforeCommand.COMMAND_ALIAS + VALID_DATE_DESC + VALID_TAG_DESC_FRIEND);"},{"lineNumber":111,"author":{"gitID":"jlks96"},"content":"        assertEquals(new DeleteBeforeCommand(DATE_FIRST_JAN, new HashSet\u003c\u003e(Arrays.asList(TAG_FRIEND))), command);"},{"lineNumber":112,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":114,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"jlks96"},"content":"    public void parseCommand_addAppointment() throws Exception {"},{"lineNumber":116,"author":{"gitID":"jlks96"},"content":"        Appointment appointment \u003d new AppointmentBuilder().build();"},{"lineNumber":117,"author":{"gitID":"jlks96"},"content":"        AddAppointmentCommand command \u003d"},{"lineNumber":118,"author":{"gitID":"jlks96"},"content":"                (AddAppointmentCommand) parser.parseCommand(AppointmentUtil.getAddAppointmentCommand(appointment));"},{"lineNumber":119,"author":{"gitID":"jlks96"},"content":"        assertEquals(new AddAppointmentCommand(appointment), command);"},{"lineNumber":120,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":122,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"jlks96"},"content":"    public void parseCommand_addAppointmentAlias() throws Exception {"},{"lineNumber":124,"author":{"gitID":"jlks96"},"content":"        Appointment appointment \u003d new AppointmentBuilder().build();"},{"lineNumber":125,"author":{"gitID":"jlks96"},"content":"        AddAppointmentCommand command \u003d"},{"lineNumber":126,"author":{"gitID":"jlks96"},"content":"                (AddAppointmentCommand) parser.parseCommand(AppointmentUtil.getAddAppointmentAlias(appointment));"},{"lineNumber":127,"author":{"gitID":"jlks96"},"content":"        assertEquals(new AddAppointmentCommand(appointment), command);"},{"lineNumber":128,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":130,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"jlks96"},"content":"    public void parseCommand_deleteAppointment() throws Exception {"},{"lineNumber":132,"author":{"gitID":"jlks96"},"content":"        Appointment appointment \u003d new AppointmentBuilder().build();"},{"lineNumber":133,"author":{"gitID":"jlks96"},"content":"        DeleteAppointmentCommand command \u003d"},{"lineNumber":134,"author":{"gitID":"jlks96"},"content":"                (DeleteAppointmentCommand) parser.parseCommand("},{"lineNumber":135,"author":{"gitID":"jlks96"},"content":"                        AppointmentUtil.getDeleteAppointmentCommand(appointment));"},{"lineNumber":136,"author":{"gitID":"jlks96"},"content":"        assertEquals(new DeleteAppointmentCommand(appointment), command);"},{"lineNumber":137,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":139,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"jlks96"},"content":"    public void parseCommand_deleteAppointmentAlias() throws Exception {"},{"lineNumber":141,"author":{"gitID":"jlks96"},"content":"        Appointment appointment \u003d new AppointmentBuilder().build();"},{"lineNumber":142,"author":{"gitID":"jlks96"},"content":"        DeleteAppointmentCommand command \u003d"},{"lineNumber":143,"author":{"gitID":"jlks96"},"content":"                (DeleteAppointmentCommand) parser.parseCommand(AppointmentUtil.getDeleteAppointmentAlias(appointment));"},{"lineNumber":144,"author":{"gitID":"jlks96"},"content":"        assertEquals(new DeleteAppointmentCommand(appointment), command);"},{"lineNumber":145,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":147,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":148,"author":{"gitID":"jlks96"},"content":"    public void parseCommand_zoomIn() throws Exception {"},{"lineNumber":149,"author":{"gitID":"jlks96"},"content":"        assertTrue(parser.parseCommand(ZoomInCommand.COMMAND_WORD) instanceof ZoomInCommand);"},{"lineNumber":150,"author":{"gitID":"jlks96"},"content":"        assertTrue(parser.parseCommand(ZoomInCommand.COMMAND_WORD + \" 3\") instanceof ZoomInCommand);"},{"lineNumber":151,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":153,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":154,"author":{"gitID":"jlks96"},"content":"    public void parseCommand_zoomInAlias() throws Exception {"},{"lineNumber":155,"author":{"gitID":"jlks96"},"content":"        assertTrue(parser.parseCommand(ZoomInCommand.COMMAND_ALIAS) instanceof ZoomInCommand);"},{"lineNumber":156,"author":{"gitID":"jlks96"},"content":"        assertTrue(parser.parseCommand(ZoomInCommand.COMMAND_ALIAS + \" 3\") instanceof ZoomInCommand);"},{"lineNumber":157,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":159,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":160,"author":{"gitID":"jlks96"},"content":"    public void parseCommand_zoomOut() throws Exception {"},{"lineNumber":161,"author":{"gitID":"jlks96"},"content":"        assertTrue(parser.parseCommand(ZoomOutCommand.COMMAND_WORD) instanceof ZoomOutCommand);"},{"lineNumber":162,"author":{"gitID":"jlks96"},"content":"        assertTrue(parser.parseCommand(ZoomOutCommand.COMMAND_WORD + \" 3\") instanceof ZoomOutCommand);"},{"lineNumber":163,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":165,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":166,"author":{"gitID":"jlks96"},"content":"    public void parseCommand_zoomOutAlias() throws Exception {"},{"lineNumber":167,"author":{"gitID":"jlks96"},"content":"        assertTrue(parser.parseCommand(ZoomOutCommand.COMMAND_ALIAS) instanceof ZoomOutCommand);"},{"lineNumber":168,"author":{"gitID":"jlks96"},"content":"        assertTrue(parser.parseCommand(ZoomOutCommand.COMMAND_ALIAS + \" 3\") instanceof ZoomOutCommand);"},{"lineNumber":169,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"jlks96"},"content":"    //@@author"},{"lineNumber":171,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":177,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":182,"author":{"gitID":"jlks96"},"content":"    public void parseCommand_editAlias() throws Exception {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":185,"author":{"gitID":"jlks96"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""},{"lineNumber":186,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":197,"author":{"gitID":"jlks96"},"content":"    public void parseCommand_exitAlias() throws Exception {"},{"lineNumber":198,"author":{"gitID":"jlks96"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS) instanceof ExitCommand);"},{"lineNumber":199,"author":{"gitID":"jlks96"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS + \" 3\") instanceof ExitCommand);"},{"lineNumber":200,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":206,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":211,"author":{"gitID":"jlks96"},"content":"    public void parseCommand_findAlias() throws Exception {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":214,"author":{"gitID":"jlks96"},"content":"                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":226,"author":{"gitID":"jlks96"},"content":"    public void parseCommand_helpAlias() throws Exception {"},{"lineNumber":227,"author":{"gitID":"jlks96"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS) instanceof HelpCommand);"},{"lineNumber":228,"author":{"gitID":"jlks96"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS + \" 3\") instanceof HelpCommand);"},{"lineNumber":229,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":238,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":245,"author":{"gitID":"jlks96"},"content":"    public void parseCommand_historyAlias() throws Exception {"},{"lineNumber":246,"author":{"gitID":"jlks96"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"},{"lineNumber":247,"author":{"gitID":"jlks96"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":251,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":264,"author":{"gitID":"jlks96"},"content":"    public void parseCommand_listAlias() throws Exception {"},{"lineNumber":265,"author":{"gitID":"jlks96"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"},{"lineNumber":266,"author":{"gitID":"jlks96"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"},{"lineNumber":267,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":268,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":272,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":277,"author":{"gitID":"jlks96"},"content":"    public void parseCommand_selectAlias() throws Exception {"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":279,"author":{"gitID":"jlks96"},"content":"                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":284,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":287,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":290,"author":{"gitID":"jlks96"},"content":"    public void parseCommand_redoCommandAlias_returnsRedoCommand() throws Exception {"},{"lineNumber":291,"author":{"gitID":"jlks96"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"},{"lineNumber":292,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":293,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":296,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":299,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":302,"author":{"gitID":"jlks96"},"content":"    public void parseCommand_undoCommandAlias_returnsUndoCommand() throws Exception {"},{"lineNumber":303,"author":{"gitID":"jlks96"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"},{"lineNumber":304,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":305,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"Ng95junwei"},"content":"    @Test"},{"lineNumber":308,"author":{"gitID":"Ng95junwei"},"content":"    public void parseCommand_email() throws Exception {"},{"lineNumber":309,"author":{"gitID":"Ng95junwei"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"test\");"},{"lineNumber":310,"author":{"gitID":"Ng95junwei"},"content":"        String[] nameKeywordArray \u003d new String[]{ \"foo\" };"},{"lineNumber":311,"author":{"gitID":"Ng95junwei"},"content":"        EmailCommand command \u003d (EmailCommand) parser.parseCommand("},{"lineNumber":312,"author":{"gitID":"Ng95junwei"},"content":"                EmailCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":313,"author":{"gitID":"Ng95junwei"},"content":"        assertEquals(new EmailCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywordArray)),"},{"lineNumber":314,"author":{"gitID":"Ng95junwei"},"content":"                \"test\"), command);"},{"lineNumber":315,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":316,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":317,"author":{"gitID":"Ng95junwei"},"content":"    @Test"},{"lineNumber":318,"author":{"gitID":"Ng95junwei"},"content":"    public void parseCommand_emailAlias() throws Exception {"},{"lineNumber":319,"author":{"gitID":"Ng95junwei"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"test\");"},{"lineNumber":320,"author":{"gitID":"Ng95junwei"},"content":"        String[] nameKeywordArray \u003d new String[]{ \"foo\" };"},{"lineNumber":321,"author":{"gitID":"Ng95junwei"},"content":"        EmailCommand command \u003d (EmailCommand) parser.parseCommand("},{"lineNumber":322,"author":{"gitID":"Ng95junwei"},"content":"                EmailCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":323,"author":{"gitID":"Ng95junwei"},"content":"        assertEquals(new EmailCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywordArray)),"},{"lineNumber":324,"author":{"gitID":"Ng95junwei"},"content":"                \"test\"), command);"},{"lineNumber":325,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":326,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":327,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":328,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":329,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":330,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":331,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":332,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":333,"author":{"gitID":"-"},"content":""},{"lineNumber":334,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":335,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":336,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":337,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":338,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":339,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":340,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":139,"Ng95junwei":21,"-":180}},{"path":"src/test/java/seedu/address/logic/parser/DeleteBeforeCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalDates.DATE_FIRST_JAN;"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalDates.INVALID_DATE_DESC;"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalDates.VALID_DATE_DESC;"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalTags.INVALID_TAG_DESC;"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalTags.TAG_SET_FRIEND;"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalTags.TAG_SET_OWES_MONEY_FRIEND;"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalTags.VALID_TAG_DESC_FRIEND;"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalTags.VALID_TAG_DESC_OWES_MONEY;"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"import seedu.address.logic.commands.DeleteBeforeCommand;"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.person.DateAdded;"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"public class DeleteBeforeCommandParserTest {"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"    private DeleteBeforeCommandParser parser \u003d new DeleteBeforeCommandParser();"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"        // one tag - accepted"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"        assertParseSuccess(parser, VALID_DATE_DESC + VALID_TAG_DESC_FRIEND,"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"                new DeleteBeforeCommand(DATE_FIRST_JAN, TAG_SET_FRIEND));"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"        // multiple tags - all accepted"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"        assertParseSuccess(parser, VALID_DATE_DESC + VALID_TAG_DESC_OWES_MONEY + VALID_TAG_DESC_FRIEND,"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"                new DeleteBeforeCommand(DATE_FIRST_JAN, TAG_SET_OWES_MONEY_FRIEND));"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"        // invalid date - fail"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"        assertParseFailure(parser, INVALID_DATE_DESC + VALID_TAG_DESC_FRIEND,"},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"                DateAdded.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":"        // invalid tag - fail"},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"        assertParseFailure(parser, VALID_DATE_DESC + INVALID_TAG_DESC,"},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteBeforeCommand.MESSAGE_USAGE);"},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":"        // missing date prefix"},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":"        assertParseFailure(parser, VALID_TAG_DESC_FRIEND, expectedMessage);"},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":"        // missing tags prefix"},{"lineNumber":58,"author":{"gitID":"jlks96"},"content":"        assertParseFailure(parser, VALID_DATE_DESC, expectedMessage);"},{"lineNumber":59,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":60,"author":{"gitID":"jlks96"},"content":"        // all prefixes missing"},{"lineNumber":61,"author":{"gitID":"jlks96"},"content":"        assertParseFailure(parser, \"\", expectedMessage);"},{"lineNumber":62,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":58,"-":5}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Date;"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.EndTime;"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Location;"},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.PersonName;"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.StartTime;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.person.DateAdded;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"    private static final String INVALID_DATE \u003d \"12/34\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"    private static final String INVALID_TIME \u003d \"1130\";"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"    private static final String INVALID_LOCATION \u003d \"\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"    private static final String VALID_DATE \u003d \"01/01/2018\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":"    private static final String VALID_TIME \u003d \"11:30\";"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"    private static final String VALID_LOCATION \u003d \"Silver Way\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((Optional\u003cString\u003e) null));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void parseName_invalidValue_throwsIllegalValueException() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(Optional.of(INVALID_NAME)));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(VALID_NAME)));"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(nameWithWhitespace)));"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((Optional\u003cString\u003e) null));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void parsePhone_invalidValue_throwsIllegalValueException() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(Optional.of(INVALID_PHONE)));"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void parsePhone_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parsePhone(Optional.empty()).isPresent());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(VALID_PHONE)));"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(phoneWithWhitespace)));"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((Optional\u003cString\u003e) null));"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public void parseAddress_invalidValue_throwsIllegalValueException() {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(Optional.of(INVALID_ADDRESS)));"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public void parseAddress_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseAddress(Optional.empty()).isPresent());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(VALID_ADDRESS)));"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(addressWithWhitespace)));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((Optional\u003cString\u003e) null));"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    public void parseEmail_invalidValue_throwsIllegalValueException() {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(Optional.of(INVALID_EMAIL)));"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    public void parseEmail_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseEmail(Optional.empty()).isPresent());"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(VALID_EMAIL)));"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(emailWithWhitespace)));"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"jlks96"},"content":"    //@@author jlks96"},{"lineNumber":210,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":211,"author":{"gitID":"jlks96"},"content":"    public void parseDateAdded_null_throwsNullPointerException() {"},{"lineNumber":212,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDateAdded((String) null));"},{"lineNumber":213,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDateAdded((Optional\u003cString\u003e) null));"},{"lineNumber":214,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":216,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":217,"author":{"gitID":"jlks96"},"content":"    public void parseDateAdded_invalidValue_throwsIllegalValueException() {"},{"lineNumber":218,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseDate(INVALID_DATE));"},{"lineNumber":219,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseDateAdded(Optional.of(INVALID_DATE)));"},{"lineNumber":220,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":222,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":223,"author":{"gitID":"jlks96"},"content":"    public void parseDateAdded_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":224,"author":{"gitID":"jlks96"},"content":"        assertFalse(ParserUtil.parseDateAdded(Optional.empty()).isPresent());"},{"lineNumber":225,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":227,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":228,"author":{"gitID":"jlks96"},"content":"    public void parseDateAdded_validValueWithoutWhitespace_returnsDate() throws Exception {"},{"lineNumber":229,"author":{"gitID":"jlks96"},"content":"        DateAdded expectedDate \u003d new DateAdded(VALID_DATE);"},{"lineNumber":230,"author":{"gitID":"jlks96"},"content":"        assertEquals(expectedDate, ParserUtil.parseDateAdded(VALID_DATE));"},{"lineNumber":231,"author":{"gitID":"jlks96"},"content":"        assertEquals(Optional.of(expectedDate), ParserUtil.parseDateAdded(Optional.of(VALID_DATE)));"},{"lineNumber":232,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":234,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":235,"author":{"gitID":"jlks96"},"content":"    public void parseDateAdded_validValueWithWhitespace_returnsTrimmedDate() throws Exception {"},{"lineNumber":236,"author":{"gitID":"jlks96"},"content":"        String dateWithWhitespace \u003d WHITESPACE + VALID_DATE + WHITESPACE;"},{"lineNumber":237,"author":{"gitID":"jlks96"},"content":"        DateAdded expectedDate \u003d new DateAdded(VALID_DATE);"},{"lineNumber":238,"author":{"gitID":"jlks96"},"content":"        assertEquals(expectedDate, ParserUtil.parseDateAdded(dateWithWhitespace));"},{"lineNumber":239,"author":{"gitID":"jlks96"},"content":"        assertEquals(Optional.of(expectedDate), ParserUtil.parseDateAdded(Optional.of(dateWithWhitespace)));"},{"lineNumber":240,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":242,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":243,"author":{"gitID":"jlks96"},"content":"    public void parsePersonName_null_throwsNullPointerException() {"},{"lineNumber":244,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePersonName((String) null));"},{"lineNumber":245,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePersonName((Optional\u003cString\u003e) null));"},{"lineNumber":246,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":248,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":249,"author":{"gitID":"jlks96"},"content":"    public void parsePersonName_invalidValue_throwsIllegalValueException() {"},{"lineNumber":250,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePersonName(INVALID_NAME));"},{"lineNumber":251,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePersonName(Optional.of(INVALID_NAME)));"},{"lineNumber":252,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":254,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":255,"author":{"gitID":"jlks96"},"content":"    public void parsePersonName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":256,"author":{"gitID":"jlks96"},"content":"        assertFalse(ParserUtil.parsePersonName(Optional.empty()).isPresent());"},{"lineNumber":257,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":259,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":260,"author":{"gitID":"jlks96"},"content":"    public void parsePersonName_validValueWithoutWhitespace_returnsPersonName() throws Exception {"},{"lineNumber":261,"author":{"gitID":"jlks96"},"content":"        PersonName expectedName \u003d new PersonName(VALID_NAME);"},{"lineNumber":262,"author":{"gitID":"jlks96"},"content":"        assertEquals(expectedName, ParserUtil.parsePersonName(VALID_NAME));"},{"lineNumber":263,"author":{"gitID":"jlks96"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parsePersonName(Optional.of(VALID_NAME)));"},{"lineNumber":264,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":266,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":267,"author":{"gitID":"jlks96"},"content":"    public void parsePersonName_validValueWithWhitespace_returnsTrimmedPersonName() throws Exception {"},{"lineNumber":268,"author":{"gitID":"jlks96"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":269,"author":{"gitID":"jlks96"},"content":"        PersonName expectedName \u003d new PersonName(VALID_NAME);"},{"lineNumber":270,"author":{"gitID":"jlks96"},"content":"        assertEquals(expectedName, ParserUtil.parsePersonName(nameWithWhitespace));"},{"lineNumber":271,"author":{"gitID":"jlks96"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parsePersonName(Optional.of(nameWithWhitespace)));"},{"lineNumber":272,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":274,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":275,"author":{"gitID":"jlks96"},"content":"    public void parseDate_null_throwsNullPointerException() {"},{"lineNumber":276,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDate((String) null));"},{"lineNumber":277,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDate((Optional\u003cString\u003e) null));"},{"lineNumber":278,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":279,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":280,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":281,"author":{"gitID":"jlks96"},"content":"    public void parseDate_invalidValue_throwsIllegalValueException() {"},{"lineNumber":282,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseDate(INVALID_DATE));"},{"lineNumber":283,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseDate(Optional.of(INVALID_DATE)));"},{"lineNumber":284,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":285,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":286,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":287,"author":{"gitID":"jlks96"},"content":"    public void parseDate_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":288,"author":{"gitID":"jlks96"},"content":"        assertFalse(ParserUtil.parseDate(Optional.empty()).isPresent());"},{"lineNumber":289,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":290,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":291,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":292,"author":{"gitID":"jlks96"},"content":"    public void parseDate_validValueWithoutWhitespace_returnsDate() throws Exception {"},{"lineNumber":293,"author":{"gitID":"jlks96"},"content":"        Date expectedDate \u003d new Date(VALID_DATE);"},{"lineNumber":294,"author":{"gitID":"jlks96"},"content":"        assertEquals(expectedDate, ParserUtil.parseDate(VALID_DATE));"},{"lineNumber":295,"author":{"gitID":"jlks96"},"content":"        assertEquals(Optional.of(expectedDate), ParserUtil.parseDate(Optional.of(VALID_DATE)));"},{"lineNumber":296,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":297,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":298,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":299,"author":{"gitID":"jlks96"},"content":"    public void parseDate_validValueWithWhitespace_returnsTrimmedDate() throws Exception {"},{"lineNumber":300,"author":{"gitID":"jlks96"},"content":"        String dateWithWhitespace \u003d WHITESPACE + VALID_DATE + WHITESPACE;"},{"lineNumber":301,"author":{"gitID":"jlks96"},"content":"        Date expectedDate \u003d new Date(VALID_DATE);"},{"lineNumber":302,"author":{"gitID":"jlks96"},"content":"        assertEquals(expectedDate, ParserUtil.parseDate(dateWithWhitespace));"},{"lineNumber":303,"author":{"gitID":"jlks96"},"content":"        assertEquals(Optional.of(expectedDate), ParserUtil.parseDate(Optional.of(dateWithWhitespace)));"},{"lineNumber":304,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":305,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":306,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":307,"author":{"gitID":"jlks96"},"content":"    public void parseStartTime_null_throwsNullPointerException() {"},{"lineNumber":308,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseStartTime((String) null));"},{"lineNumber":309,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseStartTime((Optional\u003cString\u003e) null));"},{"lineNumber":310,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":311,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":312,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":313,"author":{"gitID":"jlks96"},"content":"    public void parseStartTime_invalidValue_throwsIllegalValueException() {"},{"lineNumber":314,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseStartTime(INVALID_TIME));"},{"lineNumber":315,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseStartTime(Optional.of(INVALID_TIME)));"},{"lineNumber":316,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":317,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":318,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":319,"author":{"gitID":"jlks96"},"content":"    public void parseStartTime_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":320,"author":{"gitID":"jlks96"},"content":"        assertFalse(ParserUtil.parseStartTime(Optional.empty()).isPresent());"},{"lineNumber":321,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":322,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":323,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":324,"author":{"gitID":"jlks96"},"content":"    public void parseStartTime_validValueWithoutWhitespace_returnsStartTime() throws Exception {"},{"lineNumber":325,"author":{"gitID":"jlks96"},"content":"        StartTime expectedTime \u003d new StartTime(VALID_TIME);"},{"lineNumber":326,"author":{"gitID":"jlks96"},"content":"        assertEquals(expectedTime, ParserUtil.parseStartTime(VALID_TIME));"},{"lineNumber":327,"author":{"gitID":"jlks96"},"content":"        assertEquals(Optional.of(expectedTime), ParserUtil.parseStartTime(Optional.of(VALID_TIME)));"},{"lineNumber":328,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":329,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":330,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":331,"author":{"gitID":"jlks96"},"content":"    public void parseStartTime_validValueWithWhitespace_returnsTrimmedStartTime() throws Exception {"},{"lineNumber":332,"author":{"gitID":"jlks96"},"content":"        String timeWithWhitespace \u003d WHITESPACE + VALID_TIME + WHITESPACE;"},{"lineNumber":333,"author":{"gitID":"jlks96"},"content":"        StartTime expectedTime \u003d new StartTime(VALID_TIME);"},{"lineNumber":334,"author":{"gitID":"jlks96"},"content":"        assertEquals(expectedTime, ParserUtil.parseStartTime(timeWithWhitespace));"},{"lineNumber":335,"author":{"gitID":"jlks96"},"content":"        assertEquals(Optional.of(expectedTime), ParserUtil.parseStartTime(Optional.of(timeWithWhitespace)));"},{"lineNumber":336,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":337,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":338,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":339,"author":{"gitID":"jlks96"},"content":"    public void parseEndTime_null_throwsNullPointerException() {"},{"lineNumber":340,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEndTime((String) null));"},{"lineNumber":341,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEndTime((Optional\u003cString\u003e) null));"},{"lineNumber":342,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":343,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":344,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":345,"author":{"gitID":"jlks96"},"content":"    public void parseEndTime_invalidValue_throwsIllegalValueException() {"},{"lineNumber":346,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEndTime(INVALID_TIME));"},{"lineNumber":347,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEndTime(Optional.of(INVALID_TIME)));"},{"lineNumber":348,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":349,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":350,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":351,"author":{"gitID":"jlks96"},"content":"    public void parseEndTime_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":352,"author":{"gitID":"jlks96"},"content":"        assertFalse(ParserUtil.parseEndTime(Optional.empty()).isPresent());"},{"lineNumber":353,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":354,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":355,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":356,"author":{"gitID":"jlks96"},"content":"    public void parseEndTime_validValueWithoutWhitespace_returnsEndTime() throws Exception {"},{"lineNumber":357,"author":{"gitID":"jlks96"},"content":"        EndTime expectedTime \u003d new EndTime(VALID_TIME);"},{"lineNumber":358,"author":{"gitID":"jlks96"},"content":"        assertEquals(expectedTime, ParserUtil.parseEndTime(VALID_TIME));"},{"lineNumber":359,"author":{"gitID":"jlks96"},"content":"        assertEquals(Optional.of(expectedTime), ParserUtil.parseEndTime(Optional.of(VALID_TIME)));"},{"lineNumber":360,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":361,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":362,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":363,"author":{"gitID":"jlks96"},"content":"    public void parseEndTime_validValueWithWhitespace_returnsTrimmedEndTime() throws Exception {"},{"lineNumber":364,"author":{"gitID":"jlks96"},"content":"        String timeWithWhitespace \u003d WHITESPACE + VALID_TIME + WHITESPACE;"},{"lineNumber":365,"author":{"gitID":"jlks96"},"content":"        EndTime expectedTime \u003d new EndTime(VALID_TIME);"},{"lineNumber":366,"author":{"gitID":"jlks96"},"content":"        assertEquals(expectedTime, ParserUtil.parseEndTime(timeWithWhitespace));"},{"lineNumber":367,"author":{"gitID":"jlks96"},"content":"        assertEquals(Optional.of(expectedTime), ParserUtil.parseEndTime(Optional.of(timeWithWhitespace)));"},{"lineNumber":368,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":369,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":370,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":371,"author":{"gitID":"jlks96"},"content":"    public void parseLocation_null_throwsNullPointerException() {"},{"lineNumber":372,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseLocation((String) null));"},{"lineNumber":373,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseLocation((Optional\u003cString\u003e) null));"},{"lineNumber":374,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":375,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":376,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":377,"author":{"gitID":"jlks96"},"content":"    public void parseLocation_invalidValue_throwsIllegalValueException() {"},{"lineNumber":378,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseLocation(INVALID_LOCATION));"},{"lineNumber":379,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseLocation(Optional.of(INVALID_LOCATION)));"},{"lineNumber":380,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":381,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":382,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":383,"author":{"gitID":"jlks96"},"content":"    public void parseLocation_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":384,"author":{"gitID":"jlks96"},"content":"        assertFalse(ParserUtil.parseLocation(Optional.empty()).isPresent());"},{"lineNumber":385,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":386,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":387,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":388,"author":{"gitID":"jlks96"},"content":"    public void parseLocation_validValueWithoutWhitespace_returnsLocation() throws Exception {"},{"lineNumber":389,"author":{"gitID":"jlks96"},"content":"        Location expectedLocation \u003d new Location(VALID_LOCATION);"},{"lineNumber":390,"author":{"gitID":"jlks96"},"content":"        assertEquals(expectedLocation, ParserUtil.parseLocation(VALID_LOCATION));"},{"lineNumber":391,"author":{"gitID":"jlks96"},"content":"        assertEquals(Optional.of(expectedLocation), ParserUtil.parseLocation(Optional.of(VALID_LOCATION)));"},{"lineNumber":392,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":393,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":394,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":395,"author":{"gitID":"jlks96"},"content":"    public void parseLocation_validValueWithWhitespace_returnsTrimmedLocation() throws Exception {"},{"lineNumber":396,"author":{"gitID":"jlks96"},"content":"        String locationWithWhitespace \u003d WHITESPACE + VALID_LOCATION + WHITESPACE;"},{"lineNumber":397,"author":{"gitID":"jlks96"},"content":"        Location expectedLocation \u003d new Location(VALID_LOCATION);"},{"lineNumber":398,"author":{"gitID":"jlks96"},"content":"        assertEquals(expectedLocation, ParserUtil.parseLocation(locationWithWhitespace));"},{"lineNumber":399,"author":{"gitID":"jlks96"},"content":"        assertEquals(Optional.of(expectedLocation), ParserUtil.parseLocation(Optional.of(locationWithWhitespace)));"},{"lineNumber":400,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":401,"author":{"gitID":"jlks96"},"content":"    //@@author"},{"lineNumber":402,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":403,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":404,"author":{"gitID":"-"},"content":"    public void parseTag_null_throwsNullPointerException() throws Exception {"},{"lineNumber":405,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":406,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(null);"},{"lineNumber":407,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":408,"author":{"gitID":"-"},"content":""},{"lineNumber":409,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":410,"author":{"gitID":"-"},"content":"    public void parseTag_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":411,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":412,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(INVALID_TAG);"},{"lineNumber":413,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":414,"author":{"gitID":"-"},"content":""},{"lineNumber":415,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":416,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":417,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":418,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":419,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":420,"author":{"gitID":"-"},"content":""},{"lineNumber":421,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":422,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":423,"author":{"gitID":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":424,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":425,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":426,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":427,"author":{"gitID":"-"},"content":""},{"lineNumber":428,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":429,"author":{"gitID":"-"},"content":"    public void parseTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":430,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":431,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(null);"},{"lineNumber":432,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":433,"author":{"gitID":"-"},"content":""},{"lineNumber":434,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":435,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":436,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":437,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":438,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":439,"author":{"gitID":"-"},"content":""},{"lineNumber":440,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":441,"author":{"gitID":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":442,"author":{"gitID":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":443,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":444,"author":{"gitID":"-"},"content":""},{"lineNumber":445,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":446,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":447,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":448,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":449,"author":{"gitID":"-"},"content":""},{"lineNumber":450,"author":{"gitID":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":451,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":452,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":206,"-":246}},{"path":"src/test/java/seedu/address/logic/parser/DeleteAppointmentCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC;"},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ENDTIME_DESC;"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ENDTIME_DESC;"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_LOCATION_DESC;"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PERSONNAME_DESC;"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_STARTTIME_DESC;"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LOCATION_DESC;"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PERSONNAME_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.commands.CommandTestUtil.STARTTIME_DESC;"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE;"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ENDTIME;"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION;"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSONNAME;"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_STARTTIME;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":"import org.junit.Test;"},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"import seedu.address.logic.commands.DeleteAppointmentCommand;"},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Date;"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.EndTime;"},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Location;"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.PersonName;"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.StartTime;"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"import seedu.address.testutil.AppointmentBuilder;"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"public class DeleteAppointmentCommandParserTest {"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"    private DeleteAppointmentCommandParser parser \u003d new DeleteAppointmentCommandParser();"},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"        Appointment appointmentToDelete \u003d new AppointmentBuilder().withPersonName(VALID_PERSONNAME)"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"                .withDate(VALID_DATE).withStartTime(VALID_STARTTIME).withEndTime(VALID_ENDTIME)"},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"                .withLocation(VALID_LOCATION).build();"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":"        // whitespace only preamble"},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + PERSONNAME_DESC + DATE_DESC + STARTTIME_DESC"},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"                + ENDTIME_DESC + LOCATION_DESC, new DeleteAppointmentCommand(appointmentToDelete));"},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAppointmentCommand.MESSAGE_USAGE);"},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":"        // missing name prefix"},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":"        assertParseFailure(parser, VALID_PERSONNAME + DATE_DESC + STARTTIME_DESC + ENDTIME_DESC + LOCATION_DESC,"},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":"                expectedMessage);"},{"lineNumber":58,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":59,"author":{"gitID":"jlks96"},"content":"        // missing date prefix"},{"lineNumber":60,"author":{"gitID":"jlks96"},"content":"        assertParseFailure(parser, PERSONNAME_DESC + VALID_DATE + STARTTIME_DESC + ENDTIME_DESC + LOCATION_DESC,"},{"lineNumber":61,"author":{"gitID":"jlks96"},"content":"                expectedMessage);"},{"lineNumber":62,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":63,"author":{"gitID":"jlks96"},"content":"        // missing start time prefix"},{"lineNumber":64,"author":{"gitID":"jlks96"},"content":"        assertParseFailure(parser, PERSONNAME_DESC + DATE_DESC + VALID_STARTTIME + ENDTIME_DESC + LOCATION_DESC,"},{"lineNumber":65,"author":{"gitID":"jlks96"},"content":"                expectedMessage);"},{"lineNumber":66,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":67,"author":{"gitID":"jlks96"},"content":"        // missing end time prefix"},{"lineNumber":68,"author":{"gitID":"jlks96"},"content":"        assertParseFailure(parser, PERSONNAME_DESC + DATE_DESC + STARTTIME_DESC + VALID_ENDTIME + LOCATION_DESC,"},{"lineNumber":69,"author":{"gitID":"jlks96"},"content":"                expectedMessage);"},{"lineNumber":70,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":71,"author":{"gitID":"jlks96"},"content":"        // missing location prefix"},{"lineNumber":72,"author":{"gitID":"jlks96"},"content":"        assertParseFailure(parser, PERSONNAME_DESC + DATE_DESC + STARTTIME_DESC + ENDTIME_DESC + VALID_LOCATION,"},{"lineNumber":73,"author":{"gitID":"jlks96"},"content":"                expectedMessage);"},{"lineNumber":74,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":75,"author":{"gitID":"jlks96"},"content":"        // all prefixes missing"},{"lineNumber":76,"author":{"gitID":"jlks96"},"content":"        assertParseFailure(parser, VALID_PERSONNAME + VALID_DATE + VALID_STARTTIME + VALID_ENDTIME + VALID_LOCATION,"},{"lineNumber":77,"author":{"gitID":"jlks96"},"content":"                expectedMessage);"},{"lineNumber":78,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":80,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"jlks96"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":82,"author":{"gitID":"jlks96"},"content":"        // invalid person name"},{"lineNumber":83,"author":{"gitID":"jlks96"},"content":"        assertParseFailure(parser,"},{"lineNumber":84,"author":{"gitID":"jlks96"},"content":"                INVALID_PERSONNAME_DESC + DATE_DESC + STARTTIME_DESC + ENDTIME_DESC + LOCATION_DESC,"},{"lineNumber":85,"author":{"gitID":"jlks96"},"content":"                PersonName.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":86,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":87,"author":{"gitID":"jlks96"},"content":"        // invalid date"},{"lineNumber":88,"author":{"gitID":"jlks96"},"content":"        assertParseFailure(parser,"},{"lineNumber":89,"author":{"gitID":"jlks96"},"content":"                PERSONNAME_DESC + INVALID_DATE_DESC + STARTTIME_DESC + ENDTIME_DESC + LOCATION_DESC,"},{"lineNumber":90,"author":{"gitID":"jlks96"},"content":"                Date.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":91,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":92,"author":{"gitID":"jlks96"},"content":"        // invalid start time"},{"lineNumber":93,"author":{"gitID":"jlks96"},"content":"        assertParseFailure(parser,"},{"lineNumber":94,"author":{"gitID":"jlks96"},"content":"                PERSONNAME_DESC + DATE_DESC + INVALID_STARTTIME_DESC + ENDTIME_DESC + LOCATION_DESC,"},{"lineNumber":95,"author":{"gitID":"jlks96"},"content":"                StartTime.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":97,"author":{"gitID":"jlks96"},"content":"        // invalid end time"},{"lineNumber":98,"author":{"gitID":"jlks96"},"content":"        assertParseFailure(parser,"},{"lineNumber":99,"author":{"gitID":"jlks96"},"content":"                PERSONNAME_DESC + DATE_DESC + STARTTIME_DESC + INVALID_ENDTIME_DESC + LOCATION_DESC,"},{"lineNumber":100,"author":{"gitID":"jlks96"},"content":"                EndTime.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":102,"author":{"gitID":"jlks96"},"content":"        // invalid location"},{"lineNumber":103,"author":{"gitID":"jlks96"},"content":"        assertParseFailure(parser,"},{"lineNumber":104,"author":{"gitID":"jlks96"},"content":"                PERSONNAME_DESC + DATE_DESC + STARTTIME_DESC + ENDTIME_DESC + INVALID_LOCATION_DESC,"},{"lineNumber":105,"author":{"gitID":"jlks96"},"content":"                Location.MESSAGE_LOCATION_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":107,"author":{"gitID":"jlks96"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":108,"author":{"gitID":"jlks96"},"content":"        assertParseFailure(parser,"},{"lineNumber":109,"author":{"gitID":"jlks96"},"content":"                INVALID_PERSONNAME_DESC + DATE_DESC + STARTTIME_DESC + ENDTIME_DESC + INVALID_LOCATION_DESC,"},{"lineNumber":110,"author":{"gitID":"jlks96"},"content":"                PersonName.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":111,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":106,"-":6}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.createDate;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withDateAdded(createDate())"},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":77,"author":{"gitID":"jlks96"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withDateAdded(createDate())"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":87,"author":{"gitID":"jlks96"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withDateAdded(createDate())"},{"lineNumber":88,"author":{"gitID":"jlks96"},"content":"                .withTags().build();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":138,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"},{"lineNumber":142,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":6,"-":143}},{"path":"src/test/java/systemtests/EditAliasSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.AMY;"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.BOB;"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.KEYWORD_MATCHING_MEIER;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":"public class EditAliasSystemTest extends AddressBookSystemTest {"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":65,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":66,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":68,"author":{"gitID":"jlks96"},"content":"        String dateAddedOfFirstPerson \u003d getModel().getFilteredPersonList().get(index.getZeroBased())"},{"lineNumber":69,"author":{"gitID":"jlks96"},"content":"                .getDateAdded().toString();"},{"lineNumber":70,"author":{"gitID":"jlks96"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_ALIAS + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":71,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":73,"author":{"gitID":"jlks96"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withDateAdded(dateAddedOfFirstPerson)"},{"lineNumber":74,"author":{"gitID":"jlks96"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":78,"author":{"gitID":"jlks96"},"content":"        command \u003d UndoCommand.COMMAND_ALIAS;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":83,"author":{"gitID":"jlks96"},"content":"        command \u003d RedoCommand.COMMAND_ALIAS;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":86,"author":{"gitID":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":90,"author":{"gitID":"jlks96"},"content":"        Person samePerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":91,"author":{"gitID":"jlks96"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withDateAdded(dateAddedOfFirstPerson)"},{"lineNumber":92,"author":{"gitID":"jlks96"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":93,"author":{"gitID":"jlks96"},"content":"        command \u003d EditCommand.COMMAND_ALIAS + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":94,"author":{"gitID":"jlks96"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":95,"author":{"gitID":"jlks96"},"content":"        assertCommandSuccess(command, index, samePerson);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":99,"author":{"gitID":"jlks96"},"content":"        command \u003d EditCommand.COMMAND_ALIAS + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":101,"author":{"gitID":"jlks96"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND)"},{"lineNumber":102,"author":{"gitID":"jlks96"},"content":"                .withDateAdded(dateAddedOfFirstPerson).build();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":107,"author":{"gitID":"jlks96"},"content":"        command \u003d EditCommand.COMMAND_ALIAS + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":108,"author":{"gitID":"jlks96"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().withDateAdded(dateAddedOfFirstPerson).build();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":117,"author":{"gitID":"jlks96"},"content":"        String dateAddedOfFirstFilteredPerson \u003d getModel().getFilteredPersonList().get(index.getZeroBased())"},{"lineNumber":118,"author":{"gitID":"jlks96"},"content":"                .getDateAdded().dateAdded;"},{"lineNumber":119,"author":{"gitID":"jlks96"},"content":"        command \u003d EditCommand.COMMAND_ALIAS + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":121,"author":{"gitID":"jlks96"},"content":"        System.out.println(dateAddedOfFirstPerson);"},{"lineNumber":122,"author":{"gitID":"jlks96"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB)"},{"lineNumber":123,"author":{"gitID":"jlks96"},"content":"                .withDateAdded(dateAddedOfFirstFilteredPerson).build();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":127,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":128,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":131,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(EditCommand.COMMAND_ALIAS + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":137,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":138,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        selectPerson(index);"},{"lineNumber":142,"author":{"gitID":"jlks96"},"content":"        editedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":143,"author":{"gitID":"jlks96"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withDateAdded(dateAddedOfFirstPerson)"},{"lineNumber":144,"author":{"gitID":"jlks96"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":145,"author":{"gitID":"jlks96"},"content":"        command \u003d EditCommand.COMMAND_ALIAS + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":146,"author":{"gitID":"jlks96"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":149,"author":{"gitID":"jlks96"},"content":"        assertCommandSuccess(command, index, editedPerson, index);"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":154,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(EditCommand.COMMAND_ALIAS + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":158,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(EditCommand.COMMAND_ALIAS + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":159,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":163,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(EditCommand.COMMAND_ALIAS + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":167,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(EditCommand.COMMAND_ALIAS + NAME_DESC_BOB,"},{"lineNumber":168,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":171,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(EditCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":172,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":175,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(EditCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":176,"author":{"gitID":"jlks96"},"content":"                        + INVALID_NAME_DESC,"},{"lineNumber":177,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":180,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(EditCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":181,"author":{"gitID":"jlks96"},"content":"                        + INVALID_PHONE_DESC,"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":185,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(EditCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":186,"author":{"gitID":"jlks96"},"content":"                        + INVALID_EMAIL_DESC,"},{"lineNumber":187,"author":{"gitID":"-"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":190,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(EditCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":191,"author":{"gitID":"jlks96"},"content":"                        + INVALID_ADDRESS_DESC,"},{"lineNumber":192,"author":{"gitID":"-"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":195,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(EditCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":196,"author":{"gitID":"jlks96"},"content":"                        + INVALID_TAG_DESC,"},{"lineNumber":197,"author":{"gitID":"jlks96"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":198,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":199,"author":{"gitID":"jlks96"},"content":"        //@@author jlks96"},{"lineNumber":200,"author":{"gitID":"jlks96"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":201,"author":{"gitID":"jlks96"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":202,"author":{"gitID":"jlks96"},"content":"        Person newBob \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":203,"author":{"gitID":"jlks96"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).generateDate()"},{"lineNumber":204,"author":{"gitID":"jlks96"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":205,"author":{"gitID":"jlks96"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(newBob));"},{"lineNumber":206,"author":{"gitID":"jlks96"},"content":"        executeCommand(PersonUtil.getAddCommand(AMY));"},{"lineNumber":207,"author":{"gitID":"jlks96"},"content":"        index \u003d Index.fromOneBased(getModel().getFilteredPersonList().size());"},{"lineNumber":208,"author":{"gitID":"jlks96"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":209,"author":{"gitID":"jlks96"},"content":"        command \u003d EditCommand.COMMAND_ALIAS + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":210,"author":{"gitID":"jlks96"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":211,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":212,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":213,"author":{"gitID":"jlks96"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":214,"author":{"gitID":"jlks96"},"content":"        command \u003d EditCommand.COMMAND_ALIAS + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":215,"author":{"gitID":"jlks96"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":216,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":217,"author":{"gitID":"jlks96"},"content":"        //@@author"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"},{"lineNumber":239,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":243,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":246,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":247,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":251,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":274,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":275,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":277,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":278,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":284,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":286,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":292,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":293,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":294,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":295,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":296,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":297,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":298,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":299,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":300,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":301,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":302,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":303,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":306,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":309,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":310,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":311,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":71,"-":240}},{"path":"src/test/java/seedu/address/logic/parser/AddAppointmentCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC;"},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ENDTIME_DESC;"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ENDTIME_DESC;"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_LOCATION_DESC;"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PERSONNAME_DESC;"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_STARTTIME_DESC;"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LOCATION_DESC;"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PERSONNAME_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.commands.CommandTestUtil.STARTTIME_DESC;"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE;"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ENDTIME;"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION;"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSONNAME;"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_STARTTIME;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":"import org.junit.Test;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;"},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Date;"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.EndTime;"},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Location;"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.PersonName;"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.StartTime;"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"import seedu.address.testutil.AppointmentBuilder;"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"public class AddAppointmentCommandParserTest {"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"    private AddAppointmentCommandParser parser \u003d new AddAppointmentCommandParser();"},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"        Appointment expectedAppointment \u003d new AppointmentBuilder().withPersonName(VALID_PERSONNAME)"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"                .withDate(VALID_DATE).withStartTime(VALID_STARTTIME).withEndTime(VALID_ENDTIME)"},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"                .withLocation(VALID_LOCATION).build();"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":"        // whitespace only preamble"},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + PERSONNAME_DESC + DATE_DESC + STARTTIME_DESC"},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"                + ENDTIME_DESC + LOCATION_DESC, new AddAppointmentCommand(expectedAppointment));"},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAppointmentCommand.MESSAGE_USAGE);"},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":"        // missing name prefix"},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":"        assertParseFailure(parser, VALID_PERSONNAME + DATE_DESC + STARTTIME_DESC + ENDTIME_DESC + LOCATION_DESC,"},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":"                expectedMessage);"},{"lineNumber":58,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":59,"author":{"gitID":"jlks96"},"content":"        // missing date prefix"},{"lineNumber":60,"author":{"gitID":"jlks96"},"content":"        assertParseFailure(parser, PERSONNAME_DESC + VALID_DATE + STARTTIME_DESC + ENDTIME_DESC + LOCATION_DESC,"},{"lineNumber":61,"author":{"gitID":"jlks96"},"content":"                expectedMessage);"},{"lineNumber":62,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":63,"author":{"gitID":"jlks96"},"content":"        // missing start time prefix"},{"lineNumber":64,"author":{"gitID":"jlks96"},"content":"        assertParseFailure(parser, PERSONNAME_DESC + DATE_DESC + VALID_STARTTIME + ENDTIME_DESC + LOCATION_DESC,"},{"lineNumber":65,"author":{"gitID":"jlks96"},"content":"                expectedMessage);"},{"lineNumber":66,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":67,"author":{"gitID":"jlks96"},"content":"        // missing end time prefix"},{"lineNumber":68,"author":{"gitID":"jlks96"},"content":"        assertParseFailure(parser, PERSONNAME_DESC + DATE_DESC + STARTTIME_DESC + VALID_ENDTIME + LOCATION_DESC,"},{"lineNumber":69,"author":{"gitID":"jlks96"},"content":"                expectedMessage);"},{"lineNumber":70,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":71,"author":{"gitID":"jlks96"},"content":"        // missing location prefix"},{"lineNumber":72,"author":{"gitID":"jlks96"},"content":"        assertParseFailure(parser, PERSONNAME_DESC + DATE_DESC + STARTTIME_DESC + ENDTIME_DESC + VALID_LOCATION,"},{"lineNumber":73,"author":{"gitID":"jlks96"},"content":"                expectedMessage);"},{"lineNumber":74,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":75,"author":{"gitID":"jlks96"},"content":"        // all prefixes missing"},{"lineNumber":76,"author":{"gitID":"jlks96"},"content":"        assertParseFailure(parser, VALID_PERSONNAME + VALID_DATE + VALID_STARTTIME + VALID_ENDTIME + VALID_LOCATION,"},{"lineNumber":77,"author":{"gitID":"jlks96"},"content":"                expectedMessage);"},{"lineNumber":78,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":80,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"jlks96"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":82,"author":{"gitID":"jlks96"},"content":"        // invalid person name"},{"lineNumber":83,"author":{"gitID":"jlks96"},"content":"        assertParseFailure(parser,"},{"lineNumber":84,"author":{"gitID":"jlks96"},"content":"                INVALID_PERSONNAME_DESC + DATE_DESC + STARTTIME_DESC + ENDTIME_DESC + LOCATION_DESC,"},{"lineNumber":85,"author":{"gitID":"jlks96"},"content":"                PersonName.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":86,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":87,"author":{"gitID":"jlks96"},"content":"        // invalid date"},{"lineNumber":88,"author":{"gitID":"jlks96"},"content":"        assertParseFailure(parser,"},{"lineNumber":89,"author":{"gitID":"jlks96"},"content":"                PERSONNAME_DESC + INVALID_DATE_DESC + STARTTIME_DESC + ENDTIME_DESC + LOCATION_DESC,"},{"lineNumber":90,"author":{"gitID":"jlks96"},"content":"                Date.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":91,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":92,"author":{"gitID":"jlks96"},"content":"        // invalid start time"},{"lineNumber":93,"author":{"gitID":"jlks96"},"content":"        assertParseFailure(parser,"},{"lineNumber":94,"author":{"gitID":"jlks96"},"content":"                PERSONNAME_DESC + DATE_DESC + INVALID_STARTTIME_DESC + ENDTIME_DESC + LOCATION_DESC,"},{"lineNumber":95,"author":{"gitID":"jlks96"},"content":"                StartTime.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":97,"author":{"gitID":"jlks96"},"content":"        // invalid end time"},{"lineNumber":98,"author":{"gitID":"jlks96"},"content":"        assertParseFailure(parser,"},{"lineNumber":99,"author":{"gitID":"jlks96"},"content":"                PERSONNAME_DESC + DATE_DESC + STARTTIME_DESC + INVALID_ENDTIME_DESC + LOCATION_DESC,"},{"lineNumber":100,"author":{"gitID":"jlks96"},"content":"                EndTime.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":102,"author":{"gitID":"jlks96"},"content":"        // invalid location"},{"lineNumber":103,"author":{"gitID":"jlks96"},"content":"        assertParseFailure(parser,"},{"lineNumber":104,"author":{"gitID":"jlks96"},"content":"                PERSONNAME_DESC + DATE_DESC + STARTTIME_DESC + ENDTIME_DESC + INVALID_LOCATION_DESC,"},{"lineNumber":105,"author":{"gitID":"jlks96"},"content":"                Location.MESSAGE_LOCATION_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":107,"author":{"gitID":"jlks96"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":108,"author":{"gitID":"jlks96"},"content":"        assertParseFailure(parser,"},{"lineNumber":109,"author":{"gitID":"jlks96"},"content":"                INVALID_PERSONNAME_DESC + DATE_DESC + STARTTIME_DESC + ENDTIME_DESC + INVALID_LOCATION_DESC,"},{"lineNumber":110,"author":{"gitID":"jlks96"},"content":"                PersonName.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":111,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":105,"-":7}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointmentsWithAutoDateGeneration.getTypicalAddressBookWithAutoDateGeneration;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class EditCommandTest {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBookWithAutoDateGeneration(), new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"        Person editedPerson \u003d new PersonBuilder().generateDate().build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(lastPerson, editedPerson);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"jlks96"},"content":"    public void execute_nonDuplicatePersonUnfilteredList_failure() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"jlks96"},"content":"    public void execute_nonDuplicatePersonFilteredList_failure() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":158,"author":{"gitID":"jlks96"},"content":"        Person editedPerson \u003d new PersonBuilder().generateDate().build();"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        // edit -\u003e first person edited"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person edited again"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        // execution failed -\u003e editCommand not pushed into undoRedoStack"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * 1. Edits a {@code Person} from a filtered list."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * 2. Undo the edit."},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":205,"author":{"gitID":"jlks96"},"content":"        Person editedPerson \u003d new PersonBuilder().generateDate().build();"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        // redo -\u003e edits same second person in unfiltered person list"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        final EditCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        EditCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    private EditCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, descriptor);"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        return editCommand;"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":7,"-":255}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class ListCommandTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private ListCommand listCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        listCommand \u003d new ListCommand();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        listCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":1,"-":44}},{"path":"src/test/java/seedu/address/logic/commands/AddAppointmentCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"import seedu.address.testutil.AppointmentBuilder;"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"public class AddAppointmentCommandTest {"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"    public void constructor_nullAppointment_throwsNullPointerException() {"},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"        new AddAppointmentCommand(null);"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"    public void execute_appointmentAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"        Model modelStub \u003d new ModelManager();"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"        Appointment validAppointment \u003d  new AppointmentBuilder().build();"},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"        CommandResult commandResult \u003d getAddAppointmentCommandForAppointment(validAppointment, modelStub).execute();"},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"        assertEquals("},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"                String.format(AddAppointmentCommand.MESSAGE_SUCCESS, validAppointment), commandResult.feedbackToUser);"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"        assertEquals(Arrays.asList(validAppointment), modelStub.getFilteredAppointmentList());"},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"    public void execute_duplicateAppointment_throwsCommandException() throws Exception {"},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"        Model modelStub \u003d new ModelManager();"},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"        Appointment validAppointment \u003d  new AppointmentBuilder().build();"},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":"        thrown.expectMessage(AddAppointmentCommand.MESSAGE_DUPLICATE_APPOINTMENT);"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":"        getAddAppointmentCommandForAppointment(validAppointment, modelStub).execute();"},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":"        getAddAppointmentCommandForAppointment(validAppointment, modelStub).execute();"},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"jlks96"},"content":"    public void equals() {"},{"lineNumber":59,"author":{"gitID":"jlks96"},"content":"        Appointment aliceAppointment \u003d new AppointmentBuilder().withPersonName(\"Alice\").build();"},{"lineNumber":60,"author":{"gitID":"jlks96"},"content":"        Appointment bobAppointment \u003d new AppointmentBuilder().withPersonName(\"Bob\").build();"},{"lineNumber":61,"author":{"gitID":"jlks96"},"content":"        AddAppointmentCommand addAliceAppointmentCommand \u003d new AddAppointmentCommand(aliceAppointment);"},{"lineNumber":62,"author":{"gitID":"jlks96"},"content":"        AddAppointmentCommand addBobAppointmentCommand \u003d new AddAppointmentCommand(bobAppointment);"},{"lineNumber":63,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":64,"author":{"gitID":"jlks96"},"content":"        // same object -\u003e returns true"},{"lineNumber":65,"author":{"gitID":"jlks96"},"content":"        assertTrue(addAliceAppointmentCommand.equals(addAliceAppointmentCommand));"},{"lineNumber":66,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":67,"author":{"gitID":"jlks96"},"content":"        // same values -\u003e returns true"},{"lineNumber":68,"author":{"gitID":"jlks96"},"content":"        AddAppointmentCommand addAliceAppointmentCommandCopy \u003d new AddAppointmentCommand(aliceAppointment);"},{"lineNumber":69,"author":{"gitID":"jlks96"},"content":"        assertTrue(addAliceAppointmentCommand.equals(addAliceAppointmentCommandCopy));"},{"lineNumber":70,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":71,"author":{"gitID":"jlks96"},"content":"        // different types -\u003e returns false"},{"lineNumber":72,"author":{"gitID":"jlks96"},"content":"        assertFalse(addAliceAppointmentCommand.equals(1));"},{"lineNumber":73,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":74,"author":{"gitID":"jlks96"},"content":"        // null -\u003e returns false"},{"lineNumber":75,"author":{"gitID":"jlks96"},"content":"        assertFalse(addAliceAppointmentCommand.equals(null));"},{"lineNumber":76,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":77,"author":{"gitID":"jlks96"},"content":"        // different person -\u003e returns false"},{"lineNumber":78,"author":{"gitID":"jlks96"},"content":"        assertFalse(addAliceAppointmentCommand.equals(addBobAppointmentCommand));"},{"lineNumber":79,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":81,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"jlks96"},"content":"     * Generates a new AddAppointmentCommand with the details of the given appointment."},{"lineNumber":83,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"jlks96"},"content":"    private AddAppointmentCommand getAddAppointmentCommandForAppointment(Appointment appointment, Model model) {"},{"lineNumber":85,"author":{"gitID":"jlks96"},"content":"        AddAppointmentCommand command \u003d new AddAppointmentCommand(appointment);"},{"lineNumber":86,"author":{"gitID":"jlks96"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":87,"author":{"gitID":"jlks96"},"content":"        return command;"},{"lineNumber":88,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":72,"-":17}},{"path":"src/test/java/seedu/address/logic/commands/ExportContactsCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"luca590"},"content":"//@@author luca590"},{"lineNumber":2,"author":{"gitID":"luca590"},"content":""},{"lineNumber":3,"author":{"gitID":"luca590"},"content":"package seedu.address.logic.commands;"},{"lineNumber":4,"author":{"gitID":"luca590"},"content":""},{"lineNumber":5,"author":{"gitID":"luca590"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":6,"author":{"gitID":"luca590"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":7,"author":{"gitID":"luca590"},"content":""},{"lineNumber":8,"author":{"gitID":"luca590"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"luca590"},"content":""},{"lineNumber":10,"author":{"gitID":"luca590"},"content":"import java.nio.file.Path;"},{"lineNumber":11,"author":{"gitID":"luca590"},"content":""},{"lineNumber":12,"author":{"gitID":"luca590"},"content":"import org.apache.commons.csv.CSVPrinter;"},{"lineNumber":13,"author":{"gitID":"luca590"},"content":""},{"lineNumber":14,"author":{"gitID":"luca590"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"luca590"},"content":""},{"lineNumber":16,"author":{"gitID":"luca590"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"luca590"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":18,"author":{"gitID":"luca590"},"content":"import seedu.address.logic.parser.ExportContactsCommandParser;"},{"lineNumber":19,"author":{"gitID":"luca590"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"luca590"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":21,"author":{"gitID":"luca590"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":22,"author":{"gitID":"luca590"},"content":""},{"lineNumber":23,"author":{"gitID":"luca590"},"content":"public class ExportContactsCommandTest {"},{"lineNumber":24,"author":{"gitID":"luca590"},"content":""},{"lineNumber":25,"author":{"gitID":"luca590"},"content":"    public static final String VALID_NEW_FILE_PATH \u003d \"data/exportToNew.csv\";"},{"lineNumber":26,"author":{"gitID":"luca590"},"content":"    public static final String VALID_EXISTING_FILE_PATH \u003d \"data/exportToExisting.csv\";"},{"lineNumber":27,"author":{"gitID":"luca590"},"content":""},{"lineNumber":28,"author":{"gitID":"luca590"},"content":"    //featureUnderTest_testScenario_expectedBehavior()"},{"lineNumber":29,"author":{"gitID":"luca590"},"content":""},{"lineNumber":30,"author":{"gitID":"luca590"},"content":"    private ExportContactsCommand exportDefaultPath \u003d new ExportContactsCommand();"},{"lineNumber":31,"author":{"gitID":"luca590"},"content":"    private ExportContactsCommand exportExistingPath \u003d new ExportContactsCommand(VALID_EXISTING_FILE_PATH);"},{"lineNumber":32,"author":{"gitID":"luca590"},"content":"    private ExportContactsCommand exportNewPath \u003d new ExportContactsCommand(VALID_NEW_FILE_PATH);"},{"lineNumber":33,"author":{"gitID":"luca590"},"content":""},{"lineNumber":34,"author":{"gitID":"luca590"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"luca590"},"content":"    public void exportCommandParse_giveValidArguments_returnCorrectExportContactCommandPath() throws Exception {"},{"lineNumber":36,"author":{"gitID":"luca590"},"content":"        ExportContactsCommandParser eccp \u003d new ExportContactsCommandParser();"},{"lineNumber":37,"author":{"gitID":"luca590"},"content":"        ExportContactsCommand a \u003d eccp.parse(\"\");"},{"lineNumber":38,"author":{"gitID":"luca590"},"content":"        ExportContactsCommand b \u003d eccp.parse(\"exampleFile.csv\");"},{"lineNumber":39,"author":{"gitID":"luca590"},"content":""},{"lineNumber":40,"author":{"gitID":"luca590"},"content":"        assertEquals(a.getWriteToPath().toString(), \"data/exportToExisting.csv\");"},{"lineNumber":41,"author":{"gitID":"luca590"},"content":"        assertEquals(b.getWriteToPath().toString(), \"exampleFile.csv\");"},{"lineNumber":42,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"luca590"},"content":""},{"lineNumber":44,"author":{"gitID":"luca590"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"luca590"},"content":"    public void addressBookParser_inputCommandAndAlias_returnsExportContactsCommand() throws Exception {"},{"lineNumber":46,"author":{"gitID":"luca590"},"content":"        AddressBookParser ap \u003d new AddressBookParser();"},{"lineNumber":47,"author":{"gitID":"luca590"},"content":"        ExportContactsCommand e1 \u003d (ExportContactsCommand) ap.parseCommand (\"ec\");"},{"lineNumber":48,"author":{"gitID":"luca590"},"content":"        ExportContactsCommand e2 \u003d (ExportContactsCommand) ap.parseCommand(\"export_contacts\");"},{"lineNumber":49,"author":{"gitID":"luca590"},"content":""},{"lineNumber":50,"author":{"gitID":"luca590"},"content":"        assertNotNull(e1);"},{"lineNumber":51,"author":{"gitID":"luca590"},"content":"        assertNotNull(e2);"},{"lineNumber":52,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"luca590"},"content":""},{"lineNumber":54,"author":{"gitID":"luca590"},"content":"    @Test (expected \u003d Exception.class)"},{"lineNumber":55,"author":{"gitID":"luca590"},"content":"    public void executeUndoableCommand_invalidPath_throwException() throws Exception {"},{"lineNumber":56,"author":{"gitID":"luca590"},"content":"        ExportContactsCommand e \u003d new ExportContactsCommand(\"...\");"},{"lineNumber":57,"author":{"gitID":"luca590"},"content":"        e.getCsvToWriteTo();"},{"lineNumber":58,"author":{"gitID":"luca590"},"content":"        e.executeUndoableCommand();"},{"lineNumber":59,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"luca590"},"content":""},{"lineNumber":61,"author":{"gitID":"luca590"},"content":"    @Test (expected \u003d Exception.class)"},{"lineNumber":62,"author":{"gitID":"luca590"},"content":"    public void executeUndoableCommand_nullModel_throwException() throws Exception {"},{"lineNumber":63,"author":{"gitID":"luca590"},"content":"        ExportContactsCommand e \u003d new ExportContactsCommand(\"...\");"},{"lineNumber":64,"author":{"gitID":"luca590"},"content":"        e.model \u003d null;"},{"lineNumber":65,"author":{"gitID":"luca590"},"content":"        e.executeUndoableCommand();"},{"lineNumber":66,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"luca590"},"content":""},{"lineNumber":68,"author":{"gitID":"luca590"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"luca590"},"content":"    public void getDefaultPath_callWithoutArgs_returnsCorrectString() throws Exception {"},{"lineNumber":70,"author":{"gitID":"luca590"},"content":"        Path x \u003d exportDefaultPath.getDefaultPath();"},{"lineNumber":71,"author":{"gitID":"luca590"},"content":"        assertEquals(x.toString(), \"data/exportToExisting.csv\");"},{"lineNumber":72,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"luca590"},"content":""},{"lineNumber":74,"author":{"gitID":"luca590"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"luca590"},"content":"    public void getCsvToWriteTo_workingDirectoryNewFile_noExceptionThrown() throws IOException {"},{"lineNumber":76,"author":{"gitID":"luca590"},"content":"        CSVPrinter csvpDefault \u003d null;"},{"lineNumber":77,"author":{"gitID":"luca590"},"content":"        CSVPrinter csvpNew \u003d null;"},{"lineNumber":78,"author":{"gitID":"luca590"},"content":"        CSVPrinter csvpExisting \u003d null;"},{"lineNumber":79,"author":{"gitID":"luca590"},"content":""},{"lineNumber":80,"author":{"gitID":"luca590"},"content":"        try {"},{"lineNumber":81,"author":{"gitID":"luca590"},"content":"            csvpDefault \u003d exportDefaultPath.getCsvToWriteTo();"},{"lineNumber":82,"author":{"gitID":"luca590"},"content":"            csvpNew \u003d exportNewPath.getCsvToWriteTo();"},{"lineNumber":83,"author":{"gitID":"luca590"},"content":"            csvpExisting \u003d exportExistingPath.getCsvToWriteTo();"},{"lineNumber":84,"author":{"gitID":"luca590"},"content":"        } catch (IOException e) {"},{"lineNumber":85,"author":{"gitID":"luca590"},"content":"            e.printStackTrace();"},{"lineNumber":86,"author":{"gitID":"luca590"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"luca590"},"content":""},{"lineNumber":88,"author":{"gitID":"luca590"},"content":"        assertNotNull(csvpDefault);"},{"lineNumber":89,"author":{"gitID":"luca590"},"content":"        assertNotNull(csvpNew);"},{"lineNumber":90,"author":{"gitID":"luca590"},"content":"        assertNotNull(csvpExisting);"},{"lineNumber":91,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"luca590"},"content":""},{"lineNumber":93,"author":{"gitID":"luca590"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"luca590"},"content":"    public void getDefaultPath_noPathGiven_throwsNoExceptionsAndReturnsPath() {"},{"lineNumber":95,"author":{"gitID":"luca590"},"content":"        Path path \u003d null;"},{"lineNumber":96,"author":{"gitID":"luca590"},"content":"        path \u003d exportDefaultPath.getDefaultPath();"},{"lineNumber":97,"author":{"gitID":"luca590"},"content":"        assertEquals(path.toString(), \"data/exportToExisting.csv\");"},{"lineNumber":98,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"luca590"},"content":""},{"lineNumber":100,"author":{"gitID":"luca590"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"luca590"},"content":"    public void executeUndoableCommand_validNewFilePath_createsNewFileAndWritesToIt() throws"},{"lineNumber":102,"author":{"gitID":"luca590"},"content":"            CommandException, DuplicatePersonException, IOException {"},{"lineNumber":103,"author":{"gitID":"luca590"},"content":"        CommandResult cr \u003d null;"},{"lineNumber":104,"author":{"gitID":"luca590"},"content":"        exportNewPath.model \u003d new ModelManager();"},{"lineNumber":105,"author":{"gitID":"luca590"},"content":"        PersonBuilder pb \u003d new PersonBuilder();"},{"lineNumber":106,"author":{"gitID":"luca590"},"content":"        exportNewPath.model.addPerson(pb.build());"},{"lineNumber":107,"author":{"gitID":"luca590"},"content":""},{"lineNumber":108,"author":{"gitID":"luca590"},"content":"        try {"},{"lineNumber":109,"author":{"gitID":"luca590"},"content":"            cr \u003d exportNewPath.executeUndoableCommand();"},{"lineNumber":110,"author":{"gitID":"luca590"},"content":"        } catch (CommandException e) {"},{"lineNumber":111,"author":{"gitID":"luca590"},"content":"            e.printStackTrace();"},{"lineNumber":112,"author":{"gitID":"luca590"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"luca590"},"content":""},{"lineNumber":114,"author":{"gitID":"luca590"},"content":"        assertEquals(cr.feedbackToUser, \"Contacts successfully exported.\\n\");"},{"lineNumber":115,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"luca590"},"content":""},{"lineNumber":117,"author":{"gitID":"luca590"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"luca590"},"content":"    public void executeUndoableCommand_validExistingFilePath_writesToExistingFile() throws"},{"lineNumber":119,"author":{"gitID":"luca590"},"content":"            CommandException, DuplicatePersonException, IOException {"},{"lineNumber":120,"author":{"gitID":"luca590"},"content":"        CommandResult cr \u003d null;"},{"lineNumber":121,"author":{"gitID":"luca590"},"content":"        exportExistingPath.model \u003d new ModelManager();"},{"lineNumber":122,"author":{"gitID":"luca590"},"content":"        PersonBuilder pb \u003d new PersonBuilder();"},{"lineNumber":123,"author":{"gitID":"luca590"},"content":"        exportExistingPath.model.addPerson(pb.build());"},{"lineNumber":124,"author":{"gitID":"luca590"},"content":""},{"lineNumber":125,"author":{"gitID":"luca590"},"content":"        try {"},{"lineNumber":126,"author":{"gitID":"luca590"},"content":"            cr \u003d exportExistingPath.executeUndoableCommand();"},{"lineNumber":127,"author":{"gitID":"luca590"},"content":"        } catch (CommandException e) {"},{"lineNumber":128,"author":{"gitID":"luca590"},"content":"            System.out.print(\"Error in executeUndoableTest\");"},{"lineNumber":129,"author":{"gitID":"luca590"},"content":"            e.printStackTrace();"},{"lineNumber":130,"author":{"gitID":"luca590"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"luca590"},"content":""},{"lineNumber":132,"author":{"gitID":"luca590"},"content":"        assertEquals(\"Contacts successfully exported.\\n\", cr.feedbackToUser);"},{"lineNumber":133,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"luca590"},"content":""},{"lineNumber":135,"author":{"gitID":"luca590"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"luca590"},"content":"    public void executeUndoableCommand_validDefaultFilePath_writesToDefaultFile() throws"},{"lineNumber":137,"author":{"gitID":"luca590"},"content":"            CommandException, DuplicatePersonException, IOException {"},{"lineNumber":138,"author":{"gitID":"luca590"},"content":"        CommandResult cr \u003d null;"},{"lineNumber":139,"author":{"gitID":"luca590"},"content":"        exportDefaultPath.model \u003d new ModelManager();"},{"lineNumber":140,"author":{"gitID":"luca590"},"content":"        PersonBuilder pb \u003d new PersonBuilder();"},{"lineNumber":141,"author":{"gitID":"luca590"},"content":"        exportDefaultPath.model.addPerson(pb.build());"},{"lineNumber":142,"author":{"gitID":"luca590"},"content":""},{"lineNumber":143,"author":{"gitID":"luca590"},"content":"        try {"},{"lineNumber":144,"author":{"gitID":"luca590"},"content":"            cr \u003d exportDefaultPath.executeUndoableCommand();"},{"lineNumber":145,"author":{"gitID":"luca590"},"content":"        } catch (CommandException e) {"},{"lineNumber":146,"author":{"gitID":"luca590"},"content":"            e.printStackTrace();"},{"lineNumber":147,"author":{"gitID":"luca590"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"luca590"},"content":""},{"lineNumber":149,"author":{"gitID":"luca590"},"content":"        assertEquals(\"Contacts successfully exported.\\n\", cr.feedbackToUser);"},{"lineNumber":150,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"luca590"},"content":"}"},{"lineNumber":152,"author":{"gitID":"luca590"},"content":"//@@author"}],"authorContributionMap":{"luca590":152}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // delete -\u003e first person deleted"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person deleted again"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * 1. Deletes a {@code Person} from a filtered list."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * 2. Undo the deletion."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // redo -\u003e deletes same second person in unfiltered person list"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND_PERSON);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private DeleteCommand prepareCommand(Index index) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(index);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        return deleteCommand;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":1,"-":193}},{"path":"src/test/java/seedu/address/logic/commands/EmailCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"Ng95junwei"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"Ng95junwei"},"content":"public class EmailCommandTest {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"Ng95junwei"},"content":"        EmailCommand emailFirstCommand \u003d new EmailCommand(firstPredicate, \"test\");"},{"lineNumber":38,"author":{"gitID":"Ng95junwei"},"content":"        EmailCommand emailSecondCommand \u003d new EmailCommand(secondPredicate, \"test\");"},{"lineNumber":39,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":40,"author":{"gitID":"Ng95junwei"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitID":"Ng95junwei"},"content":"        assertTrue(emailFirstCommand.equals(emailFirstCommand));"},{"lineNumber":42,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":43,"author":{"gitID":"Ng95junwei"},"content":"        // same values -\u003e returns true"},{"lineNumber":44,"author":{"gitID":"Ng95junwei"},"content":"        EmailCommand emailFirstCommandCopy \u003d new EmailCommand(firstPredicate, \"test\");"},{"lineNumber":45,"author":{"gitID":"Ng95junwei"},"content":"        assertTrue(emailFirstCommand.equals(emailFirstCommandCopy));"},{"lineNumber":46,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":47,"author":{"gitID":"Ng95junwei"},"content":"        // different types -\u003e returns false"},{"lineNumber":48,"author":{"gitID":"Ng95junwei"},"content":"        assertFalse(emailFirstCommand.equals(1));"},{"lineNumber":49,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":50,"author":{"gitID":"Ng95junwei"},"content":"        // null -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"Ng95junwei"},"content":"        assertFalse(emailFirstCommand.equals(null));"},{"lineNumber":52,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":53,"author":{"gitID":"Ng95junwei"},"content":"        // different person -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"Ng95junwei"},"content":"        assertFalse(emailFirstCommand.equals(emailSecondCommand));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":60,"author":{"gitID":"Ng95junwei"},"content":"        EmailCommand command \u003d prepareCommand(\" \");"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"Ng95junwei"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"Ng95junwei"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":66,"author":{"gitID":"Ng95junwei"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"Ng95junwei"},"content":"    private EmailCommand prepareCommand(String userInput) {"},{"lineNumber":68,"author":{"gitID":"Ng95junwei"},"content":"        EmailCommand command \u003d"},{"lineNumber":69,"author":{"gitID":"Ng95junwei"},"content":"                new EmailCommand(new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))),"},{"lineNumber":70,"author":{"gitID":"Ng95junwei"},"content":"                        \"test\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"Ng95junwei"},"content":"    private void assertCommandSuccess(EmailCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Ng95junwei":29,"-":60}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void execute_newPerson_success() throws Exception {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedModel.addPerson(validPerson);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(validPerson, model), model,"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandFailure(prepareCommand(personInList, model), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code person} into the {@code model}."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private AddCommand prepareCommand(Person person, Model model) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":1,"-":54}},{"path":"src/test/java/seedu/address/logic/commands/UndoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class UndoCommandTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void execute() throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":39,"author":{"gitID":"-"},"content":"                Arrays.asList(deleteCommandOne, deleteCommandTwo), Collections.emptyList());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        deleteCommandOne.execute();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        deleteCommandTwo.execute();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // multiple commands in undoStack"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // single command in undoStack"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // no command in undoStack"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":1,"-":56}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void execute_emptyAddressBook_success() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Generates a new {@code ClearCommand} which upon execution, clears the contents in {@code model}."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private ClearCommand prepareCommand(Model model) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        ClearCommand command \u003d new ClearCommand();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":1,"-":35}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsFullKeywordsPredicate;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":"    public static final String VALID_DATE_ADDED_AMY \u003d \"01/01/2018\";"},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"    public static final String VALID_DATE_ADDED_BOB \u003d \"02/02/2018\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":"    public static final String VALID_PERSONNAME \u003d \"Jacob\";"},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":"    public static final String VALID_DATE \u003d \"01/01/2018\";"},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":"    public static final String VALID_STARTTIME \u003d \"10:30\";"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"    public static final String VALID_ENDTIME \u003d \"11:30\";"},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":"    public static final String VALID_LOCATION \u003d \"Silver Way\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":63,"author":{"gitID":"jlks96"},"content":"    public static final String DATE_ADDED_DESC_AMY \u003d \" \" + PREFIX_DATE + VALID_DATE_ADDED_AMY;"},{"lineNumber":64,"author":{"gitID":"jlks96"},"content":"    public static final String DATE_ADDED_DESC_BOB \u003d \" \" + PREFIX_DATE + VALID_DATE_ADDED_BOB;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":67,"author":{"gitID":"jlks96"},"content":"    public static final String PERSONNAME_DESC \u003d \" \" + PREFIX_NAME + VALID_PERSONNAME;"},{"lineNumber":68,"author":{"gitID":"jlks96"},"content":"    public static final String DATE_DESC \u003d \" \" + PREFIX_DATE + VALID_DATE;"},{"lineNumber":69,"author":{"gitID":"jlks96"},"content":"    public static final String STARTTIME_DESC \u003d \" \" + PREFIX_STARTTIME + VALID_STARTTIME;"},{"lineNumber":70,"author":{"gitID":"jlks96"},"content":"    public static final String ENDTIME_DESC \u003d \" \" + PREFIX_ENDTIME + VALID_ENDTIME;"},{"lineNumber":71,"author":{"gitID":"jlks96"},"content":"    public static final String LOCATION_DESC \u003d \" \" + PREFIX_LOCATION + VALID_LOCATION;"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":77,"author":{"gitID":"jlks96"},"content":"    public static final String INVALID_DATE_ADDED_DESC \u003d \" \" + PREFIX_DATE + \"12/34\";"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":79,"author":{"gitID":"jlks96"},"content":"    public static final String INVALID_PERSONNAME_DESC \u003d \" \" + PREFIX_NAME + \"Jacob\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":80,"author":{"gitID":"jlks96"},"content":"    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"01/01\"; // incomplete date"},{"lineNumber":81,"author":{"gitID":"jlks96"},"content":"    public static final String INVALID_STARTTIME_DESC \u003d \" \" + PREFIX_STARTTIME + \"1030\"; // not in HH:mm format"},{"lineNumber":82,"author":{"gitID":"jlks96"},"content":"    public static final String INVALID_ENDTIME_DESC \u003d \" \" + PREFIX_ENDTIME + \"26:30\"; // illegal time"},{"lineNumber":83,"author":{"gitID":"jlks96"},"content":"    public static final String INVALID_LOCATION_DESC \u003d \" \" + PREFIX_LOCATION; //  empty string not allowed for addresses"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":120,"author":{"gitID":"jlks96"},"content":"     * - the address book, the filtered person list and the filtered appointment list"},{"lineNumber":121,"author":{"gitID":"jlks96"},"content":"     * in the {@code actualModel} remain unchanged"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":126,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":127,"author":{"gitID":"jlks96"},"content":"        List\u003cPerson\u003e expectedFilteredPersonList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":128,"author":{"gitID":"jlks96"},"content":"        List\u003cAppointment\u003e expectedFilteredAppointmentList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredAppointmentList());"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":136,"author":{"gitID":"jlks96"},"content":"            assertEquals(expectedFilteredPersonList, actualModel.getFilteredPersonList());"},{"lineNumber":137,"author":{"gitID":"jlks96"},"content":"            assertEquals(expectedFilteredAppointmentList, actualModel.getFilteredAppointmentList());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"jlks96"},"content":"     * Updates {@code model}\u0027s filtered person list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsFullKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"jlks96"},"content":"     * Deletes the first person in {@code model}\u0027s filtered person list from {@code model}\u0027s address book."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":169,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":178,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":33,"-":151}},{"path":"src/test/java/seedu/address/logic/commands/ZoomOutCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"import seedu.address.commons.events.logic.ZoomOutEvent;"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"public class ZoomOutCommandTest {"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"    private boolean eventRaised;"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"    @Before"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"    public void setUp() {"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":"        eventRaised \u003d false;"},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"    public void execute() {"},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"        ZoomOutCommand command \u003d new ZoomOutCommand();"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"        String expectedMessage \u003d ZoomOutCommand.MESSAGE_SUCCESS;"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"        CommandResult result \u003d command.execute();"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"        assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"        assertEquals(true, eventRaised);"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"     * Handles the event where the user is trying to zoom out on the calendar"},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"    @Subscribe"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"    private void handleZoomOutEvent(ZoomOutEvent event) {"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"        eventRaised \u003d true;"},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":39,"-":5}},{"path":"src/test/java/seedu/address/logic/commands/UndoableCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class UndoableCommandTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommand \u003d new DummyCommand(model);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void executeUndo() throws Exception {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        dummyCommand.execute();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // undo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        dummyCommand.undo();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void redo() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // redo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        dummyCommand.redo();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Deletes the first person in the model\u0027s filtered list."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    class DummyCommand extends UndoableCommand {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        DummyCommand(Model model) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            this.model \u003d model;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            Person personToDelete \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                model.deletePerson(personToDelete);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                fail(\"Impossible: personToDelete was retrieved from model.\");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":1,"-":67}},{"path":"src/test/java/seedu/address/logic/commands/RedoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class RedoCommandTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_SECOND_PERSON);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        deleteCommandOne.preprocessUndoableCommand();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        deleteCommandTwo.preprocessUndoableCommand();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void execute() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":42,"author":{"gitID":"-"},"content":"                Collections.emptyList(), Arrays.asList(deleteCommandTwo, deleteCommandOne));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // multiple commands in redoStack"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // single command in redoStack"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // no command in redoStack"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":1,"-":57}},{"path":"src/test/java/seedu/address/logic/commands/SelectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class SelectCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_THIRD_PERSON);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(lastPersonIndex);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * is raised with the correct index."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d selectCommand.execute();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            assertEquals(String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased()),"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            selectCommand.execute();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Returns a {@code SelectCommand} with parameters {@code index}."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    private SelectCommand prepareCommand(Index index) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(index);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        selectCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        return selectCommand;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":1,"-":140}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.CARL;"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.ELLE;"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.FIONA;"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class FindCommandTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\" \");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\"Kurz Elle Kunz\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private FindCommand prepareCommand(String userInput) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        FindCommand command \u003d"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(FindCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":4,"-":94}},{"path":"src/test/java/seedu/address/logic/commands/ImportContactsCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"luca590"},"content":"//@@author luca590"},{"lineNumber":2,"author":{"gitID":"luca590"},"content":""},{"lineNumber":3,"author":{"gitID":"luca590"},"content":"package seedu.address.logic.commands;"},{"lineNumber":4,"author":{"gitID":"luca590"},"content":""},{"lineNumber":5,"author":{"gitID":"luca590"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":6,"author":{"gitID":"luca590"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":7,"author":{"gitID":"luca590"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":8,"author":{"gitID":"luca590"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":9,"author":{"gitID":"luca590"},"content":""},{"lineNumber":10,"author":{"gitID":"luca590"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"luca590"},"content":"import java.io.Reader;"},{"lineNumber":12,"author":{"gitID":"luca590"},"content":"import java.nio.file.Files;"},{"lineNumber":13,"author":{"gitID":"luca590"},"content":"import java.nio.file.Paths;"},{"lineNumber":14,"author":{"gitID":"luca590"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":15,"author":{"gitID":"luca590"},"content":"import java.util.Date;"},{"lineNumber":16,"author":{"gitID":"luca590"},"content":"import java.util.HashSet;"},{"lineNumber":17,"author":{"gitID":"luca590"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"luca590"},"content":""},{"lineNumber":19,"author":{"gitID":"luca590"},"content":"import org.apache.commons.csv.CSVFormat;"},{"lineNumber":20,"author":{"gitID":"luca590"},"content":"import org.apache.commons.csv.CSVParser;"},{"lineNumber":21,"author":{"gitID":"luca590"},"content":"import org.apache.commons.csv.CSVRecord;"},{"lineNumber":22,"author":{"gitID":"luca590"},"content":"import org.junit.Rule;"},{"lineNumber":23,"author":{"gitID":"luca590"},"content":"import org.junit.Test;"},{"lineNumber":24,"author":{"gitID":"luca590"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":25,"author":{"gitID":"luca590"},"content":""},{"lineNumber":26,"author":{"gitID":"luca590"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":27,"author":{"gitID":"luca590"},"content":""},{"lineNumber":28,"author":{"gitID":"luca590"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":29,"author":{"gitID":"luca590"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":30,"author":{"gitID":"luca590"},"content":"import seedu.address.logic.parser.FindCommandParser;"},{"lineNumber":31,"author":{"gitID":"luca590"},"content":"import seedu.address.logic.parser.ImportContactsCommandParser;"},{"lineNumber":32,"author":{"gitID":"luca590"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":33,"author":{"gitID":"luca590"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":34,"author":{"gitID":"luca590"},"content":"import seedu.address.model.person.DateAdded;"},{"lineNumber":35,"author":{"gitID":"luca590"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":36,"author":{"gitID":"luca590"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":37,"author":{"gitID":"luca590"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":38,"author":{"gitID":"luca590"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":39,"author":{"gitID":"luca590"},"content":""},{"lineNumber":40,"author":{"gitID":"luca590"},"content":""},{"lineNumber":41,"author":{"gitID":"luca590"},"content":""},{"lineNumber":42,"author":{"gitID":"luca590"},"content":"public class ImportContactsCommandTest {"},{"lineNumber":43,"author":{"gitID":"luca590"},"content":"    private static ImportContactsCommandParser imparse;"},{"lineNumber":44,"author":{"gitID":"luca590"},"content":"    private static ImportContactsCommand importValidPath;"},{"lineNumber":45,"author":{"gitID":"luca590"},"content":"    private static ImportContactsCommand importIllegalPath;"},{"lineNumber":46,"author":{"gitID":"luca590"},"content":""},{"lineNumber":47,"author":{"gitID":"luca590"},"content":"    @Rule"},{"lineNumber":48,"author":{"gitID":"luca590"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":49,"author":{"gitID":"luca590"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":50,"author":{"gitID":"luca590"},"content":""},{"lineNumber":51,"author":{"gitID":"luca590"},"content":"    static {"},{"lineNumber":52,"author":{"gitID":"luca590"},"content":"        try {"},{"lineNumber":53,"author":{"gitID":"luca590"},"content":"            importValidPath \u003d new ImportContactsCommand(\"data/Test_contacts.csv\");"},{"lineNumber":54,"author":{"gitID":"luca590"},"content":"            importIllegalPath \u003d new ImportContactsCommand(\"aaa\");"},{"lineNumber":55,"author":{"gitID":"luca590"},"content":""},{"lineNumber":56,"author":{"gitID":"luca590"},"content":"            imparse \u003d new ImportContactsCommandParser();"},{"lineNumber":57,"author":{"gitID":"luca590"},"content":"        } catch (Exception e) {"},{"lineNumber":58,"author":{"gitID":"luca590"},"content":"            e.printStackTrace();"},{"lineNumber":59,"author":{"gitID":"luca590"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"luca590"},"content":""},{"lineNumber":62,"author":{"gitID":"luca590"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"luca590"},"content":"     * Used for debugging"},{"lineNumber":64,"author":{"gitID":"luca590"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"luca590"},"content":"    public void printResult(final String n, final String e,"},{"lineNumber":66,"author":{"gitID":"luca590"},"content":"                            final String p, final String a) {"},{"lineNumber":67,"author":{"gitID":"luca590"},"content":"        System.out.println(\"---------------\");"},{"lineNumber":68,"author":{"gitID":"luca590"},"content":"        System.out.println(\"Name : \" + n);"},{"lineNumber":69,"author":{"gitID":"luca590"},"content":"        System.out.println(\"Email : \" + e);"},{"lineNumber":70,"author":{"gitID":"luca590"},"content":"        System.out.println(\"Phone : \" + p);"},{"lineNumber":71,"author":{"gitID":"luca590"},"content":"        System.out.println(\"Address : \" + a);"},{"lineNumber":72,"author":{"gitID":"luca590"},"content":"        System.out.println(\"---------------\\n\\n\");"},{"lineNumber":73,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"luca590"},"content":""},{"lineNumber":75,"author":{"gitID":"luca590"},"content":"    //featureUnderTest_testScenario_expectedBehavior()"},{"lineNumber":76,"author":{"gitID":"luca590"},"content":""},{"lineNumber":77,"author":{"gitID":"luca590"},"content":"    @Test(expected \u003d Exception.class)"},{"lineNumber":78,"author":{"gitID":"luca590"},"content":"    public void constructor_passingNullFileAddress_throwException() throws Exception {"},{"lineNumber":79,"author":{"gitID":"luca590"},"content":"        final String x \u003d null;"},{"lineNumber":80,"author":{"gitID":"luca590"},"content":"        ImportContactsCommand a \u003d new ImportContactsCommand(x);"},{"lineNumber":81,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"luca590"},"content":""},{"lineNumber":83,"author":{"gitID":"luca590"},"content":"    @Test(expected \u003d Exception.class)"},{"lineNumber":84,"author":{"gitID":"luca590"},"content":"    public void executeUndoableCommand_giveIllegalPath_throwException() throws Exception {"},{"lineNumber":85,"author":{"gitID":"luca590"},"content":"        ImportContactsCommand a \u003d new ImportContactsCommand(\"error\");"},{"lineNumber":86,"author":{"gitID":"luca590"},"content":"        a.openFile();"},{"lineNumber":87,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"luca590"},"content":""},{"lineNumber":89,"author":{"gitID":"luca590"},"content":"    @Test(expected \u003d Exception.class)"},{"lineNumber":90,"author":{"gitID":"luca590"},"content":"    public void executeUndoableCommand_giveNullModel_throwException() throws Exception {"},{"lineNumber":91,"author":{"gitID":"luca590"},"content":"        importValidPath.model \u003d null;"},{"lineNumber":92,"author":{"gitID":"luca590"},"content":"        importValidPath.executeUndoableCommand();"},{"lineNumber":93,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"luca590"},"content":""},{"lineNumber":95,"author":{"gitID":"luca590"},"content":"    @Test(expected \u003d Exception.class)"},{"lineNumber":96,"author":{"gitID":"luca590"},"content":"    public void importContactsCommandParserparse_giveNullArgument_throwException() throws ParseException {"},{"lineNumber":97,"author":{"gitID":"luca590"},"content":"        ImportContactsCommandParser cp \u003d new ImportContactsCommandParser();"},{"lineNumber":98,"author":{"gitID":"luca590"},"content":"        cp.parse(null);"},{"lineNumber":99,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"luca590"},"content":""},{"lineNumber":101,"author":{"gitID":"luca590"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"luca590"},"content":"    public void addressBookParser_giveCorrectImport_returnImportContactCommand() throws Exception {"},{"lineNumber":103,"author":{"gitID":"luca590"},"content":"        AddressBookParser abp \u003d new AddressBookParser();"},{"lineNumber":104,"author":{"gitID":"luca590"},"content":"        assertNotNull(abp.parseCommand(\"import_contacts ...\"));"},{"lineNumber":105,"author":{"gitID":"luca590"},"content":"        assertNotNull(abp.parseCommand(\"ic ...\"));"},{"lineNumber":106,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"luca590"},"content":""},{"lineNumber":108,"author":{"gitID":"luca590"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"luca590"},"content":"    public void execute_validPathToTestFile_printCsvContents() throws IOException {"},{"lineNumber":110,"author":{"gitID":"luca590"},"content":"        Reader reader \u003d Files.newBufferedReader(Paths.get(\"data/Test_contacts.csv\"));"},{"lineNumber":111,"author":{"gitID":"luca590"},"content":""},{"lineNumber":112,"author":{"gitID":"luca590"},"content":"        CSVParser csvParser \u003d new CSVParser(reader, CSVFormat.DEFAULT"},{"lineNumber":113,"author":{"gitID":"luca590"},"content":"                .withFirstRecordAsHeader()"},{"lineNumber":114,"author":{"gitID":"luca590"},"content":"                .withIgnoreHeaderCase()"},{"lineNumber":115,"author":{"gitID":"luca590"},"content":"                .withTrim());"},{"lineNumber":116,"author":{"gitID":"luca590"},"content":""},{"lineNumber":117,"author":{"gitID":"luca590"},"content":"        Iterable\u003cCSVRecord\u003e csvRecords \u003d csvParser.getRecords();"},{"lineNumber":118,"author":{"gitID":"luca590"},"content":"        requireNonNull(csvRecords);"},{"lineNumber":119,"author":{"gitID":"luca590"},"content":""},{"lineNumber":120,"author":{"gitID":"luca590"},"content":"        String name \u003d null;"},{"lineNumber":121,"author":{"gitID":"luca590"},"content":"        String email \u003d null;"},{"lineNumber":122,"author":{"gitID":"luca590"},"content":"        String phone \u003d null;"},{"lineNumber":123,"author":{"gitID":"luca590"},"content":"        String address \u003d null;"},{"lineNumber":124,"author":{"gitID":"luca590"},"content":""},{"lineNumber":125,"author":{"gitID":"luca590"},"content":"        for (CSVRecord csvRecord : csvRecords) { //iterate through the"},{"lineNumber":126,"author":{"gitID":"luca590"},"content":"            // Accessing values by Header names"},{"lineNumber":127,"author":{"gitID":"luca590"},"content":"            name \u003d csvRecord.get(\"Name\");"},{"lineNumber":128,"author":{"gitID":"luca590"},"content":"            email \u003d csvRecord.get(\"Email\");"},{"lineNumber":129,"author":{"gitID":"luca590"},"content":"            phone \u003d csvRecord.get(\"Phone\");"},{"lineNumber":130,"author":{"gitID":"luca590"},"content":"            address \u003d csvRecord.get(\"Address\");"},{"lineNumber":131,"author":{"gitID":"luca590"},"content":""},{"lineNumber":132,"author":{"gitID":"luca590"},"content":"            printResult(name, email, phone, address);"},{"lineNumber":133,"author":{"gitID":"luca590"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"luca590"},"content":""},{"lineNumber":136,"author":{"gitID":"luca590"},"content":"    @Test"},{"lineNumber":137,"author":{"gitID":"luca590"},"content":"    public void execute_validPersonToAdd_addPeople() throws CommandException {"},{"lineNumber":138,"author":{"gitID":"luca590"},"content":"        PersonBuilder pb \u003d new PersonBuilder();"},{"lineNumber":139,"author":{"gitID":"luca590"},"content":"        Person personToAdd \u003d pb.build();"},{"lineNumber":140,"author":{"gitID":"luca590"},"content":""},{"lineNumber":141,"author":{"gitID":"luca590"},"content":"        requireNonNull(personToAdd);"},{"lineNumber":142,"author":{"gitID":"luca590"},"content":""},{"lineNumber":143,"author":{"gitID":"luca590"},"content":"        String name;"},{"lineNumber":144,"author":{"gitID":"luca590"},"content":"        String email;"},{"lineNumber":145,"author":{"gitID":"luca590"},"content":"        String phone;"},{"lineNumber":146,"author":{"gitID":"luca590"},"content":"        String address;"},{"lineNumber":147,"author":{"gitID":"luca590"},"content":"        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":148,"author":{"gitID":"luca590"},"content":""},{"lineNumber":149,"author":{"gitID":"luca590"},"content":"        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"},{"lineNumber":150,"author":{"gitID":"luca590"},"content":"        Date date \u003d new Date();"},{"lineNumber":151,"author":{"gitID":"luca590"},"content":"        DateAdded addDate;"},{"lineNumber":152,"author":{"gitID":"luca590"},"content":""},{"lineNumber":153,"author":{"gitID":"luca590"},"content":"        //initialize UniquePersonList for test case"},{"lineNumber":154,"author":{"gitID":"luca590"},"content":"        UniquePersonList upl \u003d new UniquePersonList();"},{"lineNumber":155,"author":{"gitID":"luca590"},"content":""},{"lineNumber":156,"author":{"gitID":"luca590"},"content":"        try {"},{"lineNumber":157,"author":{"gitID":"luca590"},"content":"            upl.add(personToAdd);"},{"lineNumber":158,"author":{"gitID":"luca590"},"content":"        } catch (Exception e) {"},{"lineNumber":159,"author":{"gitID":"luca590"},"content":"            throw new CommandException(\"Failed to add person in ImportContactsCommand, execute()\\n\""},{"lineNumber":160,"author":{"gitID":"luca590"},"content":"                    + e);"},{"lineNumber":161,"author":{"gitID":"luca590"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"luca590"},"content":""},{"lineNumber":163,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"luca590"},"content":""},{"lineNumber":165,"author":{"gitID":"luca590"},"content":"    @Test"},{"lineNumber":166,"author":{"gitID":"luca590"},"content":"    public void parse_inputCorrectPath_returnsImportContactsCommandWithCorrectFilePath() throws Exception {"},{"lineNumber":167,"author":{"gitID":"luca590"},"content":"        ImportContactsCommand icc \u003d imparse.parse(\"data/Test_contacts.csv\");"},{"lineNumber":168,"author":{"gitID":"luca590"},"content":"        assertEquals(icc.getFileAddress(), \"data/Test_contacts.csv\");"},{"lineNumber":169,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"luca590"},"content":""},{"lineNumber":171,"author":{"gitID":"luca590"},"content":"    @Test"},{"lineNumber":172,"author":{"gitID":"luca590"},"content":"    public void openFile_inputCorrectPath_returnsCommandResult() throws Exception {"},{"lineNumber":173,"author":{"gitID":"luca590"},"content":"        ImportContactsCommand icc \u003d new ImportContactsCommand(\"data/Test_contacts.csv\");"},{"lineNumber":174,"author":{"gitID":"luca590"},"content":"        CommandResult cr \u003d icc.openFile();"},{"lineNumber":175,"author":{"gitID":"luca590"},"content":"        requireNonNull(cr);"},{"lineNumber":176,"author":{"gitID":"luca590"},"content":"        System.out.println(cr.equals(importValidPath.openFile()));"},{"lineNumber":177,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"luca590"},"content":""},{"lineNumber":179,"author":{"gitID":"luca590"},"content":"    @Test"},{"lineNumber":180,"author":{"gitID":"luca590"},"content":"    public void openFile_inputIllegalPath_throwsException() throws Exception { //what type of exception"},{"lineNumber":181,"author":{"gitID":"luca590"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":182,"author":{"gitID":"luca590"},"content":"        importIllegalPath.openFile();"},{"lineNumber":183,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"luca590"},"content":""},{"lineNumber":185,"author":{"gitID":"luca590"},"content":""},{"lineNumber":186,"author":{"gitID":"luca590"},"content":"    /*"},{"lineNumber":187,"author":{"gitID":"luca590"},"content":"     * This test will fail if contacts are imported from a file containing"},{"lineNumber":188,"author":{"gitID":"luca590"},"content":"     * different contacts"},{"lineNumber":189,"author":{"gitID":"luca590"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"luca590"},"content":"    @Test"},{"lineNumber":191,"author":{"gitID":"luca590"},"content":"    public void execute_inputValidFileAddress_addsPersonsToAddressBook() throws CommandException {"},{"lineNumber":192,"author":{"gitID":"luca590"},"content":"        importValidPath.model \u003d new ModelManager();"},{"lineNumber":193,"author":{"gitID":"luca590"},"content":"        importValidPath.executeUndoableCommand();"},{"lineNumber":194,"author":{"gitID":"luca590"},"content":"        ObservableList\u003cPerson\u003e plist \u003d importValidPath.model.getFilteredPersonList();"},{"lineNumber":195,"author":{"gitID":"luca590"},"content":""},{"lineNumber":196,"author":{"gitID":"luca590"},"content":"        requireNonNull(importValidPath.model);"},{"lineNumber":197,"author":{"gitID":"luca590"},"content":"        assertFalse(plist.isEmpty());"},{"lineNumber":198,"author":{"gitID":"luca590"},"content":"        Object[] parray \u003d plist.toArray();"},{"lineNumber":199,"author":{"gitID":"luca590"},"content":""},{"lineNumber":200,"author":{"gitID":"luca590"},"content":"        //substrings are used in testing to avoid the Date Added parameter"},{"lineNumber":201,"author":{"gitID":"luca590"},"content":"        //Date Added changes everyday (not surprising), so cannot statically type it"},{"lineNumber":202,"author":{"gitID":"luca590"},"content":"        assertEquals(parray[1].toString().substring(0, 65),"},{"lineNumber":203,"author":{"gitID":"luca590"},"content":"                \"Bob Phone: 32134558 Email: bob@badasbob.com Address: \""},{"lineNumber":204,"author":{"gitID":"luca590"},"content":"                        + \"324 green st\");"},{"lineNumber":205,"author":{"gitID":"luca590"},"content":"        assertEquals(parray[2].toString().substring(0, 65), \"Carol Phone: 91442333 Email: \""},{"lineNumber":206,"author":{"gitID":"luca590"},"content":"                + \"carol@carlcaronna.com Address: 509 b\");"},{"lineNumber":207,"author":{"gitID":"luca590"},"content":"        assertEquals(parray[3].toString().substring(0, 65), \"Dave Phone: 77004352 Email: \""},{"lineNumber":208,"author":{"gitID":"luca590"},"content":"                + \"dave@doggod.com Address: 409 yellow s\");"},{"lineNumber":209,"author":{"gitID":"luca590"},"content":"        assertEquals(parray[4].toString().substring(0, 65), \"Edward Phone: 15432349 Email: \""},{"lineNumber":210,"author":{"gitID":"luca590"},"content":"                + \"ed@edible.com Address: 909 grey st \");"},{"lineNumber":211,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"luca590"},"content":"}"},{"lineNumber":213,"author":{"gitID":"luca590"},"content":"//@@author"}],"authorContributionMap":{"luca590":213}},{"path":"src/test/java/seedu/address/logic/commands/ZoomInCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"import seedu.address.commons.events.logic.ZoomInEvent;"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"public class ZoomInCommandTest {"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"    private boolean eventRaised;"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"    @Before"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"    public void setUp() {"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":"        eventRaised \u003d false;"},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"    public void execute() {"},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"        ZoomInCommand command \u003d new ZoomInCommand();"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"        String expectedMessage \u003d ZoomInCommand.MESSAGE_SUCCESS;"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"        CommandResult result \u003d command.execute();"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"        assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"        assertEquals(true, eventRaised);"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"     * Handles the event where the user is trying to zoom in on the calendar"},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"    @Subscribe"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"    private void handleZoomInEvent(ZoomInEvent event) {"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"        eventRaised \u003d true;"},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":37,"-":7}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":28,"author":{"gitID":"Ng95junwei"},"content":"import seedu.address.model.email.Template;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"Ng95junwei"},"content":"        //@@author ng95junwei"},{"lineNumber":126,"author":{"gitID":"Ng95junwei"},"content":"        @Override"},{"lineNumber":127,"author":{"gitID":"Ng95junwei"},"content":"        public ObservableList\u003cTemplate\u003e getAllTemplates() {"},{"lineNumber":128,"author":{"gitID":"Ng95junwei"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":129,"author":{"gitID":"Ng95junwei"},"content":"            return null;"},{"lineNumber":130,"author":{"gitID":"Ng95junwei"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":132,"author":{"gitID":"Ng95junwei"},"content":"        @Override"},{"lineNumber":133,"author":{"gitID":"Ng95junwei"},"content":"        public Template selectTemplate(String search) {"},{"lineNumber":134,"author":{"gitID":"Ng95junwei"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":135,"author":{"gitID":"Ng95junwei"},"content":"            return null;"},{"lineNumber":136,"author":{"gitID":"Ng95junwei"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"Ng95junwei"},"content":"        //@@author"},{"lineNumber":138,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":139,"author":{"gitID":"jlks96"},"content":"        //@@author jlks96"},{"lineNumber":140,"author":{"gitID":"jlks96"},"content":"        @Override"},{"lineNumber":141,"author":{"gitID":"jlks96"},"content":"        public void deletePersons(List\u003cPerson\u003e targets) throws PersonNotFoundException {"},{"lineNumber":142,"author":{"gitID":"jlks96"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":143,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"jlks96"},"content":"        //@@author"},{"lineNumber":145,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":161,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":163,"author":{"gitID":"jlks96"},"content":"        @Override"},{"lineNumber":164,"author":{"gitID":"jlks96"},"content":"        public void deleteAppointment(Appointment target) throws AppointmentNotFoundException {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":168,"author":{"gitID":"jlks96"},"content":"        @Override"},{"lineNumber":169,"author":{"gitID":"jlks96"},"content":"        public void addAppointment(Appointment target) throws DuplicateAppointmentException {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"jlks96"},"content":"        @Override"},{"lineNumber":174,"author":{"gitID":"jlks96"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":180,"author":{"gitID":"jlks96"},"content":"        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":187,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":202,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":21,"Ng95junwei":15,"-":182}},{"path":"src/test/java/seedu/address/logic/commands/DeleteBeforeCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalDates.DATE_FIRST_JAN;"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalDates.DATE_SECOND_FEB;"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.ALICE;"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.BENSON;"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalTags.TAG_SET_FRIEND;"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalTags.TAG_SET_OWES_MONEY_FRIEND;"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"import java.util.Set;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.person.DateAdded;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"public class DeleteBeforeCommandTest {"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"    public void execute_personsExist_success() throws Exception {"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"        DeleteBeforeCommand deleteBeforeCommand \u003d prepareCommand(DATE_SECOND_FEB, TAG_SET_FRIEND);"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"        List\u003cPerson\u003e personsToDelete \u003d Arrays.asList(ALICE, BENSON);"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"        String expectedMessage \u003d String.format("},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"                DeleteBeforeCommand.MESSAGE_DELETE_PERSONS_SUCCESS, 2, TAG_SET_FRIEND, DATE_SECOND_FEB);"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"        expectedModel.deletePersons(personsToDelete);"},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"        assertCommandSuccess(deleteBeforeCommand, model, expectedMessage, expectedModel);"},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"    public void execute_noSuchPerson_throwsCommandException() {"},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":"        DeleteBeforeCommand deleteBeforeCommand \u003d prepareCommand(DATE_FIRST_JAN, TAG_SET_OWES_MONEY_FRIEND);"},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(deleteBeforeCommand, model, Messages.MESSAGE_PERSONS_NOT_FOUND);"},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":58,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"jlks96"},"content":"    public void executeUndoRedo_personsExist_success() throws Exception {"},{"lineNumber":60,"author":{"gitID":"jlks96"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":61,"author":{"gitID":"jlks96"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":62,"author":{"gitID":"jlks96"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":63,"author":{"gitID":"jlks96"},"content":"        DeleteBeforeCommand deleteBeforeCommand \u003d prepareCommand(DATE_SECOND_FEB, TAG_SET_FRIEND);"},{"lineNumber":64,"author":{"gitID":"jlks96"},"content":"        List\u003cPerson\u003e personsToDelete \u003d Arrays.asList(ALICE, BENSON);"},{"lineNumber":65,"author":{"gitID":"jlks96"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":66,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":67,"author":{"gitID":"jlks96"},"content":"        // delete -\u003e first person deleted"},{"lineNumber":68,"author":{"gitID":"jlks96"},"content":"        deleteBeforeCommand.execute();"},{"lineNumber":69,"author":{"gitID":"jlks96"},"content":"        undoRedoStack.push(deleteBeforeCommand);"},{"lineNumber":70,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":71,"author":{"gitID":"jlks96"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":72,"author":{"gitID":"jlks96"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":73,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":74,"author":{"gitID":"jlks96"},"content":"        // redo -\u003e same first person deleted again"},{"lineNumber":75,"author":{"gitID":"jlks96"},"content":"        expectedModel.deletePersons(personsToDelete);"},{"lineNumber":76,"author":{"gitID":"jlks96"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":77,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":79,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"jlks96"},"content":"    public void executeUndoRedo_noSuchPersonUnfilteredList_failure() {"},{"lineNumber":81,"author":{"gitID":"jlks96"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":82,"author":{"gitID":"jlks96"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":83,"author":{"gitID":"jlks96"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":84,"author":{"gitID":"jlks96"},"content":"        DeleteBeforeCommand deleteBeforeCommand \u003d prepareCommand(DATE_FIRST_JAN, TAG_SET_OWES_MONEY_FRIEND);"},{"lineNumber":85,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":86,"author":{"gitID":"jlks96"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":87,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(deleteBeforeCommand, model, Messages.MESSAGE_PERSONS_NOT_FOUND);"},{"lineNumber":88,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":89,"author":{"gitID":"jlks96"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":90,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":91,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":92,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":94,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"jlks96"},"content":"    public void equals() throws Exception {"},{"lineNumber":96,"author":{"gitID":"jlks96"},"content":"        DeleteBeforeCommand deleteBeforeFirstCommand \u003d prepareCommand(DATE_FIRST_JAN, TAG_SET_OWES_MONEY_FRIEND);"},{"lineNumber":97,"author":{"gitID":"jlks96"},"content":"        DeleteBeforeCommand deleteBeforeSecondCommand \u003d prepareCommand(DATE_SECOND_FEB, TAG_SET_FRIEND);"},{"lineNumber":98,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":99,"author":{"gitID":"jlks96"},"content":"        // same object -\u003e returns true"},{"lineNumber":100,"author":{"gitID":"jlks96"},"content":"        assertTrue(deleteBeforeFirstCommand.equals(deleteBeforeFirstCommand));"},{"lineNumber":101,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":102,"author":{"gitID":"jlks96"},"content":"        // same values -\u003e returns true"},{"lineNumber":103,"author":{"gitID":"jlks96"},"content":"        DeleteBeforeCommand deleteBeforeFirstCommandCopy \u003d prepareCommand(DATE_FIRST_JAN, TAG_SET_OWES_MONEY_FRIEND);"},{"lineNumber":104,"author":{"gitID":"jlks96"},"content":"        assertTrue(deleteBeforeFirstCommand.equals(deleteBeforeFirstCommandCopy));"},{"lineNumber":105,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":106,"author":{"gitID":"jlks96"},"content":"        // one command preprocessed when previously equal -\u003e returns true"},{"lineNumber":107,"author":{"gitID":"jlks96"},"content":"        deleteBeforeFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":108,"author":{"gitID":"jlks96"},"content":"        assertTrue(deleteBeforeFirstCommand.equals(deleteBeforeFirstCommandCopy));"},{"lineNumber":109,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":110,"author":{"gitID":"jlks96"},"content":"        // different types -\u003e returns false"},{"lineNumber":111,"author":{"gitID":"jlks96"},"content":"        assertFalse(deleteBeforeFirstCommand.equals(1));"},{"lineNumber":112,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":113,"author":{"gitID":"jlks96"},"content":"        // null -\u003e returns false"},{"lineNumber":114,"author":{"gitID":"jlks96"},"content":"        assertFalse(deleteBeforeFirstCommand.equals(null));"},{"lineNumber":115,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":116,"author":{"gitID":"jlks96"},"content":"        // different predicate -\u003e returns false"},{"lineNumber":117,"author":{"gitID":"jlks96"},"content":"        assertFalse(deleteBeforeFirstCommand.equals(deleteBeforeSecondCommand));"},{"lineNumber":118,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":120,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"jlks96"},"content":"     * Returns a {@code DeleteBeforeCommand} with the parameter {@code date} and {@code tags}."},{"lineNumber":122,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"jlks96"},"content":"    private DeleteBeforeCommand prepareCommand(DateAdded dateAdded, Set\u003cTag\u003e tags) {"},{"lineNumber":124,"author":{"gitID":"jlks96"},"content":"        DeleteBeforeCommand deleteBeforeCommand \u003d new DeleteBeforeCommand(dateAdded, tags);"},{"lineNumber":125,"author":{"gitID":"jlks96"},"content":"        deleteBeforeCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":126,"author":{"gitID":"jlks96"},"content":"        return deleteBeforeCommand;"},{"lineNumber":127,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":129,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"jlks96"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":131,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"jlks96"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":133,"author":{"gitID":"jlks96"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":134,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":135,"author":{"gitID":"jlks96"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());"},{"lineNumber":136,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":117,"-":20}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":46,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":47,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":48,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":49,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         * {@link XmlAddressBookStorage} class."},{"lineNumber":62,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."},{"lineNumber":63,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                                             new JsonUserPrefsStorage(\"dummy\"));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        public XmlAddressBookStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":1,"-":100}},{"path":"src/test/java/seedu/address/logic/commands/DeleteAppointmentCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPT;"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_APPT;"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"import seedu.address.testutil.AppointmentBuilder;"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"public class DeleteAppointmentCommandTest {"},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"    public void execute_existentAppointment_success() throws Exception {"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"        Appointment appointment \u003d model.getFilteredAppointmentList().get(INDEX_FIRST_APPT.getZeroBased());"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"        DeleteAppointmentCommand deleteAppointmentCommand \u003d prepareCommand(appointment);"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"        String expectedMessage \u003d String.format(DeleteAppointmentCommand.MESSAGE_DELETE_APPT_SUCCESS, appointment);"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"        expectedModel.deleteAppointment(appointment);"},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"        assertCommandSuccess(deleteAppointmentCommand, model, expectedMessage, expectedModel);"},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"    public void execute_nonExistentAppointment_throwsCommandException() {"},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"        Appointment appointment \u003d new AppointmentBuilder().build();"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"        DeleteAppointmentCommand deleteAppointmentCommand \u003d prepareCommand(appointment);"},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(deleteAppointmentCommand, model, Messages.MESSAGE_APPT_NOT_FOUND);"},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":"    public void executeUndoRedo_existentAppointment_success() throws Exception {"},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":"        Appointment appointment \u003d model.getFilteredAppointmentList().get(INDEX_FIRST_APPT.getZeroBased());"},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":"        DeleteAppointmentCommand deleteAppointmentCommand \u003d prepareCommand(appointment);"},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":58,"author":{"gitID":"jlks96"},"content":"        // delete -\u003e first appointment deleted"},{"lineNumber":59,"author":{"gitID":"jlks96"},"content":"        deleteAppointmentCommand.execute();"},{"lineNumber":60,"author":{"gitID":"jlks96"},"content":"        undoRedoStack.push(deleteAppointmentCommand);"},{"lineNumber":61,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":62,"author":{"gitID":"jlks96"},"content":"        // undo -\u003e reverts address book back to previous state and filtered appointment list to show all appointments"},{"lineNumber":63,"author":{"gitID":"jlks96"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":64,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":65,"author":{"gitID":"jlks96"},"content":"        // redo -\u003e same first appointment deleted again"},{"lineNumber":66,"author":{"gitID":"jlks96"},"content":"        expectedModel.deleteAppointment(appointment);"},{"lineNumber":67,"author":{"gitID":"jlks96"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":68,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":70,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"jlks96"},"content":"    public void executeUndoRedo_nonExistentAppointment_failure() {"},{"lineNumber":72,"author":{"gitID":"jlks96"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":73,"author":{"gitID":"jlks96"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":74,"author":{"gitID":"jlks96"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":75,"author":{"gitID":"jlks96"},"content":"        Appointment appointment \u003d new AppointmentBuilder().build();"},{"lineNumber":76,"author":{"gitID":"jlks96"},"content":"        DeleteAppointmentCommand deleteAppointmentCommand \u003d prepareCommand(appointment);"},{"lineNumber":77,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":78,"author":{"gitID":"jlks96"},"content":"        // execution failed -\u003e deleteAppointmentCommand not pushed into undoRedoStack"},{"lineNumber":79,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(deleteAppointmentCommand, model, Messages.MESSAGE_APPT_NOT_FOUND);"},{"lineNumber":80,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":81,"author":{"gitID":"jlks96"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":82,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":83,"author":{"gitID":"jlks96"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":84,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":86,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"jlks96"},"content":"    public void equals() {"},{"lineNumber":88,"author":{"gitID":"jlks96"},"content":"        Appointment firstAppointment \u003d model.getFilteredAppointmentList().get(INDEX_FIRST_APPT.getZeroBased());"},{"lineNumber":89,"author":{"gitID":"jlks96"},"content":"        Appointment secondAppointment \u003d model.getFilteredAppointmentList().get(INDEX_SECOND_APPT.getZeroBased());"},{"lineNumber":90,"author":{"gitID":"jlks96"},"content":"        DeleteAppointmentCommand deleteAppointmentFirstCommand \u003d prepareCommand(firstAppointment);"},{"lineNumber":91,"author":{"gitID":"jlks96"},"content":"        DeleteAppointmentCommand deleteAppointmentSecondCommand \u003d prepareCommand(secondAppointment);"},{"lineNumber":92,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":93,"author":{"gitID":"jlks96"},"content":"        // same object -\u003e returns true"},{"lineNumber":94,"author":{"gitID":"jlks96"},"content":"        assertTrue(deleteAppointmentFirstCommand.equals(deleteAppointmentFirstCommand));"},{"lineNumber":95,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":96,"author":{"gitID":"jlks96"},"content":"        // same values -\u003e returns true"},{"lineNumber":97,"author":{"gitID":"jlks96"},"content":"        DeleteAppointmentCommand deleteAppointmentFirstCommandCopy \u003d prepareCommand(firstAppointment);"},{"lineNumber":98,"author":{"gitID":"jlks96"},"content":"        assertTrue(deleteAppointmentFirstCommand.equals(deleteAppointmentFirstCommandCopy));"},{"lineNumber":99,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":100,"author":{"gitID":"jlks96"},"content":"        // different types -\u003e returns false"},{"lineNumber":101,"author":{"gitID":"jlks96"},"content":"        assertFalse(deleteAppointmentFirstCommand.equals(1));"},{"lineNumber":102,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":103,"author":{"gitID":"jlks96"},"content":"        // null -\u003e returns false"},{"lineNumber":104,"author":{"gitID":"jlks96"},"content":"        assertFalse(deleteAppointmentFirstCommand.equals(null));"},{"lineNumber":105,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":106,"author":{"gitID":"jlks96"},"content":"        // different appointment -\u003e returns false"},{"lineNumber":107,"author":{"gitID":"jlks96"},"content":"        assertFalse(deleteAppointmentFirstCommand.equals(deleteAppointmentSecondCommand));"},{"lineNumber":108,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":110,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"jlks96"},"content":"     * Returns a {@code DeleteAppointmentCommand} with the parameter {@code appointmentToDelete}."},{"lineNumber":112,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"jlks96"},"content":"    private DeleteAppointmentCommand prepareCommand(Appointment appointmentToDelete) {"},{"lineNumber":114,"author":{"gitID":"jlks96"},"content":"        DeleteAppointmentCommand deleteAppointmentCommand \u003d new DeleteAppointmentCommand(appointmentToDelete);"},{"lineNumber":115,"author":{"gitID":"jlks96"},"content":"        deleteAppointmentCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":116,"author":{"gitID":"jlks96"},"content":"        return deleteAppointmentCommand;"},{"lineNumber":117,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":101,"-":17}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.person.DateAdded;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class XmlAdaptedPersonTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"    private static final String INVALID_DATE \u003d \"12/34\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"    private static final String VALID_DATE \u003d BENSON.getDateAdded().toString();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DATE, VALID_TAGS);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":"                new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DATE, VALID_TAGS);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":63,"author":{"gitID":"jlks96"},"content":"                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DATE, VALID_TAGS);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":71,"author":{"gitID":"jlks96"},"content":"                new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_DATE, VALID_TAGS);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":79,"author":{"gitID":"jlks96"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_DATE, VALID_TAGS);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":87,"author":{"gitID":"jlks96"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_DATE, VALID_TAGS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":95,"author":{"gitID":"jlks96"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_DATE, VALID_TAGS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":103,"author":{"gitID":"jlks96"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_DATE, VALID_TAGS);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"jlks96"},"content":"    //@@author jlks96"},{"lineNumber":109,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"jlks96"},"content":"    public void toModelType_invalidDate_throwsIllegalValueException() {"},{"lineNumber":111,"author":{"gitID":"jlks96"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":112,"author":{"gitID":"jlks96"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, INVALID_DATE, VALID_TAGS);"},{"lineNumber":113,"author":{"gitID":"jlks96"},"content":"        String expectedMessage \u003d DateAdded.MESSAGE_DATE_CONSTRAINTS;"},{"lineNumber":114,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":115,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":117,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"jlks96"},"content":"    public void toModelType_nullDate_throwsIllegalValueException() {"},{"lineNumber":119,"author":{"gitID":"jlks96"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":120,"author":{"gitID":"jlks96"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, null, VALID_TAGS);"},{"lineNumber":121,"author":{"gitID":"jlks96"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DateAdded.class.getSimpleName());"},{"lineNumber":122,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":123,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"jlks96"},"content":"    //@@author"},{"lineNumber":125,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":131,"author":{"gitID":"jlks96"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, INVALID_DATE, invalidTags);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":31,"-":104}},{"path":"src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.ALICE;"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.HOON;"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.IDA;"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorageTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlAddressBookStorageTest/\");"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        readAddressBook(null);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return new XmlAddressBookStorage(filePath).readAddressBook(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        readAddressBook(\"NotXmlFormatAddressBook.xml\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":59,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidPersonAddressBook.xml\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        //Save in new file and read back"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        original.addPerson(HOON);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        original.removePerson(ALICE);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        //Save and read without specifying file path"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        original.addPerson(IDA);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        saveAddressBook(null, \"SomeFile.xml\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            new XmlAddressBookStorage(filePath).saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        saveAddressBook(new AddressBook(), null);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":4,"-":121}},{"path":"src/test/java/seedu/address/model/appointment/TimeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"public class TimeTest {"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Time(null));"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"    public void constructor_invalidTime_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"        String invalidTime \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Time(invalidTime));"},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"    public void isValidTime() {"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"        // null time"},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Time.isValidTime(null));"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"        // invalid time"},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"        assertFalse(Time.isValidTime(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"        assertFalse(Time.isValidTime(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"        assertFalse(Time.isValidTime(\"1234\")); // invalid time"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"        assertFalse(Time.isValidTime(\"time\")); // non-numeric"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"        assertFalse(Time.isValidTime(\"eleven 30\")); // alphabets within time"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"        assertFalse(Time.isValidTime(\"12 /12/2018\")); // spaces within time"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"        assertFalse(Time.isValidTime(\"25:00\")); // invalid hour"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"        // valid time"},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"        assertTrue(Time.isValidTime(\"11:00\"));"},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"        assertTrue(Time.isValidTime(\"00:00\"));"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"    public void isEqual_equalTimes_success() {"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"        assertTrue(new Time(\"12:00\").equals(new Time(\"12:00\")));"},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":38,"-":8}},{"path":"src/test/java/seedu/address/storage/XmlSerializableAddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"jlks96"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"import seedu.address.testutil.TypicalPersonsAndAppointments;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBookTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlSerializableAddressBookTest/\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final File TYPICAL_PERSONS_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalPersonsAddressBook.xml\");"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonAddressBook.xml\");"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final File INVALID_TAG_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidTagAddressBook.xml\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_FILE,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"        AddressBook typicalPersonsAddressBook \u003d TypicalPersonsAndAppointments.getTypicalAddressBook();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTagFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TAG_FILE,"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":6,"-":46}},{"path":"src/test/java/seedu/address/model/appointment/DateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"public class DateTest {"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Date(null));"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"    public void constructor_invalidDate_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"        String invalidDateAdded \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDateAdded));"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"    public void isValidDate() {"},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"        // null date"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"        // invalid date"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"        assertFalse(Date.isValidDate(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"        assertFalse(Date.isValidDate(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"        assertFalse(Date.isValidDate(\"12/34\")); // invalid date"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"        assertFalse(Date.isValidDate(\"date\")); // non-numeric"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"        assertFalse(Date.isValidDate(\"12 Feb 2018\")); // alphabets within date"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"        assertFalse(Date.isValidDate(\"12 /12/2018\")); // spaces within date"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"        assertFalse(Date.isValidDate(\"13/13/2018\")); // invalid month"},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"        // valid date"},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"        assertTrue(Date.isValidDate(\"12/12/2018\"));"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"        assertTrue(Date.isValidDate(\"01/04/2017\"));"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"    public void isEqual_equalDates_success() {"},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":"        assertTrue(new Date(\"01/04/2017\").equals(new Date(\"01/04/2017\")));"},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":39,"-":8}},{"path":"src/test/java/seedu/address/model/appointment/LocationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"public class LocationTest {"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Location(null));"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"    public void constructor_invalidLocation_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"        String invalidLocation \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Location(invalidLocation));"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"    public void isValidLocation() {"},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"        // null location"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Location.isValidLocation(null));"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"        // invalid locations"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"        assertFalse(Location.isValidLocation(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"        assertFalse(Location.isValidLocation(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"        // valid locations"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"        assertTrue(Location.isValidLocation(\"Blk 456, Den Road, #01-355\"));"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"        assertTrue(Location.isValidLocation(\"-\")); // one character"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"        assertTrue(Location.isValidLocation(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\"));"},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":30,"-":8}},{"path":"src/test/java/seedu/address/model/appointment/StartTimeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"public class StartTimeTest {"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new StartTime(null));"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"    public void constructor_invalidTime_throwsIllegalArgumentException() {"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"        String invalidTime \u003d \"\";"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new StartTime(invalidTime));"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":16,"-":5}},{"path":"src/test/java/seedu/address/model/appointment/AppointmentTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":3,"author":{"gitID":"jlks96"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"public class AppointmentTest {"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"    private final PersonName name \u003d new PersonName(\"ALICE\");"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"    private final Date date \u003d new Date(\"01/01/2017\");"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"    private final StartTime startTime \u003d new StartTime(\"12:30\");"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"    private final EndTime endTime \u003d new EndTime(\"13:30\");"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"    private final Location location \u003d new Location(\"Gold Park Mall\");"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"    private final Appointment appointment \u003d new Appointment(name, date, startTime, endTime, location);"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"    public void isEqual_sameAppointment_success() {"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":"        assertTrue(new Appointment(name, date, startTime, endTime, location).equals(appointment));"},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"    public void isEqual_compareNull_failure() {"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"        assertFalse(new Appointment(name, date, startTime, endTime, location).equals(null));"},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"    public void getters_validAppointment_success() {"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"        assertTrue(appointment.getName().equals(name));"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"        assertTrue(appointment.getStartTime().equals(startTime));"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"        assertTrue(appointment.getEndTime().equals(endTime));"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"        assertTrue(appointment.getDate().equals(date));"},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"        assertTrue(appointment.getLocation().equals(location));"},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"    public void toString_validAppointment_success() {"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"        assertTrue(appointment.toString().equals(name + \" Date: \" + date + \" Start Time: \" + startTime"},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"                + \" End Time: \" + endTime + \" Location: \" + location));"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"    public void toStringList_validAppointment_success() {"},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"        final List\u003cString\u003e expectedStringList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":"        expectedStringList.add(name.toString());"},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":"        expectedStringList.add(date.toString());"},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":"        expectedStringList.add(startTime.toString());"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"        expectedStringList.add(endTime.toString());"},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":"        expectedStringList.add(location.toString());"},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":"        assertTrue(appointment.toStringList().equals(expectedStringList));"},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":51,"-":6}},{"path":"src/test/java/seedu/address/model/UniqueTemplateListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"Ng95junwei"},"content":"import seedu.address.model.email.Template;"},{"lineNumber":8,"author":{"gitID":"Ng95junwei"},"content":"import seedu.address.model.email.UniqueTemplateList;"},{"lineNumber":9,"author":{"gitID":"Ng95junwei"},"content":"import seedu.address.model.email.exceptions.DuplicateTemplateException;"},{"lineNumber":10,"author":{"gitID":"Ng95junwei"},"content":"import seedu.address.model.email.exceptions.TemplateNotFoundException;"},{"lineNumber":11,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":12,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":13,"author":{"gitID":"Ng95junwei"},"content":"public class UniqueTemplateListTest {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":19,"author":{"gitID":"Ng95junwei"},"content":"        UniqueTemplateList uniqueTemplateList \u003d new UniqueTemplateList();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":21,"author":{"gitID":"Ng95junwei"},"content":"        uniqueTemplateList.asObservableList().remove(0);"},{"lineNumber":22,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":24,"author":{"gitID":"Ng95junwei"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"Ng95junwei"},"content":"    public void addDuplicate_throwsDuplicateTemplateException() throws DuplicateTemplateException {"},{"lineNumber":26,"author":{"gitID":"Ng95junwei"},"content":"        Template template \u003d new Template(\"test\", \"test\", \"test\");"},{"lineNumber":27,"author":{"gitID":"Ng95junwei"},"content":"        UniqueTemplateList uniqueTemplateList \u003d new UniqueTemplateList();"},{"lineNumber":28,"author":{"gitID":"Ng95junwei"},"content":"        thrown.expect(DuplicateTemplateException.class);"},{"lineNumber":29,"author":{"gitID":"Ng95junwei"},"content":"        uniqueTemplateList.add(template);"},{"lineNumber":30,"author":{"gitID":"Ng95junwei"},"content":"        uniqueTemplateList.add(template);"},{"lineNumber":31,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":33,"author":{"gitID":"Ng95junwei"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"Ng95junwei"},"content":"    public void asObservableList_modifyList_throwsTemplateNotFoundException() throws TemplateNotFoundException {"},{"lineNumber":35,"author":{"gitID":"Ng95junwei"},"content":"        UniqueTemplateList uniqueTemplateList \u003d new UniqueTemplateList();"},{"lineNumber":36,"author":{"gitID":"Ng95junwei"},"content":"        thrown.expect(TemplateNotFoundException.class);"},{"lineNumber":37,"author":{"gitID":"Ng95junwei"},"content":"        uniqueTemplateList.remove(new Template(\"test\", \"test\", \"test\"));"},{"lineNumber":38,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":40,"author":{"gitID":"Ng95junwei"},"content":"}"}],"authorContributionMap":{"Ng95junwei":28,"-":12}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedAppointmentTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"jlks96"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":"import static seedu.address.storage.XmlAdaptedAppointment.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.BENSON_APPT;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Date;"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.EndTime;"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Location;"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.PersonName;"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.StartTime;"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"public class XmlAdaptedAppointmentTest {"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"    private static final String INVALID_DATE \u003d \"12/34\";"},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"    private static final String INVALID_START_TIME \u003d \"26:80\";"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"    private static final String INVALID_END_TIME \u003d \"0000\";"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":"    private static final String INVALID_LOCATION \u003d \" \";"},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"    private static final String VALID_NAME \u003d BENSON_APPT.getName().toString();"},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"    private static final String VALID_DATE \u003d BENSON_APPT.getDate().toString();"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"    private static final String VALID_START_TIME \u003d BENSON_APPT.getStartTime().toString();"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"    private static final String VALID_END_TIME \u003d BENSON_APPT.getEndTime().toString();"},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"    private static final String VALID_LOCATION \u003d BENSON_APPT.getLocation().toString();"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"    public void toModelType_validAppointmentDetails_returnsAppointment() throws Exception {"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"        XmlAdaptedAppointment appointment \u003d new XmlAdaptedAppointment(BENSON_APPT);"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"        assertEquals(BENSON_APPT, appointment.toModelType());"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"                new XmlAdaptedAppointment(INVALID_NAME, VALID_DATE, VALID_START_TIME, VALID_END_TIME, VALID_LOCATION);"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"        String expectedMessage \u003d PersonName.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":"                new XmlAdaptedAppointment(null, VALID_DATE, VALID_START_TIME, VALID_END_TIME, VALID_LOCATION);"},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, PersonName.class.getSimpleName());"},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":"    public void toModelType_invalidDate_throwsIllegalValueException() {"},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":"                new XmlAdaptedAppointment(VALID_NAME, INVALID_DATE, VALID_START_TIME, VALID_END_TIME, VALID_LOCATION);"},{"lineNumber":58,"author":{"gitID":"jlks96"},"content":"        String expectedMessage \u003d Date.MESSAGE_DATE_CONSTRAINTS;"},{"lineNumber":59,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":60,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":62,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"jlks96"},"content":"    public void toModelType_nullDate_throwsIllegalValueException() {"},{"lineNumber":64,"author":{"gitID":"jlks96"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":65,"author":{"gitID":"jlks96"},"content":"                new XmlAdaptedAppointment(VALID_NAME, null, VALID_START_TIME, VALID_END_TIME, VALID_LOCATION);"},{"lineNumber":66,"author":{"gitID":"jlks96"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName());"},{"lineNumber":67,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":68,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":70,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"jlks96"},"content":"    public void toModelType_invalidStartTime_throwsIllegalValueException() {"},{"lineNumber":72,"author":{"gitID":"jlks96"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":73,"author":{"gitID":"jlks96"},"content":"                new XmlAdaptedAppointment(VALID_NAME, VALID_DATE, INVALID_START_TIME, VALID_END_TIME, VALID_LOCATION);"},{"lineNumber":74,"author":{"gitID":"jlks96"},"content":"        String expectedMessage \u003d StartTime.MESSAGE_TIME_CONSTRAINTS;"},{"lineNumber":75,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":76,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":78,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"jlks96"},"content":"    public void toModelType_nullStartTime_throwsIllegalValueException() {"},{"lineNumber":80,"author":{"gitID":"jlks96"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":81,"author":{"gitID":"jlks96"},"content":"                new XmlAdaptedAppointment(VALID_NAME, VALID_DATE, null, VALID_END_TIME, VALID_LOCATION);"},{"lineNumber":82,"author":{"gitID":"jlks96"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, StartTime.class.getSimpleName());"},{"lineNumber":83,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":84,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":86,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"jlks96"},"content":"    public void toModelType_invalidEndTime_throwsIllegalValueException() {"},{"lineNumber":88,"author":{"gitID":"jlks96"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":89,"author":{"gitID":"jlks96"},"content":"                new XmlAdaptedAppointment(VALID_NAME, VALID_DATE, VALID_START_TIME, INVALID_END_TIME, VALID_LOCATION);"},{"lineNumber":90,"author":{"gitID":"jlks96"},"content":"        String expectedMessage \u003d EndTime.MESSAGE_TIME_CONSTRAINTS;"},{"lineNumber":91,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":92,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":94,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"jlks96"},"content":"    public void toModelType_nullEndTime_throwsIllegalValueException() {"},{"lineNumber":96,"author":{"gitID":"jlks96"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":97,"author":{"gitID":"jlks96"},"content":"                new XmlAdaptedAppointment(VALID_NAME, VALID_DATE, VALID_START_TIME, null, VALID_LOCATION);"},{"lineNumber":98,"author":{"gitID":"jlks96"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EndTime.class.getSimpleName());"},{"lineNumber":99,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":100,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":102,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"jlks96"},"content":"    public void toModelType_invalidLocation_throwsIllegalValueException() {"},{"lineNumber":104,"author":{"gitID":"jlks96"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":105,"author":{"gitID":"jlks96"},"content":"                new XmlAdaptedAppointment(VALID_NAME, VALID_DATE, VALID_START_TIME, VALID_END_TIME, INVALID_LOCATION);"},{"lineNumber":106,"author":{"gitID":"jlks96"},"content":"        String expectedMessage \u003d Location.MESSAGE_LOCATION_CONSTRAINTS;"},{"lineNumber":107,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":108,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":110,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"jlks96"},"content":"    public void toModelType_nullLocation_throwsIllegalValueException() {"},{"lineNumber":112,"author":{"gitID":"jlks96"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":113,"author":{"gitID":"jlks96"},"content":"                new XmlAdaptedAppointment(VALID_NAME, VALID_DATE, VALID_START_TIME, VALID_END_TIME, null);"},{"lineNumber":114,"author":{"gitID":"jlks96"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Location.class.getSimpleName());"},{"lineNumber":115,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":116,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":118,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":112,"-":6}},{"path":"src/test/java/seedu/address/model/appointment/EndTimeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"public class EndTimeTest {"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new StartTime(null));"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"    public void constructor_invalidTime_throwsIllegalArgumentException() {"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"        String invalidTime \u003d \"\";"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new StartTime(invalidTime));"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":15,"-":5}},{"path":"src/test/java/seedu/address/model/appointment/PersonNameTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"public class PersonNameTest {"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new PersonName(null));"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"        String invalidName \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new PersonName(invalidName));"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"    public void isValidName() {"},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"        // null name"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e PersonName.isValidName(null));"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"        // invalid name"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"        assertFalse(PersonName.isValidName(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"        assertFalse(PersonName.isValidName(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"        assertFalse(PersonName.isValidName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"        assertFalse(PersonName.isValidName(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"        // valid name"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"        assertTrue(PersonName.isValidName(\"peter jack\")); // alphabets only"},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"        assertTrue(PersonName.isValidName(\"12345\")); // numbers only"},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"        assertTrue(PersonName.isValidName(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"        assertTrue(PersonName.isValidName(\"Capital Tan\")); // with capital letters"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"        assertTrue(PersonName.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":34,"-":8}},{"path":"src/test/java/seedu/address/model/person/DateAddedTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"public class DateAddedTest {"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new DateAdded(null));"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"    public void constructor_invalidDate_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"        String invalidDateAdded \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(AssertionError.class, () -\u003e new DateAdded(invalidDateAdded));"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"    public void isValidDate() {"},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"        // null date added"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e DateAdded.isValidDate(null));"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"        // invalid date added"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"        assertFalse(DateAdded.isValidDate(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"        assertFalse(DateAdded.isValidDate(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"        assertFalse(DateAdded.isValidDate(\"12/34\")); // invalid date"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"        assertFalse(DateAdded.isValidDate(\"date\")); // non-numeric"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"        assertFalse(DateAdded.isValidDate(\"12 Feb 2018\")); // alphabets within date"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"        assertFalse(DateAdded.isValidDate(\"12 /12/2018\")); // spaces within date"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"        // valid date added"},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"        assertTrue(DateAdded.isValidDate(\"12/12/2018\"));"},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"        assertTrue(DateAdded.isValidDate(\"01/04/2017\"));"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":32,"-":9}},{"path":"src/test/java/seedu/address/model/person/NameContainsFullKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class NameContainsFullKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"Ng95junwei"},"content":"        NameContainsFullKeywordsPredicate firstPredicate \u003d new"},{"lineNumber":22,"author":{"gitID":"Ng95junwei"},"content":"                NameContainsFullKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"Ng95junwei"},"content":"        NameContainsFullKeywordsPredicate secondPredicate \u003d new"},{"lineNumber":24,"author":{"gitID":"Ng95junwei"},"content":"                NameContainsFullKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"Ng95junwei"},"content":"        NameContainsFullKeywordsPredicate firstPredicateCopy \u003d new"},{"lineNumber":31,"author":{"gitID":"Ng95junwei"},"content":"                NameContainsFullKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // One keyword"},{"lineNumber":47,"author":{"gitID":"Ng95junwei"},"content":"        NameContainsFullKeywordsPredicate predicate \u003d new"},{"lineNumber":48,"author":{"gitID":"Ng95junwei"},"content":"                NameContainsFullKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // Multiple keywords"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsFullKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // Only one matching keyword"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsFullKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsFullKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // Zero keywords"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        NameContainsFullKeywordsPredicate predicate \u003d new NameContainsFullKeywordsPredicate(Collections.emptyList());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // Non-matching keyword"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsFullKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // Keywords match phone, email and address, but does not match name"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsFullKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Ng95junwei":8,"-":71}},{"path":"src/test/java/seedu/address/model/UniqueAppointmentListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.UniqueAppointmentList;"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"public class UniqueAppointmentListTest {"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"    @Rule"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"        UniqueAppointmentList uniqueAppointmentList \u003d new UniqueAppointmentList();"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"        uniqueAppointmentList.asObservableList().remove(0);"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":14,"-":6}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Ng95junwei"},"content":"import static org.hamcrest.CoreMatchers.instanceOf;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Ng95junwei"},"content":"import static org.junit.Assert.assertThat;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.ALICE;"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.ALICE_APPT;"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.BENSON;"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.BENSON_APPT;"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.CARL_APPT;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"Ng95junwei"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsFullKeywordsPredicate;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        modelManager.getFilteredPersonList().remove(0);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"    //@@author jlks96"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"    public void getFilteredAppointmentList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"        modelManager.getFilteredAppointmentList().remove(0);"},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"    //@@author"},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":48,"author":{"gitID":"Ng95junwei"},"content":"    //@@author ng95junwei"},{"lineNumber":49,"author":{"gitID":"Ng95junwei"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"Ng95junwei"},"content":"    public void getTemplateList_return_observableList() {"},{"lineNumber":51,"author":{"gitID":"Ng95junwei"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":52,"author":{"gitID":"Ng95junwei"},"content":"        assertThat(modelManager.getAllTemplates(), instanceOf(ObservableList.class));"},{"lineNumber":53,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"Ng95junwei"},"content":"    //@@author"},{"lineNumber":55,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":"    public void equals() throws DuplicateAppointmentException, AppointmentNotFoundException {"},{"lineNumber":58,"author":{"gitID":"jlks96"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON)"},{"lineNumber":59,"author":{"gitID":"jlks96"},"content":"                .withAppointment(ALICE_APPT).withAppointment(BENSON_APPT).build();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"jlks96"},"content":"        // different filteredPersonList -\u003e returns false"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsFullKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"jlks96"},"content":"        //@@author jlks96"},{"lineNumber":86,"author":{"gitID":"jlks96"},"content":"        //different filteredAppointmentList -\u003e returns false"},{"lineNumber":87,"author":{"gitID":"jlks96"},"content":"        modelManager.addAppointment(CARL_APPT);"},{"lineNumber":88,"author":{"gitID":"jlks96"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":89,"author":{"gitID":"jlks96"},"content":"        //@@author"},{"lineNumber":90,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":93,"author":{"gitID":"jlks96"},"content":"        modelManager.deleteAppointment(CARL_APPT);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        differentUserPrefs.setAddressBookName(\"differentName\");"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":28,"Ng95junwei":12,"-":60}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.ALICE;"},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.ALICE_APPT;"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"        assertEquals(Collections.emptyList(), addressBook.getAppointmentList());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":"        List\u003cAppointment\u003e newAppointments \u003d Arrays.asList(ALICE_APPT);"},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags, newAppointments);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"jlks96"},"content":"    //@@author jlks96"},{"lineNumber":64,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"jlks96"},"content":"    public void resetData_withDuplicateAppointments_throwsAssertionError() {"},{"lineNumber":66,"author":{"gitID":"jlks96"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE);"},{"lineNumber":67,"author":{"gitID":"jlks96"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":68,"author":{"gitID":"jlks96"},"content":"        List\u003cAppointment\u003e newAppointments \u003d Arrays.asList(ALICE_APPT, ALICE_APPT); // Repeat ALICE_APPT twice"},{"lineNumber":69,"author":{"gitID":"jlks96"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags, newAppointments);"},{"lineNumber":70,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":71,"author":{"gitID":"jlks96"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":72,"author":{"gitID":"jlks96"},"content":"        addressBook.resetData(newData);"},{"lineNumber":73,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"jlks96"},"content":"    //@@author"},{"lineNumber":75,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"jlks96"},"content":"    //@@author jlks96"},{"lineNumber":89,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"jlks96"},"content":"    public void getAppointmentList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":91,"author":{"gitID":"jlks96"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":92,"author":{"gitID":"jlks96"},"content":"        addressBook.getAppointmentList().remove(0);"},{"lineNumber":93,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"jlks96"},"content":"    //@@author"},{"lineNumber":95,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"jlks96"},"content":"     * A stub ReadOnlyAddressBook whose persons, tags and appointment lists can violate interface constraints."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":102,"author":{"gitID":"jlks96"},"content":"        private final ObservableList\u003cAppointment\u003e appointments \u003d FXCollections.observableArrayList();"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"jlks96"},"content":"        AddressBookStub("},{"lineNumber":105,"author":{"gitID":"jlks96"},"content":"                Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags, Collection\u003cAppointment\u003e appointments) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":108,"author":{"gitID":"jlks96"},"content":"            this.appointments.setAll(appointments);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":121,"author":{"gitID":"jlks96"},"content":"        @Override"},{"lineNumber":122,"author":{"gitID":"jlks96"},"content":"        public ObservableList\u003cAppointment\u003e getAppointmentList() {"},{"lineNumber":123,"author":{"gitID":"jlks96"},"content":"            return appointments;"},{"lineNumber":124,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":38,"-":89}},{"path":"src/test/java/seedu/address/model/person/DateAddedIsBeforeDateInputPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.AMY;"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"public class DateAddedIsBeforeDateInputPredicateTest {"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"    public void equals() {"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"        DateAddedIsBeforeDateInputPredicate firstPredicate \u003d new"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"                DateAddedIsBeforeDateInputPredicate(\"03/03/2018\");"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"        DateAddedIsBeforeDateInputPredicate secondPredicate \u003d new"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"                DateAddedIsBeforeDateInputPredicate(\"01/01/2018\");"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"        // same object -\u003e returns true"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"        // same values -\u003e returns true"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":"        DateAddedIsBeforeDateInputPredicate firstPredicateCopy \u003d new"},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"                DateAddedIsBeforeDateInputPredicate(\"03/03/2018\");"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"        // different types -\u003e returns false"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"        // null -\u003e returns false"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"        // different input date -\u003e returns false"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"    public void test_dateAddedIsBeforeDateInput_returnsTrue() {"},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"        DateAddedIsBeforeDateInputPredicate predicate \u003d new"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"                DateAddedIsBeforeDateInputPredicate(\"03/03/2018\");"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"        assertTrue(predicate.test(AMY));"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":"    public void test_dateAddedIsAfterDateInput_returnsFalse() {"},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"        DateAddedIsBeforeDateInputPredicate predicate \u003d new"},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"                DateAddedIsBeforeDateInputPredicate(\"01/01/2018\");"},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"        assertFalse(predicate.test(AMY));"},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":46,"-":4}},{"path":"src/test/java/seedu/address/model/email/TemplateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Ng95junwei"},"content":"package seedu.address.model.email;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":6,"author":{"gitID":"Ng95junwei"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":8,"author":{"gitID":"Ng95junwei"},"content":"public class TemplateTest {"},{"lineNumber":9,"author":{"gitID":"Ng95junwei"},"content":"    private final String purpose \u003d \"purpose\";"},{"lineNumber":10,"author":{"gitID":"Ng95junwei"},"content":"    private final String title \u003d \"title\";"},{"lineNumber":11,"author":{"gitID":"Ng95junwei"},"content":"    private final String message \u003d \"message\";"},{"lineNumber":12,"author":{"gitID":"Ng95junwei"},"content":"    private final Template template \u003d new Template(purpose, title, message);"},{"lineNumber":13,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":14,"author":{"gitID":"Ng95junwei"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"Ng95junwei"},"content":"    public void isEqual_sameTemplate_success() {"},{"lineNumber":16,"author":{"gitID":"Ng95junwei"},"content":"        assertTrue(new Template(purpose, title, message).equals(template));"},{"lineNumber":17,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":19,"author":{"gitID":"Ng95junwei"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"Ng95junwei"},"content":"    public void isEqual_compareNull_failure() {"},{"lineNumber":21,"author":{"gitID":"Ng95junwei"},"content":"        assertFalse(new Template(purpose, title, message).equals(null));"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"    public void getters_validAppointment_success() {"},{"lineNumber":26,"author":{"gitID":"Ng95junwei"},"content":"        assertTrue(template.getPurpose().equals(purpose));"},{"lineNumber":27,"author":{"gitID":"Ng95junwei"},"content":"        assertTrue(template.getTitle().equals(title));"},{"lineNumber":28,"author":{"gitID":"Ng95junwei"},"content":"        assertTrue(template.getMessage().equals(message));"},{"lineNumber":29,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":31,"author":{"gitID":"Ng95junwei"},"content":"}"}],"authorContributionMap":{"jlks96":4,"Ng95junwei":24,"-":3}},{"path":"src/test/java/seedu/address/testutil/TypicalDates.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":3,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.person.DateAdded;"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":" * A utility class containing a list of {@code DateAdded} objects to be used in tests."},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":" */"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"public class TypicalDates {"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"    public static final DateAdded DATE_FIRST_JAN \u003d new DateAdded(\"01/01/2018\");"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"    public static final DateAdded DATE_SECOND_FEB \u003d new DateAdded(\"02/02/2018\");"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"    public static final DateAdded DATE_THIRD_MAR \u003d new DateAdded(\"03/03/2018\");"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"    public static final String VALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"01/01/2018\";"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"12/34\";"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":17}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A utility class to help with building Addressbook objects."},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":14,"author":{"gitID":"-"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").withTag(\"Friend\").build();}"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class AddressBookBuilder {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private AddressBook addressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public AddressBookBuilder() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        addressBook \u003d new AddressBook();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.addressBook \u003d addressBook;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withPerson(Person person) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            addressBook.addPerson(person);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"person is expected to be unique.\");"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Parses {@code tagName} into a {@code Tag} and adds it to the {@code AddressBook} that we are building."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withTag(String tagName) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            addressBook.addTag(new Tag(tagName));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tagName is expected to be valid.\");"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":"     * Adds a new {@code Appointment} to the {@code AddressBook} that we are building."},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":"    public AddressBookBuilder withAppointment(Appointment appointment) {"},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":"            addressBook.addAppointment(appointment);"},{"lineNumber":58,"author":{"gitID":"jlks96"},"content":"        } catch (DuplicateAppointmentException dae) {"},{"lineNumber":59,"author":{"gitID":"jlks96"},"content":"            throw new IllegalArgumentException(\"appointment is expected to be unique.\");"},{"lineNumber":60,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"jlks96"},"content":"        return this;"},{"lineNumber":62,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public AddressBook build() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":14,"-":53}},{"path":"src/test/java/seedu/address/testutil/TypicalTags.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"Ng95junwei"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":" * A utility class containing a list of {@code Tag} objects to be used in tests."},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":" */"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"public class TypicalTags {"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"    public static final Tag TAG_HUSBAND \u003d new Tag(\"husband\");"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"    public static final Tag TAG_FRIEND \u003d new Tag(\"friends\");"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"    public static final Tag TAG_OWES_MONEY \u003d new Tag(\"owesMoney\");"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"    public static final Set\u003cTag\u003e TAG_SET_OWES_MONEY_FRIEND \u003d new HashSet\u003c\u003e(Arrays.asList(TAG_OWES_MONEY, TAG_FRIEND));"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"    public static final Set\u003cTag\u003e TAG_SET_FRIEND \u003d new HashSet\u003c\u003e(Arrays.asList(TAG_FRIEND));"},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"    public static final Set\u003cTag\u003e TAG_SET_HUSBAND \u003d new HashSet\u003c\u003e(Arrays.asList(TAG_HUSBAND));"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\";"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":"    public static final String VALID_TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + \"friends\";"},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"    public static final String VALID_TAG_DESC_OWES_MONEY \u003d \" \" + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":22,"Ng95junwei":2,"-":2}},{"path":"src/test/java/seedu/address/model/PersonIsAddedBeforeDateInputAndContainsTagsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.BOB;"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalTags.TAG_SET_FRIEND;"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalTags.TAG_SET_HUSBAND;"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"public class PersonIsAddedBeforeDateInputAndContainsTagsPredicateTest {"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"    public void equals() {"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"        PersonIsAddedBeforeDateInputAndContainsTagsPredicate firstPredicate \u003d new"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"                PersonIsAddedBeforeDateInputAndContainsTagsPredicate(TAG_SET_FRIEND, \"01/01/2018\");"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"        PersonIsAddedBeforeDateInputAndContainsTagsPredicate secondPredicate \u003d new"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"                PersonIsAddedBeforeDateInputAndContainsTagsPredicate(TAG_SET_HUSBAND, \"03/03/2018\");"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"        // same object -\u003e returns true"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"        // same values -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"        PersonIsAddedBeforeDateInputAndContainsTagsPredicate firstPredicateCopy \u003d new"},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"                PersonIsAddedBeforeDateInputAndContainsTagsPredicate(TAG_SET_FRIEND, \"01/01/2018\");"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"        // different types -\u003e returns false"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"        // null -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"        // different input date -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"    public void test_personIsAddedBeforeDateInputAndContainsTags_returnsTrue() {"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"        PersonIsAddedBeforeDateInputAndContainsTagsPredicate predicate \u003d new"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"                PersonIsAddedBeforeDateInputAndContainsTagsPredicate(TAG_SET_HUSBAND, \"03/03/2018\");"},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"        assertTrue(predicate.test(BOB));"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"    public void test_personDoesNotContainTags_returnsFalse() {"},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"        PersonIsAddedBeforeDateInputAndContainsTagsPredicate predicate \u003d new"},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":"                PersonIsAddedBeforeDateInputAndContainsTagsPredicate(TAG_SET_FRIEND, \"03/03/2018\");"},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":"        assertFalse(predicate.test(BOB));"},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":"    public void test_personIsNotAddedBeforeDateInput_returnsFalse() {"},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":"        PersonIsAddedBeforeDateInputAndContainsTagsPredicate predicate \u003d new"},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":"                PersonIsAddedBeforeDateInputAndContainsTagsPredicate(TAG_SET_HUSBAND, \"01/01/2018\");"},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":"        assertFalse(predicate.test(BOB));"},{"lineNumber":58,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":55,"-":4}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"    public static final Index INDEX_FIRST_APPT \u003d Index.fromOneBased(1);"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"    public static final Index INDEX_SECOND_APPT \u003d Index.fromOneBased(2);"},{"lineNumber":14,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":2,"-":12}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * A utility class for Person."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"     * Returns an add alias string for adding the {@code person}."},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"    public static String getAddAlias(Person person) {"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"        return AddCommand.COMMAND_ALIAS + \" \" + getPersonDetails(person);"},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":41,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":7,"-":38}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"jlks96"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":"import java.util.Calendar;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.person.DateAdded;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"    public static final String DEFAULT_DATE_ADDED \u003d \"02/02/2018\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"    private DateAdded dateAdded;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"        dateAdded \u003d new DateAdded(DEFAULT_DATE_ADDED);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":"        dateAdded \u003d personToCopy.getDateAdded();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"jlks96"},"content":"     * Sets the {@code DateAdded} of the {@code Person} that we are building."},{"lineNumber":99,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"jlks96"},"content":"    public PersonBuilder withDateAdded(String dateAdded) {"},{"lineNumber":101,"author":{"gitID":"jlks96"},"content":"        this.dateAdded \u003d new DateAdded(dateAdded);"},{"lineNumber":102,"author":{"gitID":"jlks96"},"content":"        return this;"},{"lineNumber":103,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":105,"author":{"gitID":"jlks96"},"content":"    //@@author jlks96"},{"lineNumber":106,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"jlks96"},"content":"     * Creates and returns a {@code DateAdded} with the dateAdded attribute representing the current date"},{"lineNumber":108,"author":{"gitID":"jlks96"},"content":"     * @return current date in the following format: dd/MM/yyyy"},{"lineNumber":109,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"jlks96"},"content":"    public PersonBuilder generateDate() {"},{"lineNumber":111,"author":{"gitID":"jlks96"},"content":"        SimpleDateFormat dateFormatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"},{"lineNumber":112,"author":{"gitID":"jlks96"},"content":"        Calendar calendar \u003d Calendar.getInstance();"},{"lineNumber":113,"author":{"gitID":"jlks96"},"content":"        this.dateAdded \u003d  new DateAdded(dateFormatter.format(calendar.getTime()));"},{"lineNumber":114,"author":{"gitID":"jlks96"},"content":"        return this;"},{"lineNumber":115,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"jlks96"},"content":"    //@@author"},{"lineNumber":117,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":119,"author":{"gitID":"jlks96"},"content":"        return new Person(name, phone, email, address, dateAdded, tags);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":29,"-":93}},{"path":"src/test/java/seedu/address/model/tag/UniqueTagListContainsTagsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.AMY;"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalPersonsAndAppointments.BOB;"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalTags.TAG_SET_FRIEND;"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalTags.TAG_SET_HUSBAND;"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"import static seedu.address.testutil.TypicalTags.TAG_SET_OWES_MONEY_FRIEND;"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"public class UniqueTagListContainsTagsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"    public void equals() {"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"        UniqueTagListContainsTagsPredicate firstPredicate \u003d new"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"                UniqueTagListContainsTagsPredicate(TAG_SET_FRIEND);"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"        UniqueTagListContainsTagsPredicate secondPredicate \u003d new"},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"                UniqueTagListContainsTagsPredicate(TAG_SET_OWES_MONEY_FRIEND);"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":"        // same object -\u003e returns true"},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"        // same values -\u003e returns true"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"        UniqueTagListContainsTagsPredicate firstPredicateCopy \u003d new"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"                UniqueTagListContainsTagsPredicate(TAG_SET_FRIEND);"},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"        // different input date -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"    public void test_uniqueTagListContainsTags_returnsTrue() {"},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"        UniqueTagListContainsTagsPredicate predicate \u003d new"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"                UniqueTagListContainsTagsPredicate(TAG_SET_HUSBAND);"},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":"        assertTrue(predicate.test(BOB));"},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":"    public void test_uniqueTagListDoesNotContainTags_returnsFalse() {"},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":"        UniqueTagListContainsTagsPredicate predicate \u003d new"},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":"                UniqueTagListContainsTagsPredicate(TAG_SET_OWES_MONEY_FRIEND);"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"        assertFalse(predicate.test(AMY));"},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":51,"-":3}},{"path":"src/test/java/seedu/address/testutil/TypicalPersonsAndAppointments.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"public class TypicalPersonsAndAppointments {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\").withPhone(\"85355255\")"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"            .withDateAdded(\"01/01/2018\").withTags(\"friends\").build();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\").withDateAdded(\"02/02/2018\").withEmail(\"johnd@example.com\")"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"            .withPhone(\"98765432\").withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withDateAdded(\"03/03/2018\").build();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withDateAdded(\"04/04/2018\").build();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withDateAdded(\"05/05/2018\").build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withDateAdded(\"06/06/2018\").build();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withDateAdded(\"07/07/2018\").build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"jlks96"},"content":"    //@@author jlks96"},{"lineNumber":62,"author":{"gitID":"jlks96"},"content":"    public static final Appointment ALICE_APPT \u003d new AppointmentBuilder().withPersonName(\"Alice Pauline\")"},{"lineNumber":63,"author":{"gitID":"jlks96"},"content":"            .withDate(\"01/01/2018\").withStartTime(\"10:30\").withEndTime(\"11:30\")"},{"lineNumber":64,"author":{"gitID":"jlks96"},"content":"            .withLocation(\"123, Jurong West Ave 6, #08-111\").build();"},{"lineNumber":65,"author":{"gitID":"jlks96"},"content":"    public static final Appointment BENSON_APPT \u003d new AppointmentBuilder().withPersonName(\"Benson Meier\")"},{"lineNumber":66,"author":{"gitID":"jlks96"},"content":"            .withDate(\"02/02/2018\").withStartTime(\"10:30\").withEndTime(\"11:30\")"},{"lineNumber":67,"author":{"gitID":"jlks96"},"content":"            .withLocation(\"311, Clementi Ave 2, #02-25\").build();"},{"lineNumber":68,"author":{"gitID":"jlks96"},"content":"    public static final Appointment CARL_APPT \u003d new AppointmentBuilder().withPersonName(\"Carl Kurz\")"},{"lineNumber":69,"author":{"gitID":"jlks96"},"content":"            .withDate(\"03/03/2018\").withStartTime(\"10:30\").withEndTime(\"11:30\").withLocation(\"wall street\").build();"},{"lineNumber":70,"author":{"gitID":"jlks96"},"content":"    public static final Appointment DANIEL_APPT \u003d new AppointmentBuilder().withPersonName(\"Daniel Meier\")"},{"lineNumber":71,"author":{"gitID":"jlks96"},"content":"            .withDate(\"04/04/2018\").withStartTime(\"10:30\").withEndTime(\"11:30\").withLocation(\"10th street\").build();"},{"lineNumber":72,"author":{"gitID":"jlks96"},"content":"    public static final Appointment ELLE_APPT \u003d new AppointmentBuilder().withPersonName(\"Elle Meyer\")"},{"lineNumber":73,"author":{"gitID":"jlks96"},"content":"            .withDate(\"05/05/2018\").withStartTime(\"10:30\").withEndTime(\"11:30\").withLocation(\"michegan ave\").build();"},{"lineNumber":74,"author":{"gitID":"jlks96"},"content":"    public static final Appointment FIONA_APPT \u003d new AppointmentBuilder().withPersonName(\"Fiona Kunz\")"},{"lineNumber":75,"author":{"gitID":"jlks96"},"content":"            .withDate(\"06/06/2018\").withStartTime(\"10:30\").withEndTime(\"11:30\").withLocation(\"little tokyo\").build();"},{"lineNumber":76,"author":{"gitID":"jlks96"},"content":"    public static final Appointment GEORGE_APPT \u003d new AppointmentBuilder().withPersonName(\"George Best\")"},{"lineNumber":77,"author":{"gitID":"jlks96"},"content":"            .withDate(\"07/07/2018\").withStartTime(\"10:30\").withEndTime(\"11:30\").withLocation(\"4th street\").build();"},{"lineNumber":78,"author":{"gitID":"jlks96"},"content":"    //@@author"},{"lineNumber":79,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":80,"author":{"gitID":"jlks96"},"content":"    private TypicalPersonsAndAppointments() {} // prevents instantiation"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"jlks96"},"content":"        for (Appointment appointment : getTypicalAppointments()) {"},{"lineNumber":95,"author":{"gitID":"jlks96"},"content":"            try {"},{"lineNumber":96,"author":{"gitID":"jlks96"},"content":"                ab.addAppointment(appointment);"},{"lineNumber":97,"author":{"gitID":"jlks96"},"content":"            } catch (DuplicateAppointmentException e) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":108,"author":{"gitID":"jlks96"},"content":"    //@@author jlks96"},{"lineNumber":109,"author":{"gitID":"jlks96"},"content":"    public static List\u003cAppointment\u003e getTypicalAppointments() {"},{"lineNumber":110,"author":{"gitID":"jlks96"},"content":"        return new ArrayList\u003c\u003e("},{"lineNumber":111,"author":{"gitID":"jlks96"},"content":"                Arrays.asList(ALICE_APPT, BENSON_APPT, CARL_APPT, DANIEL_APPT, ELLE_APPT, FIONA_APPT, GEORGE_APPT));"},{"lineNumber":112,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"jlks96"},"content":"    //@@author"},{"lineNumber":114,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":43,"-":71}},{"path":"src/test/java/seedu/address/testutil/AppointmentBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":3,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Date;"},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.EndTime;"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Location;"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.PersonName;"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.StartTime;"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":" * A utility class to help with building Person objects."},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":" */"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"public class AppointmentBuilder {"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"    public static final String DEFAULT_DATE \u003d \"03/03/2018\";"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"    public static final String DEFAULT_START_TIME \u003d \"12:30\";"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"    public static final String DEFAULT_END_TIME \u003d \"13:30\";"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"    public static final String DEFAULT_LOCATION \u003d \"Parkway Parade\";"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"    private PersonName name;"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"    private Date date;"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":"    private StartTime startTime;"},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"    private EndTime endTime;"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"    private Location location;"},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"    public AppointmentBuilder() {"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"        name \u003d new PersonName(DEFAULT_NAME);"},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"        date \u003d new Date(DEFAULT_DATE);"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"        startTime \u003d new StartTime(DEFAULT_START_TIME);"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"        endTime \u003d new EndTime(DEFAULT_END_TIME);"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"        location \u003d new Location(DEFAULT_LOCATION);"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"     * Initializes the AppointmentBuilder with the data of {@code appointmentToCopy}."},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"    public AppointmentBuilder(Appointment appointmentToCopy) {"},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"        name \u003d appointmentToCopy.getName();"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"        date \u003d appointmentToCopy.getDate();"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"        startTime \u003d appointmentToCopy.getStartTime();"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"        endTime \u003d appointmentToCopy.getEndTime();"},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"        location \u003d appointmentToCopy.getLocation();"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"     * Sets the {@code PersonName} of the {@code Appointment} that we are building."},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":"    public AppointmentBuilder withPersonName(String name) {"},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":"        this.name \u003d new PersonName(name);"},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":"        return this;"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":"     * Sets the {@code Date} of the {@code Appointment} that we are building."},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":"    public AppointmentBuilder withDate(String date) {"},{"lineNumber":58,"author":{"gitID":"jlks96"},"content":"        this.date \u003d new Date(date);"},{"lineNumber":59,"author":{"gitID":"jlks96"},"content":"        return this;"},{"lineNumber":60,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":62,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"jlks96"},"content":"     * Sets the {@code StartTime} of the {@code Appointment} that we are building."},{"lineNumber":64,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"jlks96"},"content":"    public AppointmentBuilder withStartTime (String startTime) {"},{"lineNumber":66,"author":{"gitID":"jlks96"},"content":"        this.startTime \u003d new StartTime(startTime);"},{"lineNumber":67,"author":{"gitID":"jlks96"},"content":"        return this;"},{"lineNumber":68,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":70,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"jlks96"},"content":"     * Sets the {@code EndTime} of the {@code Appointment} that we are building."},{"lineNumber":72,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"jlks96"},"content":"    public AppointmentBuilder withEndTime (String endTime) {"},{"lineNumber":74,"author":{"gitID":"jlks96"},"content":"        this.endTime \u003d new EndTime(endTime);"},{"lineNumber":75,"author":{"gitID":"jlks96"},"content":"        return this;"},{"lineNumber":76,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":78,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"jlks96"},"content":"     * Sets the {@code Location} of the {@code Appointment} that we are building."},{"lineNumber":80,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"jlks96"},"content":"    public AppointmentBuilder withLocation(String location) {"},{"lineNumber":82,"author":{"gitID":"jlks96"},"content":"        this.location \u003d new Location(location);"},{"lineNumber":83,"author":{"gitID":"jlks96"},"content":"        return this;"},{"lineNumber":84,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":86,"author":{"gitID":"jlks96"},"content":"    public Appointment build() {"},{"lineNumber":87,"author":{"gitID":"jlks96"},"content":"        return new Appointment(name, date, startTime, endTime, location);"},{"lineNumber":88,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":89}},{"path":"src/test/java/guitests/guihandles/CalendarPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":3,"author":{"gitID":"jlks96"},"content":"import com.calendarfx.view.CalendarView;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"import javafx.scene.Node;"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":" * Provides a handle for {@code CalendarPanel}."},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":" */"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"public class CalendarPanelHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"    public static final String CALENDAR_ID \u003d \"#calendarView\";"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"    private final CalendarView calendarView;"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"    public CalendarPanelHandle(Node calendarPanelNode) {"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"        super(calendarPanelNode);"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"        calendarView \u003d getChildNode(CALENDAR_ID);"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":21}},{"path":"src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"Ng95junwei"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"Ng95junwei"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitID":"Ng95junwei"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"Ng95junwei"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitID":"Ng95junwei"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // Multiple keywords"},{"lineNumber":48,"author":{"gitID":"Ng95junwei"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // Only one matching keyword"},{"lineNumber":52,"author":{"gitID":"Ng95junwei"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitID":"Ng95junwei"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // Keywords match phone, email and address, but does not match name"},{"lineNumber":60,"author":{"gitID":"Ng95junwei"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":61,"author":{"gitID":"Ng95junwei"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // Zero keywords"},{"lineNumber":68,"author":{"gitID":"Ng95junwei"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // Non-matching keyword"},{"lineNumber":72,"author":{"gitID":"Ng95junwei"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"Ng95junwei"},"content":"}"}],"authorContributionMap":{"Ng95junwei":14,"-":62}},{"path":"src/test/java/guitests/guihandles/MainWindowHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Provides a handle for {@code MainWindow}."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class MainWindowHandle extends StageHandle {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    private final PersonListPanelHandle personListPanel;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    private final ResultDisplayHandle resultDisplay;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final CommandBoxHandle commandBox;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final StatusBarFooterHandle statusBarFooter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private final MainMenuHandle mainMenu;"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"    private final CalendarPanelHandle calendarPanel;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public MainWindowHandle(Stage stage) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        super(stage);"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanelHandle(getChildNode(PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"        calendarPanel \u003d new CalendarPanelHandle(getChildNode(CalendarPanelHandle.CALENDAR_ID));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return personListPanel;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return resultDisplay;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return commandBox;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return statusBarFooter;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return mainMenu;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"    public CalendarPanelHandle getCalendarPanel() {"},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":"        return calendarPanel;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":4,"-":47}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"    private static final String DATE_ADDED_FIELD_ID \u003d \"#dateAdded\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Label addressLabel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"    private final Label dateAddedLabel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"        this.dateAddedLabel \u003d getChildNode(DATE_ADDED_FIELD_ID);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public String getAddress() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return addressLabel.getText();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"jlks96"},"content":"    //@@author jlks96"},{"lineNumber":69,"author":{"gitID":"jlks96"},"content":"    public String getDateAdded() {"},{"lineNumber":70,"author":{"gitID":"jlks96"},"content":"        return dateAddedLabel.getText();"},{"lineNumber":71,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"jlks96"},"content":"    //@@author"},{"lineNumber":73,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":9,"-":71}},{"path":"src/test/java/seedu/address/testutil/AppointmentUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":3,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"import seedu.address.logic.commands.DeleteAppointmentCommand;"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":" * A utility class for Appointment"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":" */"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"public class AppointmentUtil {"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"     * Returns an add appointment command string for adding the {@code appointment}."},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"    public static String getAddAppointmentCommand(Appointment appointment) {"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"        return AddAppointmentCommand.COMMAND_WORD + \" \" + getAppointmentDetails(appointment);"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"     * Returns an add appointment alias string for adding the {@code appointment}."},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"    public static String getAddAppointmentAlias(Appointment appointment) {"},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"        return AddAppointmentCommand.COMMAND_ALIAS + \" \" + getAppointmentDetails(appointment);"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"     * Returns a delete appointment command string for deleting the {@code appointment}."},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"    public static String getDeleteAppointmentCommand(Appointment appointment) {"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"        return DeleteAppointmentCommand.COMMAND_WORD + \" \" + getAppointmentDetails(appointment);"},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"     * Returns a delete appointment alias string for deleting the {@code appointment}."},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"    public static String getDeleteAppointmentAlias(Appointment appointment) {"},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"        return DeleteAppointmentCommand.COMMAND_ALIAS + \" \" + getAppointmentDetails(appointment);"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"     * Returns the part of command string for the given {@code appointment}\u0027s details."},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":"    public static String getAppointmentDetails(Appointment appointment) {"},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":"        sb.append(PREFIX_NAME + appointment.getName().fullName + \" \");"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"        sb.append(PREFIX_DATE + appointment.getDate().date + \" \");"},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":"        sb.append(PREFIX_STARTTIME + appointment.getStartTime().time + \" \");"},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":"        sb.append(PREFIX_ENDTIME + appointment.getEndTime().time + \" \");"},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":"        sb.append(PREFIX_LOCATION + appointment.getLocation().value + \" \");"},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":"        return sb.toString();"},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":57,"-":1}},{"path":"src/main/java/seedu/address/ui/UiManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * The manager of the UI component."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UiManager extends ComponentManager implements Ui {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/addsurance_logo.png\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public UiManager(Logic logic, Config config, UserPrefs prefs) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        //Set the application icon."},{"lineNumber":52,"author":{"gitID":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        mainWindow.hide();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        final String content \u003d details + \":\\n\" + cause.toString();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                                               String contentText) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        alert.showAndWait();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        System.exit(1);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                event.exception);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":1,"-":118}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"    private Label dateAdded;"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"        dateAdded.setText(person.getDateAdded().dateAdded);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":3,"-":70}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"jlks96"},"content":"    @FXML"},{"lineNumber":60,"author":{"gitID":"jlks96"},"content":"    private StackPane calendarPlaceholder;"},{"lineNumber":61,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":95,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":96,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":97,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":98,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":99,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":100,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":101,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":102,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":103,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":104,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":105,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":106,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":107,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":108,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":132,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":133,"author":{"gitID":"jlks96"},"content":"        CalendarPanel calendarPanel \u003d new CalendarPanel(logic.getFilteredAppointmentList());"},{"lineNumber":134,"author":{"gitID":"jlks96"},"content":"        calendarPlaceholder.getChildren().add(calendarPanel.getRoot());"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":162,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":167,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":6,"-":189}},{"path":"src/main/java/seedu/address/commons/core/Config.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Config values used by the app"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Config {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"    private String appTitle \u003d \"AddSurance\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return appTitle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return logLevel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        sb.append(\"App title : \" + appTitle);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        sb.append(\"\\nCurrent log level : \" + logLevel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":1,"-":71}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"    public static final String MESSAGE_PERSONS_NOT_FOUND \u003d \"No such persons found!\";"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"    public static final String MESSAGE_APPT_NOT_FOUND \u003d \"No such appointment found!\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":2,"-":13}},{"path":"src/main/java/seedu/address/ui/CalendarPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":3,"author":{"gitID":"jlks96"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"import java.time.LocalTime;"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"import com.calendarfx.model.Entry;"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"import com.calendarfx.view.CalendarView;"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"import com.calendarfx.view.page.PageBase;"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"import javafx.application.Platform;"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"import seedu.address.commons.events.logic.ZoomInEvent;"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"import seedu.address.commons.events.logic.ZoomOutEvent;"},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"import seedu.address.commons.events.model.AppointmentDeletedEvent;"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"import seedu.address.commons.events.model.NewAppointmentAddedEvent;"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":" * The Calendar Panel of the App."},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":" */"},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"public class CalendarPanel extends UiPart\u003cCalendarView\u003e {"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"    private static final String FXML \u003d \"CalendarPanel.fxml\";"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"    private static final String DATE_TIME_FORMAT \u003d \"dd/MM/yyyy HH:mm\";"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"    private static final String ENTRY_TITLE \u003d \"Appt: \";"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"    @javafx.fxml.FXML"},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"    private CalendarView calendarView;"},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"    private Calendar calendar;"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"    private PageBase pageBase;"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"    public CalendarPanel(ObservableList\u003cAppointment\u003e appointments) {"},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"        super(FXML);"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"        initializeCalendar();"},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":"        setUpCalendarView();"},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"        loadEntries(appointments);"},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"        updateTime();"},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":"    public CalendarView getCalendarView() {"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"        return calendarView;"},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":"    public PageBase getPageBase() {"},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":"        return pageBase;"},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":59,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"jlks96"},"content":"     * Initializes the calendar"},{"lineNumber":61,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"jlks96"},"content":"    private void initializeCalendar() {"},{"lineNumber":63,"author":{"gitID":"jlks96"},"content":"        calendar \u003d new Calendar(\"Appointments\");"},{"lineNumber":64,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":66,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"jlks96"},"content":"     * Sets up the calendar view"},{"lineNumber":68,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"jlks96"},"content":"    private void setUpCalendarView() {"},{"lineNumber":70,"author":{"gitID":"jlks96"},"content":"        CalendarSource calendarSource \u003d new CalendarSource(\"My Calendar\");"},{"lineNumber":71,"author":{"gitID":"jlks96"},"content":"        calendarSource.getCalendars().addAll(calendar);"},{"lineNumber":72,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":73,"author":{"gitID":"jlks96"},"content":"        calendarView.getCalendarSources().addAll(calendarSource);"},{"lineNumber":74,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":75,"author":{"gitID":"jlks96"},"content":"        calendarView.setRequestedTime(LocalTime.now());"},{"lineNumber":76,"author":{"gitID":"jlks96"},"content":"        calendarView.showMonthPage();"},{"lineNumber":77,"author":{"gitID":"jlks96"},"content":"        pageBase \u003d calendarView.getSelectedPage();"},{"lineNumber":78,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":80,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"jlks96"},"content":"     * Loads {@code appointments} into the calendar"},{"lineNumber":82,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"jlks96"},"content":"    private void loadEntries(ObservableList\u003cAppointment\u003e appointments) {"},{"lineNumber":84,"author":{"gitID":"jlks96"},"content":"        appointments.stream().forEach(this::loadEntry);"},{"lineNumber":85,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":87,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"jlks96"},"content":"     * Creates an entry with the {@code appointment} details and loads it into the calendar"},{"lineNumber":89,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"jlks96"},"content":"    private void loadEntry(Appointment appointment) {"},{"lineNumber":91,"author":{"gitID":"jlks96"},"content":"        String dateString \u003d appointment.getDate().date;"},{"lineNumber":92,"author":{"gitID":"jlks96"},"content":"        String startTimeString \u003d appointment.getStartTime().time;"},{"lineNumber":93,"author":{"gitID":"jlks96"},"content":"        String endTimeString \u003d appointment.getEndTime().time;"},{"lineNumber":94,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":95,"author":{"gitID":"jlks96"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DATE_TIME_FORMAT);"},{"lineNumber":96,"author":{"gitID":"jlks96"},"content":"        LocalDateTime startDateTime \u003d LocalDateTime.parse(dateString + \" \" + startTimeString, formatter);"},{"lineNumber":97,"author":{"gitID":"jlks96"},"content":"        LocalDateTime endDateTime \u003d LocalDateTime.parse(dateString + \" \" + endTimeString, formatter);"},{"lineNumber":98,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":99,"author":{"gitID":"jlks96"},"content":"        Entry entry \u003d new Entry();"},{"lineNumber":100,"author":{"gitID":"jlks96"},"content":"        entry.setInterval(startDateTime, endDateTime);"},{"lineNumber":101,"author":{"gitID":"jlks96"},"content":"        entry.setLocation(appointment.getLocation().value);"},{"lineNumber":102,"author":{"gitID":"jlks96"},"content":"        entry.setTitle(ENTRY_TITLE + appointment.getName() + \" \" + appointment.getLocation());"},{"lineNumber":103,"author":{"gitID":"jlks96"},"content":"        entry.setCalendar(calendar);"},{"lineNumber":104,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":106,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"jlks96"},"content":"     * Handles the event where a new appointment is added by loading the appointment into the calendar"},{"lineNumber":108,"author":{"gitID":"jlks96"},"content":"     * @param event contains the newly added appointment"},{"lineNumber":109,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"jlks96"},"content":"    @Subscribe"},{"lineNumber":111,"author":{"gitID":"jlks96"},"content":"    private void handleNewAppointmentAddedEvent(NewAppointmentAddedEvent event) {"},{"lineNumber":112,"author":{"gitID":"jlks96"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":113,"author":{"gitID":"jlks96"},"content":"        loadEntry(event.getAppointmentAdded());"},{"lineNumber":114,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":116,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"jlks96"},"content":"     * Handles the event where an appointment is deleted by loading the updated appointments list into the calendar"},{"lineNumber":118,"author":{"gitID":"jlks96"},"content":"     * @param event contains the updated appointments list"},{"lineNumber":119,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"jlks96"},"content":"    @Subscribe"},{"lineNumber":121,"author":{"gitID":"jlks96"},"content":"    private void handleAppointmentDeletedEvent(AppointmentDeletedEvent event) {"},{"lineNumber":122,"author":{"gitID":"jlks96"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":123,"author":{"gitID":"jlks96"},"content":"        calendar.clear();"},{"lineNumber":124,"author":{"gitID":"jlks96"},"content":"        loadEntries(event.getUpdatedAppointments());"},{"lineNumber":125,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":127,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"jlks96"},"content":"     * Handles the event where the user is trying to zoom in on the calendar"},{"lineNumber":129,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"jlks96"},"content":"    @Subscribe"},{"lineNumber":131,"author":{"gitID":"jlks96"},"content":"    private void handleZoomInEvent(ZoomInEvent event) {"},{"lineNumber":132,"author":{"gitID":"jlks96"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":133,"author":{"gitID":"jlks96"},"content":"        zoomIn();"},{"lineNumber":134,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":136,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"jlks96"},"content":"     * Zooms in on the calendar if possible"},{"lineNumber":138,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"jlks96"},"content":"    private void zoomIn() {"},{"lineNumber":140,"author":{"gitID":"jlks96"},"content":"        if (pageBase.equals(calendarView.getYearPage())) {"},{"lineNumber":141,"author":{"gitID":"jlks96"},"content":"            calendarView.showMonthPage();"},{"lineNumber":142,"author":{"gitID":"jlks96"},"content":"        } else if (pageBase.equals(calendarView.getMonthPage())) {"},{"lineNumber":143,"author":{"gitID":"jlks96"},"content":"            calendarView.showWeekPage();"},{"lineNumber":144,"author":{"gitID":"jlks96"},"content":"        } else if (pageBase.equals(calendarView.getWeekPage())) {"},{"lineNumber":145,"author":{"gitID":"jlks96"},"content":"            calendarView.showDayPage();"},{"lineNumber":146,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"jlks96"},"content":"        pageBase \u003d calendarView.getSelectedPage();"},{"lineNumber":148,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":150,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"jlks96"},"content":"     * Handles the event where the user is trying to zoom out on the calendar"},{"lineNumber":152,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"jlks96"},"content":"    @Subscribe"},{"lineNumber":154,"author":{"gitID":"jlks96"},"content":"    private void handleZoomOutEvent(ZoomOutEvent event) {"},{"lineNumber":155,"author":{"gitID":"jlks96"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":156,"author":{"gitID":"jlks96"},"content":"        zoomOut();"},{"lineNumber":157,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":159,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"jlks96"},"content":"     * Zooms out on the calendar if possible"},{"lineNumber":161,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"jlks96"},"content":"    private void zoomOut() {"},{"lineNumber":163,"author":{"gitID":"jlks96"},"content":"        if (pageBase.equals(calendarView.getDayPage())) {"},{"lineNumber":164,"author":{"gitID":"jlks96"},"content":"            calendarView.showWeekPage();"},{"lineNumber":165,"author":{"gitID":"jlks96"},"content":"        } else if (pageBase.equals(calendarView.getWeekPage())) {"},{"lineNumber":166,"author":{"gitID":"jlks96"},"content":"            calendarView.showMonthPage();"},{"lineNumber":167,"author":{"gitID":"jlks96"},"content":"        } else if (pageBase.equals(calendarView.getMonthPage())) {"},{"lineNumber":168,"author":{"gitID":"jlks96"},"content":"            calendarView.showYearPage();"},{"lineNumber":169,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"jlks96"},"content":"        pageBase \u003d calendarView.getSelectedPage();"},{"lineNumber":171,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":173,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"jlks96"},"content":"     * Update the current date and time shown in the calendar as a thread in the background"},{"lineNumber":175,"author":{"gitID":"jlks96"},"content":"     * Adapted from http://dlsc.com/wp-content/html/calendarfx/manual.html"},{"lineNumber":176,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"jlks96"},"content":"    private void updateTime() {"},{"lineNumber":178,"author":{"gitID":"jlks96"},"content":"        Thread updateTimeThread \u003d new Thread(\"Calendar: Update Time Thread\") {"},{"lineNumber":179,"author":{"gitID":"jlks96"},"content":"            @Override"},{"lineNumber":180,"author":{"gitID":"jlks96"},"content":"            public void run() {"},{"lineNumber":181,"author":{"gitID":"jlks96"},"content":"                while (true) {"},{"lineNumber":182,"author":{"gitID":"jlks96"},"content":"                    Platform.runLater(() -\u003e {"},{"lineNumber":183,"author":{"gitID":"jlks96"},"content":"                        calendarView.setToday(LocalDate.now());"},{"lineNumber":184,"author":{"gitID":"jlks96"},"content":"                        calendarView.setTime(LocalTime.now());"},{"lineNumber":185,"author":{"gitID":"jlks96"},"content":"                    });"},{"lineNumber":186,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":187,"author":{"gitID":"jlks96"},"content":"                    try {"},{"lineNumber":188,"author":{"gitID":"jlks96"},"content":"                        // update every 10 seconds"},{"lineNumber":189,"author":{"gitID":"jlks96"},"content":"                        sleep(10000);"},{"lineNumber":190,"author":{"gitID":"jlks96"},"content":"                    } catch (InterruptedException e) {"},{"lineNumber":191,"author":{"gitID":"jlks96"},"content":"                        e.printStackTrace();"},{"lineNumber":192,"author":{"gitID":"jlks96"},"content":"                    }"},{"lineNumber":193,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":194,"author":{"gitID":"jlks96"},"content":"                }"},{"lineNumber":195,"author":{"gitID":"jlks96"},"content":"            }"},{"lineNumber":196,"author":{"gitID":"jlks96"},"content":"        };"},{"lineNumber":197,"author":{"gitID":"jlks96"},"content":"        updateTimeThread.setPriority(Thread.MIN_PRIORITY);"},{"lineNumber":198,"author":{"gitID":"jlks96"},"content":"        updateTimeThread.setDaemon(true);"},{"lineNumber":199,"author":{"gitID":"jlks96"},"content":"        updateTimeThread.start();"},{"lineNumber":200,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":201}},{"path":"src/main/java/seedu/address/commons/events/logic/ZoomInEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.commons.events.logic;"},{"lineNumber":2,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"/** Indicates the user is trying to zoom in on the calendar*/"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"public class ZoomInEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"    public ZoomInEvent() { }"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":13,"-":2}},{"path":"src/main/java/seedu/address/commons/events/logic/ZoomOutEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.commons.events.logic;"},{"lineNumber":2,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"/** Indicates the user is trying to zoom out on the calendar*/"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"public class ZoomOutEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"    public ZoomOutEvent() { }"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":13,"-":2}},{"path":"src/main/java/seedu/address/commons/events/model/AddressBookChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/** Indicates the AddressBook in the model has changed*/"},{"lineNumber":7,"author":{"gitID":"-"},"content":"public class AddressBookChangedEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public final ReadOnlyAddressBook data;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public AddressBookChangedEvent(ReadOnlyAddressBook data) {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        this.data \u003d data;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"        return \"number of persons \" + data.getPersonList().size() + \", number of tags \" + data.getTagList().size()"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"                + \", number of appointments\" + data.getAppointmentList().size();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":2,"-":18}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"    /** Returns an unmodifiable view of the filtered list of appointments */"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":4,"-":27}},{"path":"src/main/java/seedu/address/commons/events/model/NewAppointmentAddedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":" * Indicates that a new appointment is added."},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":" */"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"public class NewAppointmentAddedEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"    private final Appointment appointmentAdded;"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"    public NewAppointmentAddedEvent(Appointment appointmentAdded) {"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"        this.appointmentAdded \u003d appointmentAdded;"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":"    public Appointment getAppointmentAdded() {"},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"        return appointmentAdded;"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":25,"-":1}},{"path":"src/main/java/seedu/address/commons/util/GmailUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"Ng95junwei"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":3,"author":{"gitID":"Ng95junwei"},"content":"import java.io.ByteArrayOutputStream;"},{"lineNumber":4,"author":{"gitID":"Ng95junwei"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"Ng95junwei"},"content":"import java.io.InputStream;"},{"lineNumber":6,"author":{"gitID":"Ng95junwei"},"content":"import java.io.InputStreamReader;"},{"lineNumber":7,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":8,"author":{"gitID":"Ng95junwei"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"Ng95junwei"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"Ng95junwei"},"content":"import java.util.Properties;"},{"lineNumber":11,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":12,"author":{"gitID":"Ng95junwei"},"content":"import javax.mail.MessagingException;"},{"lineNumber":13,"author":{"gitID":"Ng95junwei"},"content":"import javax.mail.Session;"},{"lineNumber":14,"author":{"gitID":"Ng95junwei"},"content":"import javax.mail.internet.InternetAddress;"},{"lineNumber":15,"author":{"gitID":"Ng95junwei"},"content":"import javax.mail.internet.MimeMessage;"},{"lineNumber":16,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":17,"author":{"gitID":"Ng95junwei"},"content":"import com.google.api.client.auth.oauth2.Credential;"},{"lineNumber":18,"author":{"gitID":"Ng95junwei"},"content":"import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;"},{"lineNumber":19,"author":{"gitID":"Ng95junwei"},"content":"import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;"},{"lineNumber":20,"author":{"gitID":"Ng95junwei"},"content":"import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;"},{"lineNumber":21,"author":{"gitID":"Ng95junwei"},"content":"import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;"},{"lineNumber":22,"author":{"gitID":"Ng95junwei"},"content":"import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;"},{"lineNumber":23,"author":{"gitID":"Ng95junwei"},"content":"import com.google.api.client.http.HttpTransport;"},{"lineNumber":24,"author":{"gitID":"Ng95junwei"},"content":"import com.google.api.client.json.JsonFactory;"},{"lineNumber":25,"author":{"gitID":"Ng95junwei"},"content":"import com.google.api.client.json.jackson2.JacksonFactory;"},{"lineNumber":26,"author":{"gitID":"Ng95junwei"},"content":"import com.google.api.client.util.Base64;"},{"lineNumber":27,"author":{"gitID":"Ng95junwei"},"content":"import com.google.api.client.util.store.FileDataStoreFactory;"},{"lineNumber":28,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":29,"author":{"gitID":"Ng95junwei"},"content":"import com.google.api.services.gmail.Gmail;"},{"lineNumber":30,"author":{"gitID":"Ng95junwei"},"content":"import com.google.api.services.gmail.GmailScopes;"},{"lineNumber":31,"author":{"gitID":"Ng95junwei"},"content":"import com.google.api.services.gmail.model.Message;"},{"lineNumber":32,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":33,"author":{"gitID":"Ng95junwei"},"content":"//@@author ng95junwei"},{"lineNumber":34,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":35,"author":{"gitID":"Ng95junwei"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"Ng95junwei"},"content":" * Provides handler to send emails from logged in user"},{"lineNumber":37,"author":{"gitID":"Ng95junwei"},"content":" */"},{"lineNumber":38,"author":{"gitID":"Ng95junwei"},"content":"public class GmailUtil {"},{"lineNumber":39,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":40,"author":{"gitID":"Ng95junwei"},"content":"    /** Application name. */"},{"lineNumber":41,"author":{"gitID":"Ng95junwei"},"content":"    private static final String APPLICATION_NAME \u003d"},{"lineNumber":42,"author":{"gitID":"Ng95junwei"},"content":"            \"Gmail API Java Quickstart\";"},{"lineNumber":43,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":44,"author":{"gitID":"Ng95junwei"},"content":"    /** Directory to store user credentials for this application. */"},{"lineNumber":45,"author":{"gitID":"Ng95junwei"},"content":"    private static final java.io.File DATA_STORE_DIR \u003d new java.io.File("},{"lineNumber":46,"author":{"gitID":"Ng95junwei"},"content":"            System.getProperty(\"user.home\"), \".credentials/gmail-java-quickstart\");"},{"lineNumber":47,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":48,"author":{"gitID":"Ng95junwei"},"content":"    /** Global instance of the {@link FileDataStoreFactory}. */"},{"lineNumber":49,"author":{"gitID":"Ng95junwei"},"content":"    private static FileDataStoreFactory dataStoreFactory;"},{"lineNumber":50,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":51,"author":{"gitID":"Ng95junwei"},"content":"    /** Global instance of the JSON factory. */"},{"lineNumber":52,"author":{"gitID":"Ng95junwei"},"content":"    private static final JsonFactory JSON_FACTORY \u003d"},{"lineNumber":53,"author":{"gitID":"Ng95junwei"},"content":"            JacksonFactory.getDefaultInstance();"},{"lineNumber":54,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":55,"author":{"gitID":"Ng95junwei"},"content":"    /** Global instance of the HTTP transport. */"},{"lineNumber":56,"author":{"gitID":"Ng95junwei"},"content":"    private static HttpTransport httpTransport;"},{"lineNumber":57,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":58,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":59,"author":{"gitID":"Ng95junwei"},"content":"    /** Global instance of the scopes required by this quickstart."},{"lineNumber":60,"author":{"gitID":"Ng95junwei"},"content":"     *"},{"lineNumber":61,"author":{"gitID":"Ng95junwei"},"content":"     * If modifying these scopes, delete your previously saved credentials"},{"lineNumber":62,"author":{"gitID":"Ng95junwei"},"content":"     * at ~/.credentials/gmail-java-quickstart"},{"lineNumber":63,"author":{"gitID":"Ng95junwei"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"Ng95junwei"},"content":"    private static final List\u003cString\u003e SCOPES \u003d"},{"lineNumber":65,"author":{"gitID":"Ng95junwei"},"content":"            Arrays.asList(GmailScopes.GMAIL_SEND);"},{"lineNumber":66,"author":{"gitID":"Ng95junwei"},"content":"    static {"},{"lineNumber":67,"author":{"gitID":"Ng95junwei"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"Ng95junwei"},"content":"            httpTransport \u003d GoogleNetHttpTransport.newTrustedTransport();"},{"lineNumber":69,"author":{"gitID":"Ng95junwei"},"content":"            dataStoreFactory \u003d new FileDataStoreFactory(DATA_STORE_DIR);"},{"lineNumber":70,"author":{"gitID":"Ng95junwei"},"content":"        } catch (Throwable t) {"},{"lineNumber":71,"author":{"gitID":"Ng95junwei"},"content":"            t.printStackTrace();"},{"lineNumber":72,"author":{"gitID":"Ng95junwei"},"content":"            System.exit(1);"},{"lineNumber":73,"author":{"gitID":"Ng95junwei"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"Ng95junwei"},"content":"    private Gmail service;"},{"lineNumber":76,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":77,"author":{"gitID":"Ng95junwei"},"content":"    public GmailUtil() throws IOException {"},{"lineNumber":78,"author":{"gitID":"Ng95junwei"},"content":"        this.service \u003d getGmailService();"},{"lineNumber":79,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"Ng95junwei"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"Ng95junwei"},"content":"     * Creates an authorized Credential object."},{"lineNumber":82,"author":{"gitID":"Ng95junwei"},"content":"     * @return an authorized Credential object."},{"lineNumber":83,"author":{"gitID":"Ng95junwei"},"content":"     * @throws IOException"},{"lineNumber":84,"author":{"gitID":"Ng95junwei"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"Ng95junwei"},"content":"    public static Credential authorize() throws IOException {"},{"lineNumber":86,"author":{"gitID":"Ng95junwei"},"content":"        // Load client secrets."},{"lineNumber":87,"author":{"gitID":"Ng95junwei"},"content":"        InputStream in \u003d"},{"lineNumber":88,"author":{"gitID":"Ng95junwei"},"content":"                GmailUtil.class.getResourceAsStream(\"/client_secret.json\");"},{"lineNumber":89,"author":{"gitID":"Ng95junwei"},"content":"        GoogleClientSecrets clientSecrets \u003d"},{"lineNumber":90,"author":{"gitID":"Ng95junwei"},"content":"                GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(in));"},{"lineNumber":91,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":92,"author":{"gitID":"Ng95junwei"},"content":"        // Build flow and trigger user authorization request."},{"lineNumber":93,"author":{"gitID":"Ng95junwei"},"content":"        GoogleAuthorizationCodeFlow flow \u003d"},{"lineNumber":94,"author":{"gitID":"Ng95junwei"},"content":"                new GoogleAuthorizationCodeFlow.Builder("},{"lineNumber":95,"author":{"gitID":"Ng95junwei"},"content":"                        httpTransport, JSON_FACTORY, clientSecrets, SCOPES)"},{"lineNumber":96,"author":{"gitID":"Ng95junwei"},"content":"                        .setDataStoreFactory(dataStoreFactory)"},{"lineNumber":97,"author":{"gitID":"Ng95junwei"},"content":"                        .setAccessType(\"offline\")"},{"lineNumber":98,"author":{"gitID":"Ng95junwei"},"content":"                        .build();"},{"lineNumber":99,"author":{"gitID":"Ng95junwei"},"content":"        Credential credential \u003d new AuthorizationCodeInstalledApp("},{"lineNumber":100,"author":{"gitID":"Ng95junwei"},"content":"                flow, new LocalServerReceiver()).authorize(\"user\");"},{"lineNumber":101,"author":{"gitID":"Ng95junwei"},"content":"        System.out.println("},{"lineNumber":102,"author":{"gitID":"Ng95junwei"},"content":"                \"Credentials saved to \" + DATA_STORE_DIR.getAbsolutePath());"},{"lineNumber":103,"author":{"gitID":"Ng95junwei"},"content":"        return credential;"},{"lineNumber":104,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":106,"author":{"gitID":"Ng95junwei"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"Ng95junwei"},"content":"     * Build and return an authorized Gmail client service."},{"lineNumber":108,"author":{"gitID":"Ng95junwei"},"content":"     * @return an authorized Gmail client service"},{"lineNumber":109,"author":{"gitID":"Ng95junwei"},"content":"     * @throws IOException"},{"lineNumber":110,"author":{"gitID":"Ng95junwei"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"Ng95junwei"},"content":"    public static Gmail getGmailService() throws IOException {"},{"lineNumber":112,"author":{"gitID":"Ng95junwei"},"content":"        Credential credential \u003d authorize();"},{"lineNumber":113,"author":{"gitID":"Ng95junwei"},"content":"        return new Gmail.Builder(httpTransport, JSON_FACTORY, credential)"},{"lineNumber":114,"author":{"gitID":"Ng95junwei"},"content":"                .setApplicationName(APPLICATION_NAME)"},{"lineNumber":115,"author":{"gitID":"Ng95junwei"},"content":"                .build();"},{"lineNumber":116,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":118,"author":{"gitID":"Ng95junwei"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"Ng95junwei"},"content":"     * Using inputs, generate MimeMessage type object to use to encapsulate message states."},{"lineNumber":120,"author":{"gitID":"Ng95junwei"},"content":"     * @param to"},{"lineNumber":121,"author":{"gitID":"Ng95junwei"},"content":"     * @param cc"},{"lineNumber":122,"author":{"gitID":"Ng95junwei"},"content":"     * @param from"},{"lineNumber":123,"author":{"gitID":"Ng95junwei"},"content":"     * @param subject"},{"lineNumber":124,"author":{"gitID":"Ng95junwei"},"content":"     * @param bodyText"},{"lineNumber":125,"author":{"gitID":"Ng95junwei"},"content":"     * @return MimeMessage to pass to createMessageWithEmail"},{"lineNumber":126,"author":{"gitID":"Ng95junwei"},"content":"     * @throws MessagingException"},{"lineNumber":127,"author":{"gitID":"Ng95junwei"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"Ng95junwei"},"content":"    private static MimeMessage createEmail(String to, String cc, String from, String subject, String bodyText)"},{"lineNumber":129,"author":{"gitID":"Ng95junwei"},"content":"            throws MessagingException {"},{"lineNumber":130,"author":{"gitID":"Ng95junwei"},"content":"        Properties props \u003d new Properties();"},{"lineNumber":131,"author":{"gitID":"Ng95junwei"},"content":"        Session session \u003d Session.getDefaultInstance(props, null);"},{"lineNumber":132,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":133,"author":{"gitID":"Ng95junwei"},"content":"        MimeMessage email \u003d new MimeMessage(session);"},{"lineNumber":134,"author":{"gitID":"Ng95junwei"},"content":"        InternetAddress tAddress \u003d new InternetAddress(to);"},{"lineNumber":135,"author":{"gitID":"Ng95junwei"},"content":"        InternetAddress cAddress \u003d cc.isEmpty() ? null : new InternetAddress(cc);"},{"lineNumber":136,"author":{"gitID":"Ng95junwei"},"content":"        InternetAddress fAddress \u003d new InternetAddress(from);"},{"lineNumber":137,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":138,"author":{"gitID":"Ng95junwei"},"content":"        email.setFrom(fAddress);"},{"lineNumber":139,"author":{"gitID":"Ng95junwei"},"content":"        if (cAddress !\u003d null) {"},{"lineNumber":140,"author":{"gitID":"Ng95junwei"},"content":"            email.addRecipient(javax.mail.Message.RecipientType.CC, cAddress);"},{"lineNumber":141,"author":{"gitID":"Ng95junwei"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"Ng95junwei"},"content":"        email.addRecipient(javax.mail.Message.RecipientType.TO, tAddress);"},{"lineNumber":143,"author":{"gitID":"Ng95junwei"},"content":"        email.setSubject(subject);"},{"lineNumber":144,"author":{"gitID":"Ng95junwei"},"content":"        email.setText(bodyText);"},{"lineNumber":145,"author":{"gitID":"Ng95junwei"},"content":"        return email;"},{"lineNumber":146,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":148,"author":{"gitID":"Ng95junwei"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"Ng95junwei"},"content":"     * Taking in MimeMessage email, generate a Message which can be used to send through Gmail api"},{"lineNumber":150,"author":{"gitID":"Ng95junwei"},"content":"     * @param email"},{"lineNumber":151,"author":{"gitID":"Ng95junwei"},"content":"     * @return"},{"lineNumber":152,"author":{"gitID":"Ng95junwei"},"content":"     * @throws MessagingException"},{"lineNumber":153,"author":{"gitID":"Ng95junwei"},"content":"     * @throws IOException"},{"lineNumber":154,"author":{"gitID":"Ng95junwei"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"Ng95junwei"},"content":"    private static Message createMessageWithEmail(MimeMessage email) throws MessagingException, IOException {"},{"lineNumber":156,"author":{"gitID":"Ng95junwei"},"content":"        ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();"},{"lineNumber":157,"author":{"gitID":"Ng95junwei"},"content":"        email.writeTo(baos);"},{"lineNumber":158,"author":{"gitID":"Ng95junwei"},"content":"        String encodedEmail \u003d Base64.encodeBase64URLSafeString(baos.toByteArray());"},{"lineNumber":159,"author":{"gitID":"Ng95junwei"},"content":"        Message message \u003d new Message();"},{"lineNumber":160,"author":{"gitID":"Ng95junwei"},"content":"        message.setRaw(encodedEmail);"},{"lineNumber":161,"author":{"gitID":"Ng95junwei"},"content":"        return message;"},{"lineNumber":162,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":164,"author":{"gitID":"Ng95junwei"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"Ng95junwei"},"content":"     * Start of the chain, takes all the inputs and generates Message using createMessageWithEmail and uses gmail"},{"lineNumber":166,"author":{"gitID":"Ng95junwei"},"content":"     * api to send the email out"},{"lineNumber":167,"author":{"gitID":"Ng95junwei"},"content":"     *"},{"lineNumber":168,"author":{"gitID":"Ng95junwei"},"content":"     * @param service"},{"lineNumber":169,"author":{"gitID":"Ng95junwei"},"content":"     * @param recipientEmail"},{"lineNumber":170,"author":{"gitID":"Ng95junwei"},"content":"     * @param ccEmail"},{"lineNumber":171,"author":{"gitID":"Ng95junwei"},"content":"     * @param fromEmail"},{"lineNumber":172,"author":{"gitID":"Ng95junwei"},"content":"     * @param title"},{"lineNumber":173,"author":{"gitID":"Ng95junwei"},"content":"     * @param message"},{"lineNumber":174,"author":{"gitID":"Ng95junwei"},"content":"     * @throws IOException"},{"lineNumber":175,"author":{"gitID":"Ng95junwei"},"content":"     * @throws MessagingException"},{"lineNumber":176,"author":{"gitID":"Ng95junwei"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"Ng95junwei"},"content":"    public static void send(Gmail service, String recipientEmail, String ccEmail, String fromEmail, String title,"},{"lineNumber":178,"author":{"gitID":"Ng95junwei"},"content":"                            String message) throws IOException, MessagingException {"},{"lineNumber":179,"author":{"gitID":"Ng95junwei"},"content":"        Message m \u003d createMessageWithEmail(createEmail(recipientEmail, ccEmail, fromEmail, title, message));"},{"lineNumber":180,"author":{"gitID":"Ng95junwei"},"content":"        service.users().messages().send(\"me\", m).execute();"},{"lineNumber":181,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":183,"author":{"gitID":"Ng95junwei"},"content":"    public Gmail getService() {"},{"lineNumber":184,"author":{"gitID":"Ng95junwei"},"content":"        return this.service;"},{"lineNumber":185,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":187,"author":{"gitID":"Ng95junwei"},"content":"}"}],"authorContributionMap":{"Ng95junwei":187}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"import java.util.Calendar;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.person.DateAdded;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":"            DateAdded dateAdded \u003d createDate();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":"            Person person \u003d new Person(name, phone, email, address, dateAdded, tagList);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"jlks96"},"content":"    //@@author jlks96"},{"lineNumber":62,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"jlks96"},"content":"     * Creates and returns a {@code DateAdded} with the dateAdded attribute representing the current date"},{"lineNumber":64,"author":{"gitID":"jlks96"},"content":"     * @return current date in the following format: dd/MM/yyyy"},{"lineNumber":65,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"jlks96"},"content":"    public DateAdded createDate() {"},{"lineNumber":67,"author":{"gitID":"jlks96"},"content":"        SimpleDateFormat dateFormatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"},{"lineNumber":68,"author":{"gitID":"jlks96"},"content":"        Calendar calendar \u003d Calendar.getInstance();"},{"lineNumber":69,"author":{"gitID":"jlks96"},"content":"        return new DateAdded(dateFormatter.format(calendar.getTime()));"},{"lineNumber":70,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"jlks96"},"content":"    //@@author"},{"lineNumber":72,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":17,"-":64}},{"path":"src/test/java/seedu/address/testutil/TypicalPersonsAndAppointmentsWithAutoDateGeneration.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests where all the {@code DateAdded}s are"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":" * automatically generated by the system."},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":" */"},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"public class TypicalPersonsAndAppointmentsWithAutoDateGeneration {"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\").withPhone(\"85355255\")"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"            .generateDate().withTags(\"friends\").build();"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\").generateDate().withEmail(\"johnd@example.com\")"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"            .withPhone(\"98765432\").withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").generateDate().build();"},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").generateDate().build();"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").generateDate().build();"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").generateDate().build();"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").generateDate().build();"},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"    // Manually added"},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").generateDate().build();"},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").generateDate().build();"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).generateDate()"},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":58,"author":{"gitID":"jlks96"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).generateDate()"},{"lineNumber":59,"author":{"gitID":"jlks96"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":60,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":61,"author":{"gitID":"jlks96"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":62,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":63,"author":{"gitID":"jlks96"},"content":"    public static final Appointment ALICE_APPT \u003d new AppointmentBuilder().withPersonName(\"Alice Pauline\")"},{"lineNumber":64,"author":{"gitID":"jlks96"},"content":"            .withDate(\"01/01/2018\").withStartTime(\"10:30\").withEndTime(\"11:30\")"},{"lineNumber":65,"author":{"gitID":"jlks96"},"content":"            .withLocation(\"123, Jurong West Ave 6, #08-111\").build();"},{"lineNumber":66,"author":{"gitID":"jlks96"},"content":"    public static final Appointment BENSON_APPT \u003d new AppointmentBuilder().withPersonName(\"Benson Meier\")"},{"lineNumber":67,"author":{"gitID":"jlks96"},"content":"            .withDate(\"02/02/2018\").withStartTime(\"10:30\").withEndTime(\"11:30\")"},{"lineNumber":68,"author":{"gitID":"jlks96"},"content":"            .withLocation(\"311, Clementi Ave 2, #02-25\").build();"},{"lineNumber":69,"author":{"gitID":"jlks96"},"content":"    public static final Appointment CARL_APPT \u003d new AppointmentBuilder().withPersonName(\"Carl Kurz\")"},{"lineNumber":70,"author":{"gitID":"jlks96"},"content":"            .withDate(\"03/03/2018\").withStartTime(\"10:30\").withEndTime(\"11:30\").withLocation(\"wall street\").build();"},{"lineNumber":71,"author":{"gitID":"jlks96"},"content":"    public static final Appointment DANIEL_APPT \u003d new AppointmentBuilder().withPersonName(\"Daniel Meier\")"},{"lineNumber":72,"author":{"gitID":"jlks96"},"content":"            .withDate(\"04/04/2018\").withStartTime(\"10:30\").withEndTime(\"11:30\").withLocation(\"10th street\").build();"},{"lineNumber":73,"author":{"gitID":"jlks96"},"content":"    public static final Appointment ELLE_APPT \u003d new AppointmentBuilder().withPersonName(\"Elle Meyer\")"},{"lineNumber":74,"author":{"gitID":"jlks96"},"content":"            .withDate(\"05/05/2018\").withStartTime(\"10:30\").withEndTime(\"11:30\").withLocation(\"michegan ave\").build();"},{"lineNumber":75,"author":{"gitID":"jlks96"},"content":"    public static final Appointment FIONA_APPT \u003d new AppointmentBuilder().withPersonName(\"Fiona Kunz\")"},{"lineNumber":76,"author":{"gitID":"jlks96"},"content":"            .withDate(\"06/06/2018\").withStartTime(\"10:30\").withEndTime(\"11:30\").withLocation(\"little tokyo\").build();"},{"lineNumber":77,"author":{"gitID":"jlks96"},"content":"    public static final Appointment GEORGE_APPT \u003d new AppointmentBuilder().withPersonName(\"George Best\")"},{"lineNumber":78,"author":{"gitID":"jlks96"},"content":"            .withDate(\"07/07/2018\").withStartTime(\"10:30\").withEndTime(\"11:30\").withLocation(\"4th street\").build();"},{"lineNumber":79,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":80,"author":{"gitID":"jlks96"},"content":"    private TypicalPersonsAndAppointmentsWithAutoDateGeneration() {} // prevents instantiation"},{"lineNumber":81,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":82,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"jlks96"},"content":"     * Returns an {@code AddressBook} with all the typical persons with auto date generation."},{"lineNumber":84,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"jlks96"},"content":"    public static AddressBook getTypicalAddressBookWithAutoDateGeneration() {"},{"lineNumber":86,"author":{"gitID":"jlks96"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":87,"author":{"gitID":"jlks96"},"content":"        for (Person person : getTypicalPersonsWithAutoDateGeneration()) {"},{"lineNumber":88,"author":{"gitID":"jlks96"},"content":"            try {"},{"lineNumber":89,"author":{"gitID":"jlks96"},"content":"                ab.addPerson(person);"},{"lineNumber":90,"author":{"gitID":"jlks96"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":91,"author":{"gitID":"jlks96"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":92,"author":{"gitID":"jlks96"},"content":"            }"},{"lineNumber":93,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"jlks96"},"content":"        for (Appointment appointment : getTypicalAppointments()) {"},{"lineNumber":95,"author":{"gitID":"jlks96"},"content":"            try {"},{"lineNumber":96,"author":{"gitID":"jlks96"},"content":"                ab.addAppointment(appointment);"},{"lineNumber":97,"author":{"gitID":"jlks96"},"content":"            } catch (DuplicateAppointmentException e) {"},{"lineNumber":98,"author":{"gitID":"jlks96"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":99,"author":{"gitID":"jlks96"},"content":"            }"},{"lineNumber":100,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"jlks96"},"content":"        return ab;"},{"lineNumber":102,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":104,"author":{"gitID":"jlks96"},"content":"    public static List\u003cPerson\u003e getTypicalPersonsWithAutoDateGeneration() {"},{"lineNumber":105,"author":{"gitID":"jlks96"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":106,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":108,"author":{"gitID":"jlks96"},"content":"    public static List\u003cAppointment\u003e getTypicalAppointments() {"},{"lineNumber":109,"author":{"gitID":"jlks96"},"content":"        return new ArrayList\u003c\u003e("},{"lineNumber":110,"author":{"gitID":"jlks96"},"content":"                Arrays.asList(ALICE_APPT, BENSON_APPT, CARL_APPT, DANIEL_APPT, ELLE_APPT, FIONA_APPT, GEORGE_APPT));"},{"lineNumber":111,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":91,"-":21}},{"path":"src/main/java/seedu/address/commons/events/model/AppointmentDeletedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":3,"author":{"gitID":"jlks96"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":" * Indicates that an appointment is deleted."},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":" */"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"public class AppointmentDeletedEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"    private final ObservableList\u003cAppointment\u003e updatedAppointments;"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"    public AppointmentDeletedEvent(ObservableList\u003cAppointment\u003e updatedAppointments) {"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"        this.updatedAppointments \u003d updatedAppointments;"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":"    public ObservableList\u003cAppointment\u003e getUpdatedAppointments() {"},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"        return updatedAppointments;"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":25,"-":1}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"import seedu.address.logic.commands.DeleteAppointmentCommand;"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"import seedu.address.logic.commands.DeleteBeforeCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":17,"author":{"gitID":"Ng95junwei"},"content":"import seedu.address.logic.commands.EmailCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":19,"author":{"gitID":"luca590"},"content":"import seedu.address.logic.commands.ExportContactsCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":23,"author":{"gitID":"luca590"},"content":"import seedu.address.logic.commands.ImportContactsCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"import seedu.address.logic.commands.ZoomInCommand;"},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"import seedu.address.logic.commands.ZoomOutCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"jlks96"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"jlks96"},"content":"        case EditCommand.COMMAND_ALIAS:"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"jlks96"},"content":"        case SelectCommand.COMMAND_ALIAS:"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"jlks96"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"jlks96"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"jlks96"},"content":"        case FindCommand.COMMAND_ALIAS:"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"luca590"},"content":"        //@@author luca590"},{"lineNumber":96,"author":{"gitID":"luca590"},"content":"        case ImportContactsCommand.COMMAND_WORD: //import contacts from csv"},{"lineNumber":97,"author":{"gitID":"luca590"},"content":"            return new ImportContactsCommandParser().parse(arguments);"},{"lineNumber":98,"author":{"gitID":"luca590"},"content":""},{"lineNumber":99,"author":{"gitID":"luca590"},"content":"        case ImportContactsCommand.COMMAND_ALIAS:"},{"lineNumber":100,"author":{"gitID":"luca590"},"content":"            return new ImportContactsCommandParser().parse(arguments);"},{"lineNumber":101,"author":{"gitID":"luca590"},"content":"        //@@author"},{"lineNumber":102,"author":{"gitID":"luca590"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"jlks96"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"jlks96"},"content":"        case HistoryCommand.COMMAND_ALIAS:"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"jlks96"},"content":"        case ExitCommand.COMMAND_ALIAS:"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"jlks96"},"content":"        case HelpCommand.COMMAND_ALIAS:"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"jlks96"},"content":"        case UndoCommand.COMMAND_ALIAS:"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"jlks96"},"content":"        case RedoCommand.COMMAND_ALIAS:"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"Ng95junwei"},"content":"        case EmailCommand.COMMAND_WORD:"},{"lineNumber":140,"author":{"gitID":"Ng95junwei"},"content":"            return new EmailCommandParser().parse(arguments);"},{"lineNumber":141,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":142,"author":{"gitID":"Ng95junwei"},"content":"        case EmailCommand.COMMAND_ALIAS:"},{"lineNumber":143,"author":{"gitID":"Ng95junwei"},"content":"            return new EmailCommandParser().parse(arguments);"},{"lineNumber":144,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":145,"author":{"gitID":"luca590"},"content":"        //@@author luca590"},{"lineNumber":146,"author":{"gitID":"luca590"},"content":"        case ExportContactsCommand.COMMAND_WORD: //export contacts from csv"},{"lineNumber":147,"author":{"gitID":"luca590"},"content":"            return new ExportContactsCommandParser().parse(arguments);"},{"lineNumber":148,"author":{"gitID":"luca590"},"content":""},{"lineNumber":149,"author":{"gitID":"luca590"},"content":"        case ExportContactsCommand.COMMAND_ALIAS:"},{"lineNumber":150,"author":{"gitID":"luca590"},"content":"            return new ExportContactsCommandParser().parse(arguments);"},{"lineNumber":151,"author":{"gitID":"luca590"},"content":"        //@@author"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"jlks96"},"content":"        //@@author jlks96"},{"lineNumber":154,"author":{"gitID":"jlks96"},"content":"        case DeleteBeforeCommand.COMMAND_WORD:"},{"lineNumber":155,"author":{"gitID":"jlks96"},"content":"            return new DeleteBeforeCommandParser().parse(arguments);"},{"lineNumber":156,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":157,"author":{"gitID":"jlks96"},"content":"        case DeleteBeforeCommand.COMMAND_ALIAS:"},{"lineNumber":158,"author":{"gitID":"jlks96"},"content":"            return new DeleteBeforeCommandParser().parse(arguments);"},{"lineNumber":159,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":160,"author":{"gitID":"jlks96"},"content":"        case AddAppointmentCommand.COMMAND_WORD:"},{"lineNumber":161,"author":{"gitID":"jlks96"},"content":"            return new AddAppointmentCommandParser().parse(arguments);"},{"lineNumber":162,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":163,"author":{"gitID":"jlks96"},"content":"        case AddAppointmentCommand.COMMAND_ALIAS:"},{"lineNumber":164,"author":{"gitID":"jlks96"},"content":"            return new AddAppointmentCommandParser().parse(arguments);"},{"lineNumber":165,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":166,"author":{"gitID":"jlks96"},"content":"        case DeleteAppointmentCommand.COMMAND_WORD:"},{"lineNumber":167,"author":{"gitID":"jlks96"},"content":"            return new DeleteAppointmentCommandParser().parse(arguments);"},{"lineNumber":168,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":169,"author":{"gitID":"jlks96"},"content":"        case DeleteAppointmentCommand.COMMAND_ALIAS:"},{"lineNumber":170,"author":{"gitID":"jlks96"},"content":"            return new DeleteAppointmentCommandParser().parse(arguments);"},{"lineNumber":171,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":172,"author":{"gitID":"jlks96"},"content":"        case ZoomInCommand.COMMAND_WORD:"},{"lineNumber":173,"author":{"gitID":"jlks96"},"content":"            return new ZoomInCommand();"},{"lineNumber":174,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":175,"author":{"gitID":"jlks96"},"content":"        case ZoomInCommand.COMMAND_ALIAS:"},{"lineNumber":176,"author":{"gitID":"jlks96"},"content":"            return new ZoomInCommand();"},{"lineNumber":177,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":178,"author":{"gitID":"jlks96"},"content":"        case ZoomOutCommand.COMMAND_WORD:"},{"lineNumber":179,"author":{"gitID":"jlks96"},"content":"            return new ZoomOutCommand();"},{"lineNumber":180,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":181,"author":{"gitID":"jlks96"},"content":"        case ZoomOutCommand.COMMAND_ALIAS:"},{"lineNumber":182,"author":{"gitID":"jlks96"},"content":"            return new ZoomOutCommand();"},{"lineNumber":183,"author":{"gitID":"jlks96"},"content":"        //@@author"},{"lineNumber":184,"author":{"gitID":"luca590"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":48,"luca590":18,"Ng95junwei":7,"-":117}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"    public static final Prefix PREFIX_STARTTIME \u003d new Prefix(\"st/\");"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"    public static final Prefix PREFIX_ENDTIME \u003d new Prefix(\"et/\");"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"l/\");"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":4,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/ExportContactsCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"luca590"},"content":"//@@author luca590"},{"lineNumber":2,"author":{"gitID":"luca590"},"content":""},{"lineNumber":3,"author":{"gitID":"luca590"},"content":"package seedu.address.logic.parser;"},{"lineNumber":4,"author":{"gitID":"luca590"},"content":""},{"lineNumber":5,"author":{"gitID":"luca590"},"content":"import seedu.address.logic.commands.ExportContactsCommand;"},{"lineNumber":6,"author":{"gitID":"luca590"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"luca590"},"content":""},{"lineNumber":8,"author":{"gitID":"luca590"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"luca590"},"content":" * Class to parse the export_contacts command"},{"lineNumber":10,"author":{"gitID":"luca590"},"content":" */"},{"lineNumber":11,"author":{"gitID":"luca590"},"content":"public class ExportContactsCommandParser implements Parser\u003cExportContactsCommand\u003e {"},{"lineNumber":12,"author":{"gitID":"luca590"},"content":""},{"lineNumber":13,"author":{"gitID":"luca590"},"content":"    public static final String FAILED_TO_PARSE \u003d"},{"lineNumber":14,"author":{"gitID":"luca590"},"content":"            \"Failed to parse import_contacts command\";"},{"lineNumber":15,"author":{"gitID":"luca590"},"content":""},{"lineNumber":16,"author":{"gitID":"luca590"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"luca590"},"content":"     * Parses the given {@code String} of arguments in the context of the ExportContactsCommand"},{"lineNumber":18,"author":{"gitID":"luca590"},"content":"     * and returns an ExportContactsCommand object for execution"},{"lineNumber":19,"author":{"gitID":"luca590"},"content":"     * Can recieve 1 or 0 arguments"},{"lineNumber":20,"author":{"gitID":"luca590"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"luca590"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"luca590"},"content":"    public ExportContactsCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"luca590"},"content":"        System.out.println(\"args is:\" + args);"},{"lineNumber":24,"author":{"gitID":"luca590"},"content":"        args \u003d args.trim();"},{"lineNumber":25,"author":{"gitID":"luca590"},"content":""},{"lineNumber":26,"author":{"gitID":"luca590"},"content":"        return (args.length() \u003e 1) ? new ExportContactsCommand(args) : new ExportContactsCommand();"},{"lineNumber":27,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"luca590"},"content":"}"},{"lineNumber":29,"author":{"gitID":"luca590"},"content":"//@@author"}],"authorContributionMap":{"luca590":29}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Date;"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.EndTime;"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Location;"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.PersonName;"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.StartTime;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.person.DateAdded;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":27,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"jlks96"},"content":"    //@@author jlks96"},{"lineNumber":149,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"jlks96"},"content":"     * Parses a {@code String date} into a {@code DateAdded}."},{"lineNumber":151,"author":{"gitID":"jlks96"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":152,"author":{"gitID":"jlks96"},"content":"     *"},{"lineNumber":153,"author":{"gitID":"jlks96"},"content":"     * @throws IllegalValueException if the given {@code date} is invalid."},{"lineNumber":154,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"jlks96"},"content":"    public static DateAdded parseDateAdded(String date) throws IllegalValueException {"},{"lineNumber":156,"author":{"gitID":"jlks96"},"content":"        requireNonNull(date);"},{"lineNumber":157,"author":{"gitID":"jlks96"},"content":"        String trimmedDate \u003d date.trim();"},{"lineNumber":158,"author":{"gitID":"jlks96"},"content":"        if (!DateAdded.isValidDate(trimmedDate)) {"},{"lineNumber":159,"author":{"gitID":"jlks96"},"content":"            throw new IllegalValueException(DateAdded.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":160,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"jlks96"},"content":"        return new DateAdded(trimmedDate);"},{"lineNumber":162,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":164,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"jlks96"},"content":"     * Parses a {@code Optional\u003cString\u003e date} into a {@code Optional\u003cDateAdded\u003e} if {@code date} is present."},{"lineNumber":166,"author":{"gitID":"jlks96"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":167,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"jlks96"},"content":"    public static Optional\u003cDateAdded\u003e parseDateAdded(Optional\u003cString\u003e date) throws IllegalValueException {"},{"lineNumber":169,"author":{"gitID":"jlks96"},"content":"        requireNonNull(date);"},{"lineNumber":170,"author":{"gitID":"jlks96"},"content":"        return date.isPresent() ? Optional.of(parseDateAdded(date.get())) : Optional.empty();"},{"lineNumber":171,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":173,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"jlks96"},"content":"     * Parses a {@code String date} into a {@code Date}."},{"lineNumber":175,"author":{"gitID":"jlks96"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":176,"author":{"gitID":"jlks96"},"content":"     *"},{"lineNumber":177,"author":{"gitID":"jlks96"},"content":"     * @throws IllegalValueException if the given {@code date} is invalid."},{"lineNumber":178,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"jlks96"},"content":"    public static Date parseDate(String date) throws IllegalValueException {"},{"lineNumber":180,"author":{"gitID":"jlks96"},"content":"        requireNonNull(date);"},{"lineNumber":181,"author":{"gitID":"jlks96"},"content":"        String trimmedDate \u003d date.trim();"},{"lineNumber":182,"author":{"gitID":"jlks96"},"content":"        if (!Date.isValidDate(trimmedDate)) {"},{"lineNumber":183,"author":{"gitID":"jlks96"},"content":"            throw new IllegalValueException(Date.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":184,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"jlks96"},"content":"        return new Date(trimmedDate);"},{"lineNumber":186,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":188,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":189,"author":{"gitID":"jlks96"},"content":"     * Parses a {@code Optional\u003cString\u003e date} into a {@code Optional\u003cDate\u003e} if {@code date} is present."},{"lineNumber":190,"author":{"gitID":"jlks96"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":191,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"jlks96"},"content":"    public static Optional\u003cDate\u003e parseDate(Optional\u003cString\u003e date) throws IllegalValueException {"},{"lineNumber":193,"author":{"gitID":"jlks96"},"content":"        requireNonNull(date);"},{"lineNumber":194,"author":{"gitID":"jlks96"},"content":"        return date.isPresent() ? Optional.of(parseDate(date.get())) : Optional.empty();"},{"lineNumber":195,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":197,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"jlks96"},"content":"     * Parses a {@code String name} into a {@code PersonName}."},{"lineNumber":199,"author":{"gitID":"jlks96"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":200,"author":{"gitID":"jlks96"},"content":"     *"},{"lineNumber":201,"author":{"gitID":"jlks96"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":202,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":203,"author":{"gitID":"jlks96"},"content":"    public static PersonName parsePersonName(String name) throws IllegalValueException {"},{"lineNumber":204,"author":{"gitID":"jlks96"},"content":"        requireNonNull(name);"},{"lineNumber":205,"author":{"gitID":"jlks96"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":206,"author":{"gitID":"jlks96"},"content":"        if (!PersonName.isValidName(trimmedName)) {"},{"lineNumber":207,"author":{"gitID":"jlks96"},"content":"            throw new IllegalValueException(PersonName.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":208,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"jlks96"},"content":"        return new PersonName(trimmedName);"},{"lineNumber":210,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":212,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":213,"author":{"gitID":"jlks96"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cPersonName\u003e} if {@code name} is present."},{"lineNumber":214,"author":{"gitID":"jlks96"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":215,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"jlks96"},"content":"    public static Optional\u003cPersonName\u003e parsePersonName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":217,"author":{"gitID":"jlks96"},"content":"        requireNonNull(name);"},{"lineNumber":218,"author":{"gitID":"jlks96"},"content":"        return name.isPresent() ? Optional.of(parsePersonName(name.get())) : Optional.empty();"},{"lineNumber":219,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":221,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":222,"author":{"gitID":"jlks96"},"content":"     * Parses a {@code String time} into a {@code StartTime}."},{"lineNumber":223,"author":{"gitID":"jlks96"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":224,"author":{"gitID":"jlks96"},"content":"     *"},{"lineNumber":225,"author":{"gitID":"jlks96"},"content":"     * @throws IllegalValueException if the given {@code time} is invalid."},{"lineNumber":226,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":227,"author":{"gitID":"jlks96"},"content":"    public static StartTime parseStartTime(String time) throws IllegalValueException {"},{"lineNumber":228,"author":{"gitID":"jlks96"},"content":"        requireNonNull(time);"},{"lineNumber":229,"author":{"gitID":"jlks96"},"content":"        String trimmedTime \u003d time.trim();"},{"lineNumber":230,"author":{"gitID":"jlks96"},"content":"        if (!StartTime.isValidTime(trimmedTime)) {"},{"lineNumber":231,"author":{"gitID":"jlks96"},"content":"            throw new IllegalValueException(StartTime.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":232,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":233,"author":{"gitID":"jlks96"},"content":"        return new StartTime(trimmedTime);"},{"lineNumber":234,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":236,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":237,"author":{"gitID":"jlks96"},"content":"     * Parses a {@code Optional\u003cString\u003e time} into a {@code Optional\u003cStartTime\u003e} if {@code time} is present."},{"lineNumber":238,"author":{"gitID":"jlks96"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":239,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":240,"author":{"gitID":"jlks96"},"content":"    public static Optional\u003cStartTime\u003e parseStartTime(Optional\u003cString\u003e time) throws IllegalValueException {"},{"lineNumber":241,"author":{"gitID":"jlks96"},"content":"        requireNonNull(time);"},{"lineNumber":242,"author":{"gitID":"jlks96"},"content":"        return time.isPresent() ? Optional.of(parseStartTime(time.get())) : Optional.empty();"},{"lineNumber":243,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":245,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":246,"author":{"gitID":"jlks96"},"content":"     * Parses a {@code String time} into a {@code EndTime}."},{"lineNumber":247,"author":{"gitID":"jlks96"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":248,"author":{"gitID":"jlks96"},"content":"     *"},{"lineNumber":249,"author":{"gitID":"jlks96"},"content":"     * @throws IllegalValueException if the given {@code time} is invalid."},{"lineNumber":250,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":251,"author":{"gitID":"jlks96"},"content":"    public static EndTime parseEndTime(String time) throws IllegalValueException {"},{"lineNumber":252,"author":{"gitID":"jlks96"},"content":"        requireNonNull(time);"},{"lineNumber":253,"author":{"gitID":"jlks96"},"content":"        String trimmedTime \u003d time.trim();"},{"lineNumber":254,"author":{"gitID":"jlks96"},"content":"        if (!EndTime.isValidTime(trimmedTime)) {"},{"lineNumber":255,"author":{"gitID":"jlks96"},"content":"            throw new IllegalValueException(EndTime.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":256,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":257,"author":{"gitID":"jlks96"},"content":"        return new EndTime(trimmedTime);"},{"lineNumber":258,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":260,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":261,"author":{"gitID":"jlks96"},"content":"     * Parses a {@code Optional\u003cString\u003e time} into a {@code Optional\u003cEndTime\u003e} if {@code time} is present."},{"lineNumber":262,"author":{"gitID":"jlks96"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":263,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":264,"author":{"gitID":"jlks96"},"content":"    public static Optional\u003cEndTime\u003e parseEndTime(Optional\u003cString\u003e time) throws IllegalValueException {"},{"lineNumber":265,"author":{"gitID":"jlks96"},"content":"        requireNonNull(time);"},{"lineNumber":266,"author":{"gitID":"jlks96"},"content":"        return time.isPresent() ? Optional.of(parseEndTime(time.get())) : Optional.empty();"},{"lineNumber":267,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":268,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":269,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":270,"author":{"gitID":"jlks96"},"content":"     * Parses a {@code String location} into a {@code Location}."},{"lineNumber":271,"author":{"gitID":"jlks96"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":272,"author":{"gitID":"jlks96"},"content":"     *"},{"lineNumber":273,"author":{"gitID":"jlks96"},"content":"     * @throws IllegalValueException if the given {@code location} is invalid."},{"lineNumber":274,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":275,"author":{"gitID":"jlks96"},"content":"    public static Location parseLocation(String location) throws IllegalValueException {"},{"lineNumber":276,"author":{"gitID":"jlks96"},"content":"        requireNonNull(location);"},{"lineNumber":277,"author":{"gitID":"jlks96"},"content":"        String trimmedLocation \u003d location.trim();"},{"lineNumber":278,"author":{"gitID":"jlks96"},"content":"        if (!Location.isValidLocation(trimmedLocation)) {"},{"lineNumber":279,"author":{"gitID":"jlks96"},"content":"            throw new IllegalValueException(Location.MESSAGE_LOCATION_CONSTRAINTS);"},{"lineNumber":280,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":281,"author":{"gitID":"jlks96"},"content":"        return new Location(trimmedLocation);"},{"lineNumber":282,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":283,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":284,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":285,"author":{"gitID":"jlks96"},"content":"     * Parses a {@code Optional\u003cString\u003e location} into a {@code Optional\u003cLocation\u003e} if {@code location} is present."},{"lineNumber":286,"author":{"gitID":"jlks96"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":287,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":288,"author":{"gitID":"jlks96"},"content":"    public static Optional\u003cLocation\u003e parseLocation(Optional\u003cString\u003e location) throws IllegalValueException {"},{"lineNumber":289,"author":{"gitID":"jlks96"},"content":"        requireNonNull(location);"},{"lineNumber":290,"author":{"gitID":"jlks96"},"content":"        return location.isPresent() ? Optional.of(parseLocation(location.get())) : Optional.empty();"},{"lineNumber":291,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":292,"author":{"gitID":"jlks96"},"content":"    //@@author"},{"lineNumber":293,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":295,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":296,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":297,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":298,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":299,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":300,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":301,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":303,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":304,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":305,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":306,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":307,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":310,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":311,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":312,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":313,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":314,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":315,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":316,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":317,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":318,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":319,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":320,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":152,"-":168}},{"path":"src/main/java/seedu/address/logic/parser/ImportContactsCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"luca590"},"content":"//@@author luca590"},{"lineNumber":2,"author":{"gitID":"luca590"},"content":""},{"lineNumber":3,"author":{"gitID":"luca590"},"content":"package seedu.address.logic.parser;"},{"lineNumber":4,"author":{"gitID":"luca590"},"content":""},{"lineNumber":5,"author":{"gitID":"luca590"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":6,"author":{"gitID":"luca590"},"content":""},{"lineNumber":7,"author":{"gitID":"luca590"},"content":"import seedu.address.logic.commands.ImportContactsCommand;"},{"lineNumber":8,"author":{"gitID":"luca590"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"luca590"},"content":""},{"lineNumber":10,"author":{"gitID":"luca590"},"content":""},{"lineNumber":11,"author":{"gitID":"luca590"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"luca590"},"content":" * Class to parse the import_contacts command"},{"lineNumber":13,"author":{"gitID":"luca590"},"content":" */"},{"lineNumber":14,"author":{"gitID":"luca590"},"content":"public class ImportContactsCommandParser implements Parser\u003cImportContactsCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"luca590"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"luca590"},"content":"     * Self explanitory."},{"lineNumber":17,"author":{"gitID":"luca590"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"luca590"},"content":"    public static final String FAILED_TO_PARSE \u003d"},{"lineNumber":19,"author":{"gitID":"luca590"},"content":"            \"Failed to parse import_contacts command\";"},{"lineNumber":20,"author":{"gitID":"luca590"},"content":""},{"lineNumber":21,"author":{"gitID":"luca590"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"luca590"},"content":"     * Parses the given {@code String} of arguments in the context of the ImportContactsCommand"},{"lineNumber":23,"author":{"gitID":"luca590"},"content":"     * and returns an ImportContactsCommand object for execution."},{"lineNumber":24,"author":{"gitID":"luca590"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":25,"author":{"gitID":"luca590"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"luca590"},"content":"    public ImportContactsCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitID":"luca590"},"content":"        try {"},{"lineNumber":28,"author":{"gitID":"luca590"},"content":"            requireNonNull(args);"},{"lineNumber":29,"author":{"gitID":"luca590"},"content":"            //only 1 argument supported now"},{"lineNumber":30,"author":{"gitID":"luca590"},"content":"            return new ImportContactsCommand(args);"},{"lineNumber":31,"author":{"gitID":"luca590"},"content":"        } catch (Exception e) {"},{"lineNumber":32,"author":{"gitID":"luca590"},"content":"            throw new ParseException(FAILED_TO_PARSE, e);"},{"lineNumber":33,"author":{"gitID":"luca590"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"luca590"},"content":"}"},{"lineNumber":36,"author":{"gitID":"luca590"},"content":"//@@author"}],"authorContributionMap":{"luca590":36}},{"path":"src/main/java/seedu/address/logic/parser/EmailCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"Ng95junwei"},"content":"import seedu.address.logic.commands.EmailCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"Ng95junwei"},"content":"public class EmailCommandParser implements Parser\u003cEmailCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * and returns an FindCommand object for execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"Ng95junwei"},"content":"    public EmailCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"Ng95junwei"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"Ng95junwei"},"content":"        if (trimmedArgs.isEmpty() || trimmedArgs.split(\"\\\\s+\").length !\u003d 2) {"},{"lineNumber":24,"author":{"gitID":"Ng95junwei"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"Ng95junwei"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"Ng95junwei"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":28,"author":{"gitID":"Ng95junwei"},"content":"        String nameKeyword \u003d trimmedArgs.split(\"\\\\s+\")[0];"},{"lineNumber":29,"author":{"gitID":"Ng95junwei"},"content":"        String[] nameKeywordArray \u003d new String[]{ nameKeyword };"},{"lineNumber":30,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":31,"author":{"gitID":"Ng95junwei"},"content":"        String searchTemplate \u003d trimmedArgs.split(\"\\\\s+\")[1];"},{"lineNumber":32,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":33,"author":{"gitID":"Ng95junwei"},"content":"        return new EmailCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywordArray)), searchTemplate);"},{"lineNumber":34,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":36,"author":{"gitID":"Ng95junwei"},"content":"}"}],"authorContributionMap":{"Ng95junwei":18,"-":18}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Deletes a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"    public static final String COMMAND_ALIAS \u003d \"d\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \": Deletes the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Person personToDelete;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        requireNonNull(personToDelete);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteCommand) other).personToDelete));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":1,"-":67}},{"path":"src/main/java/seedu/address/logic/parser/DeleteBeforeCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"import seedu.address.logic.commands.DeleteBeforeCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.person.DateAdded;"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":" * Parses input arguments and creates a new DeleteBeforeCommand object"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":" */"},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"public class DeleteBeforeCommandParser implements Parser\u003cDeleteBeforeCommand\u003e {"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteBeforeCommand"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"     * and returns an DeleteBeforeCommand object for execution."},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"    public DeleteBeforeCommand parse(String args) throws ParseException {"},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_TAG);"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_DATE, PREFIX_TAG)"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteBeforeCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"            DateAdded inputDate \u003d ParserUtil.parseDateAdded(argMultimap.getValue(PREFIX_DATE)).get();"},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"            Set\u003cTag\u003e inputTags \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"            SimpleDateFormat dateFormatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"            dateFormatter.parse(inputDate.toString()); //check if can parse inputDate, requires review"},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"            return new DeleteBeforeCommand(inputDate, inputTags);"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"        } catch (java.text.ParseException e) { //cannot parse dateAdded into a Date object"},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"            throw new ParseException("},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteBeforeCommand.MESSAGE_USAGE));"},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":58,"author":{"gitID":"jlks96"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":59,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":61,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":52,"-":9}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"    public static final String COMMAND_ALIAS \u003d \"l\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":1,"-":20}},{"path":"src/main/java/seedu/address/logic/commands/EmailCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"Ng95junwei"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":3,"author":{"gitID":"Ng95junwei"},"content":"import com.google.api.services.gmail.Gmail;"},{"lineNumber":4,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":5,"author":{"gitID":"Ng95junwei"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":7,"author":{"gitID":"Ng95junwei"},"content":"import seedu.address.commons.util.GmailUtil;"},{"lineNumber":8,"author":{"gitID":"Ng95junwei"},"content":"import seedu.address.model.email.Template;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"Ng95junwei"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":12,"author":{"gitID":"Ng95junwei"},"content":"//@@author ng95junwei"},{"lineNumber":13,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":14,"author":{"gitID":"Ng95junwei"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"Ng95junwei"},"content":" * Finds and emails all persons in address book whose name contains any of the argument keywords."},{"lineNumber":16,"author":{"gitID":"Ng95junwei"},"content":" * Keyword matching is case insensitive."},{"lineNumber":17,"author":{"gitID":"Ng95junwei"},"content":" */"},{"lineNumber":18,"author":{"gitID":"Ng95junwei"},"content":"public class EmailCommand extends Command {"},{"lineNumber":19,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":20,"author":{"gitID":"Ng95junwei"},"content":"    public static final String COMMAND_WORD \u003d \"email\";"},{"lineNumber":21,"author":{"gitID":"Ng95junwei"},"content":"    public static final String COMMAND_ALIAS \u003d \"em\";"},{"lineNumber":22,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":23,"author":{"gitID":"Ng95junwei"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Emails all persons whose names matches any of \""},{"lineNumber":24,"author":{"gitID":"Ng95junwei"},"content":"            + \"the specified keywords (case-insensitive) \""},{"lineNumber":25,"author":{"gitID":"Ng95junwei"},"content":"            + \"and displays them as a list with index numbers.\\n\""},{"lineNumber":26,"author":{"gitID":"Ng95junwei"},"content":"            + \"Parameters: NAME TEMPLATE\\n\""},{"lineNumber":27,"author":{"gitID":"Ng95junwei"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice coldemail\";"},{"lineNumber":28,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":29,"author":{"gitID":"Ng95junwei"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":30,"author":{"gitID":"Ng95junwei"},"content":"    private final String search;"},{"lineNumber":31,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":32,"author":{"gitID":"Ng95junwei"},"content":"    public EmailCommand(NameContainsKeywordsPredicate predicate, String search) {"},{"lineNumber":33,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":34,"author":{"gitID":"Ng95junwei"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":35,"author":{"gitID":"Ng95junwei"},"content":"        this.search \u003d search;"},{"lineNumber":36,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":38,"author":{"gitID":"Ng95junwei"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"Ng95junwei"},"content":"    public CommandResult execute() {"},{"lineNumber":40,"author":{"gitID":"Ng95junwei"},"content":"        // Build a new authorized API client service."},{"lineNumber":41,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":42,"author":{"gitID":"Ng95junwei"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":43,"author":{"gitID":"Ng95junwei"},"content":"        ObservableList\u003cPerson\u003e emailList \u003d model.getFilteredPersonList();"},{"lineNumber":44,"author":{"gitID":"Ng95junwei"},"content":"        for (Person p : emailList) {"},{"lineNumber":45,"author":{"gitID":"Ng95junwei"},"content":"            try {"},{"lineNumber":46,"author":{"gitID":"Ng95junwei"},"content":"                Template template \u003d model.selectTemplate(this.search);"},{"lineNumber":47,"author":{"gitID":"Ng95junwei"},"content":"                GmailUtil handler \u003d new GmailUtil();"},{"lineNumber":48,"author":{"gitID":"Ng95junwei"},"content":"                Gmail service \u003d handler.getService();"},{"lineNumber":49,"author":{"gitID":"Ng95junwei"},"content":"                handler.send(service, p.getEmail().toString(), \"\","},{"lineNumber":50,"author":{"gitID":"Ng95junwei"},"content":"                        service.users().getProfile(\"me\").getUserId(), template.getTitle(),"},{"lineNumber":51,"author":{"gitID":"Ng95junwei"},"content":"                        template.getMessage());"},{"lineNumber":52,"author":{"gitID":"Ng95junwei"},"content":"            } catch (Exception e) {"},{"lineNumber":53,"author":{"gitID":"Ng95junwei"},"content":"                System.out.println(e);"},{"lineNumber":54,"author":{"gitID":"Ng95junwei"},"content":"                System.out.println(\"Some Exception occurred\");"},{"lineNumber":55,"author":{"gitID":"Ng95junwei"},"content":"            }"},{"lineNumber":56,"author":{"gitID":"Ng95junwei"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"Ng95junwei"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":58,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":60,"author":{"gitID":"Ng95junwei"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"Ng95junwei"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitID":"Ng95junwei"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":63,"author":{"gitID":"Ng95junwei"},"content":"                || (other instanceof EmailCommand // instanceof handles nulls"},{"lineNumber":64,"author":{"gitID":"Ng95junwei"},"content":"                \u0026\u0026 this.predicate.equals(((EmailCommand) other).predicate)); // state check"},{"lineNumber":65,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"Ng95junwei"},"content":"}"},{"lineNumber":67,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":68,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":69,"author":{"gitID":"Ng95junwei"},"content":""}],"authorContributionMap":{"Ng95junwei":68,"-":1}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Clears the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"    public static final String COMMAND_ALIAS \u003d \"c\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        model.resetData(new AddressBook());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":1,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/RedoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Redo the previously undone command."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class RedoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"    public static final String COMMAND_ALIAS \u003d \"r\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canRedo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popRedo().redo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":1,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/Command.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"jlks96"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public abstract class Command {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    protected CommandHistory history;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    protected UndoRedoStack undoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of persons."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @return summary message for persons displayed"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static String getMessageForPersonListShownSummary(int displaySize) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result message."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @return feedback message of the operation result for display"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public abstract CommandResult execute() throws CommandException;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Provides any needed dependencies to the command."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Commands making use of any of these should override this method to gain"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * access to the dependencies."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"    //@@author jlks96"},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"     * Raises the event via {@link EventsCenter#post(BaseEvent)}"},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":"     * @param event"},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":"    protected void raise(BaseEvent event) {"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"        EventsCenter.getInstance().post(event);"},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":"    //@@author"},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":12,"-":43}},{"path":"src/main/java/seedu/address/logic/commands/ZoomInCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":3,"author":{"gitID":"jlks96"},"content":"import seedu.address.commons.events.logic.ZoomInEvent;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":" * Zooms in the calendar view to show a more detailed view"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":" */"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"public class ZoomInCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"    public static final String COMMAND_WORD \u003d \"zoomin\";"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"    public static final String COMMAND_ALIAS \u003d \"zi\";"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Calendar zoomed in\";"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"    public CommandResult execute() {"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"        raise(new ZoomInEvent());"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":20}},{"path":"src/main/java/seedu/address/logic/parser/AddAppointmentCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Date;"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.EndTime;"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Location;"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.PersonName;"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.StartTime;"},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":" * Parses input arguments and creates a new AddAppointmentCommand object"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":" */"},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"public class AddAppointmentCommandParser implements Parser\u003cAddAppointmentCommand\u003e {"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"     * Parses the given {@code String} of arguments in the context of the AddAppointmentCommand"},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"     * and returns an AddAppointmentCommand object for execution."},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"    public AddAppointmentCommand parse(String args) throws ParseException {"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize("},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"                args, PREFIX_NAME, PREFIX_DATE, PREFIX_STARTTIME, PREFIX_ENDTIME, PREFIX_LOCATION);"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"        if (!arePrefixesPresent("},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"                argMultimap, PREFIX_NAME, PREFIX_DATE, PREFIX_STARTTIME, PREFIX_ENDTIME, PREFIX_LOCATION)"},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"            throw new ParseException("},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"            PersonName name \u003d ParserUtil.parsePersonName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":"            Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE)).get();"},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"            StartTime startTime \u003d ParserUtil.parseStartTime(argMultimap.getValue(PREFIX_STARTTIME).get());"},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"            EndTime endTime \u003d ParserUtil.parseEndTime(argMultimap.getValue(PREFIX_ENDTIME).get());"},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"            Location location \u003d ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get());"},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":"            Appointment appointment \u003d new Appointment(name, date, startTime, endTime, location);"},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"            return new AddAppointmentCommand(appointment);"},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":58,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"jlks96"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":60,"author":{"gitID":"jlks96"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":61,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"jlks96"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":63,"author":{"gitID":"jlks96"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":64,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":57,"-":8}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":1,"-":67}},{"path":"src/main/java/seedu/address/logic/commands/HelpCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Format full help instructions for every command for display."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class HelpCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"    public static final String COMMAND_ALIAS \u003d \"h\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":1,"-":23}},{"path":"src/main/java/seedu/address/logic/commands/HistoryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Lists all the commands entered by user from the start of app launch."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class HistoryCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"history\";"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"    public static final String COMMAND_ALIAS \u003d \"hist\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        List\u003cString\u003e previousCommands \u003d history.getHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        if (previousCommands.isEmpty()) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_NO_HISTORY);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Collections.reverse(previousCommands);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireNonNull(history);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.history \u003d history;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":1,"-":38}},{"path":"src/main/java/seedu/address/logic/commands/ZoomOutCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":3,"author":{"gitID":"jlks96"},"content":"import seedu.address.commons.events.logic.ZoomOutEvent;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":" * Zooms out the calendar view to show a more general view"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":" */"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"public class ZoomOutCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"    public static final String COMMAND_WORD \u003d \"zoomout\";"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"    public static final String COMMAND_ALIAS \u003d \"zo\";"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Calendar zoomed out\";"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"    public CommandResult execute() {"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"        raise(new ZoomOutEvent());"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":20}},{"path":"src/main/java/seedu/address/logic/commands/DeleteAppointmentCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":" * Deletes an appointment that matches all the input fields from the address book."},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":" */"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"public class DeleteAppointmentCommand extends UndoableCommand {"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"    public static final String COMMAND_WORD \u003d \"deleteappointment\";"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"    public static final String COMMAND_ALIAS \u003d \"da\";"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"            + \": Deletes the appointment that matches all the input fields from the address book.\\n\""},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"            + \"Parameters: \""},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"            + PREFIX_DATE + \"DATE (must be in the format: dd/MM/yyyy) \""},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"            + PREFIX_STARTTIME + \"STARTTIME (must be in the 24 format: HH:mm) \""},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"            + PREFIX_ENDTIME + \"ENDTIME (must be in the 24 format: HH:mm) \""},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"            + PREFIX_LOCATION + \"LOCATION\\n\""},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"            + PREFIX_DATE + \"03/04/2018 \""},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"            + PREFIX_STARTTIME + \"10:30 \""},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"            + PREFIX_ENDTIME + \"11:30 \""},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"            + PREFIX_LOCATION + \"Century Garden\";"},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"    public static final String MESSAGE_DELETE_APPT_SUCCESS \u003d \"Deleted Appointment: %1$s\";"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"    private Appointment appointmentToDelete;"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"    public DeleteAppointmentCommand(Appointment appointmentToDelete) {"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"        this.appointmentToDelete \u003d appointmentToDelete;"},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":"        requireNonNull(appointmentToDelete);"},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":"            model.deleteAppointment(appointmentToDelete);"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"        } catch (AppointmentNotFoundException anfe) {"},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":"            throw new CommandException(Messages.MESSAGE_APPT_NOT_FOUND);"},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_APPT_SUCCESS, appointmentToDelete));"},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":59,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"jlks96"},"content":"    public boolean equals(Object other) {"},{"lineNumber":61,"author":{"gitID":"jlks96"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":62,"author":{"gitID":"jlks96"},"content":"                || (other instanceof DeleteAppointmentCommand // instanceof handles nulls"},{"lineNumber":63,"author":{"gitID":"jlks96"},"content":"                \u0026\u0026 this.appointmentToDelete.equals(((DeleteAppointmentCommand) other).appointmentToDelete));"},{"lineNumber":64,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":61,"-":4}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"    public static final String COMMAND_ALIAS \u003d \"s\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":1,"-":52}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.person.DateAdded;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"    public static final String COMMAND_ALIAS \u003d \"e\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":102,"author":{"gitID":"jlks96"},"content":"     * edited with {@code editPersonDescriptor}, while dateAdded of the {@code Person} remains unchanged."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":112,"author":{"gitID":"jlks96"},"content":"        DateAdded dateAdded \u003d personToEdit.getDateAdded(); //dateAdded should not changed"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"jlks96"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, dateAdded, updatedTags);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":150,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":151,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":152,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":162,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":163,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.tags);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":201,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":202,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":203,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":209,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":210,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":211,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":212,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":222,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":227,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":230,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":233,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":234,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":235,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":236,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":5,"-":234}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Ng95junwei"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"    public static final String COMMAND_ALIAS \u003d \"f\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""},{"lineNumber":15,"author":{"gitID":"Ng95junwei"},"content":"            + \"the specified keywords (case-insensitive)\""},{"lineNumber":16,"author":{"gitID":"Ng95junwei"},"content":"            + \" or part thereof and displays them as a list with index numbers.\\n\""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"Ng95junwei"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"Ng95junwei"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":1,"Ng95junwei":5,"-":32}},{"path":"src/main/java/seedu/address/logic/commands/DeleteBeforeCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.PersonIsAddedBeforeDateInputAndContainsTagsPredicate;"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.person.DateAdded;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":" * Deletes all persons with specified tags added before the date input by user."},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":" */"},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"public class  DeleteBeforeCommand extends UndoableCommand {"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":"    public static final String COMMAND_WORD \u003d \"deletebefore\";"},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"    public static final String COMMAND_ALIAS \u003d \"db\";"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"            + \": Deletes all persons added before the input date.\\n\""},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"            + \"Parameters: \""},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"            + PREFIX_DATE + \"DATE (must be in the format: dd/MM/yyyy) \""},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"            + PREFIX_DATE + \"01/01/2010 \""},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"            + PREFIX_TAG + \"non-client\""},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"            + PREFIX_TAG + \"cash cow\";"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"    public static final String MESSAGE_DELETE_PERSONS_SUCCESS \u003d \"Deleted %d persons with tags %s added before %s\";"},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"    private final DateAdded inputDate;"},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"    private final Set\u003cTag\u003e inputTags;"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"    private final PersonIsAddedBeforeDateInputAndContainsTagsPredicate predicate;"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"    private int totalPersonsDeleted;"},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"    public DeleteBeforeCommand(DateAdded inputDate, Set\u003cTag\u003e inputTags) {"},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":"        this.inputDate \u003d inputDate;"},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"        this.inputTags \u003d inputTags;"},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"        this.predicate \u003d new PersonIsAddedBeforeDateInputAndContainsTagsPredicate(inputTags, inputDate.toString());"},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":"        requireNonNull(predicate);"},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":"        totalPersonsDeleted \u003d model.getFilteredPersonList().size();"},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":"        if (totalPersonsDeleted \u003c\u003d 0) {"},{"lineNumber":58,"author":{"gitID":"jlks96"},"content":"            model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":59,"author":{"gitID":"jlks96"},"content":"            throw new CommandException(Messages.MESSAGE_PERSONS_NOT_FOUND);"},{"lineNumber":60,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":62,"author":{"gitID":"jlks96"},"content":"        try {"},{"lineNumber":63,"author":{"gitID":"jlks96"},"content":"            model.deletePersons(model.getFilteredPersonList());"},{"lineNumber":64,"author":{"gitID":"jlks96"},"content":"            model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":65,"author":{"gitID":"jlks96"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":66,"author":{"gitID":"jlks96"},"content":"            throw new AssertionError(\"Must have a least one person in the list\");"},{"lineNumber":67,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"jlks96"},"content":"        return new CommandResult("},{"lineNumber":69,"author":{"gitID":"jlks96"},"content":"                String.format(MESSAGE_DELETE_PERSONS_SUCCESS, totalPersonsDeleted, inputTags, inputDate));"},{"lineNumber":70,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":72,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"jlks96"},"content":"    public boolean equals(Object other) {"},{"lineNumber":74,"author":{"gitID":"jlks96"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":75,"author":{"gitID":"jlks96"},"content":"                || (other instanceof DeleteBeforeCommand // instanceof handles nulls"},{"lineNumber":76,"author":{"gitID":"jlks96"},"content":"                \u0026\u0026 this.inputDate.equals(((DeleteBeforeCommand) other).inputDate)); // state check"},{"lineNumber":77,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":70,"-":8}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Terminates the program."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class ExitCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"    public static final String COMMAND_ALIAS \u003d \"ex\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ExitAppRequestEvent());"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":1,"-":21}},{"path":"src/main/java/seedu/address/logic/commands/ImportContactsCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"luca590"},"content":"//@@author luca590"},{"lineNumber":2,"author":{"gitID":"luca590"},"content":""},{"lineNumber":3,"author":{"gitID":"luca590"},"content":"package seedu.address.logic.commands;"},{"lineNumber":4,"author":{"gitID":"luca590"},"content":""},{"lineNumber":5,"author":{"gitID":"luca590"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":6,"author":{"gitID":"luca590"},"content":""},{"lineNumber":7,"author":{"gitID":"luca590"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"luca590"},"content":"import java.io.Reader;"},{"lineNumber":9,"author":{"gitID":"luca590"},"content":"import java.nio.file.Files;"},{"lineNumber":10,"author":{"gitID":"luca590"},"content":"import java.nio.file.Paths;"},{"lineNumber":11,"author":{"gitID":"luca590"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":12,"author":{"gitID":"luca590"},"content":""},{"lineNumber":13,"author":{"gitID":"luca590"},"content":"import java.util.Date;"},{"lineNumber":14,"author":{"gitID":"luca590"},"content":"import java.util.HashSet;"},{"lineNumber":15,"author":{"gitID":"luca590"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitID":"luca590"},"content":""},{"lineNumber":17,"author":{"gitID":"luca590"},"content":"import org.apache.commons.csv.CSVFormat;"},{"lineNumber":18,"author":{"gitID":"luca590"},"content":"import org.apache.commons.csv.CSVParser;"},{"lineNumber":19,"author":{"gitID":"luca590"},"content":"import org.apache.commons.csv.CSVRecord;"},{"lineNumber":20,"author":{"gitID":"luca590"},"content":""},{"lineNumber":21,"author":{"gitID":"luca590"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"luca590"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"luca590"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":24,"author":{"gitID":"luca590"},"content":"import seedu.address.model.person.DateAdded;"},{"lineNumber":25,"author":{"gitID":"luca590"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":26,"author":{"gitID":"luca590"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":27,"author":{"gitID":"luca590"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"luca590"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":29,"author":{"gitID":"luca590"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":30,"author":{"gitID":"luca590"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":31,"author":{"gitID":"luca590"},"content":""},{"lineNumber":32,"author":{"gitID":"luca590"},"content":""},{"lineNumber":33,"author":{"gitID":"luca590"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"luca590"},"content":" * This class borrows from."},{"lineNumber":35,"author":{"gitID":"luca590"},"content":" *https://www.callicoder.com/java-read-write-csv-file-apache-commons-csv/"},{"lineNumber":36,"author":{"gitID":"luca590"},"content":" *and https://github.com/callicoder/java-read-write-csv-file"},{"lineNumber":37,"author":{"gitID":"luca590"},"content":" */"},{"lineNumber":38,"author":{"gitID":"luca590"},"content":"public final class ImportContactsCommand extends UndoableCommand {"},{"lineNumber":39,"author":{"gitID":"luca590"},"content":"    public static final String COMMAND_WORD \u003d \"import_contacts\";"},{"lineNumber":40,"author":{"gitID":"luca590"},"content":"    public static final String COMMAND_ALIAS \u003d \"ic\";"},{"lineNumber":41,"author":{"gitID":"luca590"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Contacts successfully imported.\\n\";"},{"lineNumber":42,"author":{"gitID":"luca590"},"content":"    public static final String MESSAGE_FILE_SUCCESS_OPEN \u003d \"File was successfully opened.\\n\";"},{"lineNumber":43,"author":{"gitID":"luca590"},"content":"    public static final String MESSAGE_FILE_FAILED_OPEN \u003d"},{"lineNumber":44,"author":{"gitID":"luca590"},"content":"            \"File failed to open. Please try a different address \""},{"lineNumber":45,"author":{"gitID":"luca590"},"content":"                    + \"or check if file may be corrupt.\\n\";"},{"lineNumber":46,"author":{"gitID":"luca590"},"content":"    public static final String MESSAGE_FILE_NOT_FOUND \u003d \"No file was found at the address provided. \""},{"lineNumber":47,"author":{"gitID":"luca590"},"content":"            + \"Please provide anotehr address.\\n\";"},{"lineNumber":48,"author":{"gitID":"luca590"},"content":"    public static final String MESSAGE_NO_ADDRESS \u003d"},{"lineNumber":49,"author":{"gitID":"luca590"},"content":"            \"No address was provided, please provide an address to a csv, from which to import the file\\n\";"},{"lineNumber":50,"author":{"gitID":"luca590"},"content":"    /*"},{"lineNumber":51,"author":{"gitID":"luca590"},"content":"     * private global variables used for reading CSV"},{"lineNumber":52,"author":{"gitID":"luca590"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"luca590"},"content":"    private String fileAddress;"},{"lineNumber":54,"author":{"gitID":"luca590"},"content":"    private CSVParser csvParser;"},{"lineNumber":55,"author":{"gitID":"luca590"},"content":""},{"lineNumber":56,"author":{"gitID":"luca590"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"luca590"},"content":"     * Constructor takes file to read (@param fa)"},{"lineNumber":58,"author":{"gitID":"luca590"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"luca590"},"content":"    public ImportContactsCommand(final String fa) throws Exception {"},{"lineNumber":60,"author":{"gitID":"luca590"},"content":"        //This throws IOException if _fileAddress is null"},{"lineNumber":61,"author":{"gitID":"luca590"},"content":"        try {"},{"lineNumber":62,"author":{"gitID":"luca590"},"content":"            requireNonNull(fa);"},{"lineNumber":63,"author":{"gitID":"luca590"},"content":"        } catch (Exception e) {"},{"lineNumber":64,"author":{"gitID":"luca590"},"content":"            throw new Exception(\"Address passed to \""},{"lineNumber":65,"author":{"gitID":"luca590"},"content":"                    + \"ImportContactsCommand constructor is null\");"},{"lineNumber":66,"author":{"gitID":"luca590"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"luca590"},"content":"        fileAddress \u003d fa.trim();"},{"lineNumber":68,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"luca590"},"content":""},{"lineNumber":70,"author":{"gitID":"luca590"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"luca590"},"content":"     * Tries to open csv file, throws exception if problem"},{"lineNumber":72,"author":{"gitID":"luca590"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"luca590"},"content":"    public CommandResult openFile() throws Exception {"},{"lineNumber":74,"author":{"gitID":"luca590"},"content":"        Reader reader;"},{"lineNumber":75,"author":{"gitID":"luca590"},"content":"        try {"},{"lineNumber":76,"author":{"gitID":"luca590"},"content":"            reader \u003d Files.newBufferedReader(Paths.get(fileAddress));"},{"lineNumber":77,"author":{"gitID":"luca590"},"content":"        } catch (Exception e) {"},{"lineNumber":78,"author":{"gitID":"luca590"},"content":"            e.printStackTrace();"},{"lineNumber":79,"author":{"gitID":"luca590"},"content":"            throw new CommandException(\"Reader failed in openFile()\\n\");"},{"lineNumber":80,"author":{"gitID":"luca590"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"luca590"},"content":"        csvParser \u003d new CSVParser(reader, CSVFormat.DEFAULT"},{"lineNumber":82,"author":{"gitID":"luca590"},"content":"                    .withFirstRecordAsHeader()"},{"lineNumber":83,"author":{"gitID":"luca590"},"content":"                    .withIgnoreHeaderCase()"},{"lineNumber":84,"author":{"gitID":"luca590"},"content":"                    .withTrim());"},{"lineNumber":85,"author":{"gitID":"luca590"},"content":"        return new CommandResult(MESSAGE_FILE_SUCCESS_OPEN + \"from : \" + fileAddress);"},{"lineNumber":86,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"luca590"},"content":""},{"lineNumber":88,"author":{"gitID":"luca590"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"luca590"},"content":"     * Used for printing to console when contacts are added"},{"lineNumber":90,"author":{"gitID":"luca590"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"luca590"},"content":"    public void printResult(final String n, final String e, final String p, final String a) {"},{"lineNumber":92,"author":{"gitID":"luca590"},"content":"        System.out.println(\"---------------\");"},{"lineNumber":93,"author":{"gitID":"luca590"},"content":"        System.out.println(\"Name : \" + n);"},{"lineNumber":94,"author":{"gitID":"luca590"},"content":"        System.out.println(\"Email : \" + e);"},{"lineNumber":95,"author":{"gitID":"luca590"},"content":"        System.out.println(\"Phone : \" + p);"},{"lineNumber":96,"author":{"gitID":"luca590"},"content":"        System.out.println(\"Address : \" + a);"},{"lineNumber":97,"author":{"gitID":"luca590"},"content":"        System.out.println(\"---------------\\n\\n\");"},{"lineNumber":98,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"luca590"},"content":""},{"lineNumber":100,"author":{"gitID":"luca590"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"luca590"},"content":"     * If file has been opened successfully, it iterates"},{"lineNumber":102,"author":{"gitID":"luca590"},"content":"     * over the rows of the csv after finding the headers"},{"lineNumber":103,"author":{"gitID":"luca590"},"content":"     * \"Name\", \"Email\", etc"},{"lineNumber":104,"author":{"gitID":"luca590"},"content":"     * Makes a Person out of each row"},{"lineNumber":105,"author":{"gitID":"luca590"},"content":"     * calls executeUndoableCommand() on new Person"},{"lineNumber":106,"author":{"gitID":"luca590"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"luca590"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"luca590"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":109,"author":{"gitID":"luca590"},"content":"        Person personToAdd;"},{"lineNumber":110,"author":{"gitID":"luca590"},"content":"        String name;"},{"lineNumber":111,"author":{"gitID":"luca590"},"content":"        String email;"},{"lineNumber":112,"author":{"gitID":"luca590"},"content":"        String phone;"},{"lineNumber":113,"author":{"gitID":"luca590"},"content":"        String address;"},{"lineNumber":114,"author":{"gitID":"luca590"},"content":"        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":115,"author":{"gitID":"luca590"},"content":""},{"lineNumber":116,"author":{"gitID":"luca590"},"content":"        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"},{"lineNumber":117,"author":{"gitID":"luca590"},"content":"        Date date \u003d new Date();"},{"lineNumber":118,"author":{"gitID":"luca590"},"content":"        DateAdded addDate;"},{"lineNumber":119,"author":{"gitID":"luca590"},"content":""},{"lineNumber":120,"author":{"gitID":"luca590"},"content":"        try {"},{"lineNumber":121,"author":{"gitID":"luca590"},"content":"            System.out.println(\"Opening... \" + fileAddress);"},{"lineNumber":122,"author":{"gitID":"luca590"},"content":"            openFile(); //open the file to add users"},{"lineNumber":123,"author":{"gitID":"luca590"},"content":"        } catch (Exception e) {"},{"lineNumber":124,"author":{"gitID":"luca590"},"content":"            throw new CommandException(\"Cannot open file in executeUndoableCommand in \""},{"lineNumber":125,"author":{"gitID":"luca590"},"content":"                    + \"ImportContactsCommand Class\\n\""},{"lineNumber":126,"author":{"gitID":"luca590"},"content":"                    + \"Make sure the path is not in quotations and contains .csv at the end\""},{"lineNumber":127,"author":{"gitID":"luca590"},"content":"                    + e.getMessage());"},{"lineNumber":128,"author":{"gitID":"luca590"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"luca590"},"content":""},{"lineNumber":130,"author":{"gitID":"luca590"},"content":"        try {"},{"lineNumber":131,"author":{"gitID":"luca590"},"content":"            Iterable\u003cCSVRecord\u003e csvRecords \u003d csvParser.getRecords();"},{"lineNumber":132,"author":{"gitID":"luca590"},"content":"            requireNonNull(csvRecords);"},{"lineNumber":133,"author":{"gitID":"luca590"},"content":""},{"lineNumber":134,"author":{"gitID":"luca590"},"content":"            for (CSVRecord csvRecord : csvRecords) { //iterate through the"},{"lineNumber":135,"author":{"gitID":"luca590"},"content":"                // Accessing values by Header names"},{"lineNumber":136,"author":{"gitID":"luca590"},"content":"                name \u003d csvRecord.get(\"Name\");"},{"lineNumber":137,"author":{"gitID":"luca590"},"content":"                email \u003d csvRecord.get(\"Email\");"},{"lineNumber":138,"author":{"gitID":"luca590"},"content":"                phone \u003d csvRecord.get(\"Phone\");"},{"lineNumber":139,"author":{"gitID":"luca590"},"content":"                address \u003d csvRecord.get(\"Address\");"},{"lineNumber":140,"author":{"gitID":"luca590"},"content":"                addDate \u003d new DateAdded(formatter.format(date));"},{"lineNumber":141,"author":{"gitID":"luca590"},"content":""},{"lineNumber":142,"author":{"gitID":"luca590"},"content":"                printResult(name, email, phone, address); //mainly for debugging"},{"lineNumber":143,"author":{"gitID":"luca590"},"content":""},{"lineNumber":144,"author":{"gitID":"luca590"},"content":"                tagSet.add(new Tag(\"friend\")); //temporary tag, fix later"},{"lineNumber":145,"author":{"gitID":"luca590"},"content":""},{"lineNumber":146,"author":{"gitID":"luca590"},"content":"                personToAdd \u003d new Person(new Name(name),"},{"lineNumber":147,"author":{"gitID":"luca590"},"content":"                        new Phone(phone), new Email(email),"},{"lineNumber":148,"author":{"gitID":"luca590"},"content":"                        new Address(address), addDate, tagSet);"},{"lineNumber":149,"author":{"gitID":"luca590"},"content":""},{"lineNumber":150,"author":{"gitID":"luca590"},"content":"                UniquePersonList upl \u003d new UniquePersonList(); //need to change this later to get current model"},{"lineNumber":151,"author":{"gitID":"luca590"},"content":""},{"lineNumber":152,"author":{"gitID":"luca590"},"content":"                try {"},{"lineNumber":153,"author":{"gitID":"luca590"},"content":"                    requireNonNull(model);"},{"lineNumber":154,"author":{"gitID":"luca590"},"content":"                } catch (Exception e) {"},{"lineNumber":155,"author":{"gitID":"luca590"},"content":"                    throw new CommandException(\"Model is null in ImportContactsCommand -\u003e executeUndoableCommand\");"},{"lineNumber":156,"author":{"gitID":"luca590"},"content":"                }"},{"lineNumber":157,"author":{"gitID":"luca590"},"content":""},{"lineNumber":158,"author":{"gitID":"luca590"},"content":"                try {"},{"lineNumber":159,"author":{"gitID":"luca590"},"content":"                    model.addPerson(personToAdd);"},{"lineNumber":160,"author":{"gitID":"luca590"},"content":"                    model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":161,"author":{"gitID":"luca590"},"content":"                } catch (Exception e) {"},{"lineNumber":162,"author":{"gitID":"luca590"},"content":"                    throw new CommandException(\"Failed to add person in ImportContactsCommand, execute()\\n\""},{"lineNumber":163,"author":{"gitID":"luca590"},"content":"                            + e);"},{"lineNumber":164,"author":{"gitID":"luca590"},"content":"                }"},{"lineNumber":165,"author":{"gitID":"luca590"},"content":""},{"lineNumber":166,"author":{"gitID":"luca590"},"content":"            }"},{"lineNumber":167,"author":{"gitID":"luca590"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":168,"author":{"gitID":"luca590"},"content":"        } catch (IOException ioe) {"},{"lineNumber":169,"author":{"gitID":"luca590"},"content":"            throw new CommandException("},{"lineNumber":170,"author":{"gitID":"luca590"},"content":"                    \"IOException caught in executeUndoableCommand in ImportContactsCommand\");"},{"lineNumber":171,"author":{"gitID":"luca590"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"luca590"},"content":""},{"lineNumber":174,"author":{"gitID":"luca590"},"content":"    public String getFileAddress() {"},{"lineNumber":175,"author":{"gitID":"luca590"},"content":"        return fileAddress;"},{"lineNumber":176,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"luca590"},"content":"}"},{"lineNumber":178,"author":{"gitID":"luca590"},"content":"//@@author"}],"authorContributionMap":{"luca590":178}},{"path":"src/main/java/seedu/address/logic/commands/ExportContactsCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"luca590"},"content":"//@@author luca590"},{"lineNumber":2,"author":{"gitID":"luca590"},"content":""},{"lineNumber":3,"author":{"gitID":"luca590"},"content":"package seedu.address.logic.commands;"},{"lineNumber":4,"author":{"gitID":"luca590"},"content":""},{"lineNumber":5,"author":{"gitID":"luca590"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":6,"author":{"gitID":"luca590"},"content":""},{"lineNumber":7,"author":{"gitID":"luca590"},"content":"import java.io.BufferedWriter;"},{"lineNumber":8,"author":{"gitID":"luca590"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"luca590"},"content":"import java.nio.file.FileSystems;"},{"lineNumber":10,"author":{"gitID":"luca590"},"content":"import java.nio.file.Files;"},{"lineNumber":11,"author":{"gitID":"luca590"},"content":"import java.nio.file.Path;"},{"lineNumber":12,"author":{"gitID":"luca590"},"content":""},{"lineNumber":13,"author":{"gitID":"luca590"},"content":"import java.util.Iterator;"},{"lineNumber":14,"author":{"gitID":"luca590"},"content":""},{"lineNumber":15,"author":{"gitID":"luca590"},"content":"import org.apache.commons.csv.CSVFormat;"},{"lineNumber":16,"author":{"gitID":"luca590"},"content":"import org.apache.commons.csv.CSVPrinter;"},{"lineNumber":17,"author":{"gitID":"luca590"},"content":""},{"lineNumber":18,"author":{"gitID":"luca590"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"luca590"},"content":""},{"lineNumber":20,"author":{"gitID":"luca590"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"luca590"},"content":""},{"lineNumber":22,"author":{"gitID":"luca590"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":23,"author":{"gitID":"luca590"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"luca590"},"content":""},{"lineNumber":25,"author":{"gitID":"luca590"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"luca590"},"content":" * Class provides main functionality for ExportContactsCommand,"},{"lineNumber":27,"author":{"gitID":"luca590"},"content":" * specifically executeUndoableCommand() provides main functionality"},{"lineNumber":28,"author":{"gitID":"luca590"},"content":" */"},{"lineNumber":29,"author":{"gitID":"luca590"},"content":"public class ExportContactsCommand extends UndoableCommand {"},{"lineNumber":30,"author":{"gitID":"luca590"},"content":""},{"lineNumber":31,"author":{"gitID":"luca590"},"content":"    public static final String SUCCESS \u003d \"Contacts successfully exported.\\n\";"},{"lineNumber":32,"author":{"gitID":"luca590"},"content":""},{"lineNumber":33,"author":{"gitID":"luca590"},"content":"    public static final String COMMAND_WORD \u003d \"export_contacts\";"},{"lineNumber":34,"author":{"gitID":"luca590"},"content":"    public static final String COMMAND_ALIAS \u003d \"ec\";"},{"lineNumber":35,"author":{"gitID":"luca590"},"content":""},{"lineNumber":36,"author":{"gitID":"luca590"},"content":"    private Path writeToPath; // This path must include filename at end"},{"lineNumber":37,"author":{"gitID":"luca590"},"content":""},{"lineNumber":38,"author":{"gitID":"luca590"},"content":"    /*"},{"lineNumber":39,"author":{"gitID":"luca590"},"content":"     * Constructor, one constructor takes no arguments (default file path)"},{"lineNumber":40,"author":{"gitID":"luca590"},"content":"     * The other constructor takes the file path provided by user as argument"},{"lineNumber":41,"author":{"gitID":"luca590"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"luca590"},"content":"    public ExportContactsCommand() {"},{"lineNumber":43,"author":{"gitID":"luca590"},"content":"        //System.out.println(\"Contstructor called without argument\");"},{"lineNumber":44,"author":{"gitID":"luca590"},"content":"        writeToPath \u003d getDefaultPath();"},{"lineNumber":45,"author":{"gitID":"luca590"},"content":"        System.out.println(writeToPath);"},{"lineNumber":46,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"luca590"},"content":""},{"lineNumber":48,"author":{"gitID":"luca590"},"content":"    public ExportContactsCommand(String filePath) {"},{"lineNumber":49,"author":{"gitID":"luca590"},"content":"        //System.out.println(\"Contstructor called WTIH argument\");"},{"lineNumber":50,"author":{"gitID":"luca590"},"content":"        requireNonNull(filePath);"},{"lineNumber":51,"author":{"gitID":"luca590"},"content":"        writeToPath \u003d FileSystems.getDefault().getPath(filePath.trim());"},{"lineNumber":52,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"luca590"},"content":""},{"lineNumber":54,"author":{"gitID":"luca590"},"content":"    /*"},{"lineNumber":55,"author":{"gitID":"luca590"},"content":"     * Takes a valid input file (if invalid getCsvToWriteTo will throw error)"},{"lineNumber":56,"author":{"gitID":"luca590"},"content":"     * and loops through the Persons in current address book, exporting"},{"lineNumber":57,"author":{"gitID":"luca590"},"content":"     * each one to file specified"},{"lineNumber":58,"author":{"gitID":"luca590"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"luca590"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"luca590"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":61,"author":{"gitID":"luca590"},"content":"        CSVPrinter csvPrinter;"},{"lineNumber":62,"author":{"gitID":"luca590"},"content":""},{"lineNumber":63,"author":{"gitID":"luca590"},"content":"        //Write file to path and specify name"},{"lineNumber":64,"author":{"gitID":"luca590"},"content":"        try {"},{"lineNumber":65,"author":{"gitID":"luca590"},"content":"            requireNonNull(model);"},{"lineNumber":66,"author":{"gitID":"luca590"},"content":"            csvPrinter \u003d getCsvToWriteTo();"},{"lineNumber":67,"author":{"gitID":"luca590"},"content":"        } catch (java.lang.Exception e) {"},{"lineNumber":68,"author":{"gitID":"luca590"},"content":"            throw new CommandException(e.getMessage());"},{"lineNumber":69,"author":{"gitID":"luca590"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"luca590"},"content":""},{"lineNumber":71,"author":{"gitID":"luca590"},"content":"        try {"},{"lineNumber":72,"author":{"gitID":"luca590"},"content":"            ReadOnlyAddressBook myBook \u003d model.getAddressBook();"},{"lineNumber":73,"author":{"gitID":"luca590"},"content":"            ObservableList\u003cPerson\u003e myPersonList \u003d myBook.getPersonList();"},{"lineNumber":74,"author":{"gitID":"luca590"},"content":"            Iterator personIterator \u003d myPersonList.iterator();"},{"lineNumber":75,"author":{"gitID":"luca590"},"content":"            //iterator over the Persons in AddressBook and write them to csv"},{"lineNumber":76,"author":{"gitID":"luca590"},"content":"            Person p;"},{"lineNumber":77,"author":{"gitID":"luca590"},"content":"            while (personIterator.hasNext()) {"},{"lineNumber":78,"author":{"gitID":"luca590"},"content":"                p \u003d (Person) personIterator.next();"},{"lineNumber":79,"author":{"gitID":"luca590"},"content":"                csvPrinter.printRecord(p.getName(), p.getEmail(), p.getPhone(), p.getAddress());"},{"lineNumber":80,"author":{"gitID":"luca590"},"content":"            }"},{"lineNumber":81,"author":{"gitID":"luca590"},"content":""},{"lineNumber":82,"author":{"gitID":"luca590"},"content":"            csvPrinter.flush();"},{"lineNumber":83,"author":{"gitID":"luca590"},"content":""},{"lineNumber":84,"author":{"gitID":"luca590"},"content":"        } catch (Exception e) {"},{"lineNumber":85,"author":{"gitID":"luca590"},"content":"            throw new CommandException(\"Failed in exporting Persons.\\n\""},{"lineNumber":86,"author":{"gitID":"luca590"},"content":"                    + e.getStackTrace());"},{"lineNumber":87,"author":{"gitID":"luca590"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"luca590"},"content":""},{"lineNumber":89,"author":{"gitID":"luca590"},"content":"        return new CommandResult(SUCCESS);"},{"lineNumber":90,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"luca590"},"content":""},{"lineNumber":92,"author":{"gitID":"luca590"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"luca590"},"content":"     * @return gives the csv file to write to. The exported contacts will be in this file"},{"lineNumber":94,"author":{"gitID":"luca590"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"luca590"},"content":"    public CSVPrinter getCsvToWriteTo() throws IOException {"},{"lineNumber":96,"author":{"gitID":"luca590"},"content":"        CSVPrinter csvPrinter;"},{"lineNumber":97,"author":{"gitID":"luca590"},"content":""},{"lineNumber":98,"author":{"gitID":"luca590"},"content":"        System.out.println(\"File path is: \" + writeToPath);"},{"lineNumber":99,"author":{"gitID":"luca590"},"content":"        BufferedWriter writer \u003d Files.newBufferedWriter(writeToPath);"},{"lineNumber":100,"author":{"gitID":"luca590"},"content":"        csvPrinter \u003d new CSVPrinter(writer, CSVFormat.DEFAULT"},{"lineNumber":101,"author":{"gitID":"luca590"},"content":"                .withHeader(\"Name\", \"Email\", \"Phone\", \"Address\"));"},{"lineNumber":102,"author":{"gitID":"luca590"},"content":""},{"lineNumber":103,"author":{"gitID":"luca590"},"content":"        return csvPrinter;"},{"lineNumber":104,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"luca590"},"content":""},{"lineNumber":106,"author":{"gitID":"luca590"},"content":"    public Path getDefaultPath() {"},{"lineNumber":107,"author":{"gitID":"luca590"},"content":"        Path defaultPath \u003d FileSystems.getDefault().getPath(\"data/exportToExisting.csv\");"},{"lineNumber":108,"author":{"gitID":"luca590"},"content":"        return defaultPath;"},{"lineNumber":109,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"luca590"},"content":""},{"lineNumber":111,"author":{"gitID":"luca590"},"content":"    public Path getWriteToPath() {"},{"lineNumber":112,"author":{"gitID":"luca590"},"content":"        return writeToPath;"},{"lineNumber":113,"author":{"gitID":"luca590"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"luca590"},"content":"}"},{"lineNumber":115,"author":{"gitID":"luca590"},"content":"//@@author"}],"authorContributionMap":{"luca590":115}},{"path":"src/main/java/seedu/address/logic/parser/DeleteAppointmentCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"import seedu.address.logic.commands.DeleteAppointmentCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Date;"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.EndTime;"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Location;"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.PersonName;"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.StartTime;"},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":" * Parses input arguments and creates a new DeleteAppointmentCommand object"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":" */"},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"public class DeleteAppointmentCommandParser implements Parser\u003cDeleteAppointmentCommand\u003e {"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteAppointmentCommand"},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"     * and returns a DeleteAppointmentCommand object for execution."},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"    public DeleteAppointmentCommand parse(String args) throws ParseException {"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize("},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"                args, PREFIX_NAME, PREFIX_DATE, PREFIX_STARTTIME, PREFIX_ENDTIME, PREFIX_LOCATION);"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"        if (!arePrefixesPresent("},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"                argMultimap, PREFIX_NAME, PREFIX_DATE, PREFIX_STARTTIME, PREFIX_ENDTIME, PREFIX_LOCATION)"},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"            throw new ParseException("},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"            PersonName name \u003d ParserUtil.parsePersonName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":"            Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE)).get();"},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"            StartTime startTime \u003d ParserUtil.parseStartTime(argMultimap.getValue(PREFIX_STARTTIME).get());"},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"            EndTime endTime \u003d ParserUtil.parseEndTime(argMultimap.getValue(PREFIX_ENDTIME).get());"},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"            Location location \u003d ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get());"},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":"            Appointment appointment \u003d new Appointment(name, date, startTime, endTime, location);"},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"            return new DeleteAppointmentCommand(appointment);"},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":58,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"jlks96"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":60,"author":{"gitID":"jlks96"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":61,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"jlks96"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":63,"author":{"gitID":"jlks96"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":64,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":57,"-":8}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":"    //@@author jlks96"},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":"        return model.getFilteredAppointmentList();"},{"lineNumber":58,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"jlks96"},"content":"    //@@author"},{"lineNumber":60,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":8,"-":57}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Undo the previous {@code UndoableCommand}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class UndoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"    public static final String COMMAND_ALIAS \u003d \"u\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canUndo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popUndo().undo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":1,"-":36}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.person.DateAdded;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"    private String dateAdded;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":"    public XmlAdaptedPerson(String name, String phone, String email,"},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":"                            String address, String dateAdded, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":"        this.dateAdded \u003d dateAdded;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":72,"author":{"gitID":"jlks96"},"content":"        dateAdded \u003d source.getDateAdded().dateAdded;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":99,"author":{"gitID":"jlks96"},"content":"            throw new IllegalValueException("},{"lineNumber":100,"author":{"gitID":"jlks96"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":108,"author":{"gitID":"jlks96"},"content":"            throw new IllegalValueException("},{"lineNumber":109,"author":{"gitID":"jlks96"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":117,"author":{"gitID":"jlks96"},"content":"            throw new IllegalValueException("},{"lineNumber":118,"author":{"gitID":"jlks96"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"jlks96"},"content":"        if (this.dateAdded \u003d\u003d null) {"},{"lineNumber":126,"author":{"gitID":"jlks96"},"content":"            throw new IllegalValueException("},{"lineNumber":127,"author":{"gitID":"jlks96"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, DateAdded.class.getSimpleName()));"},{"lineNumber":128,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"jlks96"},"content":"        if (!DateAdded.isValidDate(this.dateAdded)) {"},{"lineNumber":130,"author":{"gitID":"jlks96"},"content":"            throw new IllegalValueException(DateAdded.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":131,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"jlks96"},"content":"        final DateAdded dateAdded \u003d new DateAdded(this.dateAdded);"},{"lineNumber":133,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":135,"author":{"gitID":"jlks96"},"content":"        return new Person(name, phone, email, address, dateAdded, tags);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":152,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(address, otherPerson.address)"},{"lineNumber":153,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":22,"-":133}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"    private List\u003cXmlAdaptedAppointment\u003e appointments;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"        appointments \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"        appointments.addAll("},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":"                src.getAppointmentList().stream().map(XmlAdaptedAppointment::new).collect(Collectors.toList()));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag} or {@code XmlAdaptedAppointment}."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            addressBook.addTag(t.toModelType());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        for (XmlAdaptedPerson p : persons) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            addressBook.addPerson(p.toModelType());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"jlks96"},"content":"        for (XmlAdaptedAppointment a : appointments) {"},{"lineNumber":63,"author":{"gitID":"jlks96"},"content":"            addressBook.addAppointment(a.toModelType());"},{"lineNumber":64,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlSerializableAddressBook)) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"},{"lineNumber":79,"author":{"gitID":"jlks96"},"content":"        return persons.equals(otherAb.persons) \u0026\u0026 tags.equals(otherAb.tags)"},{"lineNumber":80,"author":{"gitID":"jlks96"},"content":"                \u0026\u0026 appointments.equals(otherAb.appointments);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":11,"-":71}},{"path":"src/main/java/seedu/address/logic/commands/AddAppointmentCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":" * Adds an appointment to the address book."},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":" */"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"public class AddAppointmentCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"    public static final String COMMAND_WORD \u003d \"addappointment\";"},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"    public static final String COMMAND_ALIAS \u003d \"aa\";"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an appointment to the address book. \""},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"            + \"Parameters: \""},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"            + PREFIX_DATE + \"DATE (must be in the format: dd/MM/yyyy) \""},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"            + PREFIX_STARTTIME + \"STARTTIME (must be in the 24 format: HH:mm) \""},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"            + PREFIX_ENDTIME + \"ENDTIME (must be in the 24 format: HH:mm) \""},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"            + PREFIX_LOCATION + \"LOCATION\\n\""},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"            + PREFIX_DATE + \"03/04/2018 \""},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"            + PREFIX_STARTTIME + \"10:30 \""},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"            + PREFIX_ENDTIME + \"11:30 \""},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"            + PREFIX_LOCATION + \"Century Garden\";"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New appointment added: %1$s\";"},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"This appointment already exists in the address book\";"},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"    private final Appointment toAdd;"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"     * Creates an AddAppointmentCommand to add the specified {@code Appointment}"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":"    public AddAppointmentCommand(Appointment appointment) {"},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"        requireNonNull(appointment);"},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"        toAdd \u003d appointment;"},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"        requireNonNull(model);"},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":"            model.addAppointment(toAdd);"},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":"        } catch (DuplicateAppointmentException e) {"},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);"},{"lineNumber":58,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":60,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":62,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"jlks96"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitID":"jlks96"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":65,"author":{"gitID":"jlks96"},"content":"                || (other instanceof AddAppointmentCommand // instanceof handles nulls"},{"lineNumber":66,"author":{"gitID":"jlks96"},"content":"                \u0026\u0026 toAdd.equals(((AddAppointmentCommand) other).toAdd)); // state check"},{"lineNumber":67,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":62,"-":6}},{"path":"src/main/java/seedu/address/model/appointment/Time.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"import java.text.ParseException;"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":" * Represents a time."},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidTime(String)}"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":" */"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"public class Time {"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"    public static final String MESSAGE_TIME_CONSTRAINTS \u003d"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"            \"Time input should be in the format: HH:mm (24 hour format)\";"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"    /*"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"     * The first character of the time must not be a whitespace,"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"    public static final String TIME_VALIDATION_REGEX \u003d \"\\\\d{2}:\\\\d{2}\";"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":"    public final String time;"},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"     * Constructs a {@code Time}."},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"     * @param time A valid time."},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"    public Time(String time) {"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"        requireNonNull(time);"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"        checkArgument(isValidTime(time), MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"        this.time \u003d time;"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"     * Returns true if a given string is a valid time in the 24 hour format HH:mm."},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"    public static boolean isValidTime(String test) {"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"        SimpleDateFormat timeFormatter \u003d new SimpleDateFormat(\"HH:mm\");"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"        timeFormatter.setLenient(false);"},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":"            timeFormatter.parse(test); //attempt to parse time"},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"        } catch (ParseException e) { //if fail return false"},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"            return false;"},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":"        return test.matches(TIME_VALIDATION_REGEX);"},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":"    public String toString() {"},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":"        return time;"},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"jlks96"},"content":"    public boolean equals(Object other) {"},{"lineNumber":59,"author":{"gitID":"jlks96"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":60,"author":{"gitID":"jlks96"},"content":"                || (other instanceof Time // instanceof handles nulls"},{"lineNumber":61,"author":{"gitID":"jlks96"},"content":"                \u0026\u0026 this.time.equals(((Time) other).time)); // state check"},{"lineNumber":62,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":64,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"jlks96"},"content":"    public int hashCode() {"},{"lineNumber":66,"author":{"gitID":"jlks96"},"content":"        return time.hashCode();"},{"lineNumber":67,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":64,"-":4}},{"path":"src/main/java/seedu/address/model/appointment/PersonName.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":" * Represents a Person\u0027s name the user is having appointment with."},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":" */"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"public class PersonName {"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"            \"Person names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"    public final String fullName;"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"     * Constructs a {@code Name}."},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"     * @param name A valid name."},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"    public PersonName(String name) {"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"        requireNonNull(name);"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"        this.fullName \u003d name;"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"     * Returns true if a given string is a valid person\u0027s name."},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":"        return fullName;"},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":"                || (other instanceof PersonName // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"                \u0026\u0026 this.fullName.equals(((PersonName) other).fullName)); // state check"},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":"        return fullName.hashCode();"},{"lineNumber":58,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":55,"-":4}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/AppointmentNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.model.appointment.exceptions;"},{"lineNumber":2,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":3,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":" * Signals that the operation is unable to find the specified appointment."},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":" */"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"public class AppointmentNotFoundException extends Exception {}"}],"authorContributionMap":{"jlks96":7}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/DuplicateAppointmentException.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.model.appointment.exceptions;"},{"lineNumber":2,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":" * Signals that the operation will result in duplicate Appointment objects."},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":" */"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"public class DuplicateAppointmentException extends DuplicateDataException {"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"    public DuplicateAppointmentException() {"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"        super(\"Operation would result in duplicate appointments\");"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":12,"-":1}},{"path":"src/main/java/seedu/address/model/appointment/EndTime.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":3,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":" * Represents an Appointment\u0027s ending time in the address book."},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidTime(String)}"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":" */"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"public class EndTime extends Time {"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"     * Constructs a {@code EndTime}."},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"     *"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"     * @param endTime A valid endTime."},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"    public EndTime(String endTime) {"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"        super(endTime);"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":17}},{"path":"src/main/java/seedu/address/model/appointment/StartTime.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":3,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":" * Represents an Appointment\u0027s starting time in the address book."},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidTime(String)}"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":" */"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"public class StartTime extends Time {"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"     * Constructs a {@code StartTime}."},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"     *"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"     * @param startTime A valid startTime."},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"    public StartTime(String startTime) {"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"        super(startTime);"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":18}},{"path":"src/main/java/seedu/address/model/appointment/Appointment.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":" * Represents an Appointment in the address book."},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":" */"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"public class Appointment {"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"    private final PersonName personName;"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"    private final Date date;"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"    private final StartTime startTime;"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"    private final EndTime endTime;"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"    private final Location location;"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"     * Every field must be present and not null."},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"    public Appointment(PersonName personName, Date date, StartTime startTime, EndTime endTime, Location location) {"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":"        this.personName \u003d personName;"},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"        this.date \u003d date;"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"        this.location \u003d location;"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"    public PersonName getName() {"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"        return personName;"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"    public Date getDate() {"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"        return date;"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"    public StartTime getStartTime() {"},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"        return startTime;"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"    public EndTime getEndTime() {"},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"        return endTime;"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"    public Location getLocation() {"},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"        return location;"},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":"            return true;"},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":"        if (!(other instanceof Appointment)) {"},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":"            return false;"},{"lineNumber":58,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":60,"author":{"gitID":"jlks96"},"content":"        Appointment otherAppointment \u003d (Appointment) other;"},{"lineNumber":61,"author":{"gitID":"jlks96"},"content":"        return otherAppointment.getName().equals(this.getName())"},{"lineNumber":62,"author":{"gitID":"jlks96"},"content":"                \u0026\u0026 otherAppointment.getDate().equals(this.getDate())"},{"lineNumber":63,"author":{"gitID":"jlks96"},"content":"                \u0026\u0026 otherAppointment.getStartTime().equals(this.getStartTime())"},{"lineNumber":64,"author":{"gitID":"jlks96"},"content":"                \u0026\u0026 otherAppointment.getEndTime().equals(this.getEndTime())"},{"lineNumber":65,"author":{"gitID":"jlks96"},"content":"                \u0026\u0026 otherAppointment.getLocation().equals(this.getLocation());"},{"lineNumber":66,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":68,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"jlks96"},"content":"    public int hashCode() {"},{"lineNumber":70,"author":{"gitID":"jlks96"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":71,"author":{"gitID":"jlks96"},"content":"        return Objects.hash(personName, date, startTime, endTime, location);"},{"lineNumber":72,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":74,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"jlks96"},"content":"    public String toString() {"},{"lineNumber":76,"author":{"gitID":"jlks96"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":77,"author":{"gitID":"jlks96"},"content":"        builder.append(getName())"},{"lineNumber":78,"author":{"gitID":"jlks96"},"content":"                .append(\" Date: \")"},{"lineNumber":79,"author":{"gitID":"jlks96"},"content":"                .append(getDate())"},{"lineNumber":80,"author":{"gitID":"jlks96"},"content":"                .append(\" Start Time: \")"},{"lineNumber":81,"author":{"gitID":"jlks96"},"content":"                .append(getStartTime())"},{"lineNumber":82,"author":{"gitID":"jlks96"},"content":"                .append(\" End Time: \")"},{"lineNumber":83,"author":{"gitID":"jlks96"},"content":"                .append(getEndTime())"},{"lineNumber":84,"author":{"gitID":"jlks96"},"content":"                .append(\" Location: \")"},{"lineNumber":85,"author":{"gitID":"jlks96"},"content":"                .append(getLocation());"},{"lineNumber":86,"author":{"gitID":"jlks96"},"content":"        return builder.toString();"},{"lineNumber":87,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":89,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"jlks96"},"content":"     * Returns a list of Strings which represents all the appointment\u0027s attributes"},{"lineNumber":91,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"jlks96"},"content":"    public List\u003cString\u003e toStringList() {"},{"lineNumber":93,"author":{"gitID":"jlks96"},"content":"        final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"},{"lineNumber":94,"author":{"gitID":"jlks96"},"content":"        result.add(getName().toString());"},{"lineNumber":95,"author":{"gitID":"jlks96"},"content":"        result.add(getDate().toString());"},{"lineNumber":96,"author":{"gitID":"jlks96"},"content":"        result.add(getStartTime().toString());"},{"lineNumber":97,"author":{"gitID":"jlks96"},"content":"        result.add(getEndTime().toString());"},{"lineNumber":98,"author":{"gitID":"jlks96"},"content":"        result.add(getLocation().toString());"},{"lineNumber":99,"author":{"gitID":"jlks96"},"content":"        return result;"},{"lineNumber":100,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":101,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":99,"-":3}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedAppointment.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":3,"author":{"gitID":"jlks96"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Date;"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.EndTime;"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Location;"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.PersonName;"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.StartTime;"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":" * JAXB-friendly version of the Appointment."},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":" */"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"public class XmlAdaptedAppointment {"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Appointment\u0027s %s field is missing!\";"},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":"    private String name;"},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"    private String date;"},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"    private String startTime;"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"    private String endTime;"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"    private String location;"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"     * Constructs an XmlAdaptedAppointment."},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"    public XmlAdaptedAppointment() {}"},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"     * Constructs an {@code XmlAdaptedAppointment} with the given appointment details."},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"    public XmlAdaptedAppointment(String name, String date, String startTime, String endTime, String location) {"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"        this.name \u003d name;"},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":"        this.date \u003d date;"},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"        this.location \u003d location;"},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"     * Converts a given Appointment into this class for JAXB use."},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":"     *"},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedAppointment"},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":"    public XmlAdaptedAppointment(Appointment source) {"},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":58,"author":{"gitID":"jlks96"},"content":"        date \u003d source.getDate().date;"},{"lineNumber":59,"author":{"gitID":"jlks96"},"content":"        startTime \u003d source.getStartTime().time;"},{"lineNumber":60,"author":{"gitID":"jlks96"},"content":"        endTime \u003d source.getEndTime().time;"},{"lineNumber":61,"author":{"gitID":"jlks96"},"content":"        location \u003d source.getLocation().value;"},{"lineNumber":62,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":64,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"jlks96"},"content":"     * Converts this jaxb-friendly adapted appointment object into the model\u0027s Appointment object."},{"lineNumber":66,"author":{"gitID":"jlks96"},"content":"     *"},{"lineNumber":67,"author":{"gitID":"jlks96"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted appointment"},{"lineNumber":68,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"jlks96"},"content":"    public Appointment toModelType() throws IllegalValueException {"},{"lineNumber":70,"author":{"gitID":"jlks96"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":71,"author":{"gitID":"jlks96"},"content":"            throw new IllegalValueException("},{"lineNumber":72,"author":{"gitID":"jlks96"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, PersonName.class.getSimpleName()));"},{"lineNumber":73,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"jlks96"},"content":"        if (!PersonName.isValidName(this.name)) {"},{"lineNumber":75,"author":{"gitID":"jlks96"},"content":"            throw new IllegalValueException(PersonName.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":76,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"jlks96"},"content":"        final PersonName name \u003d new PersonName(this.name);"},{"lineNumber":78,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":79,"author":{"gitID":"jlks96"},"content":"        if (this.date \u003d\u003d null) {"},{"lineNumber":80,"author":{"gitID":"jlks96"},"content":"            throw new IllegalValueException("},{"lineNumber":81,"author":{"gitID":"jlks96"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"},{"lineNumber":82,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"jlks96"},"content":"        if (!Date.isValidDate(this.date)) {"},{"lineNumber":84,"author":{"gitID":"jlks96"},"content":"            throw new IllegalValueException(Date.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":85,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"jlks96"},"content":"        final Date date \u003d new Date(this.date);"},{"lineNumber":87,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":88,"author":{"gitID":"jlks96"},"content":"        if (this.startTime \u003d\u003d null) {"},{"lineNumber":89,"author":{"gitID":"jlks96"},"content":"            throw new IllegalValueException("},{"lineNumber":90,"author":{"gitID":"jlks96"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, StartTime.class.getSimpleName()));"},{"lineNumber":91,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"jlks96"},"content":"        if (!StartTime.isValidTime(this.startTime)) {"},{"lineNumber":93,"author":{"gitID":"jlks96"},"content":"            throw new IllegalValueException(StartTime.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":94,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"jlks96"},"content":"        final StartTime startTime \u003d new StartTime(this.startTime);"},{"lineNumber":96,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":97,"author":{"gitID":"jlks96"},"content":"        if (this.endTime \u003d\u003d null) {"},{"lineNumber":98,"author":{"gitID":"jlks96"},"content":"            throw new IllegalValueException("},{"lineNumber":99,"author":{"gitID":"jlks96"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, EndTime.class.getSimpleName()));"},{"lineNumber":100,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"jlks96"},"content":"        if (!EndTime.isValidTime(this.endTime)) {"},{"lineNumber":102,"author":{"gitID":"jlks96"},"content":"            throw new IllegalValueException(EndTime.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":103,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"jlks96"},"content":"        final EndTime endTime \u003d new EndTime(this.endTime);"},{"lineNumber":105,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":106,"author":{"gitID":"jlks96"},"content":"        if (this.location \u003d\u003d null) {"},{"lineNumber":107,"author":{"gitID":"jlks96"},"content":"            throw new IllegalValueException("},{"lineNumber":108,"author":{"gitID":"jlks96"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Location.class.getSimpleName()));"},{"lineNumber":109,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"jlks96"},"content":"        if (!Location.isValidLocation(this.location)) {"},{"lineNumber":111,"author":{"gitID":"jlks96"},"content":"            throw new IllegalValueException(Location.MESSAGE_LOCATION_CONSTRAINTS);"},{"lineNumber":112,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"jlks96"},"content":"        final Location location \u003d new Location(this.location);"},{"lineNumber":114,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":115,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":116,"author":{"gitID":"jlks96"},"content":"        return new Appointment(name, date, startTime, endTime, location);"},{"lineNumber":117,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":119,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"jlks96"},"content":"    public boolean equals(Object other) {"},{"lineNumber":121,"author":{"gitID":"jlks96"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":122,"author":{"gitID":"jlks96"},"content":"            return true;"},{"lineNumber":123,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":125,"author":{"gitID":"jlks96"},"content":"        if (!(other instanceof XmlAdaptedAppointment)) {"},{"lineNumber":126,"author":{"gitID":"jlks96"},"content":"            return false;"},{"lineNumber":127,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":129,"author":{"gitID":"jlks96"},"content":"        XmlAdaptedAppointment otherAppointment \u003d (XmlAdaptedAppointment) other;"},{"lineNumber":130,"author":{"gitID":"jlks96"},"content":"        return Objects.equals(name, otherAppointment.name)"},{"lineNumber":131,"author":{"gitID":"jlks96"},"content":"                \u0026\u0026 Objects.equals(date, otherAppointment.date)"},{"lineNumber":132,"author":{"gitID":"jlks96"},"content":"                \u0026\u0026 Objects.equals(startTime, otherAppointment.startTime)"},{"lineNumber":133,"author":{"gitID":"jlks96"},"content":"                \u0026\u0026 Objects.equals(endTime, otherAppointment.endTime)"},{"lineNumber":134,"author":{"gitID":"jlks96"},"content":"                \u0026\u0026 Objects.equals(location, otherAppointment.location);"},{"lineNumber":135,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":132,"-":4}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Date;"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.EndTime;"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Location;"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.PersonName;"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.StartTime;"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.person.DateAdded;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new Person[] {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new DateAdded(\"02/02/2018\"),"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                getTagSet(\"friends\")),"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new DateAdded(\"03/01/2018\"),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new DateAdded(\"15/02/2018\"),"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                getTagSet(\"neighbours\")),"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new DateAdded(\"01/03/2018\"),"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                getTagSet(\"family\")),"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new DateAdded(\"31/08/2017\"),"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                getTagSet(\"classmates\")),"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new DateAdded(\"25/10/2017\"),"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                getTagSet(\"colleagues\"))"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":"    public static Appointment[] getSampleAppointments() {"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"        return new Appointment[] {"},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":"            new Appointment(new PersonName(\"Alex Yeoh\"), new Date(\"15/03/2018\"), new StartTime(\"10:30\"),"},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":"                    new EndTime(\"11:30\"), new Location(\"Kent Ridge MRT\")),"},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":"            new Appointment(new PersonName(\"Bernice Yu\"), new Date(\"25/03/2018\"), new StartTime(\"10:30\"),"},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":"                    new EndTime(\"11:30\"), new Location(\"Buona Vista MRT\")),"},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":"            new Appointment(new PersonName(\"Charlotte Oliveiro\"), new Date(\"31/03/2018\"), new StartTime(\"10:30\"),"},{"lineNumber":58,"author":{"gitID":"jlks96"},"content":"                    new EndTime(\"11:30\"), new Location(\"Bukit Panjang MRT\")),"},{"lineNumber":59,"author":{"gitID":"jlks96"},"content":"            new Appointment(new PersonName(\"David Li\"), new Date(\"01/04/2018\"), new StartTime(\"10:30\"),"},{"lineNumber":60,"author":{"gitID":"jlks96"},"content":"                    new EndTime(\"11:30\"), new Location(\"Beauty World MRT\")),"},{"lineNumber":61,"author":{"gitID":"jlks96"},"content":"            new Appointment(new PersonName(\"Irfan Ibrahim\"), new Date(\"02/04/2018\"), new StartTime(\"10:30\"),"},{"lineNumber":62,"author":{"gitID":"jlks96"},"content":"                    new EndTime(\"11:30\"), new Location(\"Paya Lebar MRT\")),"},{"lineNumber":63,"author":{"gitID":"jlks96"},"content":"            new Appointment(new PersonName(\"Roy Balakrishnan\"), new Date(\"03/04/2018\"), new StartTime(\"10:30\"),"},{"lineNumber":64,"author":{"gitID":"jlks96"},"content":"                    new EndTime(\"11:30\"), new Location(\"Bugis MRT\")),"},{"lineNumber":65,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":66,"author":{"gitID":"jlks96"},"content":"        };"},{"lineNumber":67,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":75,"author":{"gitID":"jlks96"},"content":"            for (Appointment sampleAppointment : getSampleAppointments()) {"},{"lineNumber":76,"author":{"gitID":"jlks96"},"content":"                sampleAb.addAppointment(sampleAppointment);"},{"lineNumber":77,"author":{"gitID":"jlks96"},"content":"            }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":81,"author":{"gitID":"jlks96"},"content":"        } catch (DuplicateAppointmentException e) {"},{"lineNumber":82,"author":{"gitID":"jlks96"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate appointments\", e);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":37,"-":61}},{"path":"src/main/java/seedu/address/model/appointment/UniqueAppointmentList.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":" * A list of appointments that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":" *"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":" * Supports a minimal set of list operations."},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":" *"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":" * @see Appointment#equals(Object)"},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":" */"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"public class UniqueAppointmentList implements Iterable\u003cAppointment\u003e {"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"    private final ObservableList\u003cAppointment\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"     * Returns true if the list contains an equivalent appointment as the given argument."},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"    public boolean contains(Appointment toCheck) {"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"        requireNonNull(toCheck);"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"     * Adds a appointment to the list."},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"     *"},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"     * @throws DuplicateAppointmentException if the appointment to add is a duplicate of an existing appointment"},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"     * in the list."},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"    public void add(Appointment toAdd) throws DuplicateAppointmentException {"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"        requireNonNull(toAdd);"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"        if (contains(toAdd)) {"},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"            throw new DuplicateAppointmentException();"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":"        internalList.add(toAdd);"},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":"     * Removes the equivalent appointment from the list."},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":"     * @throws AppointmentNotFoundException if no such appointment could be found in the list."},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":"    public boolean remove(Appointment toRemove) throws AppointmentNotFoundException {"},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":"        requireNonNull(toRemove);"},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":"        final boolean appointmentFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":"        if (!appointmentFoundAndDeleted) {"},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":"            throw new AppointmentNotFoundException();"},{"lineNumber":58,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"jlks96"},"content":"        return appointmentFoundAndDeleted;"},{"lineNumber":60,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":62,"author":{"gitID":"jlks96"},"content":"    public void setAppointments(UniqueAppointmentList replacement) {"},{"lineNumber":63,"author":{"gitID":"jlks96"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":64,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":66,"author":{"gitID":"jlks96"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments) throws DuplicateAppointmentException {"},{"lineNumber":67,"author":{"gitID":"jlks96"},"content":"        requireAllNonNull(appointments);"},{"lineNumber":68,"author":{"gitID":"jlks96"},"content":"        final UniqueAppointmentList replacement \u003d new UniqueAppointmentList();"},{"lineNumber":69,"author":{"gitID":"jlks96"},"content":"        for (final Appointment appointment : appointments) {"},{"lineNumber":70,"author":{"gitID":"jlks96"},"content":"            replacement.add(appointment);"},{"lineNumber":71,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"jlks96"},"content":"        setAppointments(replacement);"},{"lineNumber":73,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":75,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"jlks96"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":77,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"jlks96"},"content":"    public ObservableList\u003cAppointment\u003e asObservableList() {"},{"lineNumber":79,"author":{"gitID":"jlks96"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":80,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":82,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"jlks96"},"content":"    public Iterator\u003cAppointment\u003e iterator() {"},{"lineNumber":84,"author":{"gitID":"jlks96"},"content":"        return internalList.iterator();"},{"lineNumber":85,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":87,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"jlks96"},"content":"    public boolean equals(Object other) {"},{"lineNumber":89,"author":{"gitID":"jlks96"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":90,"author":{"gitID":"jlks96"},"content":"                || (other instanceof UniqueAppointmentList // instanceof handles nulls"},{"lineNumber":91,"author":{"gitID":"jlks96"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueAppointmentList) other).internalList));"},{"lineNumber":92,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":94,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":95,"author":{"gitID":"jlks96"},"content":"    public int hashCode() {"},{"lineNumber":96,"author":{"gitID":"jlks96"},"content":"        return internalList.hashCode();"},{"lineNumber":97,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":89,"-":9}},{"path":"src/main/java/seedu/address/model/person/DateAddedIsBeforeDateInputPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":3,"author":{"gitID":"jlks96"},"content":"import java.text.ParseException;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"import java.util.Date;"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":" * Tests that a {@code Person}\u0027s {@code DateAdded} is before the date input."},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":" */"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"public class DateAddedIsBeforeDateInputPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"    private final String dateInputString;"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"    public DateAddedIsBeforeDateInputPredicate(String dateInputString) {"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"        this.dateInputString \u003d dateInputString;"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"    public boolean test(Person person) {"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":"            SimpleDateFormat dateFormatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"            String dateAddedString \u003d person.getDateAdded().dateAdded;"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"            assert DateAdded.isValidDate(dateAddedString);"},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"            Date dateAdded \u003d dateFormatter.parse(dateAddedString);"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"            Date dateInput \u003d dateFormatter.parse(dateInputString);"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"            return dateAdded.compareTo(dateInput) \u003c\u003d 0;"},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"        } catch (ParseException e) {"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"            return false; //need to resolve this part"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"    public boolean equals(Object other) {"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"        return other \u003d\u003d this"},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"                || (other instanceof DateAddedIsBeforeDateInputPredicate"},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"                \u0026\u0026 this.dateInputString.equals(((DateAddedIsBeforeDateInputPredicate) other).dateInputString));"},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":41}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":17,"author":{"gitID":"-"},"content":" *"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":19,"author":{"gitID":"-"},"content":" *"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * @see Person#equals(Object)"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public boolean contains(Person toCheck) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Adds a person to the list."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void add(Person toAdd) throws DuplicatePersonException {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the replacement is equivalent to another existing person in the list."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void setPerson(Person target, Person editedPerson)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        if (!target.equals(editedPerson) \u0026\u0026 internalList.contains(editedPerson)) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        internalList.set(index, editedPerson);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public boolean remove(Person toRemove) throws PersonNotFoundException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        if (!personFoundAndDeleted) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return personFoundAndDeleted;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"jlks96"},"content":"    //@@author jlks96"},{"lineNumber":85,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"jlks96"},"content":"     * Removes all the equivalent persons from the list."},{"lineNumber":87,"author":{"gitID":"jlks96"},"content":"     *"},{"lineNumber":88,"author":{"gitID":"jlks96"},"content":"     * @throws PersonNotFoundException if any of such persons could not be found in the list."},{"lineNumber":89,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"jlks96"},"content":"    public boolean removeAll(List\u003cPerson\u003e toRemove) throws PersonNotFoundException {"},{"lineNumber":91,"author":{"gitID":"jlks96"},"content":"        requireNonNull(toRemove);"},{"lineNumber":92,"author":{"gitID":"jlks96"},"content":"        final boolean personsFoundAndDeleted \u003d internalList.removeAll(toRemove);"},{"lineNumber":93,"author":{"gitID":"jlks96"},"content":"        if (!personsFoundAndDeleted) {"},{"lineNumber":94,"author":{"gitID":"jlks96"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":95,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"jlks96"},"content":"        return personsFoundAndDeleted;"},{"lineNumber":97,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"jlks96"},"content":"    //@@author"},{"lineNumber":99,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public void setPersons(UniquePersonList replacement) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        requireAllNonNull(persons);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        final UniquePersonList replacement \u003d new UniquePersonList();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        for (final Person person : persons) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            replacement.add(person);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        setPersons(replacement);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e asObservableList() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                        \u0026\u0026 this.internalList.equals(((UniquePersonList) other).internalList));"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":16,"-":120}},{"path":"src/main/java/seedu/address/model/appointment/Location.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":" * Represents an Appointment\u0027s location in the address book."},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":" */"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"public class Location {"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"    public static final String MESSAGE_LOCATION_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"            \"Appointment location can take any values, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"     * The first character of the location must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"    public static final String LOCATION_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"    public final String value;"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"     * Constructs an {@code Location}."},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"     * @param location A valid location."},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"    public Location(String location) {"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"        requireNonNull(location);"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"        checkArgument(isValidLocation(location), MESSAGE_LOCATION_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"        this.value \u003d location;"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"     * Returns true if a given string is a valid location."},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"    public static boolean isValidLocation(String test) {"},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"        return test.matches(LOCATION_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"        return value;"},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":"                || (other instanceof Location // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":"                \u0026\u0026 this.value.equals(((Location) other).value)); // state check"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":"        return value.hashCode();"},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":54,"-":4}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Ng95junwei"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"Ng95junwei"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"Ng95junwei"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"    private final DateAdded dateAdded;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"    public Person(Name name, Phone phone, Email email, Address address, DateAdded dateAdded, Set\u003cTag\u003e tags) {"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"        requireAllNonNull(name, phone, email, address, dateAdded, tags);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"        this.dateAdded \u003d dateAdded;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"jlks96"},"content":"    public DateAdded getDateAdded() {"},{"lineNumber":59,"author":{"gitID":"jlks96"},"content":"        return dateAdded;"},{"lineNumber":60,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":84,"author":{"gitID":"jlks96"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress())"},{"lineNumber":85,"author":{"gitID":"jlks96"},"content":"                \u0026\u0026 otherPerson.getDateAdded().equals(this.getDateAdded());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":91,"author":{"gitID":"jlks96"},"content":"        return Objects.hash(name, phone, email, address, dateAdded, tags);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":104,"author":{"gitID":"jlks96"},"content":"                .append(\" Date Added: \")"},{"lineNumber":105,"author":{"gitID":"jlks96"},"content":"                .append(getDateAdded())"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"Ng95junwei"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"Ng95junwei"},"content":"     * Returns a list of Strings which represents all the person\u0027s attributes"},{"lineNumber":113,"author":{"gitID":"Ng95junwei"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":115,"author":{"gitID":"Ng95junwei"},"content":"    public List\u003cString\u003e toStringList() {"},{"lineNumber":116,"author":{"gitID":"Ng95junwei"},"content":"        final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"},{"lineNumber":117,"author":{"gitID":"Ng95junwei"},"content":"        result.add(getName().toString());"},{"lineNumber":118,"author":{"gitID":"Ng95junwei"},"content":"        result.add(getAddress().toString());"},{"lineNumber":119,"author":{"gitID":"Ng95junwei"},"content":"        result.add(getEmail().toString());"},{"lineNumber":120,"author":{"gitID":"Ng95junwei"},"content":"        result.add(getPhone().toString());"},{"lineNumber":121,"author":{"gitID":"jlks96"},"content":"        result.add(getDateAdded().toString());"},{"lineNumber":122,"author":{"gitID":"Ng95junwei"},"content":"        result.add(getTags().toString());"},{"lineNumber":123,"author":{"gitID":"Ng95junwei"},"content":"        return result;"},{"lineNumber":124,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":125,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":14,"Ng95junwei":19,"-":94}},{"path":"src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":19,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":20,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":21,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public boolean test(Person person) {"},{"lineNumber":23,"author":{"gitID":"Ng95junwei"},"content":"        final List\u003cString\u003e personDetails \u003d person.toStringList();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return keywords.stream()"},{"lineNumber":25,"author":{"gitID":"Ng95junwei"},"content":"                .anyMatch(keyword -\u003e personDetails.stream()"},{"lineNumber":26,"author":{"gitID":"Ng95junwei"},"content":"                        .anyMatch(details -\u003e details.toLowerCase().contains(keyword.toLowerCase())));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Ng95junwei":8,"-":28}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"    //@@author jlks96"},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"     * Returns an unmodifiable view of the appointments list."},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"     * This list will not contain any duplicate appointments."},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"    ObservableList\u003cAppointment\u003e getAppointmentList();"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"    //@@author"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":9,"-":24}},{"path":"src/main/java/seedu/address/model/person/NameContainsFullKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":8,"author":{"gitID":"Ng95junwei"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"Ng95junwei"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"Ng95junwei"},"content":" */"},{"lineNumber":11,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class NameContainsFullKeywordsPredicate  implements Predicate\u003cPerson\u003e {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public NameContainsFullKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public boolean test(Person person) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return keywords.stream()"},{"lineNumber":22,"author":{"gitID":"Ng95junwei"},"content":"                .anyMatch(keyword -\u003e"},{"lineNumber":23,"author":{"gitID":"Ng95junwei"},"content":"                        StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":29,"author":{"gitID":"-"},"content":"                || (other instanceof NameContainsFullKeywordsPredicate // instanceof handles nulls"},{"lineNumber":30,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.keywords.equals(((NameContainsFullKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Ng95junwei":7,"-":26}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Ng95junwei"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.UniqueAppointmentList;"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":19,"author":{"gitID":"Ng95junwei"},"content":"import seedu.address.model.email.Template;"},{"lineNumber":20,"author":{"gitID":"Ng95junwei"},"content":"import seedu.address.model.email.UniqueTemplateList;"},{"lineNumber":21,"author":{"gitID":"Ng95junwei"},"content":"import seedu.address.model.email.exceptions.DuplicateTemplateException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"    private final UniqueAppointmentList appointments;"},{"lineNumber":38,"author":{"gitID":"Ng95junwei"},"content":"    private final UniqueTemplateList templates;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":"        appointments \u003d new UniqueAppointmentList();"},{"lineNumber":51,"author":{"gitID":"Ng95junwei"},"content":"        templates \u003d new UniqueTemplateList();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":"     * Creates an AddressBook using the Persons, Tags and Appointments in the {@code toBeCopied}"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"jlks96"},"content":"    //@@author jlks96"},{"lineNumber":75,"author":{"gitID":"jlks96"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments) throws DuplicateAppointmentException {"},{"lineNumber":76,"author":{"gitID":"jlks96"},"content":"        this.appointments.setAppointments(appointments);"},{"lineNumber":77,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"jlks96"},"content":"    //@@author"},{"lineNumber":79,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":80,"author":{"gitID":"Ng95junwei"},"content":"    //@@author ng95junwei"},{"lineNumber":81,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":82,"author":{"gitID":"Ng95junwei"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"Ng95junwei"},"content":"     * TBD replace with DB seed."},{"lineNumber":84,"author":{"gitID":"Ng95junwei"},"content":"     * @return a List of template to initialize AddressBook with"},{"lineNumber":85,"author":{"gitID":"Ng95junwei"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"Ng95junwei"},"content":"    private static List\u003cTemplate\u003e generateTemplates() {"},{"lineNumber":87,"author":{"gitID":"Ng95junwei"},"content":"        List\u003cTemplate\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":88,"author":{"gitID":"Ng95junwei"},"content":"        Template template1 \u003d new Template(\"coldEmail\", \"Meet up over Coffee\","},{"lineNumber":89,"author":{"gitID":"Ng95junwei"},"content":"                \"Hey, I am from Addsurance and would like you ask if you are interested in planning your\""},{"lineNumber":90,"author":{"gitID":"Ng95junwei"},"content":"                        + \" finances with us. Would you care to meet over coffee in the next week or so?\");"},{"lineNumber":91,"author":{"gitID":"Ng95junwei"},"content":"        Template template2 \u003d new Template(\"followUpEmail\", \"Follow up from last week\","},{"lineNumber":92,"author":{"gitID":"Ng95junwei"},"content":"                \"Hey, we met last week and I was still hoping if you would like to leave your \""},{"lineNumber":93,"author":{"gitID":"Ng95junwei"},"content":"                        + \"finances with us at Addsurance. Would you care to meet over coffee in the next week or so\""},{"lineNumber":94,"author":{"gitID":"Ng95junwei"},"content":"                        + \" to discuss further?\");"},{"lineNumber":95,"author":{"gitID":"Ng95junwei"},"content":"        list.add(template1);"},{"lineNumber":96,"author":{"gitID":"Ng95junwei"},"content":"        list.add(template2);"},{"lineNumber":97,"author":{"gitID":"Ng95junwei"},"content":"        return list;"},{"lineNumber":98,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":100,"author":{"gitID":"Ng95junwei"},"content":"    public void setTemplates() throws DuplicateTemplateException {"},{"lineNumber":101,"author":{"gitID":"Ng95junwei"},"content":"        this.templates.setTemplates(generateTemplates());"},{"lineNumber":102,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":104,"author":{"gitID":"Ng95junwei"},"content":"    public synchronized UniqueTemplateList getAllTemplates() {"},{"lineNumber":105,"author":{"gitID":"Ng95junwei"},"content":"        return this.templates;"},{"lineNumber":106,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"Ng95junwei"},"content":"    //@@author"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":120,"author":{"gitID":"jlks96"},"content":"            setAppointments(newData.getAppointmentList());"},{"lineNumber":121,"author":{"gitID":"Ng95junwei"},"content":"            setTemplates();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":124,"author":{"gitID":"jlks96"},"content":"        } catch (DuplicateAppointmentException e) {"},{"lineNumber":125,"author":{"gitID":"jlks96"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate appointments\");"},{"lineNumber":126,"author":{"gitID":"Ng95junwei"},"content":"        } catch (DuplicateTemplateException e) {"},{"lineNumber":127,"author":{"gitID":"Ng95junwei"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate templates\");"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":145,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":164,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":166,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":171,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":173,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":184,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":186,"author":{"gitID":"jlks96"},"content":"        return new Person(person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"},{"lineNumber":187,"author":{"gitID":"jlks96"},"content":"                person.getDateAdded(), correctTagReferences);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":193,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"jlks96"},"content":"    //@@author jlks96"},{"lineNumber":203,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"jlks96"},"content":"     * Removes {@code keys} from this {@code AddressBook}."},{"lineNumber":205,"author":{"gitID":"jlks96"},"content":"     * @throws PersonNotFoundException if any of the {@code keys} are not in this {@code AddressBook}."},{"lineNumber":206,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"jlks96"},"content":"    public void removePersons(List\u003cPerson\u003e keys) throws PersonNotFoundException {"},{"lineNumber":208,"author":{"gitID":"jlks96"},"content":"        persons.removeAll(keys);"},{"lineNumber":209,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"jlks96"},"content":"    //@@author"},{"lineNumber":211,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"jlks96"},"content":"    //@@author jlks96"},{"lineNumber":219,"author":{"gitID":"jlks96"},"content":"    //// appointment-level operations"},{"lineNumber":220,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":221,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":222,"author":{"gitID":"jlks96"},"content":"     * Adds an appointment to the address book."},{"lineNumber":223,"author":{"gitID":"jlks96"},"content":"     *"},{"lineNumber":224,"author":{"gitID":"jlks96"},"content":"     * @throws DuplicateAppointmentException if an equivalent appointment already exists."},{"lineNumber":225,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"jlks96"},"content":"    public void addAppointment(Appointment appointment) throws DuplicateAppointmentException {"},{"lineNumber":227,"author":{"gitID":"jlks96"},"content":"        appointments.add(appointment);"},{"lineNumber":228,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":230,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":231,"author":{"gitID":"jlks96"},"content":"     * Removes {@code appointment} from this {@code AddressBook}."},{"lineNumber":232,"author":{"gitID":"jlks96"},"content":"     * @throws AppointmentNotFoundException if the {@code appointment} is not in this {@code AddressBook}."},{"lineNumber":233,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":234,"author":{"gitID":"jlks96"},"content":"    public boolean removeAppointment(Appointment appointment) throws AppointmentNotFoundException {"},{"lineNumber":235,"author":{"gitID":"jlks96"},"content":"        if (appointments.remove(appointment)) {"},{"lineNumber":236,"author":{"gitID":"jlks96"},"content":"            return true;"},{"lineNumber":237,"author":{"gitID":"jlks96"},"content":"        } else {"},{"lineNumber":238,"author":{"gitID":"jlks96"},"content":"            throw new AppointmentNotFoundException();"},{"lineNumber":239,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":240,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"jlks96"},"content":"    //@@author"},{"lineNumber":242,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":247,"author":{"gitID":"jlks96"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags, \""},{"lineNumber":248,"author":{"gitID":"jlks96"},"content":"                + appointments.asObservableList().size() + \" appointments\";"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"jlks96"},"content":"    //@@author jlks96"},{"lineNumber":263,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":264,"author":{"gitID":"jlks96"},"content":"    public ObservableList\u003cAppointment\u003e getAppointmentList() {"},{"lineNumber":265,"author":{"gitID":"jlks96"},"content":"        return appointments.asObservableList();"},{"lineNumber":266,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"jlks96"},"content":"    //@@author"},{"lineNumber":268,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":272,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":273,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":274,"author":{"gitID":"jlks96"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags)"},{"lineNumber":275,"author":{"gitID":"jlks96"},"content":"                \u0026\u0026 this.appointments.equals(((AddressBook) other).appointments));"},{"lineNumber":276,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":279,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":281,"author":{"gitID":"jlks96"},"content":"        return Objects.hash(persons, tags, appointments);"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":283,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":65,"Ng95junwei":37,"-":181}},{"path":"src/main/java/seedu/address/model/person/DateAdded.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":" * Represents a Person\u0027s date added to the address book."},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":" * Guarantees: immutable; is valid"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":" */"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"public class DateAdded {"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"            \"Date input should be in the format: dd/MM/yyyy\";"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"    /*"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":"     * The first character of the date must not be a whitespace,"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"    public static final String DATE_VALIDATION_REGEX \u003d \"\\\\d{2}/\\\\d{2}/\\\\d{4}\";"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"    public final String dateAdded;"},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":"     * Constructs a {@code DateAdded}."},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"     * @param dateAdded A valid date."},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"    public DateAdded(String dateAdded) {"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"        requireNonNull(dateAdded);"},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"        assert isValidDate(dateAdded); //dateAdded generated by the program should be correct"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"        this.dateAdded \u003d dateAdded;"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"     * Returns true if a given string is a valid date."},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"    public static boolean isValidDate(String test) {"},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"        return test.matches(DATE_VALIDATION_REGEX);"},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"        return dateAdded;"},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"                || (other instanceof DateAdded // instanceof handles nulls"},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":"                \u0026\u0026 this.dateAdded.equals(((DateAdded) other).dateAdded)); // state check"},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":"    public int hashCode() {"},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":"        return dateAdded.hashCode();"},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":54,"-":3}},{"path":"src/main/java/seedu/address/model/PersonIsAddedBeforeDateInputAndContainsTagsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":3,"author":{"gitID":"jlks96"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.person.DateAddedIsBeforeDateInputPredicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.tag.UniqueTagListContainsTagsPredicate;"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":" * Tests that a {@code Person}\u0027s {@code UniqueTagList} matches all of the input tags and"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":" * {@code DateAdded} is before the date input."},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":" */"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"public class PersonIsAddedBeforeDateInputAndContainsTagsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"    private final Set\u003cTag\u003e inputTags;"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"    private final String inputDate;"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"    public PersonIsAddedBeforeDateInputAndContainsTagsPredicate(Set\u003cTag\u003e inputTags, String inputDate) {"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"        this.inputTags \u003d inputTags;"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":"        this.inputDate \u003d inputDate;"},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"    public boolean test(Person person) {"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"        UniqueTagListContainsTagsPredicate containsTagsPredicate \u003d"},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"                new UniqueTagListContainsTagsPredicate(inputTags);"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"        DateAddedIsBeforeDateInputPredicate isAddedBeforeDateInputPredicate \u003d"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"                new DateAddedIsBeforeDateInputPredicate(inputDate);"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"        return containsTagsPredicate.test(person) \u0026\u0026 isAddedBeforeDateInputPredicate.test(person);"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"                || (other instanceof PersonIsAddedBeforeDateInputAndContainsTagsPredicate // instanceof handles nulls"},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"                \u0026\u0026 this.inputTags.equals((("},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"                        PersonIsAddedBeforeDateInputAndContainsTagsPredicate) other).inputTags) // state check"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":"                \u0026\u0026 this.inputDate.equals((("},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"                        PersonIsAddedBeforeDateInputAndContainsTagsPredicate) other).inputDate));"},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":42,"-":2}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"import seedu.address.commons.events.model.AppointmentDeletedEvent;"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"import seedu.address.commons.events.model.NewAppointmentAddedEvent;"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":21,"author":{"gitID":"Ng95junwei"},"content":"import seedu.address.model.email.Template;"},{"lineNumber":22,"author":{"gitID":"Ng95junwei"},"content":"import seedu.address.model.email.exceptions.TemplateNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":29,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"    private final FilteredList\u003cAppointment\u003e filteredAppointments;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":"        filteredAppointments \u003d new FilteredList\u003c\u003e(this.addressBook.getAppointmentList());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"jlks96"},"content":"    //@@author jlks96"},{"lineNumber":73,"author":{"gitID":"jlks96"},"content":"    /** Raises an event to indicate a new appointment has been added */"},{"lineNumber":74,"author":{"gitID":"jlks96"},"content":"    private void indicateAppointmentAdded(Appointment appointment) {"},{"lineNumber":75,"author":{"gitID":"jlks96"},"content":"        raise(new NewAppointmentAddedEvent(appointment));"},{"lineNumber":76,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":78,"author":{"gitID":"jlks96"},"content":"    /** Raises an event to indicate an appointment has been deleted */"},{"lineNumber":79,"author":{"gitID":"jlks96"},"content":"    private void indicateAppointmentDeleted(ObservableList\u003cAppointment\u003e appointments) {"},{"lineNumber":80,"author":{"gitID":"jlks96"},"content":"        raise(new AppointmentDeletedEvent(appointments));"},{"lineNumber":81,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"jlks96"},"content":"    //@@author"},{"lineNumber":83,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":84,"author":{"gitID":"jlks96"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Person Mutators \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":85,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"jlks96"},"content":"    //@@author jlks96"},{"lineNumber":93,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"jlks96"},"content":"    public synchronized void deletePersons(List\u003cPerson\u003e targets) throws PersonNotFoundException {"},{"lineNumber":95,"author":{"gitID":"jlks96"},"content":"        addressBook.removePersons(targets);"},{"lineNumber":96,"author":{"gitID":"jlks96"},"content":"        indicateAddressBookChanged();"},{"lineNumber":97,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"jlks96"},"content":"    //@@author"},{"lineNumber":99,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"jlks96"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Appointment Mutators \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":117,"author":{"gitID":"jlks96"},"content":"    //@@author jlks96"},{"lineNumber":118,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"jlks96"},"content":"    public synchronized void deleteAppointment(Appointment target) throws AppointmentNotFoundException {"},{"lineNumber":120,"author":{"gitID":"jlks96"},"content":"        addressBook.removeAppointment(target);"},{"lineNumber":121,"author":{"gitID":"jlks96"},"content":"        updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"},{"lineNumber":122,"author":{"gitID":"jlks96"},"content":"        indicateAppointmentDeleted(getFilteredAppointmentList());"},{"lineNumber":123,"author":{"gitID":"jlks96"},"content":"        indicateAddressBookChanged();"},{"lineNumber":124,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":126,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":127,"author":{"gitID":"jlks96"},"content":"    public synchronized void addAppointment(Appointment appointment) throws DuplicateAppointmentException {"},{"lineNumber":128,"author":{"gitID":"jlks96"},"content":"        addressBook.addAppointment(appointment);"},{"lineNumber":129,"author":{"gitID":"jlks96"},"content":"        updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"},{"lineNumber":130,"author":{"gitID":"jlks96"},"content":"        indicateAppointmentAdded(appointment);"},{"lineNumber":131,"author":{"gitID":"jlks96"},"content":"        indicateAddressBookChanged();"},{"lineNumber":132,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"jlks96"},"content":"    //@@author"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":135,"author":{"gitID":"Ng95junwei"},"content":"    //@@author ng95junwei"},{"lineNumber":136,"author":{"gitID":"Ng95junwei"},"content":"    @Override"},{"lineNumber":137,"author":{"gitID":"Ng95junwei"},"content":"    public ObservableList\u003cTemplate\u003e getAllTemplates() {"},{"lineNumber":138,"author":{"gitID":"Ng95junwei"},"content":"        return addressBook.getAllTemplates().asObservableList();"},{"lineNumber":139,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":141,"author":{"gitID":"Ng95junwei"},"content":"    @Override"},{"lineNumber":142,"author":{"gitID":"Ng95junwei"},"content":"    public Template selectTemplate(String search) throws TemplateNotFoundException {"},{"lineNumber":143,"author":{"gitID":"Ng95junwei"},"content":"        return addressBook.getAllTemplates().search(search);"},{"lineNumber":144,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":146,"author":{"gitID":"Ng95junwei"},"content":"    //@@author"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"jlks96"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Appointment List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":163,"author":{"gitID":"jlks96"},"content":"    //@@author jlks96"},{"lineNumber":164,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"jlks96"},"content":"     * Returns an unmodifiable view of the list of {@code Appointment} backed by the internal list of"},{"lineNumber":166,"author":{"gitID":"jlks96"},"content":"     * {@code addressBook}"},{"lineNumber":167,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":169,"author":{"gitID":"jlks96"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":170,"author":{"gitID":"jlks96"},"content":"        return FXCollections.unmodifiableObservableList(filteredAppointments);"},{"lineNumber":171,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":173,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":174,"author":{"gitID":"jlks96"},"content":"    public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"},{"lineNumber":175,"author":{"gitID":"jlks96"},"content":"        requireNonNull(predicate);"},{"lineNumber":176,"author":{"gitID":"jlks96"},"content":"        filteredAppointments.setPredicate(predicate);"},{"lineNumber":177,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"jlks96"},"content":"    //@@author"},{"lineNumber":179,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":195,"author":{"gitID":"jlks96"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"},{"lineNumber":196,"author":{"gitID":"jlks96"},"content":"                \u0026\u0026 filteredAppointments.equals(other.filteredAppointments);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":68,"Ng95junwei":14,"-":117}},{"path":"src/main/java/seedu/address/model/email/exceptions/TemplateNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"Ng95junwei"},"content":"package seedu.address.model.email.exceptions;"},{"lineNumber":2,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":3,"author":{"gitID":"Ng95junwei"},"content":"//@@author ng95junwei"},{"lineNumber":4,"author":{"gitID":"Ng95junwei"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"Ng95junwei"},"content":" * Signals that the operation is unable to find the specified template."},{"lineNumber":6,"author":{"gitID":"Ng95junwei"},"content":" */"},{"lineNumber":7,"author":{"gitID":"Ng95junwei"},"content":"public class TemplateNotFoundException extends Exception {}"}],"authorContributionMap":{"Ng95junwei":7}},{"path":"src/main/java/seedu/address/model/tag/UniqueTagListContainsTagsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":3,"author":{"gitID":"jlks96"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"jlks96"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":" * Tests that a {@code Person}\u0027s {@code UniqueTagList} matches all of the input tags."},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":" */"},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":"public class UniqueTagListContainsTagsPredicate  implements Predicate\u003cPerson\u003e {"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"    private final Set\u003cTag\u003e inputTags;"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"    public UniqueTagListContainsTagsPredicate(Set\u003cTag\u003e inputTags) {"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"        this.inputTags \u003d inputTags;"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"    public boolean test(Person person) {"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"        UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":"        return inputTags.stream()"},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"                .allMatch(personTags::contains);"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"    public boolean equals(Object other) {"},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"                || (other instanceof UniqueTagListContainsTagsPredicate // instanceof handles nulls"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"                \u0026\u0026 this.inputTags.equals(((UniqueTagListContainsTagsPredicate) other).inputTags)); // state check"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":34}},{"path":"src/main/java/seedu/address/model/email/Template.java","lines":[{"lineNumber":1,"author":{"gitID":"Ng95junwei"},"content":"package seedu.address.model.email;"},{"lineNumber":2,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":3,"author":{"gitID":"Ng95junwei"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"Ng95junwei"},"content":" * A Class to hold the required information for an email."},{"lineNumber":5,"author":{"gitID":"Ng95junwei"},"content":" */"},{"lineNumber":6,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":7,"author":{"gitID":"Ng95junwei"},"content":"//@@ author ng95junwei"},{"lineNumber":8,"author":{"gitID":"Ng95junwei"},"content":"public class Template {"},{"lineNumber":9,"author":{"gitID":"Ng95junwei"},"content":"    private final String purpose;"},{"lineNumber":10,"author":{"gitID":"Ng95junwei"},"content":"    private final String title;"},{"lineNumber":11,"author":{"gitID":"Ng95junwei"},"content":"    private final String message;"},{"lineNumber":12,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":13,"author":{"gitID":"Ng95junwei"},"content":"    public Template(String purpose, String title, String message) {"},{"lineNumber":14,"author":{"gitID":"Ng95junwei"},"content":"        this.purpose \u003d purpose;"},{"lineNumber":15,"author":{"gitID":"Ng95junwei"},"content":"        this.title \u003d title;"},{"lineNumber":16,"author":{"gitID":"Ng95junwei"},"content":"        this.message \u003d message;"},{"lineNumber":17,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":19,"author":{"gitID":"Ng95junwei"},"content":"    public String getMessage() {"},{"lineNumber":20,"author":{"gitID":"Ng95junwei"},"content":"        return this.message;"},{"lineNumber":21,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":23,"author":{"gitID":"Ng95junwei"},"content":"    public String getPurpose() {"},{"lineNumber":24,"author":{"gitID":"Ng95junwei"},"content":"        return this.purpose;"},{"lineNumber":25,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":27,"author":{"gitID":"Ng95junwei"},"content":"    public String getTitle() {"},{"lineNumber":28,"author":{"gitID":"Ng95junwei"},"content":"        return this.title;"},{"lineNumber":29,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":31,"author":{"gitID":"Ng95junwei"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"Ng95junwei"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitID":"Ng95junwei"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":34,"author":{"gitID":"Ng95junwei"},"content":"            return true;"},{"lineNumber":35,"author":{"gitID":"Ng95junwei"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":37,"author":{"gitID":"Ng95junwei"},"content":"        if (!(other instanceof Template)) {"},{"lineNumber":38,"author":{"gitID":"Ng95junwei"},"content":"            return false;"},{"lineNumber":39,"author":{"gitID":"Ng95junwei"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":41,"author":{"gitID":"Ng95junwei"},"content":"        Template otherTemplate \u003d (Template) other;"},{"lineNumber":42,"author":{"gitID":"Ng95junwei"},"content":"        return otherTemplate.getTitle().equals(this.getTitle())"},{"lineNumber":43,"author":{"gitID":"Ng95junwei"},"content":"                \u0026\u0026 otherTemplate.getPurpose().equals(this.getPurpose())"},{"lineNumber":44,"author":{"gitID":"Ng95junwei"},"content":"                \u0026\u0026 otherTemplate.getMessage().equals(this.getMessage());"},{"lineNumber":45,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"Ng95junwei"},"content":"}"},{"lineNumber":47,"content":"//@@author"}],"authorContributionMap":{"null":1,"Ng95junwei":46}},{"path":"src/main/java/seedu/address/model/email/exceptions/DuplicateTemplateException.java","lines":[{"lineNumber":1,"author":{"gitID":"Ng95junwei"},"content":"package seedu.address.model.email.exceptions;"},{"lineNumber":2,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":3,"author":{"gitID":"Ng95junwei"},"content":"//@@author ng95junwei"},{"lineNumber":4,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":5,"author":{"gitID":"Ng95junwei"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":6,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":7,"author":{"gitID":"Ng95junwei"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"Ng95junwei"},"content":" * Signals that the operation will result in duplicate Template objects."},{"lineNumber":9,"author":{"gitID":"Ng95junwei"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":11,"author":{"gitID":"Ng95junwei"},"content":"public class DuplicateTemplateException extends DuplicateDataException {"},{"lineNumber":12,"author":{"gitID":"Ng95junwei"},"content":"    public DuplicateTemplateException() {"},{"lineNumber":13,"author":{"gitID":"Ng95junwei"},"content":"        super(\"Operation would result in duplicate templates\");"},{"lineNumber":14,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"Ng95junwei"},"content":"}"}],"authorContributionMap":{"Ng95junwei":15}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"jlks96"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":10,"author":{"gitID":"Ng95junwei"},"content":"import seedu.address.model.email.Template;"},{"lineNumber":11,"author":{"gitID":"Ng95junwei"},"content":"import seedu.address.model.email.exceptions.TemplateNotFoundException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"    Predicate\u003cAppointment\u003e PREDICATE_SHOW_ALL_APPOINTMENTS \u003d unused -\u003e true;"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"    /** Deletes the given list of persons. */"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":"    void deletePersons(List\u003cPerson\u003e targets) throws PersonNotFoundException;"},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"Ng95junwei"},"content":"    //@@author ng95junwei"},{"lineNumber":61,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":62,"author":{"gitID":"Ng95junwei"},"content":"    Template selectTemplate(String search) throws TemplateNotFoundException;"},{"lineNumber":63,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":64,"author":{"gitID":"Ng95junwei"},"content":"    ObservableList\u003cTemplate\u003e getAllTemplates();"},{"lineNumber":65,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":66,"author":{"gitID":"Ng95junwei"},"content":"    //@@author"},{"lineNumber":67,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":68,"author":{"gitID":"jlks96"},"content":"    //@@author jlks96"},{"lineNumber":69,"author":{"gitID":"jlks96"},"content":"    /** Deletes the given appointment. */"},{"lineNumber":70,"author":{"gitID":"jlks96"},"content":"    void deleteAppointment(Appointment appointment) throws AppointmentNotFoundException;"},{"lineNumber":71,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":72,"author":{"gitID":"jlks96"},"content":"    /** Adds the given appointment */"},{"lineNumber":73,"author":{"gitID":"jlks96"},"content":"    void addAppointment(Appointment appointment) throws DuplicateAppointmentException;"},{"lineNumber":74,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":75,"author":{"gitID":"jlks96"},"content":"    /** Returns an unmodifiable view of the filtered appointment list */"},{"lineNumber":76,"author":{"gitID":"jlks96"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();"},{"lineNumber":77,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":78,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"jlks96"},"content":"     * Updates the filter of the filtered appointment list to filter by the given {@code predicate}."},{"lineNumber":80,"author":{"gitID":"jlks96"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":81,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"jlks96"},"content":"    void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate);"},{"lineNumber":83,"author":{"gitID":"jlks96"},"content":"    //@@author"},{"lineNumber":84,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jlks96":26,"Ng95junwei":10,"-":49}},{"path":"src/main/java/seedu/address/model/appointment/Date.java","lines":[{"lineNumber":1,"author":{"gitID":"jlks96"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"jlks96"},"content":"import java.text.ParseException;"},{"lineNumber":7,"author":{"gitID":"jlks96"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":8,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":9,"author":{"gitID":"jlks96"},"content":"//@@author jlks96"},{"lineNumber":10,"author":{"gitID":"jlks96"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"jlks96"},"content":" * Represents an Appointment\u0027s date in the address book."},{"lineNumber":12,"author":{"gitID":"jlks96"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"},{"lineNumber":13,"author":{"gitID":"jlks96"},"content":" */"},{"lineNumber":14,"author":{"gitID":"jlks96"},"content":"public class Date {"},{"lineNumber":15,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":16,"author":{"gitID":"jlks96"},"content":"    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"},{"lineNumber":17,"author":{"gitID":"jlks96"},"content":"            \"Date input should be in the format: dd/MM/yyyy\";"},{"lineNumber":18,"author":{"gitID":"jlks96"},"content":"    /*"},{"lineNumber":19,"author":{"gitID":"jlks96"},"content":"     * The first character of the date must not be a whitespace,"},{"lineNumber":20,"author":{"gitID":"jlks96"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":21,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"jlks96"},"content":"    public static final String DATE_VALIDATION_REGEX \u003d \"\\\\d{2}/\\\\d{2}/\\\\d{4}\";"},{"lineNumber":23,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":24,"author":{"gitID":"jlks96"},"content":"    public final String date;"},{"lineNumber":25,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":26,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"jlks96"},"content":"     * Constructs a {@code Date}."},{"lineNumber":28,"author":{"gitID":"jlks96"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"jlks96"},"content":"     * @param date A valid date."},{"lineNumber":30,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"jlks96"},"content":"    public Date(String date) {"},{"lineNumber":32,"author":{"gitID":"jlks96"},"content":"        requireNonNull(date);"},{"lineNumber":33,"author":{"gitID":"jlks96"},"content":"        checkArgument(isValidDate(date), MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":34,"author":{"gitID":"jlks96"},"content":"        this.date \u003d date;"},{"lineNumber":35,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":37,"author":{"gitID":"jlks96"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"jlks96"},"content":"     * Returns true if a given string is a valid date in the format dd/MM/yyyy."},{"lineNumber":39,"author":{"gitID":"jlks96"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"jlks96"},"content":"    public static boolean isValidDate(String test) {"},{"lineNumber":41,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":42,"author":{"gitID":"jlks96"},"content":"        SimpleDateFormat dateFormatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"},{"lineNumber":43,"author":{"gitID":"jlks96"},"content":"        dateFormatter.setLenient(false);"},{"lineNumber":44,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":45,"author":{"gitID":"jlks96"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"jlks96"},"content":"            dateFormatter.parse(test); //attempt to parse date"},{"lineNumber":47,"author":{"gitID":"jlks96"},"content":"        } catch (ParseException e) { //if fail return false"},{"lineNumber":48,"author":{"gitID":"jlks96"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"jlks96"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"jlks96"},"content":"        return test.matches(DATE_VALIDATION_REGEX);"},{"lineNumber":51,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":53,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"jlks96"},"content":"    public String toString() {"},{"lineNumber":55,"author":{"gitID":"jlks96"},"content":"        return date;"},{"lineNumber":56,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":58,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"jlks96"},"content":"    public boolean equals(Object other) {"},{"lineNumber":60,"author":{"gitID":"jlks96"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":61,"author":{"gitID":"jlks96"},"content":"                || (other instanceof Date // instanceof handles nulls"},{"lineNumber":62,"author":{"gitID":"jlks96"},"content":"                \u0026\u0026 this.date.equals(((Date) other).date)); // state check"},{"lineNumber":63,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"jlks96"},"content":""},{"lineNumber":65,"author":{"gitID":"jlks96"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"jlks96"},"content":"    public int hashCode() {"},{"lineNumber":67,"author":{"gitID":"jlks96"},"content":"        return date.hashCode();"},{"lineNumber":68,"author":{"gitID":"jlks96"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"jlks96"},"content":"}"}],"authorContributionMap":{"jlks96":65,"-":4}},{"path":"src/main/java/seedu/address/model/email/UniqueTemplateList.java","lines":[{"lineNumber":1,"author":{"gitID":"Ng95junwei"},"content":"package seedu.address.model.email;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":12,"author":{"gitID":"Ng95junwei"},"content":"import seedu.address.model.email.exceptions.DuplicateTemplateException;"},{"lineNumber":13,"author":{"gitID":"Ng95junwei"},"content":"import seedu.address.model.email.exceptions.TemplateNotFoundException;"},{"lineNumber":14,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":15,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":16,"author":{"gitID":"Ng95junwei"},"content":"//@@author ng95junwei"},{"lineNumber":17,"author":{"gitID":"Ng95junwei"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"Ng95junwei"},"content":" * A list of templates that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":19,"author":{"gitID":"Ng95junwei"},"content":" *"},{"lineNumber":20,"author":{"gitID":"Ng95junwei"},"content":" * Supports a minimal set of list operations."},{"lineNumber":21,"author":{"gitID":"Ng95junwei"},"content":" *"},{"lineNumber":22,"author":{"gitID":"Ng95junwei"},"content":" * @see Template#equals(Object)"},{"lineNumber":23,"author":{"gitID":"Ng95junwei"},"content":" */"},{"lineNumber":24,"author":{"gitID":"Ng95junwei"},"content":"public class UniqueTemplateList implements Iterable\u003cTemplate\u003e {"},{"lineNumber":25,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":26,"author":{"gitID":"Ng95junwei"},"content":"    private final ObservableList\u003cTemplate\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":27,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":28,"author":{"gitID":"Ng95junwei"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"Ng95junwei"},"content":"     * Returns one Template closest to the template searched for"},{"lineNumber":30,"author":{"gitID":"Ng95junwei"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"Ng95junwei"},"content":"    public Template search(String search) throws TemplateNotFoundException {"},{"lineNumber":32,"author":{"gitID":"Ng95junwei"},"content":"        for (Template t : internalList) {"},{"lineNumber":33,"author":{"gitID":"Ng95junwei"},"content":"            if (t.getPurpose().contains(search)) {"},{"lineNumber":34,"author":{"gitID":"Ng95junwei"},"content":"                return t;"},{"lineNumber":35,"author":{"gitID":"Ng95junwei"},"content":"            }"},{"lineNumber":36,"author":{"gitID":"Ng95junwei"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"Ng95junwei"},"content":"        throw new TemplateNotFoundException();"},{"lineNumber":38,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":40,"author":{"gitID":"Ng95junwei"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"Ng95junwei"},"content":"     * Returns true if the list contains an equivalent template as the given argument."},{"lineNumber":42,"author":{"gitID":"Ng95junwei"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"Ng95junwei"},"content":"    public boolean contains(Template toCheck) {"},{"lineNumber":44,"author":{"gitID":"Ng95junwei"},"content":"        requireNonNull(toCheck);"},{"lineNumber":45,"author":{"gitID":"Ng95junwei"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":46,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":48,"author":{"gitID":"Ng95junwei"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"Ng95junwei"},"content":"     * Adds a template to the list."},{"lineNumber":50,"author":{"gitID":"Ng95junwei"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"Ng95junwei"},"content":"     * @throws DuplicateTemplateException if the template to add is a duplicate of an existing template"},{"lineNumber":52,"author":{"gitID":"Ng95junwei"},"content":"     * in the list."},{"lineNumber":53,"author":{"gitID":"Ng95junwei"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"Ng95junwei"},"content":"    public void add(Template toAdd) throws DuplicateTemplateException {"},{"lineNumber":55,"author":{"gitID":"Ng95junwei"},"content":"        requireNonNull(toAdd);"},{"lineNumber":56,"author":{"gitID":"Ng95junwei"},"content":"        if (contains(toAdd)) {"},{"lineNumber":57,"author":{"gitID":"Ng95junwei"},"content":"            throw new DuplicateTemplateException();"},{"lineNumber":58,"author":{"gitID":"Ng95junwei"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"Ng95junwei"},"content":"        internalList.add(toAdd);"},{"lineNumber":60,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":62,"author":{"gitID":"Ng95junwei"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"Ng95junwei"},"content":"     * Removes the equivalent template from the list."},{"lineNumber":64,"author":{"gitID":"Ng95junwei"},"content":"     *"},{"lineNumber":65,"author":{"gitID":"Ng95junwei"},"content":"     * @throws TemplateNotFoundException if no such template could be found in the list."},{"lineNumber":66,"author":{"gitID":"Ng95junwei"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"Ng95junwei"},"content":"    public boolean remove(Template toRemove) throws TemplateNotFoundException {"},{"lineNumber":68,"author":{"gitID":"Ng95junwei"},"content":"        requireNonNull(toRemove);"},{"lineNumber":69,"author":{"gitID":"Ng95junwei"},"content":"        final boolean templateFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":70,"author":{"gitID":"Ng95junwei"},"content":"        if (!templateFoundAndDeleted) {"},{"lineNumber":71,"author":{"gitID":"Ng95junwei"},"content":"            throw new TemplateNotFoundException();"},{"lineNumber":72,"author":{"gitID":"Ng95junwei"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"Ng95junwei"},"content":"        return templateFoundAndDeleted;"},{"lineNumber":74,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":76,"author":{"gitID":"Ng95junwei"},"content":"    public void setTemplates(UniqueTemplateList replacement) {"},{"lineNumber":77,"author":{"gitID":"Ng95junwei"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":78,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":80,"author":{"gitID":"Ng95junwei"},"content":"    public void setTemplates(List\u003cTemplate\u003e templates) throws DuplicateTemplateException {"},{"lineNumber":81,"author":{"gitID":"Ng95junwei"},"content":"        requireAllNonNull(templates);"},{"lineNumber":82,"author":{"gitID":"Ng95junwei"},"content":"        final UniqueTemplateList replacement \u003d new UniqueTemplateList();"},{"lineNumber":83,"author":{"gitID":"Ng95junwei"},"content":"        for (final Template template : templates) {"},{"lineNumber":84,"author":{"gitID":"Ng95junwei"},"content":"            replacement.add(template);"},{"lineNumber":85,"author":{"gitID":"Ng95junwei"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"Ng95junwei"},"content":"        setTemplates(replacement);"},{"lineNumber":87,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":89,"author":{"gitID":"Ng95junwei"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"Ng95junwei"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":91,"author":{"gitID":"Ng95junwei"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"Ng95junwei"},"content":"    public ObservableList\u003cTemplate\u003e asObservableList() {"},{"lineNumber":93,"author":{"gitID":"Ng95junwei"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":94,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":96,"author":{"gitID":"Ng95junwei"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"Ng95junwei"},"content":"    public Iterator\u003cTemplate\u003e iterator() {"},{"lineNumber":98,"author":{"gitID":"Ng95junwei"},"content":"        return internalList.iterator();"},{"lineNumber":99,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":101,"author":{"gitID":"Ng95junwei"},"content":"    @Override"},{"lineNumber":102,"author":{"gitID":"Ng95junwei"},"content":"    public boolean equals(Object other) {"},{"lineNumber":103,"author":{"gitID":"Ng95junwei"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":104,"author":{"gitID":"Ng95junwei"},"content":"                || (other instanceof UniqueTemplateList // instanceof handles nulls"},{"lineNumber":105,"author":{"gitID":"Ng95junwei"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueTemplateList) other).internalList));"},{"lineNumber":106,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"Ng95junwei"},"content":""},{"lineNumber":108,"author":{"gitID":"Ng95junwei"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"Ng95junwei"},"content":"    public int hashCode() {"},{"lineNumber":110,"author":{"gitID":"Ng95junwei"},"content":"        return internalList.hashCode();"},{"lineNumber":111,"author":{"gitID":"Ng95junwei"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"Ng95junwei"},"content":"}"},{"lineNumber":113,"author":{"gitID":"Ng95junwei"},"content":""}],"authorContributionMap":{"Ng95junwei":104,"-":9}}]
